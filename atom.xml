<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风继续吹</title>
  <subtitle>Yesterday, you said tomorrow!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhang21.github.io/"/>
  <updated>2017-12-12T01:56:29.700Z</updated>
  <id>https://zhang21.github.io/</id>
  
  <author>
    <name>Zhang21</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构</title>
    <link href="https://zhang21.github.io/2017/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://zhang21.github.io/2017/12/11/数据结构/</id>
    <published>2017-12-11T05:44:38.000Z</published>
    <updated>2017-12-12T01:56:29.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>在计算机科学中，<strong>数据结构(data structure)</strong>是计算机中存储、组织数据的方式。<br>大多数数据结构都有数列、记录、可辨识联合、引用等基本类型构成。</p>
<p>数据结构意味着结构和封装，一个数据结构可被视为两个函数之间的接口，或是由数据类型联合组成的存储内容的访问方法和封装。<br>数据结构可通过程序语言所提供的数据类型、引用及其它操作加以实现。不同种类的数据结构适合不同种类的应用，部分数据结构甚至是为了解决特定问题而设计。<br>一个涉及良好的数据结构，应该尽可能使用较少的时间与空间资源的前提下，支持各种程序运行。</p>
<p>正确选择数据结构可以提高算法的效率，在计算机程序设计里，选择适当的数据结构是一项重要工作。</p>
<a id="more"></a>
<p><br></p>
<hr>
<h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><ul>
<li>数组(Array);</li>
<li>栈(Stack): 后进先出，线性表；</li>
<li>队列(Queue): 先进先出，线性表；</li>
<li>链表(Linked List): 每个节点包括两部分，一个存储数据元素的数据域，另一个存储下一个节点地址的指针域；</li>
<li>树(Tree)；</li>
<li>图(Graph)；</li>
<li>堆(Heap): 一种动态树形结构；</li>
<li>散列表(Hash)；</li>
</ul>
<p><br></p>
<hr>
<h3 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h3><p>数组数据结构，是由相同类型的元素的集合所组成，分配一块连续的内存来存储。利用数组元素的索引(index)可计算出元素对应存储地址。</p>
<p>数组有 <strong>一维数组、二维数组、多维数组、可变长数组…</strong>。</p>
<p><br></p>
<hr>
<h3 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h3><p>堆栈又称为栈，是计算机科学中一种特殊的串列形式的抽象资料类别。<br>其特殊之处在于只能允许在链接串列或阵列的一端(栈顶指标:top)，进行加入数据(push)和取出数据(pop)。</p>
<p>由于栈数据结构只允许在一端进行操作，因为按照后进先出(LIFO, last-in-first-out)的原理运行。</p>
<p><br></p>
<hr>
<h3 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h3><p>队列，是先进先出(FIFO, first-in-first-out)的线性表。在具体应用中通常用链表或数组来实现。<br>队列只允许在后端(Rear)进行插入操作，在前端(Front)进行删除操作。</p>
<p><br></p>
<hr>
<h3 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表(Linked List)"></a>链表(Linked List)</h3><p>链表是一种线性表，但并不按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。<br>由于不必须按顺序存储，链表再插入的时候可以达到 O(1)的时间复杂度，比另一种线性表顺序表快得多。但查找一个节点或访问特定节点则需要 O(n)的时间，而顺序表相应的时间复杂度分别是 O(logn)和O(1)。</p>
<p>是用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了节点的指针域，空间开销比较大。</p>
<p>链表有<strong>单向链表、双向链表、循环链表…</strong>。<br>链表用来构建许多其它数据结构，如栈，队列和他们的派生。</p>
<p><br></p>
<hr>
<h3 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树(Tree)"></a>树(Tree)</h3><p>树是一种抽象数据类型，用来模拟具有树状结构性质的数据集合。</p>
<p>树有<strong>有序树、无序树（二叉树，B树，霍夫曼树）</strong>。</p>
<p><br></p>
<hr>
<h3 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图(Graph)"></a>图(Graph)</h3><p>在数学上，一个图是表示物体与物体之间的关系的方法，是图论的基本研究对象。</p>
<p>图有：<strong>有向图、无向图、简单图、多重图</strong>。</p>
<p><br></p>
<hr>
<h3 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆(Heap)"></a>堆(Heap)</h3><p>堆是计算机科学中一类特殊的数据结构的统称。<br>堆通常是一个可以被看做一棵树的数组对象。在队列中，调度程序反复提取队列中的第一个作业并运行，因为实际情况中某些时间较短的任务将等待很长时间才能结束，或者某些不短小，但具有重要性的作业，同样应当具有优先权。堆即为解决此类问题设计的一种数据结构。</p>
<p>堆常用于排序，这种算法称作堆排序。</p>
<p><br></p>
<hr>
<h3 id="散列表-Hash"><a href="#散列表-Hash" class="headerlink" title="散列表(Hash)"></a>散列表(Hash)</h3><p>散列表也叫哈希表，是根据<strong>键(key)</strong>而直接访问在内存存储位置的数据结构。<br>它通过计算一个关于键值的函数，将所需查询的数据映射到表中的一个位置来访问记录，这加快了查找速度。这种映射函数称为散列函数，存放记录的数组称为散列表。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;p&gt;在计算机科学中，&lt;strong&gt;数据结构(data structure)&lt;/strong&gt;是计算机中存储、组织数据的方式。&lt;br&gt;大多数数据结构都有数列、记录、可辨识联合、引用等基本类型构成。&lt;/p&gt;
&lt;p&gt;数据结构意味着结构和封装，一个数据结构可被视为两个函数之间的接口，或是由数据类型联合组成的存储内容的访问方法和封装。&lt;br&gt;数据结构可通过程序语言所提供的数据类型、引用及其它操作加以实现。不同种类的数据结构适合不同种类的应用，部分数据结构甚至是为了解决特定问题而设计。&lt;br&gt;一个涉及良好的数据结构，应该尽可能使用较少的时间与空间资源的前提下，支持各种程序运行。&lt;/p&gt;
&lt;p&gt;正确选择数据结构可以提高算法的效率，在计算机程序设计里，选择适当的数据结构是一项重要工作。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Database" scheme="https://zhang21.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://zhang21.github.io/2017/12/11/MongoDB/"/>
    <id>https://zhang21.github.io/2017/12/11/MongoDB/</id>
    <published>2017-12-11T02:49:52.000Z</published>
    <updated>2017-12-15T10:30:39.040Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p>
<ul>
<li><a href="http://docs.mongoing.com/" target="_blank" rel="external">MongoDB官方文档</a>;</li>
<li><a href="http://www.mongoing.com/docs" target="_blank" rel="external">MongoDB中文文档</a>;</li>
<li><a href="https://zh.wikipedia.org/wiki/MongoDB" target="_blank" rel="external">https://zh.wikipedia.org/wiki/MongoDB</a>;</li>
<li><a href="http://www.ywnds.com/?p=5635" target="_blank" rel="external">http://www.ywnds.com/?p=5635</a>;</li>
<li><a href="https://www.centos.bz/2017/08/mongodb-secure-intro-user-auth/" target="_blank" rel="external">https://www.centos.bz/2017/08/mongodb-secure-intro-user-auth/</a>;</li>
<li><a href="http://www.03sec.com/3176.shtml" target="_blank" rel="external">http://www.03sec.com/3176.shtml</a>;</li>
<li><a href="http://www.ywnds.com/?p=6502" target="_blank" rel="external">http://www.ywnds.com/?p=6502</a>;</li>
<li><a href="http://wiki.jikexueyuan.com/project/the-little-mongodb-book/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/the-little-mongodb-book/</a>;</li>
</ul>
<p>环境：</p>
<ul>
<li>CentOS7_x64；</li>
<li>MongoDB3.4；</li>
</ul>
<a id="more"></a>
<p><br></p>
<hr>
<p><br></p>
<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><p>NoSQL(Not Only SQL)是对不同于传统的<strong>关系型数据库</strong>的<strong>数据库管理系统(DBMS)</strong>的统称。<br>NoSQL不使用SQL作为查询语言，其数据结构可以不需要固定的表格模式，有横向可扩展性的特征。<br>NoSQL用于超大规模数据的存储，这些类型的数据存储不需要固定的模式，无序多余操作就可以横向扩展。</p>
<p><br><br>关系型数据库的典型实现主要被调整用于执行规模小而读写频繁，或大批量极少写访问的事务。<br>当代典型的关系型数据库在一些数据敏感的应用中表现了糟糕的性能。例如：</p>
<ul>
<li>为巨量文档创建索引；</li>
<li>高流量网站的网页服务；</li>
<li>发送流媒体。</li>
</ul>
<p><br><br>NoSQL数据库分类：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>栗子</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>文档存储</td>
<td>MongoDB</td>
<td>用类似json的格式存储，存储的内容是文档型的。这样就有机会对某些字段建立索引，实现关系数据库的某些功能</td>
</tr>
<tr>
<td>图形关系存储</td>
<td>Neo4j</td>
<td>图形关系的最佳存储</td>
</tr>
<tr>
<td>键-值(ker-value)存储</td>
<td>最终一致性的键-值存储 <br> 架构性键-值存储</td>
<td>xxx</td>
</tr>
<tr>
<td>主机式服务</td>
<td>key-value硬盘存储 <br> key-value RAM存储</td>
<td>MemcacheDB <br> Redis</td>
</tr>
<tr>
<td>多数据库</td>
<td>OpenQM</td>
<td>xxx</td>
</tr>
<tr>
<td>时序型数据库</td>
<td>Graphite</td>
<td>xxx</td>
</tr>
<tr>
<td>对象数据库</td>
<td>ObjecStore</td>
<td>通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据</td>
</tr>
<tr>
<td>列存储</td>
<td>HBase</td>
<td>顾名思义，按列存储数据。方便存储结构化和半结构化数据，方便做数据压缩，针对某一列或某几列的查询有很大的IO优势。</td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<hr>
<h1 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h1><p><br><br><img src="/images/MongoDB.jpeg" alt="MongoDB"></p>
<p>MongoDB(<a href="https://www.mongodb.com/" target="_blank" rel="external">https://www.mongodb.com/</a>)，是一种文档导向的数据库管理系统，由C++撰写而成，以此来解决应用程序开发社区中的大量现实问题。它是一种NoSQL。<br>MongoDB支持的数据结构非常松散，是类似于json的bson格式，因此可以存储比较复杂的数据类型。<br>MongoDB是一个开源文档数据库，提供高性能，高可用性和自动扩展。</p>
<p><br><br><strong>预备知识：</strong></p>
<ol>
<li>MongoDB中的<code>database</code>有和数据库一样的概念。一个MongoDB实例中，可以有零个或多个数据库，每个都作为一个高等容器，用于存储数据；</li>
<li>MongoDB数据库中有零个或多个<code>collections</code>(集合)。集合类似于传统意义上的<code>table</code>(表)；</li>
<li>MongoDB的集合是由零个或多个<code>documents</code>(文档)组成。文档类似于<code>row</code>(行)；</li>
<li>MongoDB的文档由零个或多个<code>fields</code>(字段)组成。字段类似于<code>columns</code>(列)；</li>
<li>MongoDB中<code>Indexes</code>(索引)扮演的角色与RDMS中一样；</li>
<li>MongoDB中的<code>Cursors</code>(游标)很重要，当你向MongoDB取数据的时候，它会给你返回一个结果集的指针而不是真正的数据，这个指针我们叫它游标。我们可以用游标做任何事情，比如计数或跨行之类。</li>
</ol>
<p><br></p>
<h2 id="MongoDB特点"><a href="#MongoDB特点" class="headerlink" title="MongoDB特点"></a>MongoDB特点</h2><p>不如这样认为，MongoDB是关系型数据库的一个代替案。比如用<code>Lucene</code>作为关系型数据库的全文检索索引的加强，或者是<code>Redis</code>作为持久性<code>key-value</code>存储。</p>
<p><strong>无模式(Flexible Schema)</strong>：<br>它不需要一个固定的模式，这使得他们比传统的数据库表要灵活更多。</p>
<p><br><br><strong>写操作(Writes)</strong>：<br>MongoDB可以胜任的一个特殊角色是在日志领域。有两点使得MongoDB的写操作非常快：</p>
<ol>
<li>可以选择发送了写操作之后立刻返回，而无需等到操作完成；</li>
<li>可以控制数据持久性的写行为。</li>
</ol>
<p><br><br><strong>高性能(High Performance)</strong>：<br>MongoDB提供了高性能的数据持久性。尤其是：</p>
<ul>
<li>对嵌入式数据模型的支持减少了数据库系统上的I/O活动；</li>
<li>索引支持更快的查询，并且可以包含来自嵌入式文档和数组的键。</li>
</ul>
<p><br><br><strong>高可用(High Availability)</strong>：<br>MongoDB的复制工具，称为副本集。提供：自动故障转移和数据冗余。</p>
<p><br><br><strong>持久性(Durability)</strong>：<br>在MongoDB中，日志(Journaling)是默认启动的，该功能允许快速恢复服务器，比如遭遇到了服务器奔溃或停电的问题。</p>
<p><br><br><strong>丰富的查询语言(Rich Query Language)</strong>：<br>MongoDB支持丰富的查询语言来支持读写操作(CRUD)，数据聚合(Data Aggregation)，全文搜索(Text Search)。</p>
<p><br><br><strong>水平可伸缩性(Horizontal Scalability)</strong>：<br>MongoDB提供了横向可伸缩性。</p>
<p><br><br><strong>支持多个存储引擎(Support for Multiple Storage Engines)</strong>：<br>在MongoDB3.2以后默认引擎为: WiredTiger Storage Engine，允许第三方为MongoDB开发存储引擎。</p>
<p><br></p>
<h2 id="database和collection"><a href="#database和collection" class="headerlink" title="database和collection"></a>database和collection</h2><p>MongoDB stores BSON documents.</p>
<p><img src="/images/collection.png" alt="collection"></p>
<p><br></p>
<h3 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h3><p>In MongoDB,databases hold collections of documents.<br>如果一个数据库不存在，当你第一次存储数据时，MongoDB会自动创建数据库。这意味着可以切换到不存在的数据库。</p>
<p>默认情况下，集合不要求其文档具有相同的模式；文档不要求具有相同的字段集；字段的数据类型在集合的文档间可以有所不同。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#select a db</span></div><div class="line">use &lt;db&gt;</div><div class="line"></div><div class="line"><span class="comment">#create a db</span></div><div class="line">use newdb</div><div class="line">db.newcoll.insert(&#123;name:<span class="string">'zhang'</span>&#125;)</div><div class="line">db.newcoll.insert(&#123;filed01:<span class="string">'filed01'</span>, filed02:<span class="string">'filed02'</span>, filed03:<span class="string">'filed03'</span>, filed04:<span class="string">'filed04'</span>&#125;)</div><div class="line">db.newcoll.insert(&#123;groups: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]&#125;)</div><div class="line">db.newcoll.find().pretty()</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><p>MongoDB stores documents in collections.<br>collection类似于关系型数据库中的table。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.coll02.insert(&#123;x:1&#125;)</div><div class="line">db.coll03.createIndex(&#123;y:1&#125;)</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="显式创建-explicit-creation"><a href="#显式创建-explicit-creation" class="headerlink" title="显式创建(explicit creation)"></a>显式创建(explicit creation)</h3><p>MongoDB提供了<code>db.createCollection()</code>方法来显式创建一个附带各种选项的集合。如设置document最大大小，文件验证规则等选项。<br>如果不需要指定这些选项，就不需要使用显式创建集合，而直接向集合中插入数据即可。<br>修改collection选项，使用<code>collMod</code>方法。</p>
<p><br></p>
<h3 id="视图-View"><a href="#视图-View" class="headerlink" title="视图(View)"></a>视图(View)</h3><p>视图的定义是公开的，视图的解释操作将包括定义视图的管道。因此，避免直接引用视图定义中的敏感字段和值。</p>
<p><strong>创建/删除视图：</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.runCommand(</div><div class="line">&#123;</div><div class="line">	crete: &lt;view&gt;,</div><div class="line">	viewOn: &lt;<span class="built_in">source</span>&gt;,</div><div class="line">	pipeline: &lt;pipeline&gt;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">db.createView(&lt;view&gt;, &lt;<span class="built_in">source</span>&gt;, &lt;pipeline&gt;, &lt;collation&gt;)</div><div class="line"></div><div class="line">db.collection.drop()</div></pre></td></tr></table></figure>
<p><br><br><strong>视图行为：</strong></p>
<p>视图存在以下行为：</p>
<ul>
<li>视图只读，视图上的写操作将会出错；</li>
<li>视图使用底层集合的索引；</li>
<li>如果视图的基础集合被分割，视图也被认为可分割；</li>
<li>不能重命名视图；</li>
<li>视图上的字符串使用视图的默认排序规则。</li>
</ul>
<p><br></p>
<h3 id="限制集"><a href="#限制集" class="headerlink" title="限制集"></a>限制集</h3><p>限制集是固定大小的集合支持基于文档插入顺序的高吞吐率的插入、检索、删除操作。<br>限制收集工作在某种程度上类似于循环缓冲区：一旦一个文档填满分配给它的空间，它将通过在限制集中重写老文档来给新文档让出空间。</p>
<p><br></p>
<h4 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h4><p><strong>插入顺序</strong><br>限制集合能够保留插入顺序。因此，查询并不需要索引来保证以插入顺序来返回文档。减少了索引的消耗，限制集可以支持更高的插入吞吐量。</p>
<p><strong>最旧文档的自动删除</strong><br>为了给新文档腾出空间，再不需要脚本或显示删除操作的前提下，限制集自动删除集合中最旧的文档。</p>
<p>例如replication set中的oplog.rs集合。考虑潜在用于集合封顶的用例：</p>
<ul>
<li>存储高容量系统生成的日志信息。没有索引的情况下向限制集中插入文档的速度接近于直接在文件系统中写日志的速度；</li>
<li>在限制集中缓存少量的数据。</li>
</ul>
<p><strong>_id索引</strong><br>限制集合有一个_id字段并且默认在_id字段上创建索引。</p>
<p><br></p>
<h4 id="限制和建议"><a href="#限制和建议" class="headerlink" title="限制和建议"></a>限制和建议</h4><p><strong>更新</strong><br>更新限制集中的文档，创建一个索引保证这些更新操作不需要进行集合扫描。</p>
<p><strong>文档大小</strong><br>一个更新或替换操作改变了文档大小，操作将会失败。</p>
<p><strong>文档删除</strong><br>不能从一个限制集中删除文档！<br>为了从一个集合中删除所有文档，使用<code>drop()</code>方法来删除集合然后重新创建限制集。</p>
<p><strong>分片</strong><br>不能对限制集分片。</p>
<p><strong>查询效率</strong><br>用自然顺序监视限制集中大部分最近插入的文档。</p>
<p><br></p>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p><strong>创建一个限制集</strong><br>必须使用<code>db.createCollection()</code>方法创建限制集。且必须指定<strong>以字节为单位</strong>的最大集合大小。MongoDB将会预先分配集合。<br>另外，可为限制集指定最大文档数据，用<code>max</code>字段。</p>
<p>大小参数是必须的。MongoDB会在达到最大限制前删除旧的文件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">use &lt;db&gt;</div><div class="line"></div><div class="line"><span class="comment">#限制集大小</span></div><div class="line">db.createCollection(<span class="string">"log"</span>, &#123;capped: <span class="literal">true</span>, size: 1000000&#125;)</div><div class="line"></div><div class="line"><span class="comment">#限制集和文档大小</span></div><div class="line">db.createCollection(<span class="string">"log"</span>, &#123;capped: <span class="literal">true</span>, size: 5242880, max: 5000&#125;)</div></pre></td></tr></table></figure>
<p><strong>查询一个限制集</strong><br>如果没有对限制集指定排序，则MongoDB的结果顺序和插入顺序相同。</p>
<p><strong>检查一个集合是否是限制集</strong><br><code>isCapped()</code>方法</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.collection.isCapped()</div><div class="line"><span class="comment">#db.coll01.isCapped()</span></div><div class="line"><span class="comment">#false</span></div></pre></td></tr></table></figure>
<p><strong>将集合转换为限制集</strong><br><code>convertToCapped()</code>方法</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.runCommand(&#123;<span class="string">"covertToCapped"</span>: <span class="string">"coll01"</span>, size: 1000000&#125;);</div><div class="line"><span class="comment">#db.coll01.isCapped()</span></div><div class="line"><span class="comment">#true</span></div></pre></td></tr></table></figure>
<p><strong>在规定的时间周期之后将自动移除数据</strong><br>通过设置MongoDB的TTL时集合中的数据过期。<br>TTL collection与限制集不兼容。</p>
<p><strong>Tailable游标</strong><br>类似于Unix中的<code>taif -f</code></p>
<p><br><br><br></p>
<h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><p>MongoDB存储数据记录为BSON文档。<br>BSON是JSON文档的二进制表示，因此它包含比JSON更多的数据类型。</p>
<p><br></p>
<h3 id="document-structure"><a href="#document-structure" class="headerlink" title="document structure"></a>document structure</h3><p>MongoDB字段由key-value对组成。<br>字段值可以是任一BSON数据类型，包括其他文档，数组，阵列。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	filed1: value1;</div><div class="line">	filed2: value2;</div><div class="line">    ...</div><div class="line">    filedN: valueN</div><div class="line">&#125;g</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#data type</span></div><div class="line">var mydoc =&#123;</div><div class="line">		_id: ObjectId(<span class="string">"5099803df3f4948bd2f98391"</span>),</div><div class="line">		name: &#123; first: <span class="string">"Alan"</span>, last: <span class="string">"Turing"</span> &#125;,</div><div class="line">		birth: new Date(<span class="string">'Jun 23, 1912'</span>),</div><div class="line">		death: new Date(<span class="string">'Jun 07, 1954'</span>),</div><div class="line">		contribs: [ <span class="string">"Turing machine"</span>, <span class="string">"Turing test"</span>, <span class="string">"Turingery"</span> ],</div><div class="line">		views : NumberLong(1250000)</div><div class="line">&#125;</div><div class="line"></div><div class="line">_id是ObjectID；</div><div class="line">name是嵌入式文档；</div><div class="line">birth是日期类型；</div><div class="line">contribs是字符串数组；</div><div class="line">view是NumberLong类型。</div></pre></td></tr></table></figure>
<p><strong>字段名(field name)</strong><br>字段名是字符串。<br>document对field name有以下限制:</p>
<ul>
<li>字段名称<code>_id</code>保留用作主键(primary key)，它的值在collection中必须唯一，不可变。它的类型可以是数组外的任何类型；</li>
<li>字段名称不能以<code>$</code>字符开头；</li>
<li>字段名称不能包含<code>.</code>字符；</li>
<li>字段名称不能包含<code>null</code>字符。</li>
</ul>
<p>BSON documents 可能有多个字段名称相同的字段。然而，大多数的MongoDB Interface，MongoDB结构（如hash表），并不支持重复字段名称。<br>如果需要操作具有多个相同名称字段的文档，请参考 mongo driver。</p>
<p>一些由内部MongoDB进程创建的documents可能会有重复的字段，但是没有MongoDB进程会向一个已经存在的user document中添加重复字段。</p>
<p><strong>字段值限制(field value limit)</strong><br>For <code>indexed collections</code>，indexed fields的值有一个最大索引值长度限制(maximum index key length)。</p>
<p><br></p>
<h3 id="圆点表示法-dot-notation"><a href="#圆点表示法-dot-notation" class="headerlink" title="圆点表示法(dot notation)"></a>圆点表示法(dot notation)</h3><p>MongoDB使用圆点表示法来访问数组中的元素，访问嵌套文档中的字段。</p>
<p><strong>数组(array)</strong><br>通过基于0的索引位置来指定或访问数组中的元素。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;array&gt;.&lt;index&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">	contribs: [ <span class="string">'Turing machine'</span>, <span class="string">'Turing test'</span>, <span class="string">'Turingery'</span> ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#contribs.0 == 'Turing machine'</span></div><div class="line"><span class="comment">#contribs.1 == 'Turing test'</span></div><div class="line"><span class="comment">#contribs.2 == 'Turingery'</span></div></pre></td></tr></table></figure>
<p><strong>嵌套文档(embedded documents)</strong><br>通过圆点表示法来指定或访问嵌套文档中的字段。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;embedded document&gt;.&lt;field&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">	name: &#123; first: <span class="string">'AAA'</span>, last: <span class="string">'ZZZ'</span>&#125;,</div><div class="line">    contact: &#123; phone: &#123; <span class="built_in">type</span>: <span class="string">'cell'</span>, number: <span class="string">'1-22-333'</span> &#125;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#name.first == 'AAA'</span></div><div class="line"><span class="comment">#contact.phone.number == '1-22-333'</span></div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="文档限制-document-limitation"><a href="#文档限制-document-limitation" class="headerlink" title="文档限制(document limitation)**"></a>文档限制(document limitation)**</h3><p><strong>文档大小限制(size limit)</strong><br>BSON document最大size为：16MB。</p>
<p>最大document size确保一个单一document不能使用过量的RAM，或是传输期间的过量带宽。<br>MongoDB提供了<code>GridFS API</code>，用来保存超过最大size的文档。</p>
<p><strong>文档字段序列(field order)</strong><br>MongoDB用write operation来作为document的序列，除了一下情况：</p>
<ul>
<li><code>_id</code>字段总是document中的第一个field；</li>
<li>包含重命名的<code>update</code>操作，会导致document中的field重新排序。</li>
</ul>
<p><strong>_id字段</strong><br>在MongoDB中，每个保存在collection中的document都要求一个唯一的<code>_id</code>，用以担任主键(primary key)。<br>如果向document中<code>insert</code>数据是忽略的<code>_id</code>字段，则MongoDB driver会为<code>_id字段</code>自动生成一个ObjectID。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#默认生成_id</span></div><div class="line">db.coll01.insert(&#123;name: <span class="string">'zhang'</span>, sex: <span class="string">'man'</span>, hobby: <span class="string">'woman'</span>&#125;)</div><div class="line"><span class="comment"># "_id" : ObjectId("5a32166ebf2c986e8106f891")</span></div><div class="line"></div><div class="line"><span class="comment">#自定义_id</span></div><div class="line">db.coll01.insert(&#123;_id:<span class="string">'ZhangCustomDefine'</span>, name:<span class="string">'zhang'</span>, sex: <span class="string">'man'</span>, arr: [0, 1, 2, 3], emmdoc: &#123;emm01:<span class="string">'Emm01'</span>, emm02: <span class="string">'Emm02'</span>, emm03: <span class="string">'Emmo3'</span>&#125;&#125;)</div><div class="line"><span class="comment">#"_id" : "ZhangCustomDefine"</span></div></pre></td></tr></table></figure>
<p><code>_id字段</code>有以下行为和约束：</p>
<ul>
<li>默认情况下，MongoDB在collection创建document时，会创建一个唯一的<code>_id</code>作为索引；</li>
<li><code>_id字段</code>总是document中的第一个字段。如果server接受的document中<code>_id</code>不在第一个字段，那么Server会移动<code>_id</code>到第一个字段；</li>
<li><code>_id</code>字段的数据类型除了数组外的任意BSON 数据类型；</li>
<li>不要存储BSON正则表达式的类型在<code>_id</code>字段中。</li>
</ul>
<p><code>_id</code>字段值的常用选项：</p>
<ul>
<li>使用ObjectId；</li>
<li>使用了自然唯一的标识符，节省了空间并避免了额外的索引；</li>
<li>生成一个自动递增的数字；</li>
<li>在应用程序代码中生成UUID；</li>
</ul>
<p><br></p>
<h3 id="文档结构的其他用途"><a href="#文档结构的其他用途" class="headerlink" title="文档结构的其他用途"></a>文档结构的其他用途</h3><p><strong>查询过滤文档(query filter)</strong><br>使用<key>:<value>表达式来指定条件。</value></key></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&lt;field1&gt;: &lt;value1&gt;</div><div class="line">    &lt;field2&gt;: &lt;value2&gt;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>更新特定文档(update)</strong><br>使用<code>db.collection.update()</code>操作更新数据。</p>
<p><br><br><br></p>
<h2 id="BSON类型"><a href="#BSON类型" class="headerlink" title="BSON类型"></a>BSON类型</h2><p>BSON是一个用来存储document和MongoDB进行远程调用的二进制序列化格式。<br>BSON支持一下数据类型作为文档中的值。每个数据类型都有一个相应的数字和字符串别名，可与$type操作符一起使用，以便按照bson类型查询文档。</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Number</th>
<th>Alias</th>
</tr>
</thead>
<tbody>
<tr>
<td>double</td>
<td>1</td>
<td>“double”</td>
</tr>
<tr>
<td>字符串</td>
<td>2</td>
<td>“string”</td>
</tr>
<tr>
<td>对象</td>
<td>3</td>
<td>“object”</td>
</tr>
<tr>
<td>数组</td>
<td>4</td>
<td>“array”</td>
</tr>
<tr>
<td>二进制数据</td>
<td>5</td>
<td>“binData”</td>
</tr>
<tr>
<td>未定义</td>
<td>6</td>
<td>“undefined”</td>
</tr>
<tr>
<td>ObjectId</td>
<td>7</td>
<td>“objectId”</td>
</tr>
<tr>
<td>Boolean</td>
<td>8</td>
<td>“bool”</td>
</tr>
<tr>
<td>日期</td>
<td>9</td>
<td>“date”</td>
</tr>
<tr>
<td>空</td>
<td>10</td>
<td>“null”</td>
</tr>
<tr>
<td>正则表达式</td>
<td>11</td>
<td>“regex”</td>
</tr>
<tr>
<td>DBPointer</td>
<td>12</td>
<td>“dbPointer”</td>
</tr>
<tr>
<td>JavaScript</td>
<td>13</td>
<td>“javascript”</td>
</tr>
<tr>
<td>符号</td>
<td>14</td>
<td>“symbol”</td>
</tr>
<tr>
<td>JavaScript(带范围)</td>
<td>15</td>
<td>“javascriptWithScope”</td>
</tr>
<tr>
<td>32位整数</td>
<td>16</td>
<td>“int”</td>
</tr>
<tr>
<td>时间戳</td>
<td>17</td>
<td>“timestamp”</td>
</tr>
<tr>
<td>64位整数</td>
<td>18</td>
<td>“long”</td>
</tr>
<tr>
<td>Decimal128</td>
<td>19</td>
<td>“decimal”</td>
</tr>
<tr>
<td>Min key</td>
<td>-1</td>
<td>“minKey”</td>
</tr>
<tr>
<td>Max key</td>
<td>127</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>如果你想要将BSON转换为JSON，参考Extended JSON。</p>
<p><br></p>
<h3 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h3><p>ObjcetIds are small, likely unique, fast to generate, and ordered.<br>ObjectIds有12个字节组成，其中前4个字节是反映ObjectId创建的时间戳(timestamp)。</p>
<ul>
<li>一个4字节的值，代表从Unix纪元开始的秒数；</li>
<li>一个3字节的机器标识符；</li>
<li>日期对象排在时间戳对象之前；</li>
<li>MongoDB在比较过程中，会把一些类型看成相等。</li>
</ul>
<p>栗子：<code>{ &quot;_id&quot; : ObjectId(&quot;5a33354068b6c5e5fb6f213f&quot;), &quot;name&quot; : &quot;ZHANG&quot; }</code>。</p>
<p>在mongo shell中，可以访问ObjectId的创建时间，使用<code>ObjectId.getTimestamp()</code>方法。<br>在<code>_id</code>字段中存储的ObjectId值的排序，大致相当于按其创建时间排序。<br>ObjectId的值顺序与生成时间之间并不严格。</p>
<p><br></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>BSON字符串都是UTF-8编码。一般来说，每种编程语言的驱动程序在序列化和反序列化BSON的时候，都会从语言的字符串形式转化为UTF-8。这就使得使用BSON字符串简单存储大多数国际字符变为可能。</p>
<p><br></p>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>BSON有一个特殊的时间戳类型用于MongoDB内部使用，与普通的日期类型无关。而在应用开发中可使用BSON日期类型。<br>时间戳值是一个64位的值： 前32位是与Unix纪元相差的秒数，后32位是在某秒总操作的一个递增的序列数。</p>
<p>在MongoDB复制集中，<code>oplog</code>有一个ts字段。这个字段的值使用BSON时间戳表示了操作时间。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.coll02.insert( &#123; ts: new Timestamp() &#125; )</div><div class="line"></div><div class="line">db.coll02.find()</div><div class="line"><span class="comment">#&#123; "_id" : ObjectId("5a333e3f68b6c5e5fb6f2141"), "ts" : Timestamp(1513307711, 1) &#125;</span></div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>BSON日期是一个64位整数，表示利当前Unix新纪元(1970.01.01)的毫秒数，可到未来的2.9亿年。<br>BSON日期类型是有符号的，负数表示1970年之前的时间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var date1 = new Date()</div><div class="line">var date2 = ISODate()</div><div class="line"></div><div class="line">#date1</div><div class="line">#date2</div><div class="line">#ISODate(&quot;2017-12-15T03:28:08.227Z&quot;)</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h2 id="MongoDB-Extended-JSON"><a href="#MongoDB-Extended-JSON" class="headerlink" title="MongoDB Extended JSON"></a>MongoDB Extended JSON</h2><p><br><br><br></p>
<hr>
<h1 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h1><p>参考:</p>
<ul>
<li><a href="https://docs.mongodb.com/manual/administration/install-on-linux/" target="_blank" rel="external">https://docs.mongodb.com/manual/administration/install-on-linux/</a>;</li>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="external">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/</a>;</li>
</ul>
<p>MongoDB有社区版(Community)和企业版(Enterprise)。社区版免费，企业版在商业方面收费。</p>
<p><br><br>MongoDB在仓库中提供官方支持的包，包含以下软件包：</p>
<table>
<thead>
<tr>
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>monogdb-org</td>
<td>将自动安装下面四个组件包</td>
</tr>
<tr>
<td>mongodb-org-server</td>
<td>包含<code>mongod</code>守护进程和相关配置和<code>init</code>脚本</td>
</tr>
<tr>
<td>mongodb-org-mongos</td>
<td>包含<code>mongos</code>守护进程</td>
</tr>
<tr>
<td>mongodb-org-shell</td>
<td>包含<code>mongo-shell</code></td>
</tr>
<tr>
<td>mongodb-org-tools</td>
<td>包含相关MongoDB工具，如<code>mongoimport</code>,<code>mongoexport</code>,<code>mongodump</code>,<code>mongorestore</code>…</td>
</tr>
</tbody>
</table>
<p><code>mongodb-org-server</code>包提供了一个<code>/etc/mongod.conf</code>配置文件来开始和初始化<code>mongod</code>。默认配置文件默认bind_ip为 <code>127.0.0.1</code>，当你有需要和副本集时请修改它。</p>
<p><br></p>
<h2 id="自建mongodb-repo仓库安装"><a href="#自建mongodb-repo仓库安装" class="headerlink" title="自建mongodb.repo仓库安装"></a>自建mongodb.repo仓库安装</h2><p>仓库地址：<a href="https://repo.mongodb.org" target="_blank" rel="external">https://repo.mongodb.org</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum.repos.d/mongodb34.repo</div><div class="line"><span class="comment">#编辑仓库</span></div><div class="line"></div><div class="line"></div><div class="line">[mongodb34]</div><div class="line">name=MongoDB34 Repository</div><div class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/3.4/x86_64/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#安装mongodb</span></div><div class="line">yum install -y mongodb-org</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="下载rpm包安装"><a href="#下载rpm包安装" class="headerlink" title="下载rpm包安装"></a>下载rpm包安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /root/mongodb</div><div class="line">wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/3.4/x86_64/RPMS/mongodb-org-3.4.10-1.el7.x86_64.rpm</div><div class="line">wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/3.4/x86_64/RPMS/mongodb-xxx-3.4.10-1.el7.x86_64.rpm</div><div class="line"><span class="comment">#共五个包</span></div><div class="line"></div><div class="line"></div><div class="line">yum ./mongo-org*</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.0.tgz</div><div class="line"></div><div class="line">tar -axvf mongodb-linux-x86_64-rhel70-3.6.0.tgz -C ./</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#默认路径/usr/local</span></div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="开启mongodb"><a href="#开启mongodb" class="headerlink" title="开启mongodb"></a>开启mongodb</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#默认启动方式</span></div><div class="line">systemctl start mongod</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#指定配置文件启动</span></div><div class="line"><span class="comment">#注意修改配置文件里面的某些路径和名称，不然会和默认配置文件冲突</span></div><div class="line">mongod -f /etc/mongo_27018.conf</div><div class="line">mongod -f /etc/mongo_27019.conf</div><div class="line">``</div><div class="line"></div><div class="line"></div><div class="line">&lt;br&gt;</div><div class="line"><span class="comment">## 卸载mongodb</span></div><div class="line"></div><div class="line">```sh</div><div class="line">systemctl stop mongod</div><div class="line"></div><div class="line">yum remove $(rpm -qa | grep mongodb-org)</div><div class="line"></div><div class="line">rm -rf /var/<span class="built_in">log</span>/mongodb</div><div class="line">rm -rf /var/dbpath/mongo</div></pre></td></tr></table></figure>
<h2 id="mongodb异常关闭后"><a href="#mongodb异常关闭后" class="headerlink" title="mongodb异常关闭后"></a>mongodb异常关闭后</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#首先查看日志文件</span></div><div class="line">tail /var/<span class="built_in">log</span>/mongodb/mongod.log</div><div class="line"></div><div class="line"><span class="comment">#删除</span></div><div class="line">rm /var/run/mongodb/mongod.pid /var/db/mongodb/mongod.lock</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<hr>
<h1 id="MongoDB配置文件"><a href="#MongoDB配置文件" class="headerlink" title="MongoDB配置文件"></a>MongoDB配置文件</h1><p>MongoDB的配置文件格式使用了YAML格式。<br><a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">YAML维基百科</a>，Yet Another Markup Language。强调以数据为中心，而不是标记语言为重点，用方向缩略语重命名。</p>
<p><br><br>默认配置文件<code>/etc/mongod.conf</code> 的几个大块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">systemLog:        #日志</div><div class="line"></div><div class="line">storage:          #存储</div><div class="line"></div><div class="line">processManagement:        #进程管理</div><div class="line"></div><div class="line">net:        #网络</div><div class="line"></div><div class="line">security:        #安全</div><div class="line"></div><div class="line">operationProfiling:        #性能分析器</div><div class="line"></div><div class="line">replication:        #主从复制</div><div class="line"></div><div class="line">sharding:        #架构</div><div class="line"></div><div class="line">setParameter:        #自定义变量</div><div class="line"></div><div class="line">auditLog:        #检测日志</div><div class="line"></div><div class="line">snmp:        #简单网络管理协议</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="systemLog"><a href="#systemLog" class="headerlink" title="systemLog"></a>systemLog</h2><p>日志相关参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">systemLog:</div><div class="line">  verbosity: &lt;int&gt;                #日志级别，默认0,1-5均会包含debug信息</div><div class="line">  quiet: &lt;boolean&gt;                #安静，true时mongod将会减少日志的输出量</div><div class="line">  traceAllExceptions: &lt;boolean&gt;        #打印异常详细信息</div><div class="line">  syslogFacility:  &lt;string&gt;                #指定用于登录时信息到syslog Facility水平，前提是启用syslog</div><div class="line">  path:  &lt;string&gt;          #日志路径，默认情况下，MongoDB将覆盖现有的日志文件</div><div class="line">  logAppend: &lt;boolean&gt;        #mongod重启后，在现有日志后继续添加日志，否则备份当前日志，然后创建新日志</div><div class="line">  logRotate: rename|reopen        #日志轮询，防止一个日志文件特别大。rename重命名日志文件，默认值；reopen使用Linuxrotate特性，关闭并重新打开日志文件，前提为logAppend: true</div><div class="line">  destination: &lt;string&gt;        #日志输出目的地，可为file或syslog，若不指定，则会输出到 std out</div><div class="line">  timeStampFormat: &lt;string&gt;        #指定日志格式的时间戳，有 ctime, Iso869-utc, iso8691-local</div><div class="line">  component:            #为不同的组件指定各自的日志信息级别</div><div class="line">      accessControl:</div><div class="line">          verbosity: &lt;int&gt;</div><div class="line">      command:</div><div class="line">          verbosity: &lt;int&gt;</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h2><p>存储引擎相关参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">storage:</div><div class="line">  dbPath: &lt;string&gt;        #mongodb进程存储数据目录，此配置进队此mongod进程有效，你使用配置文件开启的mongod就可以指定额外的数据目录</div><div class="line">  indexBuildRetry:  &lt;boolean&gt;        #当构件索引时mongod意外关闭，那么在此启动是否重建索引，默认true</div><div class="line">  repairPath: &lt;string&gt;        #在repair期间使用此目录存储临时数据，repair结束后此目录下数据将被删除</div><div class="line">  journal:</div><div class="line">      enabled: &lt;boolean&gt;        #journal日志持久存储，journal日志用来数据恢复，通常用于故障恢复，建议开启</div><div class="line">      commitIntervalMs: &lt;num&gt;        #mongod日志刷新值，范围1-500毫秒，默认100，不建议修改</div><div class="line">  directoryPerDB:  &lt;boolean&gt;        #是否将不同的数据存储在不同的目录中，dbPath子目录</div><div class="line">  syncPeriodSecs:  &lt;int&gt;        #fsync操作将数据flush到磁盘的时间间隔，默认为60秒，不建议修改</div><div class="line">  engine:  &lt;string&gt;        #存储引擎</div><div class="line"></div><div class="line">  mmapv1:    #mmapv1存储引擎，3.2前默认</div><div class="line">      preallocDataFiles:  &lt;boolean&gt;</div><div class="line">      nsSize: &lt;int&gt;</div><div class="line">      quota:</div><div class="line">          enforced: &lt;boolean&gt;</div><div class="line">          maxFilesPerDB: &lt;int&gt;</div><div class="line">      smallFiles: &lt;boolean&gt;</div><div class="line">      journal:</div><div class="line">          debugFlags: &lt;int&gt;</div><div class="line">          commitIntervalMs: &lt;num&gt;</div><div class="line">  wiredTiger:    #WiredTiger存储引擎，3.2后默认</div><div class="line">      engineConfig:</div><div class="line">          cacheSizeGB: &lt;number&gt;    #最大缓存大小</div><div class="line">          journalCompressor: &lt;string&gt;    #日志压缩算法，可选值有 none，snappy(默认)，zlib</div><div class="line">          directoryForIndexes: &lt;boolean&gt;    #是否将索引和collections数据分别存储在dbPath单独的目录中</div><div class="line">      collectionConfig:</div><div class="line">          blockCompressor: &lt;string&gt;    #collection数据压缩算法，可选none, snappy，zlib</div><div class="line">      indexConfig:</div><div class="line">          prefixCompression: &lt;boolean&gt;    #是否对索引数据使用前缀压缩。对那些经过排序的值存储有很大帮助，可有效减少索引数据的内存使用量。</div><div class="line">  inMemory:    #inMemory内存存储引擎，bate版</div><div class="line">      engineConfig:</div><div class="line">          inMemorySizeGB: &lt;number&gt;</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="processManagement"><a href="#processManagement" class="headerlink" title="processManagement"></a>processManagement</h2><p>进程相关参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">processManagement:</div><div class="line">  fork: &lt;boolean&gt;        #是否以fork模式运行mongod进程，默认情况下，mongod不作为守护进程运行</div><div class="line">  pidFilePath: &lt;string&gt;        #将mongod进程ID写入指定文件，如未指定，将不会创建PID文件</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><p>网络相关参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">net:</div><div class="line">  prot: &lt;int&gt;    #监听端口，默认27017</div><div class="line">  bindIp: &lt;string&gt;    #绑定IP，如果此值是“0.0.0.0”则绑定所有接口</div><div class="line">  maxIncomingConnections: &lt;int&gt;    #mongod进程允许的最大连接数，如果此值超过系统配置的连接数阈值，将不会生效(ulimit)</div><div class="line">  wireObjectCheck: &lt;boolean&gt;    #当客户端写入数据时，检查数据的有效性（BSON）。如果数据格式不良，update,insert等操作将会被拒绝</div><div class="line">  ipv6: &lt;boolean&gt;    #是否支持多实例之间使用ipv6</div><div class="line">  unixDomainSocker:    #适用于Unix系统</div><div class="line">      enabled: &lt;boolean&gt;</div><div class="line">      pathPrefix: &lt;string&gt;</div><div class="line">      filePermissions: &lt;int&gt;</div><div class="line">  http:    #</div><div class="line">      enabled: &lt;boolean&gt;</div><div class="line">      JSONEnabled: &lt;boolean&gt;</div><div class="line">      RESTInterfaceEnabled: &lt;boolean&gt;</div><div class="line">  ssl:</div><div class="line">      sslOnNormalPorts: &lt;boolean&gt;</div><div class="line">      mode: &lt;string&gt;</div><div class="line">      PEMKeyFile: &lt;string&gt;</div><div class="line">      PEMKeyPassword: &lt;string&gt;</div><div class="line">      clusterFile: &lt;string&gt;</div><div class="line">      clusterPassword: &lt;string&gt;</div><div class="line">      CAFile: &lt;string&gt;</div><div class="line">      CRLFile: &lt;string&gt;</div><div class="line">      allowConnectionsWithoutCertificates: &lt;boolean&gt;</div><div class="line">      allowInvalidCertificates: &lt;boolean&gt;</div><div class="line">      allowInvalidHostnames: &lt;boolean&gt;</div><div class="line">      disabledProtocols: &lt;string&gt;</div><div class="line">      FIPSMode: &lt;boolean&gt;</div><div class="line">  compression:</div><div class="line">      compressors: &lt;string&gt;</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="security"><a href="#security" class="headerlink" title="security"></a>security</h2><p>安全相关参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">security:</div><div class="line">  authorization: enabled    #MondoDB认证功能</div><div class="line">  keyFile: /path/mongo.key    #MongoDB副本集节点身份验证密钥文件</div><div class="line">  clusterAuthMode: &lt;string&gt;    #集群members间的认证模式</div><div class="line">  transitionToAuth: &lt;boolean&gt;</div><div class="line">   javascriptEnabled:  &lt;boolean&gt;    #是否允许执行JavaScript脚本</div><div class="line">   redactClientLogData: &lt;boolean&gt;</div><div class="line">   sasl:</div><div class="line">      hostName: &lt;string&gt;</div><div class="line">      serviceName: &lt;string&gt;</div><div class="line">      saslauthdSocketPath: &lt;string&gt;</div><div class="line">   enableEncryption: &lt;boolean&gt;</div><div class="line">   encryptionCipherMode: &lt;string&gt;</div><div class="line">   encryptionKeyFile: &lt;string&gt;</div><div class="line">   kmip:</div><div class="line">      keyIdentifier: &lt;string&gt;</div><div class="line">      rotateMasterKey: &lt;boolean&gt;</div><div class="line">      serverName: &lt;string&gt;</div><div class="line">      port: &lt;string&gt;</div><div class="line">      clientCertificateFile: &lt;string&gt;</div><div class="line">      clientCertificatePassword: &lt;string&gt;</div><div class="line">      serverCAFile: &lt;string&gt;</div><div class="line">   ldap:</div><div class="line">      servers: &lt;string&gt;</div><div class="line">      bind:</div><div class="line">         method: &lt;string&gt;</div><div class="line">         saslMechanism: &lt;string&gt;</div><div class="line">         queryUser: &lt;string&gt;</div><div class="line">         queryPassword: &lt;string&gt;</div><div class="line">         useOSDefaults: &lt;boolean&gt;</div><div class="line">      transportSecurity: &lt;string&gt;</div><div class="line">      timeoutMS: &lt;int&gt;</div><div class="line">      userToDNMapping: &lt;string&gt;</div><div class="line">      authz:</div><div class="line">         queryTemplate: &lt;string&gt;</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="operationProfiling"><a href="#operationProfiling" class="headerlink" title="operationProfiling"></a>operationProfiling</h2><p>慢查询相关参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">operationProfiling:</div><div class="line">  slowOpThresholdMs: &lt;int&gt;    #数据库profiler判定一个操作是“慢查询”的时间阈值，单位毫秒。mongod会把慢查询记录到日志中，默认100ms</div><div class="line">  mode: &lt;string&gt;    #数据库profiler级别，操作的性能信息将会被写入日志文件中，可选值“off”--关闭profiling，“slowOp”--只包包含慢操作，“all”--记录所有操作</div><div class="line">  #数据库profiling会影响性能，建议只在性能调试阶段开启</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h2><p>副本集：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">replication:</div><div class="line">  oplogSizeMB: &lt;int&gt;    #replication操作日志的最大尺寸，如果太小，secondary将不能通过oplog来同步数据，只能全量同步</div><div class="line">  replSetName: &lt;string&gt;    #副本集名称，副本集中所有的mongod实例都必须有相同的名字，Sharding分布式下，不同的sharding应该使用不同的repSetName</div><div class="line">  secondaryIndexPrefetch: &lt;string&gt;    #副本集中的secondary，从oplog中应用变更操作之前，将会先把索引加载到内存</div><div class="line">  enalbeMajorityReadConcern: &lt;boolean&gt;    #允许readConcern的级别为“majority”</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="sharding"><a href="#sharding" class="headerlink" title="sharding"></a>sharding</h2><p>分片相关参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sharding:</div><div class="line">  clusterRole: &lt;string&gt;    #在sharding集群中，此mongod实例可选的角色。configsvr,默认监听27019端口 和 shardsvr,默认监听27018端口</div><div class="line">  archiveMovedChunks: &lt;boolean&gt;    #当chunks因为“负载均衡”而迁移到其他节点时，mongod是否将这些chunks归档，并保存在dbPath/movechunk目录下，mongod不会删除moveChunk下的文件</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="setParameter"><a href="#setParameter" class="headerlink" title="setParameter"></a>setParameter</h2><p>自定义变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setParameter:</div><div class="line">  &lt;parameter1&gt;: &lt;value1&gt;</div><div class="line">  &lt;parameter2&gt;: &lt;value2&gt;</div><div class="line">  enableLocalhostAuthBypass: false    #栗子</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="auditLog"><a href="#auditLog" class="headerlink" title="auditLog"></a>auditLog</h2><p>审计相关参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">auditLog:</div><div class="line">  destination: &lt;string&gt;    #指定审计记录的输出方式，有syslog, console, file</div><div class="line">  format: &lt;string&gt;    #输出格式，有JSON 和 BSON</div><div class="line">  path: &lt;string&gt;    #如果审计时间输入为文件，那么就需要指定文件完整路径及文件名</div><div class="line">  filter: &lt;string&gt;    #过滤器，可限制审计系统记录的操作类型，该选项需要一个表单的查询文档的字符串表示形式</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<hr>
<h1 id="Mongo-Shell"><a href="#Mongo-Shell" class="headerlink" title="Mongo Shell"></a>Mongo Shell</h1><p><strong>mongo shell</strong>是一个交互式的JavaScript结构的MongoDB。使用mongo shell来查询和更新数据以及执行管理操作。</p>
<h2 id="mongo-shell基础知识"><a href="#mongo-shell基础知识" class="headerlink" title="mongo shell基础知识"></a>mongo shell基础知识</h2><h3 id="启动monso-shell"><a href="#启动monso-shell" class="headerlink" title="启动monso shell"></a>启动monso shell</h3><p>启动mongo shell前确保MongoDB实例正在运行。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mongo [option] [db address] [.js]</div><div class="line"></div><div class="line"><span class="comment">#以默认配置启动</span></div><div class="line">mongo</div><div class="line"></div><div class="line"><span class="comment">#以特定配置启动</span></div><div class="line">mongo --port 27018</div><div class="line"></div><div class="line"><span class="comment">#连接远程mongo shell</span></div><div class="line">mongo --host <span class="variable">$host</span> --port <span class="variable">$port</span> -u <span class="variable">$user</span> -p <span class="variable">$passwd</span></div><div class="line"></div><div class="line">mongo &lt;db&gt;</div><div class="line">mongo &lt;host&gt;/&lt;db&gt;</div><div class="line">mongo &lt;hsot:port&gt;/&lt;db&gt;</div></pre></td></tr></table></figure>
<p><br><br><strong>.mongorc.js文件</strong><br>mongo shell开始运行时，mongo将在用户主目录下检查<code>.mongorc.js</code>的js文件。如果找到，mongo将在首次命令行之前解释执行.mongorc.js的内容。<br>如果你使用mongo shell执行一个js或表达式，无论是通过<code>mongo --eval</code>，或指定一个.js文件，mongo都将在js处理完成之后读取.mongorc.js文件。可使用 <code>--norc</code>选项禁止加载.mongorc.js。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ll /root/.mongorc.js</div><div class="line"><span class="comment"># -rw------- 1 root root 0 Dec 27  2016 /root/.mongorc.js</span></div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="使用mongo-shell"><a href="#使用mongo-shell" class="headerlink" title="使用mongo shell"></a>使用mongo shell</h3><p>可能在启动mongo shell的时候会警告:</p>
<ul>
<li>WARNING: /sys/kernel/mm/transparent_hugepage/defrag is ‘always’. We suggest setting it to ‘never’.</li>
<li>WARNING: /sys/kernel/mm/transparent_hugepage/defrag is ‘always’. We suggest setting it to ‘never’</li>
</ul>
<p>hugepage(大内存页面)，是Linux操作系统一种管理内存的方式。和通常方式相比，hugepage模式下内存分配管理会有所差异。<br>MongoDB显然不希望这个特定被启用。</p>
<p>关闭hugepage:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /etc/rc.d/rc.local</div><div class="line"></div><div class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</div><div class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</div><div class="line"></div><div class="line">chmox a+x /etc/rc.d/rc.local</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mongo</div><div class="line"></div><div class="line"><span class="comment">#显示当前使用数据库</span></div><div class="line">&gt;db</div><div class="line"></div><div class="line"><span class="comment">#切换数据库</span></div><div class="line">&gt;use &lt;database&gt;</div><div class="line"></div><div class="line"><span class="comment">#查看所有数据库</span></div><div class="line">&gt;show dbs</div></pre></td></tr></table></figure>
<p><br><br>你可以切换到一个并不存在的数据库。当你第一次向数据库存储数据，如创建一个集合，MongoDB将自动创建数据库。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use nodb</div><div class="line"></div><div class="line">db.nocollestion.insert(&#123;x:1&#125;);</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="格式化打印结果"><a href="#格式化打印结果" class="headerlink" title="格式化打印结果"></a>格式化打印结果</h3><p><code>db.collection.find()</code>方法返回一个<code>cursor</code>(游标)。如果返回的游标未使用var关键字指定变量，则游标将自动迭代最多20次，以打印出与查询匹配的前20个<code>documents</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在操作中添加`.pretty()`，以格式化打印结果</span></div><div class="line"><span class="comment">#使用.pretty显示结果很舒服</span></div><div class="line">db.collection.find().pretty()</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">print</span>()	<span class="comment">#无格式打印</span></div><div class="line">printjson() <span class="comment">#用JSON打印</span></div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="mongo-shell中的多行操作"><a href="#mongo-shell中的多行操作" class="headerlink" title="mongo shell中的多行操作"></a>mongo shell中的多行操作</h3><p>mongo shell中如果你以<code>( , { , [</code>开始，那么知道你输入了对应的<code>) , } , ]</code>才算结束命令。</p>
<p><br></p>
<h3 id="Tab命令补全和键盘快捷键"><a href="#Tab命令补全和键盘快捷键" class="headerlink" title="Tab命令补全和键盘快捷键"></a>Tab命令补全和键盘快捷键</h3><p>mongo shell支持键盘快捷键，例如：</p>
<ul>
<li>使用 <code>上/下箭头</code> 进行历史命令切换；</li>
<li>使用 <code>Tab键</code> 自动补全命令。</li>
</ul>
<p><br></p>
<h3 id="退出mongo-shell"><a href="#退出mongo-shell" class="headerlink" title="退出mongo shell"></a>退出mongo shell</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">quit()</div><div class="line"></div><div class="line"><span class="built_in">exit</span></div><div class="line"></div><div class="line">Ctrl+c</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="配置mongo-shell"><a href="#配置mongo-shell" class="headerlink" title="配置mongo shell"></a>配置mongo shell</h2><p>可在mongo shell中设置变量<code>prompt</code>的值来修改提示符内容。<br>prompt变量可以存储字符串以及JavaScript代码。</p>
<p>也可以在<code>.mongorc.js</code>文件中增加提示符的逻辑操作来设置每次启动mongo shell的提示符。</p>
<p><br></p>
<h3 id="自定义提示符"><a href="#自定义提示符" class="headerlink" title="自定义提示符"></a>自定义提示符</h3><p><strong>自定义提示符展示操作符：</strong></p>
<p>在mongo shell中定义一下变量。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cmdCount = 1;</div><div class="line">prompt = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			<span class="built_in">return</span> (cmdCount++) + <span class="string">'&gt; '</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#效果</span></div><div class="line">1&gt;</div><div class="line">2&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><br><br><strong>自定义提示符显示数据库和主机名：</strong></p>
<p>形式为：<database>@<hostname>$</hostname></database></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">host = db.serverStatus().host;</div><div class="line">prompt = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			<span class="built_in">return</span> db+<span class="string">'@'</span>+host+<span class="string">'$'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#效果</span></div><div class="line"><span class="built_in">test</span>@localhost$</div></pre></td></tr></table></figure>
<p><br><br><strong>自定义提示符展示服务器启动时间和文档数：</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">prompt = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			<span class="built_in">return</span> <span class="string">'Uptime:'</span> + db.serverStatus().uptime + <span class="string">'Documents:'</span> + db.stats().objects + <span class="string">'&gt; '</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#效果</span></div><div class="line">Uptime:1234 Documents:5 &gt;</div></pre></td></tr></table></figure>
<p><br><br><strong>注意：</strong><br>在mongo shell里面定义的<code>prompt</code>变量知识临时生效的，退出shell后便没有。<br>如果想要当前用户永久生效，可写入<code>~/.mongorc.js</code>文件。则此用户每次启动mongo shell前都会执行这个文件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim ~/.mongorc.js</div><div class="line"></div><div class="line">host = db.serverStatus().host;</div><div class="line">prompt = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">             <span class="built_in">return</span> db+<span class="string">"@"</span>+host+<span class="string">"&gt; "</span>;</div><div class="line">         &#125;</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="在mongo-shell中使用外部编辑器"><a href="#在mongo-shell中使用外部编辑器" class="headerlink" title="在mongo shell中使用外部编辑器"></a>在mongo shell中使用外部编辑器</h3><p>可在启动mongo shell之前设置<code>EDITOR</code>环境变量来在mongo shell中使用自己的编辑器。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> EDITOR=vim</div><div class="line">mongo</div><div class="line"></div><div class="line"><span class="comment">#edit &lt;variable&gt;|&lt;function&gt;</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myfunc</span></span>()&#123;&#125;</div><div class="line"></div><div class="line">edit myfunc</div><div class="line"><span class="comment">#此时是edit使用vim编辑myfunc</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myfunc</span></span>()&#123;</div><div class="line">	<span class="built_in">print</span>(<span class="string">"It was edited by vim!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">myfunc()</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="修改mongo-shell批处理大小"><a href="#修改mongo-shell批处理大小" class="headerlink" title="修改mongo shell批处理大小"></a>修改mongo shell批处理大小</h3><p><code>db.collection.find()</code>是一种JavaScript方法，返回一个<code>cursor</code>(游标)。如果返回的游标未使用var关键字指定变量，则游标将自动迭代最多20次，以打印出与查询匹配的前20个<code>documents</code>。<br>可以设置<code>DBQuery.shellBatchSize</code>属性来修改默认20篇文档。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DBQuery.shellBatchSize = 10;</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h2 id="获取mongo-shell帮助"><a href="#获取mongo-shell帮助" class="headerlink" title="获取mongo shell帮助"></a>获取mongo shell帮助</h2><p>合理运用<code>Tab键</code>补全命令！</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###命令行帮助</span></div><div class="line">mongo --<span class="built_in">help</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">###mongo shell里查看帮助列表</span></div><div class="line"><span class="built_in">help</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">###数据库帮助</span></div><div class="line"><span class="comment">#db.&lt;method&gt;</span></div><div class="line">show dbs</div><div class="line">db.help()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">###集合帮助</span></div><div class="line"><span class="comment">#db.&lt;collection&gt;.&lt;method&gt;</span></div><div class="line">show collections</div><div class="line">db.collections.help()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">###游标帮助</span></div><div class="line">db.collection.find().<span class="built_in">help</span>()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">###封装对象帮助</span></div><div class="line"><span class="built_in">help</span> misc</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h2 id="给mongo-shell写脚本"><a href="#给mongo-shell写脚本" class="headerlink" title="给mongo shell写脚本"></a>给mongo shell写脚本</h2><p>可使用JavaScript为mongo shell编写脚本，用于处理MongoDB中的数据或执行管理操作。</p>
<p><br></p>
<h3 id="打开新连接"><a href="#打开新连接" class="headerlink" title="打开新连接"></a>打开新连接</h3><p>在mongo shell或JavaScript文件中，可使用<code>Mongo()</code>构造函数来实例化数据库连接：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">new Mongo()</div><div class="line">new Mongo(&lt;host&gt;)</div><div class="line">new Mongo(&lt;host:port&gt;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#栗子</span></div><div class="line">conn = new Mongo();</div><div class="line">db = conn.getDB(<span class="string">'mydb'</span>);	<span class="comment">#将全局db变量设置为mydb</span></div><div class="line"></div><div class="line"><span class="comment">#连接</span></div><div class="line">db = connect(<span class="string">'localhost:27017/mydb'</span>);</div><div class="line"></div><div class="line"><span class="comment">#认证</span></div><div class="line">db.auth(&lt;user&gt;, &lt;passwd&gt;)</div><div class="line"></div><div class="line">db.auth(&#123;</div><div class="line">	user: &lt;user&gt;,</div><div class="line">    <span class="built_in">pwd</span>: &lt;passed&gt;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="交互式和脚本化mongo的区别"><a href="#交互式和脚本化mongo的区别" class="headerlink" title="交互式和脚本化mongo的区别"></a>交互式和脚本化mongo的区别</h3><p>mongo shell中的帮助与JavaScript中帮助不一样！</p>
<table>
<thead>
<tr>
<th>mongo shell帮助</th>
<th>JavaScript等量</th>
</tr>
</thead>
<tbody>
<tr>
<td>show dbs</td>
<td>db.adminCommand(‘listDatabases’)</td>
<td></td>
</tr>
<tr>
<td>use <db></db></td>
<td>db = db.getSiblingDB(‘<db>‘)</db></td>
<td></td>
</tr>
<tr>
<td>show collections</td>
<td>db.getCollectionNames()</td>
<td></td>
</tr>
<tr>
<td>show users</td>
<td>db.getUsers()</td>
<td></td>
</tr>
<tr>
<td>show log <logname></logname></td>
<td>db.adminCommand({‘getLog’ : ‘<logname>‘})</logname></td>
<td></td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>使用mongo shell来计算JavaScript的值。</p>
<p><br><br><strong>–eval <javascript></javascript></strong><br><code>mongo</code>执行 <code>--eval</code>后的js命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo test --eval &quot;printjson(db.getCollectionNames())&quot;</div></pre></td></tr></table></figure>
<p><br><br><strong>执行JavaScript文件</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mongo localhost:27017/<span class="built_in">test</span> myjs.js</div><div class="line"></div><div class="line"><span class="comment">#在shell中执行.js</span></div><div class="line">&gt;load(<span class="string">"myjs.js"</span>)</div><div class="line">&gt;loca(<span class="string">"/root/mongo/myjs.js"</span>)</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h2 id="mongo-shell中的数据类型"><a href="#mongo-shell中的数据类型" class="headerlink" title="mongo shell中的数据类型"></a>mongo shell中的数据类型</h2><p>MongoDB BSON提供了除JSON之外的其它数据类型的支持。Driver提供了对这些数据类型在主机语言的本地化支持，mongo shell也提供了一些帮助类来支持这些数据类型在mongo javascript shell中的使用。</p>
<p><br></p>
<h3 id="日期-1"><a href="#日期-1" class="headerlink" title="日期"></a>日期</h3><p>mongo shell提供了多种方法返回日期:</p>
<ul>
<li><code>Date()</code> 方法返回当前日期为一个字符串；</li>
<li><code>new Date()</code> 构造函数返回一个使用ISODate()包装返回的Date对象；</li>
<li><code>ISODate()</code> 构造函数返回一个使用ISODate()包装返回的Date对象。</li>
</ul>
<p><br><br>返回一个日期为字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var myDateString = Date();</div><div class="line">#查看变量值</div><div class="line">myDateString</div></pre></td></tr></table></figure>
<p><br><br>验证类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typeof myDateString()</div><div class="line">#string</div></pre></td></tr></table></figure>
<p><br><br>返回Date：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var myDate = new Date();</div><div class="line">myDate</div><div class="line">#ISODate(&quot;2017-12-12T08:43:31.405Z&quot;)</div><div class="line"></div><div class="line">#验证</div><div class="line">myDate instanceof Date</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="ObjectId-1"><a href="#ObjectId-1" class="headerlink" title="ObjectId"></a>ObjectId</h3><p>mongo shell对objectid数据类型提供objectId()包装类。</p>
<p><code>new ObjectId</code></p>
<p><br></p>
<h3 id="NumberLong"><a href="#NumberLong" class="headerlink" title="NumberLong"></a>NumberLong</h3><p>mongo shell默认将所有数字处理为浮点值。</p>
<p>用<code>numberlong()</code>包装来处理64位整数。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NumberLong(<span class="string">"2090845886852"</span>)</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="NumberInt"><a href="#NumberInt" class="headerlink" title="NumberInt"></a>NumberInt</h3><p>用<code>NumberInt()</code>构造函数来显式指定32位整数。</p>
<p><br></p>
<h3 id="NumberDecimal"><a href="#NumberDecimal" class="headerlink" title="NumberDecimal"></a>NumberDecimal</h3><p><code>mongo shell</code>默认将所有的数字处理为64位浮点的<code>double</code>值。<code>mongo shell</code>提供了<code>NumberDecimal()</code>构造函数限制指定128位基于十进制的浮点值，能够以精确的精度仿效十进制近似值。<br>这个功能在金融、税务以及科学计算等方面应用。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;NumberDecimal(<span class="string">'1000.55'</span>)</div><div class="line"><span class="comment">#强烈建议加上引号，没加引号可能会存在精度丢失的情况</span></div></pre></td></tr></table></figure>
<p><br></p>
<p>###　在mongo shell中检查类型</p>
<p><code>instanceof</code>返回一个bool值来验证一个值是否为某些类型的实例。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mydoc._id instanceof ObjectId</div><div class="line"><span class="comment">#true</span></div></pre></td></tr></table></figure>
<p><code>typeof</code>返回一个字段的类型。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typeof mydoc._id</div><div class="line"><span class="comment">#object</span></div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h2 id="mongo-shell快速参考"><a href="#mongo-shell快速参考" class="headerlink" title="mongo shell快速参考"></a>mongo shell快速参考</h2><h3 id="mongo-shell-历史命令"><a href="#mongo-shell-历史命令" class="headerlink" title="mongo shell 历史命令"></a>mongo shell 历史命令</h3><p>mongo shell历史命令保存在<code>~/.dbshell</code>文件中，<code>cat ~/.dbshell</code>。也可以使用<strong>上/下键</strong>切换历史命令。</p>
<p><br></p>
<h3 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h3><table>
<thead>
<tr>
<th>option</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--help</code></td>
<td>显示命令行选项</td>
</tr>
<tr>
<td><code>--nodb</code></td>
<td>启动mongo shell而不连接到数据库</td>
</tr>
<tr>
<td><code>--shell</code></td>
<td>执行文件后运行mongo shell</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="mongo-shell命令助手"><a href="#mongo-shell命令助手" class="headerlink" title="mongo shell命令助手"></a>mongo shell命令助手</h3><table>
<thead>
<tr>
<th>help methods and commands</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>help</code></td>
<td>显示帮助</td>
</tr>
<tr>
<td><code>db.help</code></td>
<td>显示数据库方法的帮助</td>
</tr>
<tr>
<td><code>db.collection.help()</code></td>
<td>显示集合方法的帮助</td>
</tr>
<tr>
<td><code>show dbs</code></td>
<td>打印服务器上的所有数据库列表</td>
</tr>
<tr>
<td><code>show databases</code></td>
<td>打印所有可获取的数据库列表</td>
</tr>
<tr>
<td><code>use &lt;db&gt;</code></td>
<td>切换数据库</td>
</tr>
<tr>
<td><code>show collections</code></td>
<td>打印当前数据库上的所有集合列表</td>
</tr>
<tr>
<td><code>show users</code></td>
<td>打印当前数据库的用户列表</td>
</tr>
<tr>
<td><code>show roles</code></td>
<td>打印当前数据库的所有角色(user-define and built-in)列表</td>
</tr>
<tr>
<td><code>show profile</code></td>
<td>打印花费1ms或更多时间的五个最近的操作</td>
</tr>
<tr>
<td><code>load()</code></td>
<td>在shell中执行一个JavaScript文件，建议使用绝对路径</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="mongo-shell的基本JavaScript操作"><a href="#mongo-shell的基本JavaScript操作" class="headerlink" title="mongo shell的基本JavaScript操作"></a>mongo shell的基本JavaScript操作</h3><p>mongo shell为数据库操作提供了一个JavaScript API。<br>db引用当的是前数据库的变量。</p>
<table>
<thead>
<tr>
<th>JavaScript db-operation</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>db.auth()</code></td>
<td>在安全模式下认证用户</td>
</tr>
<tr>
<td><code>coll = db.&lt;collection&gt;</code></td>
<td>将当前db中的特定collection设置为coll，可在此变量上执行操作，如<code>coll.find();</code></td>
</tr>
<tr>
<td><code>db.collection.find()</code></td>
<td>查找集合中的所有文档，并返回一个游标</td>
</tr>
<tr>
<td><code>db.collection.insert()</code></td>
<td>插入一个新文档到集合中</td>
</tr>
<tr>
<td><code>db.collection.update()</code></td>
<td>更新集合中一个存在的文档</td>
</tr>
<tr>
<td><code>db.collection.save()</code></td>
<td>插入或更新 集合中的文档</td>
</tr>
<tr>
<td><code>db.collection.remove()</code></td>
<td>从集合中删除文档</td>
</tr>
<tr>
<td><code>db.collection.drop()</code></td>
<td>删除整个集合</td>
</tr>
<tr>
<td><code>db.collection.createIndex()</code></td>
<td>在集合中创建索引</td>
</tr>
<tr>
<td><code>db.getSiblingDB()</code></td>
<td>跨数据库查询</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><table>
<thead>
<tr>
<th>keysrtoke</th>
<th>function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Up/Down arrow</td>
<td>前/后 历史命令</td>
</tr>
<tr>
<td>Left/Right arrow</td>
<td>左右移动</td>
</tr>
<tr>
<td>Home/End</td>
<td>行首/行尾</td>
</tr>
<tr>
<td>Tab</td>
<td>自动补全</td>
</tr>
<tr>
<td>ctrl+c</td>
<td>退出</td>
</tr>
<tr>
<td>ctrl+L</td>
<td>清屏</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="mongo-shell查询方法"><a href="#mongo-shell查询方法" class="headerlink" title="mongo shell查询方法"></a>mongo shell查询方法</h3><p>在mongo shell中，使用<code>find()</code>和<code>findOne()</code>方法执行读操作。</p>
<table>
<thead>
<tr>
<th>read-operations</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>db.collection.find(&lt;query&gt;)</code></td>
<td>查找集合中与<query>匹配的文档，如果未指定<query>或为空，则读取操作会选择集合中的所有文档</query></query></td>
</tr>
<tr>
<td><code>db.collection.find(&lt;query&gt;, &lt;projection&gt;)</code></td>
<td>查找与<query>匹配的文档，返回<projection>特定字段</projection></query></td>
</tr>
<tr>
<td><code>db.collection.find().sort(&lt;sort order&gt;)</code></td>
<td>返回<sort order="">排序结果</sort></td>
</tr>
<tr>
<td><code>db.collection.find(&lt;query&gt;).sort(&lt;sort order&gt;)</code></td>
<td>返回匹配<query>和<sort order="">排序结果</sort></query></td>
</tr>
<tr>
<td><code>db.collection.find(...).limit(&lt;n&gt;)</code></td>
<td>限制输出结果为<n>行</n></td>
</tr>
<tr>
<td><code>db.collection.find().pretty().limit()</code></td>
<td>匹配，格式化，限制输出</td>
</tr>
<tr>
<td><code>db.collection.find().limit().pretty()</code></td>
<td>同上</td>
</tr>
<tr>
<td><code>db.collection.find(...).skip(&lt;n&gt;)</code></td>
<td>跳过前<n>行</n></td>
</tr>
<tr>
<td><code>db.collection.count()</code></td>
<td>返回集合中文档总数</td>
</tr>
<tr>
<td><code>db.collection.find().count()</code></td>
<td>返回匹配文档总数</td>
</tr>
<tr>
<td><code>db.collection.findOne(&lt;query&gt;)</code></td>
<td>查找并返回单一的文档，null表示未找到</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="管理命令助手"><a href="#管理命令助手" class="headerlink" title="管理命令助手"></a>管理命令助手</h3><table>
<thead>
<tr>
<th>js db-administrative-methods</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>db.cloneDatabase(&lt;host&gt;)</code></td>
<td>从指定主机克隆当前数据库，noauth mode</td>
</tr>
<tr>
<td><code>db.copyDatabase(&lt;from&gt;, &lt;to&gt;, &lt;host&gt;)</code></td>
<td>copy <from>db to <to>db</to></from></td>
</tr>
<tr>
<td><code>db.fromColl.renameCollection(&lt;toColl&gt;)</code></td>
<td>rename collection</td>
</tr>
<tr>
<td><code>db.repairDatabase()</code></td>
<td>修复当前db</td>
</tr>
<tr>
<td><code>db.dropDatabases()</code></td>
<td>删除当前数据库</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="打开附加连接"><a href="#打开附加连接" class="headerlink" title="打开附加连接"></a>打开附加连接</h3><p>可以在mongo shell中创建一个新连接。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;db = connect(<span class="string">"&lt;host&gt;:&lt;port&gt;/&lt;db&gt;"</span>)</div><div class="line">#db = connect("192.168.1.11/admin")</div><div class="line"></div><div class="line">&gt;conn = <span class="keyword">new</span> Mongo()</div><div class="line">&gt;db = conn.getDB(<span class="string">"dbname"</span>)</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<hr>
<h1 id="MongoDB-CRUD操作"><a href="#MongoDB-CRUD操作" class="headerlink" title="MongoDB CRUD操作"></a>MongoDB CRUD操作</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.mongoing.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoDB官方文档&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mongoing.com/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoDB中文文档&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/MongoDB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zh.wikipedia.org/wiki/MongoDB&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ywnds.com/?p=5635&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ywnds.com/?p=5635&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.centos.bz/2017/08/mongodb-secure-intro-user-auth/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.centos.bz/2017/08/mongodb-secure-intro-user-auth/&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.03sec.com/3176.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.03sec.com/3176.shtml&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ywnds.com/?p=6502&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ywnds.com/?p=6502&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/the-little-mongodb-book/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wiki.jikexueyuan.com/project/the-little-mongodb-book/&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7_x64；&lt;/li&gt;
&lt;li&gt;MongoDB3.4；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Database" scheme="https://zhang21.github.io/categories/Database/"/>
    
    
      <category term="MongoDB" scheme="https://zhang21.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求方法和状态码</title>
    <link href="https://zhang21.github.io/2017/12/01/HTTP-method-status/"/>
    <id>https://zhang21.github.io/2017/12/01/HTTP-method-status/</id>
    <published>2017-12-01T05:53:20.000Z</published>
    <updated>2017-12-04T06:42:32.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见HTTP请求方法"><a href="#常见HTTP请求方法" class="headerlink" title="常见HTTP请求方法"></a>常见HTTP请求方法</h1><p>HTTP协议的请求方法有：<code>GET, POST, HEAD PUT DELETE, OPTIONS, TRACE, CONNECT</code></p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>向Server请求文件</td>
</tr>
<tr>
<td>POST</td>
<td>向Server发送数据并让Server进行处理</td>
</tr>
<tr>
<td>PUT</td>
<td>向Server发送数据并存储在Server端</td>
</tr>
<tr>
<td>HEAD</td>
<td>检查一个对象是否存在</td>
</tr>
<tr>
<td>DELETE</td>
<td>从Server上删除一个文件</td>
</tr>
<tr>
<td>CONNECT</td>
<td>对通道提供支持</td>
</tr>
<tr>
<td>TRACE</td>
<td>跟踪到Server的路径</td>
</tr>
<tr>
<td>OPTION</td>
<td>查询Server的性能</td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h1 id="HTTP-Status-Code"><a href="#HTTP-Status-Code" class="headerlink" title="HTTP Status Code"></a>HTTP Status Code</h1><p>当我们从Client向Server发送请求时，Server会向我们返回StatusCode。<br>StatusCode会告诉我们Server的响应的状态，通过它，我们就可以知道当前请求是成功还是出现了问题。</p>
<p>HTTP StatusCode放置在HTTP  Response报文中。</p>
<p>StatusCode由三位数字组成，第一个数字定义了响应类型，有五种可能值：</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>响应类别</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx</td>
<td>指示信息</td>
<td>服务器正在处理请求</td>
</tr>
<tr>
<td>2xx</td>
<td>成功</td>
<td>请求以正常处理完毕</td>
</tr>
<tr>
<td>3xx</td>
<td>重定向</td>
<td>需要进行额外操作以完成请求</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端错误</td>
<td>客户端原因导致服务器无法处理请求</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器错误</td>
<td>服务器原因导致处理请求出错</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="常见HTTP状态码"><a href="#常见HTTP状态码" class="headerlink" title="常见HTTP状态码"></a>常见HTTP状态码</h2><table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>200-OK</td>
<td>服务器成功返回网页，这是成功的HTTP请求返回的标准状态码</td>
</tr>
<tr>
<td>301 - Moved Permanently</td>
<td>永久跳转，所有请求的网页将永久跳转到被设定的新位置</td>
</tr>
<tr>
<td>400 - Bad Request</td>
<td>客户端请求有语法错误，不能被服务器理解</td>
</tr>
<tr>
<td>403 - Forbidden</td>
<td>禁止访问，这个请求时合法的，但是服务器端因为匹配了预先设置的规则而拒绝响应客户端的请求，此类问题一般为服务器权限配置不当所致</td>
</tr>
<tr>
<td>404 - Not Found</td>
<td>服务器找不到客户端请求的指定页面，可能是客户端请求了服务器不存在的资源所导致</td>
</tr>
<tr>
<td>500 - Internal Server Error</td>
<td>内部服务器错误，服务器遇到了意料不到的情况，不能完成客户的请求。这是一个较为笼统的报错，一般为服务器的设置或内部程序问题所致</td>
</tr>
<tr>
<td>502 - Bad Gateway</td>
<td>坏的网关，一般是代理服务器请求后端服务器时，后端服务不可用或没有完成响应网关服务器。一般为代理服务器下面的节点出了问题</td>
</tr>
<tr>
<td>503 - Service Unavailable</td>
<td>服务当前不可用，可能为服务器超载或停机维护所致，或者是代理服务器后面没有可以提供服务的节点</td>
</tr>
<tr>
<td>504 - Gateway Timeout</td>
<td>网关超时，一般是网关代理服务器请求后端服务时，后端服务没有在特定的时间内完成处理请求，一般为服务器过载所致，没有在指定的时间内返回数据给代理服务器</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h2><p>1xx（临时响应），表示临时响应并需要请求者继续执行操作。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>100 - Continue</td>
<td>请求者应当继续提出请求</td>
</tr>
<tr>
<td>101 - Switching Protocols</td>
<td>请求者要求服务器更换协议，服务器已确认并准备更换</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><p>2xx（成功），表示成功处理了请求。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>200 - OK</td>
<td>Server已成功处理了请求</td>
</tr>
<tr>
<td>201 - Created</td>
<td>请求成功并且Server创建了新的资源</td>
</tr>
<tr>
<td>202 - Accepted</td>
<td>Server以接受请求，但尚未处理</td>
</tr>
<tr>
<td>203 - Non-Authoritative Information</td>
<td>Server已成功处理了请求，但返回的信息可能来自另一个来源</td>
</tr>
<tr>
<td>204 - No Content</td>
<td>Server成功处理了请求，但没有返回任何内容</td>
</tr>
<tr>
<td>205 - Reset Content</td>
<td>没有新的内容，但浏览器应该重置它所显示的内容</td>
</tr>
<tr>
<td>206 - Partial Content</td>
<td>服务器成功处理了部分GET请求</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><p>3xx（重定向），表示要完成请求需要进一步操作。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>300 - Multiple Choices</td>
<td>针对请求，Server可执行多种操作</td>
</tr>
<tr>
<td>301 - Moved Permanently</td>
<td>请求的网页已移动到新位置</td>
</tr>
<tr>
<td>302 - Found</td>
<td>Server目前从不同位置的网页响应请求</td>
</tr>
<tr>
<td>303 - See Other</td>
<td>请求者对不同位置使用单独的GET请求来检索时</td>
</tr>
<tr>
<td>304 - Not Modified</td>
<td>自从上次请求后，请求的网页内容未修改过</td>
</tr>
<tr>
<td>305 - Use Proxy</td>
<td>请求者只能使用代理访问请求的网页</td>
</tr>
<tr>
<td>307 - Temporary Redirect</td>
<td>Server从不同位置的网页响应请求，但请求者继续使用原有位置进行请求</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h3><p>4xx（请求错误），表示请求可能出错，妨碍了Server的处理。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>400 - Bad Request</td>
<td>Server不理解请求的语法</td>
</tr>
<tr>
<td>401 - Unauthorized</td>
<td>请求要求身份认证</td>
</tr>
<tr>
<td>403 - Forbidden</td>
<td>Server拒绝请求</td>
</tr>
<tr>
<td>404 - Not Found</td>
<td>Server找不到请求的网页</td>
</tr>
<tr>
<td>405 - Method Not Allowed</td>
<td>请求方法不被允许</td>
</tr>
<tr>
<td>406 - Not Acceptable</td>
<td>无法使用请求的恩日工特性响应请求的网页</td>
</tr>
<tr>
<td>407 - Proxy Authentication Required</td>
<td>请求需要代理授权</td>
</tr>
<tr>
<td>408 - Request Timeout</td>
<td>Server等候请求时超时</td>
</tr>
<tr>
<td>409 - Conflict</td>
<td>Server在完成请求时发生冲突</td>
</tr>
<tr>
<td>410 - Gone</td>
<td>请求的资源以永久删除</td>
</tr>
<tr>
<td>411 - Length Required</td>
<td>Server不接受不含有效内容长度Header的请求</td>
</tr>
<tr>
<td>412 - Precondition Failed</td>
<td>Server为满足请求者在请求中设置的一个前提条件</td>
</tr>
<tr>
<td>413 – Request Entity Too Large</td>
<td>请求实体太大，Server无法处理</td>
</tr>
<tr>
<td>414 - Request URI Too Long</td>
<td>请求的URI过长，Server无法处理</td>
</tr>
<tr>
<td>415 – 不支持的媒体类型</td>
<td>请求的格式不受支持</td>
</tr>
<tr>
<td>416 – Requested Range Not Satisfiable</td>
<td>页面无法提供请求的范围</td>
</tr>
<tr>
<td>417 – 执行失败</td>
<td>Server未满足期望请求Header的要求</td>
</tr>
<tr>
<td>451</td>
<td>基于法律上的的原因，不能像请求者展示网页内容</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h3><p>5xx（服务器错误），表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>500 - Internal Server Error</td>
<td>Server遇到错误，无法完成请求</td>
</tr>
<tr>
<td>501 - Not Implemented</td>
<td>Server不具备完成请求的功能</td>
</tr>
<tr>
<td>502 - Bad Gateway</td>
<td>Server作为网关或代理时，从upstream收到无效响应</td>
</tr>
<tr>
<td>503 - Service Unavailable</td>
<td>Server暂时无法使用</td>
</tr>
<tr>
<td>504 - Gateway Timeout</td>
<td>Server作为网关或代理时，没有及时从upstream收到请求</td>
</tr>
<tr>
<td>505 - HTTP Version Not Supported</td>
<td>Server不支持请求中所用的HTTP版本</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常见HTTP请求方法&quot;&gt;&lt;a href=&quot;#常见HTTP请求方法&quot; class=&quot;headerlink&quot; title=&quot;常见HTTP请求方法&quot;&gt;&lt;/a&gt;常见HTTP请求方法&lt;/h1&gt;&lt;p&gt;HTTP协议的请求方法有：&lt;code&gt;GET, POST, HEAD PUT DELETE, OPTIONS, TRACE, CONNECT&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="https://zhang21.github.io/categories/Network/"/>
    
    
      <category term="HTTP" scheme="https://zhang21.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Filesystem Hierarchy Standard</title>
    <link href="https://zhang21.github.io/2017/11/27/FHS/"/>
    <id>https://zhang21.github.io/2017/11/27/FHS/</id>
    <published>2017-11-27T08:42:33.000Z</published>
    <updated>2017-12-08T06:54:59.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FHS介绍"><a href="#FHS介绍" class="headerlink" title="FHS介绍"></a>FHS介绍</h1><p>FHS(Filesystem Hierarchy Standard)，文件系统层次化标准：<a href="http://www.pathname.com/fhs" target="_blank" rel="external">http://www.pathname.com/fhs</a></p>
<p><br><br>FHS主要目的是希望让用户了解安装文件通常放置的目录。所以希望软件开发商、系统制定者以及维护系统的用户，都能够遵循FHS的标准。</p>
<p><strong>FHS-compliant system：</strong></p>
<table>
<thead>
<tr>
<th>-</th>
<th>可分享的(shareable)</th>
<th>不可分享的(unshareable)</th>
</tr>
</thead>
<tbody>
<tr>
<td>不变的(static)</td>
<td>/usr <br> /opt</td>
<td>/etc <br> /boot</td>
</tr>
<tr>
<td>可变的(variable)</td>
<td>/var/mail <br> /var/spool/news</td>
<td>/var/run <br> /var/lock</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<ul>
<li>shareable： 可分享给其他系统(主机)挂载使用；</li>
<li>unshareable： 不适合分享给其他主机；</li>
<li>static： 有些数据基本是不会变化的；</li>
<li>variable： 进程变更的数据。</li>
</ul>
<p><br><br>FHS针对目录树架构仅定义出三层目录下应该放置什么数据，这三个目录下所应该放置的目录也都有特定规定。</p>
<ul>
<li><code>/</code>： The root filesystem, 与开机系统有关；</li>
<li><code>/usr</code>: The /usr hierarchy, Unix software resource；</li>
<li><code>/var</code>: The /var hierarchy, 与系统运行过程有关。</li>
</ul>
<p><br><br><br></p>
<h1 id="The-Root-Filesystem"><a href="#The-Root-Filesystem" class="headerlink" title="The Root Filesystem"></a>The Root Filesystem</h1><p><strong>根目录(/)</strong>是系统最重要的一个目录。不但所有目录都是由根目录衍生出来，同时根目录还与<strong>系统的启动、还原、修复</strong>等操作相关。<br>若系统出现问题，根目录必须要包含能够修复文件系统的程序才行。<br>破坏根文件系统上的数据的错误比破坏其他任何分区都要严重！</p>
<p>为了平衡这些考虑，建议尽可能保持根分区小。<br>应用程序不应在根目录中创建特殊文件或子目录！</p>
<p><br><br>The following dirs or symbolic-links, are required in /</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/bin</code></td>
<td>必要的二进制命令</td>
</tr>
<tr>
<td><code>/boot</code></td>
<td>boot-loader的静态文件</td>
</tr>
<tr>
<td><code>/dev</code></td>
<td>设备文件</td>
</tr>
<tr>
<td><code>/etc</code></td>
<td>主机特定的系统配置文件</td>
</tr>
<tr>
<td><code>/lib</code></td>
<td>基本的共享库(shared libraries)和内核模块(kernel modules)</td>
</tr>
<tr>
<td><code>/media</code></td>
<td>可移除媒体的挂载点</td>
</tr>
<tr>
<td><code>/mnt</code></td>
<td>临时挂载文件系统的挂载点</td>
</tr>
<tr>
<td><code>/opt</code></td>
<td>第三方软件包放置目录</td>
</tr>
<tr>
<td><code>/sbin</code></td>
<td>必要的系统二进制命令</td>
</tr>
<tr>
<td><code>/srv</code></td>
<td>系统提供的服务数据</td>
</tr>
<tr>
<td><code>/tmp</code></td>
<td>临时文件</td>
</tr>
<tr>
<td><code>/usr</code></td>
<td>/usr层次结构</td>
</tr>
<tr>
<td><code>/var</code></td>
<td>/var层次结构</td>
</tr>
</tbody>
</table>
<p><br><br>除了上面列出必须存在的目录，下面这些目录很也很重要。</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/lost+found</code></td>
<td>在ext文件系统里，当文件系统发生错误时，将一些遗失的片段放置到此目录下</td>
</tr>
<tr>
<td><code>/home</code></td>
<td>用户家目录</td>
</tr>
<tr>
<td><code>/root</code></td>
<td>root用户家目录</td>
</tr>
<tr>
<td><code>/proc</code></td>
<td>虚拟文件系统，放置的数据都在内存当中，不占磁盘空间</td>
</tr>
<tr>
<td><code>/sys</code></td>
<td>虚拟文件系统，记录内核相关信息，不占磁盘空间</td>
</tr>
</tbody>
</table>
<p><br><br>另外需要注意的是，因为根目录与开机有关，开机过程中仅有根目录被挂载。其他分区则是在开机完成后才会持续进行挂载。<br>因此，根目录下与开机过程有关的目录就不能放到不同的分区中去。</p>
<p>如：</p>
<ul>
<li><code>/etc</code></li>
<li><code>/bin</code></li>
<li><code>/sbin</code></li>
<li><code>/dev</code></li>
<li><code>/lib</code></li>
</ul>
<p><br></p>
<h2 id="bin"><a href="#bin" class="headerlink" title="/bin"></a>/bin</h2><p><code>/bin</code>, 基本用户二进制命令文件，供所有用户（系统管理员和用户）使用。</p>
<p><code>/bin</code>下不能有子目录(subdirectory)。</p>
<p><br><br>The following commands or symbolic-links to commands, are required in /bin</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>cat</code></td>
<td>将文件连接到stdout的实用程序(Utility)</td>
</tr>
<tr>
<td><code>chgrp</code></td>
<td>更改文件所有权</td>
</tr>
<tr>
<td><code>chmod</code></td>
<td>更改文件访问权限</td>
</tr>
<tr>
<td><code>chown</code></td>
<td>更改文件所有者和和组</td>
</tr>
<tr>
<td><code>cp</code></td>
<td>复制文件和目录</td>
</tr>
<tr>
<td><code>date</code></td>
<td>打印或设置系统数据和时间</td>
</tr>
<tr>
<td><code>dd</code></td>
<td>转换和复制文件</td>
</tr>
<tr>
<td><code>df</code></td>
<td>磁盘使用情况</td>
</tr>
<tr>
<td><code>dmesg</code></td>
<td>打印或控制kernel消息缓冲区</td>
</tr>
<tr>
<td><code>echo</code></td>
<td>显示一行文本</td>
</tr>
<tr>
<td><code>false</code></td>
<td>do nothing, 不成功</td>
</tr>
<tr>
<td><code>true</code></td>
<td>do nothing, 成功</td>
</tr>
<tr>
<td><code>hostname</code></td>
<td>系统主机名</td>
</tr>
<tr>
<td><code>kill</code></td>
<td>发送信号到进程</td>
</tr>
<tr>
<td><code>ln</code></td>
<td>在文件之间创建链接</td>
</tr>
<tr>
<td><code>login</code></td>
<td>在系统上开始会话</td>
</tr>
<tr>
<td><code>ls</code></td>
<td>列出目录内容</td>
</tr>
<tr>
<td><code>mkdir</code></td>
<td>创建目录</td>
</tr>
<tr>
<td><code>mknod</code></td>
<td>创建block或character特殊文件</td>
</tr>
<tr>
<td><code>more</code></td>
<td>文本翻页</td>
</tr>
<tr>
<td><code>mount</code></td>
<td>挂载文件系统</td>
</tr>
<tr>
<td><code>umount</code></td>
<td>解挂文件系统</td>
</tr>
<tr>
<td><code>mv</code></td>
<td>move/rename文件</td>
</tr>
<tr>
<td><code>ps</code></td>
<td>报告进程状态</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td>打印当前工作目录</td>
</tr>
<tr>
<td><code>rm</code></td>
<td>remove文件或目录</td>
</tr>
<tr>
<td><code>sed</code></td>
<td>sed流编辑器</td>
</tr>
<tr>
<td><code>sh</code></td>
<td>Bourne command shell</td>
</tr>
<tr>
<td><code>stty</code></td>
<td>更改或打印终端设置</td>
</tr>
<tr>
<td><code>su</code></td>
<td>change uid</td>
</tr>
<tr>
<td><code>sync</code></td>
<td>刷新文件系统缓冲区</td>
</tr>
<tr>
<td><code>uname</code></td>
<td>打印系统信息</td>
</tr>
</tbody>
</table>
<p><br><br>The following programs or symbolic-links to programs, must be in /bin if the corresponding-system is installed:</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>csh</code></td>
<td>The C shell(可选)</td>
</tr>
<tr>
<td><code>ed</code></td>
<td>编辑器(可选)</td>
</tr>
<tr>
<td><code>tar</code></td>
<td>tar归档(可选)</td>
</tr>
<tr>
<td><code>cpio</code></td>
<td>cpio归档(可选)</td>
</tr>
<tr>
<td><code>gzip</code></td>
<td>GNU压缩工具(可选)</td>
</tr>
<tr>
<td><code>gunzip</code></td>
<td>GNU解压缩工具(可选)</td>
</tr>
<tr>
<td><code>netstat</code></td>
<td>网络统计(可选)</td>
</tr>
<tr>
<td><code>ping</code></td>
<td>ICMP网络测试(可选)</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="boot"><a href="#boot" class="headerlink" title="/boot"></a>/boot</h2><p><code>/boot</code> :static file of the boot-loader</p>
<p>该目录包含引导过程所需所有内容，处理引导是不需要的配置文件和映射安装文件外。<br>因此，/boot储存kernel开始执行用户模式之前使用的数据。</p>
<p><strong><br>操作系统kernel必须位于 / or /boot</strong></p>
<p><br></p>
<h2 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h2><p><code>/dev</code> :device files</p>
<p><code>/dev</code> 目录是特殊或设备文件的位置。</p>
<p><br></p>
<h2 id="etc"><a href="#etc" class="headerlink" title="/etc"></a>/etc</h2><p><code>/etc</code> :host-specific system configuration</p>
<p>配置文件是用来控制程序操作的本地静态文件，不能是可执行的二进制文件。</p>
<p><br><br>The following files or symbolic-links to files, must be in /etc if the corresponding-subsystem is installed.</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>csh.login</td>
<td>C shell登录的系统范围初始化文件</td>
<td>Optional</td>
</tr>
<tr>
<td>exports</td>
<td>NFS文件系统访问控制列表</td>
<td>Optional</td>
</tr>
<tr>
<td>fstab</td>
<td>文件系统静态信息</td>
<td>Optional</td>
</tr>
<tr>
<td>ftpusers</td>
<td>FTP守护进程用户访问控制列表</td>
<td>Optional</td>
</tr>
<tr>
<td>gateways</td>
<td>路由网关文件</td>
<td>Optional</td>
</tr>
<tr>
<td>gettydefs</td>
<td>getty终端设置</td>
<td>Optional</td>
</tr>
<tr>
<td>group</td>
<td>用户组文件</td>
<td>Optional</td>
</tr>
<tr>
<td>passwd</td>
<td>密码文件</td>
<td>Optional</td>
</tr>
<tr>
<td>host.conf</td>
<td>解析器配置文件</td>
<td>Optional</td>
</tr>
<tr>
<td>hosts</td>
<td>主机域名的静态信息</td>
<td>Optional</td>
</tr>
<tr>
<td>hosts.allow</td>
<td>Tcp-wrapper的主机访问文件</td>
<td>Optional</td>
</tr>
<tr>
<td>hosts.deny</td>
<td>Tcp-wrapper的主机禁止文件</td>
<td>Optional</td>
</tr>
<tr>
<td>hosts.equiv</td>
<td>rlogin, rsh, rcp的可信主机列表</td>
<td>Optional</td>
</tr>
<tr>
<td>hosts.lpd</td>
<td>lpd的可信主机列表</td>
<td>Optional</td>
</tr>
<tr>
<td>inetd.conf</td>
<td>inetd配置文件</td>
<td>Optional</td>
</tr>
<tr>
<td>inittab</td>
<td>init配置文件</td>
<td>inittab is no longer used when using systemd</td>
</tr>
<tr>
<td>id.so.conf</td>
<td>搜索共享库的额外目录</td>
<td>Optional</td>
</tr>
<tr>
<td>issue</td>
<td>预登录消息和</td>
<td>CentOS Linux 7(core) kernel \r on an \m</td>
</tr>
<tr>
<td>motd</td>
<td>登录后信息</td>
<td>Welcome to $host</td>
</tr>
<tr>
<td>mtab</td>
<td>文件系统动态信息</td>
<td>Optional</td>
</tr>
<tr>
<td>mtools.conf</td>
<td>mtools配置文件</td>
<td>Optional</td>
</tr>
<tr>
<td>networks</td>
<td>网络名称的静态信息</td>
<td>Optional</td>
</tr>
<tr>
<td>printcap</td>
<td>lpd打印机功能数据库</td>
<td>Optional</td>
</tr>
<tr>
<td>profile</td>
<td>sh shell login的系统范围初始化文件</td>
<td>Optional</td>
</tr>
<tr>
<td>protocols</td>
<td>IP协议列表</td>
<td>Optional</td>
</tr>
<tr>
<td>resolv.conf</td>
<td>域名服务器解析文件</td>
<td>Optional</td>
</tr>
<tr>
<td>rpc</td>
<td>RPC协议列表</td>
<td>Optional</td>
</tr>
<tr>
<td>securetty</td>
<td>root登录的TTY访问控制</td>
<td>Optional</td>
</tr>
<tr>
<td>shells</td>
<td>有效登录shell的路径名</td>
<td>Optional</td>
</tr>
<tr>
<td>syslog.conf</td>
<td>syslogd配置文件</td>
<td>Optional</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="etc-opt"><a href="#etc-opt" class="headerlink" title="/etc/opt"></a>/etc/opt</h2><p>/etc/opt :/opt的配置文件</p>
<p>第三方应用程序软件的特定主机配置文件，必须安装在/etc/opt/<subdir> 中。</subdir></p>
<p><br></p>
<h2 id="etc-xml"><a href="#etc-xml" class="headerlink" title="/etc/xml"></a>/etc/xml</h2><p><code>/etc/xml</code> :XML的配置文件</p>
<p>这里安装和定义XML系统的高级参数同通用配置文件。</p>
<p><br></p>
<h2 id="home-Optional"><a href="#home-Optional" class="headerlink" title="/home (Optional)"></a>/home (Optional)</h2><p><code>/home</code> :用户主目录</p>
<p><code>/home</code>是一个相当标准的概念，但它显然是一个特定于站点的文件系统。设置会因主机而异。<br>因此，任何程序都不应该依赖这个目录。</p>
<p><br></p>
<h2 id="lib"><a href="#lib" class="headerlink" title="/lib"></a>/lib</h2><p><code>/lib</code> :基本的共享库和内核模块</p>
<p><code>/lib</code>目录中包含引导系统和运行在根文件系统的命令，即<code>/bin</code>和<code>/sbin</code>中的命令。</p>
<p><br><br>至少需要包含以下文件(链接)：</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>libc.so.*</code></td>
<td>动态链接C库</td>
</tr>
<tr>
<td><code>ld*</code></td>
<td>执行时间 链接器/加载器</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="lib-Optional"><a href="#lib-Optional" class="headerlink" title="/lib (Optional)"></a>/lib<qual> (Optional)</qual></h2><p><code>/lib&lt;qual&gt;</code> : 不同格式的基本共享函数库<br>如：64位的<code>/lib64</code>; 32位的<code>/lib32</code>。</p>
<p>用来存放与/lib不同格式的二进制函数库，如支持64位的/lib64函数库等。</p>
<p><br></p>
<h2 id="media"><a href="#media" class="headerlink" title="/media"></a>/media</h2><p><code>/media</code> :可移除媒体的挂载点</p>
<p>此目录包含的子目录，可作为各移动介质(USB,cdrom,floppy…)的挂载点。</p>
<p>尽管在 /mnt 中使用子目录作为挂载点已经很常见了，但与直接使用/mnt作为临时挂载点的传统相去甚远。</p>
<p><br></p>
<h2 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a>/mnt</h2><p><code>/mnt</code> :临时挂载文件系统的挂载点</p>
<p><br></p>
<h2 id="opt"><a href="#opt" class="headerlink" title="/opt"></a>/opt</h2><p><code>/opt</code> :为第三方软件包保留的目录</p>
<p>要安装在<code>/opt</code>中的软件包必须将其静态文件放置在单独的<code>/opt/&lt;packge&gt;</code>目录树中。</p>
<p>目录/opt/bin, /opt/doc, /opt/include, /opt/info, /opt/lib, /opt/man 是保留给本地系统管理员使用。<br>如果第三方软件包含Unix手册，而手册必须放置于/opt/<package>/share/man/，必须使用与/usr/share/man相同的子结构。</package></p>
<p><br></p>
<h2 id="root-Optional"><a href="#root-Optional" class="headerlink" title="/root (Optional)"></a>/root (Optional)</h2><p><code>/root</code> :root用户的主目录</p>
<p><br></p>
<h2 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a>/sbin</h2><p><code>/sbin</code> :系统二进制文件</p>
<p>系统管理的实用程序(命令)，存储在<code>/sbin, /usr/sbin, /usr/local/sbin</code>中。<br><code>/sbin</code>包含<strong>启动，恢复，修复</strong>系统，以及<code>/bin</code>中二进制文件所必须的二进制文件。<br>本地安装的系统管理程序应放置在<code>/usr/local/sbin</code>中。</p>
<p><br><br>The following commands or symbolic-links to commands are required in /sbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shutdown		#关闭系统</div></pre></td></tr></table></figure></p>
<p><br><br>The following files or symbolic-links to files，must be in /sbin if the corresponding subsystem is installed</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fastboot</code></td>
<td>重启系统而不检查磁盘</td>
<td>Optional</td>
</tr>
<tr>
<td><code>fasthalt</code></td>
<td>停止系统而不检查磁盘</td>
<td>Optional</td>
</tr>
<tr>
<td><code>fdisk</code></td>
<td>分区表操作器</td>
<td>Optional</td>
</tr>
<tr>
<td><code>fsck</code></td>
<td>文件系统检查和修理工具</td>
<td>Optional</td>
</tr>
<tr>
<td><code>fsck.*</code></td>
<td>针对特定文件系统检查和修复</td>
<td>Optional<br>eg：fsck.ext3</td>
</tr>
<tr>
<td><code>getty</code></td>
<td>getty程序</td>
<td>Optional</td>
</tr>
<tr>
<td><code>half</code></td>
<td>停止系统</td>
<td>Optional</td>
</tr>
<tr>
<td><code>ifconfig</code></td>
<td>配置网络接口</td>
<td>Optional</td>
</tr>
<tr>
<td><code>init</code></td>
<td>初始化进程</td>
<td>Optional</td>
</tr>
<tr>
<td><code>mkfs</code></td>
<td>创建文件系统</td>
<td>Optional</td>
</tr>
<tr>
<td><code>mkfs.*</code></td>
<td>创建特定文件系统</td>
<td>OPtional<br>eg: mkfs.ext4</td>
</tr>
<tr>
<td><code>mkswap</code></td>
<td>设置swap分区</td>
<td>OPtional</td>
</tr>
<tr>
<td><code>reboot</code></td>
<td>重启系统</td>
<td>OPtional</td>
</tr>
<tr>
<td><code>route</code></td>
<td>IP路由表实用程序</td>
<td>OPtional</td>
</tr>
<tr>
<td><code>swapon</code></td>
<td>启用分页和交换</td>
<td>OPtional</td>
</tr>
<tr>
<td><code>swapoff</code></td>
<td>Disable paging and swapping</td>
<td>Optional</td>
</tr>
<tr>
<td><code>update</code></td>
<td>守护进程定期刷新文件系统缓冲区</td>
<td>Optional</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="srv"><a href="#srv" class="headerlink" title="/srv"></a>/srv</h2><p><code>/srv</code> :系统提供的服务(service)的数据</p>
<p><br></p>
<h2 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h2><p><code>/tmp</code> :临时文件</p>
<p><code>/tmp</code>目录为临时需要文件的程序提供。<br>程序不能在程序的调用之间保留/tmp中的任何文件或目录。<br>尽管/tmp中数据可能会以某种特定方式删除，但建议在系统启动时删除/tmp中所有文件。</p>
<p><br><br><br></p>
<h1 id="The-usr-Hierarchy"><a href="#The-usr-Hierarchy" class="headerlink" title="The /usr Hierarchy"></a>The /usr Hierarchy</h1><p><code>/usr</code> 里面放置的数据是可分享与不可变动的。<br>这就意味着可在各种符合FHS的主机之间共享，但不能写入。<br>大型软件包不应在/usr层次结构下使用直接子目录。</p>
<p><br><br>The following dirs of symbolic-links to dirs are required in /usr</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/usr/bin</code></td>
<td>大多数用户命令</td>
</tr>
<tr>
<td><code>/usr/include</code></td>
<td>C程序包含的头文件</td>
</tr>
<tr>
<td><code>/usr/lib</code></td>
<td>库文件</td>
</tr>
<tr>
<td><code>/usr/local</code></td>
<td>本地层次结构</td>
</tr>
<tr>
<td><code>/usr/sbin</code></td>
<td>非重要的系统二进制文件</td>
</tr>
<tr>
<td><code>/usr/share</code></td>
<td>独立于架构的数据</td>
</tr>
</tbody>
</table>
<p>其他选项：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/usr/lib&lt;qual&gt;</code></td>
<td>可选格式库</td>
<td>Optional</td>
</tr>
<tr>
<td><code>/usr/src</code></td>
<td>源代码</td>
<td>OPtional</td>
</tr>
<tr>
<td><code>/usr/games</code></td>
<td>游戏和教育二进制文件</td>
<td>OPtional</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="usr-bin"><a href="#usr-bin" class="headerlink" title="/usr/bin"></a>/usr/bin</h2><p><code>/usr/bin</code> :大多数用户命令<br>这是系统上可执行命令的主要目录。</p>
<p><br><br>The following files or symbolic-links to files must be in /usr/bin, if the corresponding subsystem is installed</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>perl</code></td>
<td>实用提取和报告语言</td>
<td>OPtional</td>
</tr>
<tr>
<td><code>python</code></td>
<td>python解释语言</td>
<td>Optional</td>
</tr>
<tr>
<td><code>tclsh</code></td>
<td>tcl解释器的简单shell</td>
<td>OPtional</td>
</tr>
<tr>
<td><code>wish</code></td>
<td>简单 tcl/tk windowing shell</td>
<td>Optional</td>
</tr>
<tr>
<td><code>expect</code></td>
<td>程序交互式对话</td>
<td>Optional</td>
</tr>
</tbody>
</table>
<p>因为shell script解释器(在shell script脚本的第一行 #!<path></path>)不能依赖路径，所以标准化它们的位置是有利的。<br>Bourne shell 和 C-shell解释器已经被固定在/bin中，但 perl,python,tcl经常在许多不同的地方。</p>
<p><br></p>
<h2 id="usr-include"><a href="#usr-include" class="headerlink" title="/usr/include"></a>/usr/include</h2><p><code>/usr/include</code> :标准C包含文件的目录</p>
<p>这是C语言所有系统的通用包含文件应该被放置的地方。</p>
<p><br></p>
<h2 id="usr-lib"><a href="#usr-lib" class="headerlink" title="/usr/lib"></a>/usr/lib</h2><p><code>/usr/lib</code> :编程和包的所需要的库</p>
<p><code>/usr/lib</code>包括 不打算由用户或shell script直接执行的目标文件、库和内部二进制文件。</p>
<p><br></p>
<h2 id="usr-lib-Optional"><a href="#usr-lib-Optional" class="headerlink" title="/usr/lib (Optional)"></a>/usr/lib<qual> (Optional)</qual></h2><p><code>/usr/lib&lt;qual&gt;</code> :可选格式库</p>
<p><br></p>
<h2 id="usr-local"><a href="#usr-local" class="headerlink" title="/usr/local"></a>/usr/local</h2><p><code>/usr/local</code> :本地层次结构</p>
<p><code>/usr/local</code>是给系统管理员安装本地软件使用。当系统软件更新时，需保证安全。<br>它可以用于在一组主机之间共享，但在 <code>usr</code>中找不到的程序和数据。</p>
<p>本地安装软件必须放在 <code>/usr/local</code> 而不是 <code>/usr</code>，除非安装它来升级或替换<code>usr</code>的软件</p>
<p><br><br>The following dirs or symbolic-links to dis must be in <code>/usr/local</code></p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/usr/local/bin</code></td>
<td>本地二进制文件</td>
</tr>
<tr>
<td><code>/usr/local/etc</code></td>
<td>本地二进制文件的特定配置文件</td>
</tr>
<tr>
<td><code>/usr/local/games</code></td>
<td>本地游戏二进制文件</td>
</tr>
<tr>
<td><code>/usr/local/include</code></td>
<td>本地C头文件</td>
</tr>
<tr>
<td><code>/usr/local/lib</code></td>
<td>本地库</td>
</tr>
<tr>
<td><code>/usr/local/man</code></td>
<td>本地在线手册</td>
</tr>
<tr>
<td><code>/usr/local/sbin</code></td>
<td>本地系统二进制文件</td>
</tr>
<tr>
<td><code>/usr/local/share</code></td>
<td>本地独立架构层次结构</td>
</tr>
<tr>
<td><code>/usr/local/src</code></td>
<td>本地源码</td>
</tr>
</tbody>
</table>
<p><code>/usr/local/share</code>目录内容的要求应与<code>/usr/share</code>相同，唯一附加约束是<code>/usr/local/share/man</code>和<code>/usr/local/man</code>目录必须是同步的。（基本上就是符号链接了！）</p>
<p><br></p>
<h2 id="usr-sbin"><a href="#usr-sbin" class="headerlink" title="/usr/sbin"></a>/usr/sbin</h2><p><code>/usr/sbin</code> :非必要的标准系统二进制文件</p>
<p>该目录包含系统管理员专门使用的任何非必要的二进制文件。<br>系统修复、恢复、挂载/usr等其他重要必要功能必须放在/sbin中。</p>
<p><br></p>
<h2 id="usr-share"><a href="#usr-share" class="headerlink" title="/usr/share"></a>/usr/share</h2><p><code>/usr/share</code> :独立于架构的数据</p>
<p><code>/usr/share</code>层次 是为了所有只读架构独立数据。<br>该层次可以在给定OS的所有体系架构平台之间共享。如具有i386和PPC平台站点可能会维护一个集中安装的/usr/share目录。<br>但<code>/usr/share</code>一般不打算由不同的操作系统共享，或由同一操作系统的不同版本共享。</p>
<p><br><br>The following dis or symbolic-links to dirs must be in /usr/share</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>man</td>
<td>在线手册</td>
</tr>
<tr>
<td>misc</td>
<td>其他独立于架构的数据</td>
</tr>
</tbody>
</table>
<p><br><br>The following dis or symbolic-links to dirs must be in /usr/share, if the corresponding subsystem is installed</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>dict</td>
<td>单词列表</td>
<td>Optional</td>
</tr>
<tr>
<td>doc</td>
<td>各种文档</td>
<td>Optional</td>
</tr>
<tr>
<td>games</td>
<td>/usr/games的静态文件</td>
<td>Optional</td>
</tr>
<tr>
<td>info</td>
<td>GNU Info system’s primary dir</td>
<td>Optional</td>
</tr>
<tr>
<td>locale</td>
<td>支持的区域信息</td>
<td>Optional</td>
</tr>
<tr>
<td>zoneinfo</td>
<td>Timezone info and conf</td>
<td>Optional</td>
</tr>
<tr>
<td>NLS</td>
<td>Native language support</td>
<td>Optional</td>
</tr>
<tr>
<td>sgml</td>
<td>SGML数据</td>
<td>Optional</td>
</tr>
<tr>
<td>terminfo</td>
<td>terminfo数据库目录</td>
<td>Optional</td>
</tr>
<tr>
<td>xml</td>
<td>xml数据</td>
<td>Optional</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="usr-share-dict"><a href="#usr-share-dict" class="headerlink" title="/usr/share/dict"></a>/usr/share/dict</h3><p><code>/usr/share/dict</code> :单词列表<br>这个目录是系统上单词列表的家目录，只包含英文单词，它们由<code>look</code>和各种拼写程序使用。<br>它们是所有拼写检查器唯一通用的文件。</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>words</td>
<td>单词列表</td>
<td>Optional</td>
</tr>
<tr>
<td>linu.words</td>
<td>linux可用单词列表</td>
<td>Optional</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="usr-share-man"><a href="#usr-share-man" class="headerlink" title="/usr/share/man"></a>/usr/share/man</h3><p><code>/usr/share/man</code> :手册页<br>它包含了<code>/</code>, <code>/usr</code>文件系统下的命令和数据的手册信息</p>
<p>手册页存储在 <code>/usr/share/man/&lt;locale&gt;/man&lt;section&gt;/&lt;arch&gt;</code>中。</p>
<p>每个部分的描述：</p>
<ul>
<li>man1: 可公开访问的命令的手册页，用户需要使用的大多数程序文档放置于此；</li>
<li>man2: 系统调用部分，描述所有的系统调用(请求内核执行操作)；</li>
<li>man3: 函数库和子例程部分，描述不直接调用内核服务的程序库例程；</li>
<li>man4: 特定文件部分，描述系统中特定文件，相关驱动程序和网络支持。通常，这包含/dev中找到的设备以及网络协议支持的内核接口；</li>
<li>man5: 文件格式部分，许多数据文件的格式记录在此；</li>
<li>man6: 游戏，演示和一般小程序；</li>
<li>man7: 各种难以分类的手册页；</li>
<li>man8: 系统管理员用于操作和维护系统的程序记录在这。</li>
</ul>
<p><br><br>The following dirs or symboli-link to dirs must be in <code>/usr/share/man/&lt;locale&gt;</code>, unless they are empty</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>man1</td>
<td>用户程序</td>
<td>Optional</td>
</tr>
<tr>
<td>man2</td>
<td>系统调用</td>
<td>Optional</td>
</tr>
<tr>
<td>man3</td>
<td>函数库调用</td>
<td>Optional</td>
</tr>
<tr>
<td>man4</td>
<td>特定文件</td>
<td>Optional</td>
</tr>
<tr>
<td>man5</td>
<td>文件格式</td>
<td>Optional</td>
</tr>
<tr>
<td>man6</td>
<td>游戏</td>
<td>Optional</td>
</tr>
<tr>
<td>man7</td>
<td>混杂的手册页</td>
<td>Optional</td>
</tr>
<tr>
<td>man8</td>
<td>系统管理</td>
<td>Optional</td>
</tr>
</tbody>
</table>
<p><br><br>必须在<code>/usr/share/man</code>结构中作出规定，以支持用不同语言编写的手册页。这些规定必须考虑到手册页的存储和参考，相关因素包括语言和字符编码集。</p>
<p>栗子：</p>
<table>
<thead>
<tr>
<th>Language</th>
<th>Country</th>
<th>CharacterSet</th>
<th>Dir</th>
</tr>
</thead>
<tbody>
<tr>
<td>English</td>
<td>-</td>
<td>ASCII</td>
<td>/usr/share/man/en</td>
</tr>
<tr>
<td>English</td>
<td>United Kingdom</td>
<td>ISO 8859-15</td>
<td>/usr/share/man/en_GB</td>
</tr>
<tr>
<td>English</td>
<td>United States</td>
<td>ASCII</td>
<td>/usr/share/man/en_US</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="usr-share-misc"><a href="#usr-share-misc" class="headerlink" title="/usr/share/misc"></a>/usr/share/misc</h3><p><code>/usr/share/misc</code> :与架构无关的数据</p>
<p><br></p>
<h3 id="usr-share-sgml"><a href="#usr-share-sgml" class="headerlink" title="/usr/share/sgml"></a>/usr/share/sgml</h3><p><code>/usr/share/sgml</code> :SGML数据</p>
<p><br></p>
<h3 id="usr-share-xml"><a href="#usr-share-xml" class="headerlink" title="/usr/share/xml"></a>/usr/share/xml</h3><p><code>/usr/share/xml</code> :XML数据</p>
<p><br></p>
<h2 id="usr-src"><a href="#usr-src" class="headerlink" title="/usr/src"></a>/usr/src</h2><p><code>/usr/src</code> :源代码<br>Source Code可能放置在此目录的子目录中，仅供参考。</p>
<p><br><br><br></p>
<h1 id="var-Hierarchy"><a href="#var-Hierarchy" class="headerlink" title="/var Hierarchy"></a>/var Hierarchy</h1><p><code>/var</code> 包含可变数据文件，包括假脱机目录和文件，系统管理和登录数据，以及临时文件。</p>
<p>如果<code>/var</code>不能成为一个单独的分区，最好将<code>/var</code>移出<code>/</code>分区并移入<code>/usr</code>分区。（为了减小根分区大小或当根分区空间不足时）<br>也可将<code>/var</code>链接到<code>/usr/var</code>。</p>
<p><br><br>The following dirs or symbolic-link to dirs are required in <code>/var</code>.</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/var/cache</code></td>
<td>应用程序缓存数据</td>
</tr>
<tr>
<td><code>/var/lib</code></td>
<td>可变状态信息</td>
</tr>
<tr>
<td><code>/var/local</code></td>
<td>/usr/local的可变数据</td>
</tr>
<tr>
<td><code>/var/lock</code></td>
<td>锁文件</td>
</tr>
<tr>
<td><code>/var/log</code></td>
<td>日志文件</td>
</tr>
<tr>
<td><code>/var/opt</code></td>
<td>/opt的可变数据</td>
</tr>
<tr>
<td><code>/var/run</code></td>
<td>与运行进程相关的数据</td>
</tr>
<tr>
<td><code>/var/spool</code></td>
<td>应用程序队列数据</td>
</tr>
<tr>
<td><code>/var/tmp</code></td>
<td>为系统重启保留的临时文件</td>
</tr>
</tbody>
</table>
<p><br><br>The following dirs or symbolic-link to dir must be in /var,if the corresponding subsystem is installed.</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/var/account</code></td>
<td>进程账户日志</td>
<td>可选</td>
</tr>
<tr>
<td><code>/var/crash</code></td>
<td>系统奔溃转储</td>
<td>可选</td>
</tr>
<tr>
<td><code>/var/games</code></td>
<td>可变游戏数据</td>
<td>可选</td>
</tr>
<tr>
<td><code>/var/mail</code></td>
<td>用户邮箱文件</td>
<td>可选</td>
</tr>
<tr>
<td><code>/var/yp</code></td>
<td>网络信息服务数据库文件</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="var-account"><a href="#var-account" class="headerlink" title="/var/account"></a>/var/account</h2><p><code>/var/account</code> :该目录保存当前活动的进程记账日志和复合进程数据。</p>
<p><br></p>
<h2 id="var-cache"><a href="#var-cache" class="headerlink" title="/var/cache"></a>/var/cache</h2><p><code>/var/cache</code> :保存应用程序缓存的数据。应用程序必须能够重新生成或回复数据。<br>与<code>/var/spool</code>不同，删除了缓存文件不会丢失数据。数据必须在应用程序调用和系统重启间保持有效。<br>缓存目录的数据格式没有其他要求。</p>
<p>对于缓存数据单独存在的目录，系统管理员可从<code>/var</code>下其他目录设备不同的磁盘和备份策略。</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/var/cache/fonts</code></td>
<td>本地生成的字体</td>
<td>可选</td>
</tr>
<tr>
<td><code>/var/cache/man</code></td>
<td>本地格式化的手册页</td>
<td>可选</td>
</tr>
<tr>
<td><code>/var/cache/www</code></td>
<td>www代理或缓存数据</td>
<td>可选</td>
</tr>
<tr>
<td><code>/var/cache/&lt;package&gt;</code></td>
<td>特定包缓存数据</td>
<td>可选</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="var-lib"><a href="#var-lib" class="headerlink" title="/var/lib"></a>/var/lib</h2><p><code>/var/lib</code> :可变状态信息。目录保存于应用程序或系统有关的状态信息。<br>状态信息(state infofmation)，是程序在运行时修改的数据，属于一个特定的主机。</p>
<p>应用程序必须为其数据使用<code>/var/lib/&lt;subdir&gt;</code>，有一个必须的子目录<code>/var/lib/misc</code>用于不需要子目录的状态文件。</p>
<p><br></p>
<h2 id="var-lock"><a href="#var-lock" class="headerlink" title="/var/lock"></a>/var/lock</h2><p><code>/var/lock</code> :锁文件，锁文件应该存储在此目录中。<br>锁文件锁定多个应用程序共享的设备和其他资源。</p>
<p>这种锁文件内容的格式必须是HDB UUCP锁文件格式。<br>HDB格式是将进程标识符(PID)存储为ASCII十进制数，并带有换行符。</p>
<p><br></p>
<h2 id="var-log"><a href="#var-log" class="headerlink" title="/var/log"></a>/var/log</h2><p><code>/var/log</code> :日志文件和目录，大多数日志必须写入此目录或适当子目录。</p>
<p><br><br>The following file or symbolic-link to file must be in /var/log.</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>lastlog</td>
<td>每个用户上次登录信息的记录</td>
</tr>
<tr>
<td>message</td>
<td>syslogd的系统信息</td>
</tr>
<tr>
<td>wtmp</td>
<td>所有登录和注销的记录</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="var-mail"><a href="#var-mail" class="headerlink" title="/var/mail"></a>/var/mail</h2><p>邮件缓存区必须通过<code>/var/mail</code>访问，邮件缓冲区文件必须采用<username>的形式。</username></p>
<p><br></p>
<h2 id="var-run"><a href="#var-run" class="headerlink" title="/var/run"></a>/var/run</h2><p><code>/var/run</code> :运行时变化数据，此目录包含系统信息数据，描述系统启动以来的情况。<br>此目录下的文件必须在引导过程开始时被清除。<br>进程标识符(PID)文件放置于此目录或下的子目录里面。</p>
<p><br></p>
<h2 id="var-spool"><a href="#var-spool" class="headerlink" title="/var/spool"></a>/var/spool</h2><p><code>/var/spool</code> :应用程序队列数据。<br>此目录包含正在等待某种稍后处理的数据，/var/spool中的数据表示工作将在将来执行(通过程序，用户或管理员)，数据通常会在工作处理后被删除。</p>
<p><br><br>The following dirs or symbolic-link to dirs must be in /var/spool,if the corresponding subsystem is installed.</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>lpd</td>
<td>打印机队列目录</td>
<td>可选</td>
</tr>
<tr>
<td>mqueue</td>
<td>发送邮件队列</td>
<td>可选</td>
</tr>
<tr>
<td>news</td>
<td>新闻假脱机目录</td>
<td>可选</td>
</tr>
<tr>
<td>rwho</td>
<td>rwhod文件</td>
<td>可选</td>
</tr>
<tr>
<td>uucp</td>
<td>uucp的假脱机目录</td>
<td>可选</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="var-tmp"><a href="#var-tmp" class="headerlink" title="/var/tmp"></a>/var/tmp</h2><p><code>/var/tmp</code> :在系统重启之间保存的临时文件。存储在<code>/var/tmp</code>的数据比<code>/tmp</code>中的数据更持久。</p>
<p><br><br><br></p>
<h1 id="OS-Specific-Annex"><a href="#OS-Specific-Annex" class="headerlink" title="OS Specific Annex"></a>OS Specific Annex</h1><p>本节是针对仅适用于特定OS的其他建议和要求。</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>Linux操作系统的附件</p>
<h3 id="根目录"><a href="#根目录" class="headerlink" title="/ :根目录"></a>/ :根目录</h3><p>在Linux系统上，如果内核位于<code>/</code>，建议使用Linux内核源代码包中使用的名称<strong>vmlinux或vmlinuz</strong>。</p>
<p>我的<code>CentOS7</code>中，内核文件默认是<code>/boot/vmlinuz-$kernel-version.$arch</code></p>
<p><br></p>
<h3 id="bin-基本用户命令二进制文件-供多有用户使用"><a href="#bin-基本用户命令二进制文件-供多有用户使用" class="headerlink" title="/bin :基本用户命令二进制文件(供多有用户使用)"></a>/bin :基本用户命令二进制文件(供多有用户使用)</h3><p><br></p>
<h3 id="dev-设备和特殊文件"><a href="#dev-设备和特殊文件" class="headerlink" title="/dev :设备和特殊文件"></a>/dev :设备和特殊文件</h3><ol>
<li><code>/dev/null</code> :<br> 写入该设备的所有数据都被丢弃。从这个设备读取将返回一个EOF条件。</li>
<li><code>/dev/zero</code> :<br> 该设备是归零数据的来源，写入该设备的所有数据被丢弃。从这个设备读取将返回包含zero的请求的字节数。</li>
<li><code>/dev/tty</code> :<br> 该设备类似于进程控制终端。一旦这个设备被打开，所有读写操作就好像实际的控制终端以及被打开一样。</li>
</ol>
<p><br></p>
<h3 id="etc-主机的特定系统配置"><a href="#etc-主机的特定系统配置" class="headerlink" title="/etc :主机的特定系统配置"></a>/etc :主机的特定系统配置</h3><p>Linux系统要将附件文件放置到<code>/etc</code>中。</p>
<p><br></p>
<h3 id="lib64-和-lib32-64-32位库-依赖于体系结构"><a href="#lib64-和-lib32-64-32位库-依赖于体系结构" class="headerlink" title="/lib64 和 /lib32 :64/32位库(依赖于体系结构)"></a>/lib64 和 /lib32 :64/32位库(依赖于体系结构)</h3><p>64位体系结构PPC64,AMD64,x86_64必须将64位库放置于<code>/lib64</code>中，将32位库放置于<code>/lib</code>中；<br>64位体系结构IA64必须将64位库放置于<code>/lib</code>中。</p>
<p><br></p>
<h3 id="proc-内核和进程信息虚拟文件系统"><a href="#proc-内核和进程信息虚拟文件系统" class="headerlink" title="/proc :内核和进程信息虚拟文件系统"></a>/proc :内核和进程信息虚拟文件系统</h3><p>PROC文件系统是用于处理进程和系统信息的标准Linux方法，而不是/dev/kmem和其它类似方法。<br>强烈建议使用PROC文件系统获取 存储，进程，内存，内核等信息。</p>
<p><br></p>
<h3 id="sbin-基本系统二进制文件"><a href="#sbin-基本系统二进制文件" class="headerlink" title="/sbin :基本系统二进制文件"></a>/sbin :基本系统二进制文件</h3><p>Linux系统将这些附加文件放置于<code>/sbin</code>中：</p>
<p><strong>第二扩展文件系统命令（可选）：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">badblocks</div><div class="line">dumpe2fs</div><div class="line">e2fsck</div><div class="line">mke2fs</div><div class="line">mklost+found</div><div class="line">tune2fs</div></pre></td></tr></table></figure>
<p><strong>boot-loader 映射安装程序（可选）：</strong><br><code>lilo</code></p>
<p><strong>静态二进制文件：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ldconfig</div><div class="line">sln(static ln)</div><div class="line">ssync(static sync)</div></pre></td></tr></table></figure>
<blockquote>
<p>出现问题时，sln（静态ln）和ssync（静态同步）非常有用；<br>idconfig程序可以作为升级知道的手段；<br>sln的主要用途，修复不良协调升级后/lib中不正确的符号链接动态库。</p>
</blockquote>
<p>对于/sbin, idconfig二进制文件是可选的。因为站点可能会在启动时选择运行idconfig而不是仅在升级共享库时。<br>以下是一些常见问题：</p>
<ul>
<li>我刚刚删除了/lib/<file>；</file></li>
<li>我无法找到库的名称，因为<code>ls</code>是动态链接。我使用的shell没有内置<code>ls</code>，我也不知道使用<code>echo *</code>作为替换；</li>
<li>我有一个静态ln，但我不知道怎么称呼这个链接。</li>
</ul>
<p><strong>杂项：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#ctrl+alt+del</div><div class="line">ctrlaltdel</div><div class="line"></div><div class="line">#keyboard rate</div><div class="line">kbdrate</div></pre></td></tr></table></figure>
<p>为了应对某些键盘出现如此高的重复速率一致无法使用,<code>kbdrate</code>可以安装在某些系统上的<code>/sbin</code>中；</p>
<p>由于<code>ctrl+alt+del</code>组合键在内核中的默认操作是<strong>硬重启</strong>，因此通常建议在将根文件系统挂在到读写模式之前禁用该行为。这就可能需要<code>ctrlaltdel</code>程序，它可以安装在系统的<code>/sbin</code>中。</p>
<p><br></p>
<h2 id="usr-include-C程序包含的头文件"><a href="#usr-include-C程序包含的头文件" class="headerlink" title="/usr/include :C程序包含的头文件"></a>/usr/include :C程序包含的头文件</h2><p>如果安装了C或C++编译器，则只有非 基于glibc的系统才需要这些链接符号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/include/asm  -&gt; /usr/src/linux/include/asm-&lt;arch&gt;</div><div class="line">/usr/include/linux  -&gt; /usr/src/linux/include/linux</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="usr-src-源代码"><a href="#usr-src-源代码" class="headerlink" title="/usr/src :源代码"></a>/usr/src :源代码</h2><p>对于基于glibc的系统，此目录没有具体指导。</p>
<p>对于glibc之前基于linux libc修订版的系统： <code>/usr/src/linux</code>是唯一放置Linux内核源代码的位置。</p>
<p><br></p>
<h2 id="usr-spool-cron-cron和jobs"><a href="#usr-spool-cron-cron和jobs" class="headerlink" title="/usr/spool/cron :cron和jobs"></a>/usr/spool/cron :cron和jobs</h2><p>此目录包含了cron和程序的可变数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FHS介绍&quot;&gt;&lt;a href=&quot;#FHS介绍&quot; class=&quot;headerlink&quot; title=&quot;FHS介绍&quot;&gt;&lt;/a&gt;FHS介绍&lt;/h1&gt;&lt;p&gt;FHS(Filesystem Hierarchy Standard)，文件系统层次化标准：&lt;a href=&quot;http://www.pathname.com/fhs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.pathname.com/fhs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;FHS主要目的是希望让用户了解安装文件通常放置的目录。所以希望软件开发商、系统制定者以及维护系统的用户，都能够遵循FHS的标准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FHS-compliant system：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;可分享的(shareable)&lt;/th&gt;
&lt;th&gt;不可分享的(unshareable)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;不变的(static)&lt;/td&gt;
&lt;td&gt;/usr &lt;br&gt; /opt&lt;/td&gt;
&lt;td&gt;/etc &lt;br&gt; /boot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可变的(variable)&lt;/td&gt;
&lt;td&gt;/var/mail &lt;br&gt; /var/spool/news&lt;/td&gt;
&lt;td&gt;/var/run &lt;br&gt; /var/lock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="FHS" scheme="https://zhang21.github.io/tags/FHS/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix</title>
    <link href="https://zhang21.github.io/2017/11/14/Zabbix/"/>
    <id>https://zhang21.github.io/2017/11/14/Zabbix/</id>
    <published>2017-11-14T02:18:09.000Z</published>
    <updated>2017-12-04T06:41:25.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zabbix简介"><a href="#Zabbix简介" class="headerlink" title="Zabbix简介"></a>Zabbix简介</h1><p><a href="https://www.zabbix.com/" target="_blank" rel="external">Zabbix官方网站</a><br><a href="https://www.zabbix.com/documentation/3.4/zh/manual/" target="_blank" rel="external">Zabbix中文文档</a><br>Zabbix-repo仓库：<repo.zabbix.com>， 阿里云上也有镜像！</repo.zabbix.com></p>
<p>本文系统环境是CentOS7x86_64, Zabbix 3.4。</p>
<p>Zabbix （音同 zæbix），是由 Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。Zabbix 的授权是属于 GPLv2。<br>Zabbix可用于监视各种网络服务、服务器和网络机器等状态。是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。<br>Zabbix也可经由SNMP、TCP、ICMP、SSH等对目标进行监视。<br><a id="more"></a></p>
<p><br></p>
<h2 id="Zabbix的系统构成"><a href="#Zabbix的系统构成" class="headerlink" title="Zabbix的系统构成"></a>Zabbix的系统构成</h2><p>Zabbix系统由以下各独立模块组成：</p>
<ul>
<li>Zabbix Server，服务端(以C开发)。Server端通过收集SNMP和Agent发送的数据，写入数据库，再通过PHP+Apache在Web端展示；</li>
<li>Zabbix Agent，客户端(基本支持所有操作系统)，并将监控主机数据发送给Server；</li>
<li>Zabbix Frontend，Web管理端(以PHP和JavaScript构成)；</li>
<li>Zabbix Proxy(可选组件)。用于分布式监控。</li>
</ul>
<p><br></p>
<h2 id="Zabbix的特点"><a href="#Zabbix的特点" class="headerlink" title="Zabbix的特点"></a>Zabbix的特点</h2><p>Zabbix是一个高度集成的网络监控解决方案，一个简单的安装包中提供多样性功能。</p>
<ul>
<li>数据收集；</li>
<li>灵活的阀值(触发器)定义；</li>
<li>高度可配置化的告警；</li>
<li>实现图表绘制；</li>
<li>Web监控功能；</li>
<li>丰富的可视化选项；</li>
<li>历史数据存储；</li>
<li>配置简单；</li>
<li>使用模板；</li>
<li>网络发现；</li>
<li>Zabbix API；</li>
<li>权限管理系统；</li>
<li>功能强大并易于扩展的监控代理。</li>
</ul>
<p><br><br><br></p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>Zabbix的常用术语含义。</p>
<p><strong>主机(host)：</strong><br>一台你想监控的网络设备，用IP或域名表示。</p>
<p><strong>主机组(host group):</strong><br>主机的逻辑组，它包含主机和模板。</p>
<p><strong>监控项(item):</strong><br>你想要接收的主机的特定数据，一个度量数据。</p>
<p><strong>触发器(trigger):</strong><br>一个被用于定义问题阀值和评估监控项接收到的数据的逻辑表达式。</p>
<p><strong>事件(event):</strong><br>单次发生的需要注意的事情。</p>
<p><strong>异常(problem):</strong><br>一个处在异常状态的触发器。</p>
<p><strong>动作(action):</strong><br>一个对事件作出反应的预定义的操作。</p>
<p><strong>升级(escalation):</strong><br>一个在动作内执行操作的自定义场景。</p>
<p><strong>媒介(media):</strong><br>发送报警通知的手段。</p>
<p><strong>通知(notification):</strong><br>利用已选择的媒体途径把事情相关信息发送给用户。</p>
<p><strong>远程命令(remote command):</strong><br>预先定义好的，满足一定条件后，可在被监控主机上自动执行的命令。</p>
<p><strong>模板(template):</strong><br>一组可以被应用到一个或多个主机上的实体的集合。</p>
<p><strong>应用(application):</strong><br>一组监控项组成的逻辑分组。</p>
<p><strong>Web场景(Web scenario):</strong><br>利用一个或多个HTTP请求来检查网站的可用性。</p>
<p><strong>前端(frontend):</strong><br>Zabbix提供的Web界面。</p>
<p><strong>Zabbix API:</strong><br>Zabbix API允许你使用JSON RPC协议来创建、更新和获取Zabbix对象信息或执行任何其他的自定义的任务。</p>
<p><strong>Zabbix server:</strong><br>Zabbix软件监控的核心程序，主要功能是与Zabbix proxies和agent进行交互、触发器计算、发送告警通知，并将数据集中保存等。</p>
<p><strong>Zabbix agent:</strong><br>部署在监控对象上，能够主动监控本地资源和应用。</p>
<p><strong>Zabbix proxy:</strong><br>帮助Zabbix server收集数据，分担Zabbix server的负载。</p>
<p><br><br><br></p>
<h1 id="Zabbix进程"><a href="#Zabbix进程" class="headerlink" title="Zabbix进程"></a>Zabbix进程</h1><h2 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h2><p>zabbix agent部署在监控的目标上，主动监测本地的资源和应用（硬件驱动，内存，处理器统计等）。<br>zabbix agent手机本地的操作信息并将数据报告给zabbix server用于进一步处理。</p>
<p>zabbix agent有被动(passive)和主动(active)两种检查方式。</p>
<p><br></p>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>zabbix server是zabbix软件的核心程序。它通过轮询和捕获数据，计算是否满足触发器条件，向用户发送通知。<br>它是zabbix监控代理和Proxy代理报告系统可用性和完整性数据的核心组件。zabbix server自身可以通过简单远程检查网络服务(如Web服务器和邮件服务器)。</p>
<p>server是一个包含了被存储了所有配置，统计方面的和可操作数据的中央仓库，它是监控系统问题升级以致于激活警告管理器的zabbix中的实体。</p>
<p>基本的zabbix server分三个不同的组件：<strong>zabbix server，web前端，数据库存储</strong>。<br>zabbix的所有配置信息都存储在服务器和web前端进行交互的数据库中。</p>
<p>zabbix server进程是以守护进程（Daemon）运行的。</p>
<p><br></p>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>zabbix proxy是一个可以从一个或多个受监控的设备设备收集监控数据，并将信息发送到zabbix server的进程，基本上是代表server工作。<br>所有收集的数据都在本地进行缓存，然后传送到proxy所属的zabbix server。</p>
<p>zabbix proxy是完成远程区域、分支机构、没有本地管理员的网络的集中监控的理想解决方案。</p>
<p>zabbix proxy需要使用独立的数据库，以守护进程的方式运行。</p>
<p><br></p>
<h2 id="Java-gateway"><a href="#Java-gateway" class="headerlink" title="Java gateway"></a>Java gateway</h2><p>zabbix守护进程原生支持监控JMX程序，它被称为zabbix java gateway。zabbix gateway是用Java语言写成。</p>
<p>要查得一台主机特定的JMX计数器值，zabbix server向zabbix java gateway发送请求，后者使用JMX管理API去请求远程的有关应用。应用不许额外安装软件，只需要启动时在命令行指定 <code>-Dcom.sun.management.jmxremote</code>即可（是在java程序）。</p>
<p>每个zabbix server或zabbix agent只能配置一个java gateway。</p>
<p><br></p>
<h2 id="Sender"><a href="#Sender" class="headerlink" title="Sender"></a>Sender</h2><p>zabbix sender是一种命令行应用，它可以将性能数据发送到zabbix server进行处理。该应用通常用在长时间运行的用户脚本，用于定期发送可用性和性能数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">zabbix_sender -z zabbix -s &quot;xxx&quot; -k db.connections -0 43</div><div class="line"></div><div class="line">-z :server主机</div><div class="line">-s :受监控主机的技术名称</div><div class="line">-k :监控项的键</div><div class="line">-o :要发送的值</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><p>zabbix get也是一种命令行应用，用于与zabbix agent进行通信，并从agent那里获取所需的信息。<br>该应用通常被用于zabbix agent故障排除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zabbix_get -s $host -p xxx -k system.cpu.load[all,avg15]</div><div class="line"></div><div class="line">-s  --host</div><div class="line">-p --port</div><div class="line">-I --source-address</div><div class="line">-k --key</div><div class="line">-h --help</div><div class="line">-V --version</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="安装Zabbix"><a href="#安装Zabbix" class="headerlink" title="安装Zabbix"></a>安装Zabbix</h1><h2 id="Zabbix安装要求"><a href="#Zabbix安装要求" class="headerlink" title="Zabbix安装要求"></a>Zabbix安装要求</h2><p><strong>硬件：</strong></p>
<ul>
<li>内存，最小128MB；</li>
<li>磁盘，最小256MB；</li>
<li>CPU，可能需要大量CPU资源；</li>
<li>SMS(短信)通知服务，串行通讯口(serial communication port)和串口GSM调制解调器(serial GSM modem)。可选项。</li>
</ul>
<p><strong>支持平台：</strong></p>
<ul>
<li>Linux;</li>
<li>IBM AIX;</li>
<li>FreeBSD;</li>
<li>NetBSD;</li>
<li>OpenBSD;</li>
<li>Mac OS X;</li>
<li>Solaris;</li>
<li>Windows(Only Agent).</li>
</ul>
<p><strong>软件：</strong><br>Zabbix基于Apache Web服务器、领先的数据库引擎和PHP脚本语言进行构建。</p>
<p><strong>数据库管理系统：</strong></p>
<ul>
<li>MySQL 5.0.3 及以上；</li>
<li>Oracle 10g 及以上；</li>
<li>PostgreSQL 8.1 及以上；</li>
<li>SQLite 3.5及以上；</li>
<li>IBM DB2 9.7 及以上。</li>
</ul>
<p><strong>前端：</strong></p>
<ul>
<li>Apache 1.3.12 及以上；</li>
<li>PHP 5.4.0及以上；</li>
</ul>
<p><strong>PHP-Extension:</strong></p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>gd</td>
<td>2.0及以上</td>
<td>PHP GD扩展包必须支持PNG图片</td>
</tr>
<tr>
<td>bcmatch</td>
<td></td>
<td>php-bcmatch</td>
</tr>
<tr>
<td>ctype</td>
<td></td>
<td>php-ctype</td>
</tr>
<tr>
<td>libXML</td>
<td>2.6.15及以上</td>
<td>php-xml</td>
</tr>
<tr>
<td>xmlreader</td>
<td></td>
<td>php-xmlreader</td>
</tr>
<tr>
<td>xmlwrite</td>
<td></td>
<td>php-xmlwriter</td>
</tr>
<tr>
<td>session</td>
<td></td>
<td>php-session</td>
</tr>
<tr>
<td>sockets</td>
<td></td>
<td>php-net-socket</td>
</tr>
<tr>
<td>mbstring</td>
<td></td>
<td>php-mbstring</td>
</tr>
<tr>
<td>gettext</td>
<td></td>
<td>php-gettext</td>
</tr>
<tr>
<td>ldap</td>
<td></td>
<td>php-ldap</td>
</tr>
<tr>
<td>mysqli</td>
<td></td>
<td>使用MySQL作为Zabbix后端数据库所需的组件</td>
</tr>
<tr>
<td>pgsql</td>
<td></td>
<td>使用PostgreSQL作为Zabbix后端数据库所需的组件</td>
</tr>
<tr>
<td>sqlite3</td>
<td></td>
<td>使用SQLite作为Zabbix后端数据库所需的组件</td>
</tr>
</tbody>
</table>
<p><strong>客户端浏览器：</strong><br>必须启用Cookie和JavaScript功能。</p>
<p><strong>服务器：</strong></p>
<table>
<thead>
<tr>
<th>要求</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>OpenlPMI</td>
<td>支持IPMI功能所需组件</td>
<td></td>
</tr>
<tr>
<td>libssh2</td>
<td>支持SSH功能</td>
<td></td>
</tr>
<tr>
<td>fping</td>
<td>支持ICMP ping功能</td>
<td></td>
</tr>
<tr>
<td>libcurl</td>
<td>支持Web监控，VMware监控及SMTP认证</td>
<td></td>
</tr>
<tr>
<td>libiksemel</td>
<td>支持Jabber功能</td>
<td></td>
</tr>
<tr>
<td>libxml2</td>
<td>支持VMware监控</td>
<td></td>
</tr>
<tr>
<td>net-snmp</td>
<td>支持SNMP监控</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Java网关：</strong><br>Java gateway编译和运行在Java 1.6 及以上版本。</p>
<p><strong>数据库容量：</strong><br>Zabbix配置数据需要使用固定的磁盘空间，而这个空间不会过多增长。</p>
<p>Zabbix数据库容量主要依赖于以下参数：</p>
<ul>
<li>每秒处理值的数量(Number of processed values per second);</li>
<li>历史(History)数据的回收清理设置(Housekeeper);</li>
<li>趋势(Trends)数据的回收清理设置(Housekeeper);</li>
<li>事件(Events)数据的回收清理设置(Housekeeper)。</li>
</ul>
<p><strong>时钟同步：</strong><br>对于Zabbix稳定运行而言，服务获取精确的系统时间是非常重要的。对于所有运行Zabbix组件的系统，强烈建议这些系统的时间保持同步。<br><code>ntpd</code>是一个临幸的用于同步主机和其他服务器之间的时间的后台程序。</p>
<p><br></p>
<h2 id="安装、启动、配置Zabbix"><a href="#安装、启动、配置Zabbix" class="headerlink" title="安装、启动、配置Zabbix"></a>安装、启动、配置Zabbix</h2><p>Zabbix-repo仓库：<a href="repo.zabbix.com">repo.zabbix.com</a><br>该仓库服务器同时提供<code>yum</code>和<code>apt</code>源码库。</p>
<h3 id="配置源码库"><a href="#配置源码库" class="headerlink" title="配置源码库"></a>配置源码库</h3><p><strong>1. 从官方下载源码库</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#rpm -ivh http://repo.zabbix.com/zabbix/$version/rhel/7/$arch/$zabbix-release.rpm</span></div><div class="line">rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-1.el7.centos.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment">#阿里云镜像</span></div><div class="line"><span class="comment">#rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-1.el7.noarch.rpm</span></div><div class="line"></div><div class="line"><span class="comment">#镜像失效的话自己去官网找</span></div></pre></td></tr></table></figure>
<p><strong>2. 手动配置zabbix.repo</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum.repos.d/zabbix.repo</div><div class="line"></div><div class="line">[zabbix]</div><div class="line">name=Zabbix-Repo</div><div class="line">baseurl=http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/</div><div class="line">gpgcheck=0</div><div class="line"><span class="built_in">enable</span>=1</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="安装Zabbix部署包"><a href="#安装Zabbix部署包" class="headerlink" title="安装Zabbix部署包"></a>安装Zabbix部署包</h3><p>使用MySQL数据库安装Zabbix Server、Web前端：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y zabbix-server-mysql zabbix-get</div></pre></td></tr></table></figure></p>
<p><strong>注意：此处Zabbix数据库使用MySQL，请自行安装MySQL。</strong></p>
<p>安装Zabbix Agent：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y zabbix-agent</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="安装初始化数据库"><a href="#安装初始化数据库" class="headerlink" title="安装初始化数据库"></a>安装初始化数据库</h3><p>查看刚刚安装的 <strong>zabbix-server-mysql</strong>：<br>解压得到的sql脚本<code>create.sql</code>只会在对应的数据库中初始化zabbix所需要的数据库表，但是不会创建zabbix数据库。所以后面我们还需要手动创建<code>zabbix</code>数据库。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rpm -ql zabbix-server-mysql</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /usr/share/doc/zabbix-server-mysql-3.x.xx/</div><div class="line"></div><div class="line"><span class="comment">#有一个create.sql.gz的压缩文件</span></div><div class="line">gunzip create.sql.gz</div><div class="line"><span class="comment">#得到create.sql</span></div></pre></td></tr></table></figure></p>
<p><strong>在MySQL中创建zabbix数据库：</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">msyql -uxxx -p</div><div class="line"></div><div class="line">mysql&gt;CREATE DATABASE <span class="string">'zabbix'</span> DEFAULT CHARACTER SET <span class="string">'utf8'</span>;</div><div class="line">mysql&gt;SHOW DATABASES;</div><div class="line">mysql&gt;GRANT ALL ON zabbix.* TO <span class="string">'zabbix'</span>@<span class="string">'localhost'</span> identified by <span class="string">'zabbix'</span>;</div><div class="line">mysql&gt;FLUSH PRIVILEGES;</div><div class="line"></div><div class="line"><span class="comment">#导入sql脚本</span></div><div class="line">mysql -uroot -p -Dzabbix &lt; ./create.sql</div><div class="line"></div><div class="line">USE zabbix;</div><div class="line">SHOW TABLES;</div></pre></td></tr></table></figure></p>
<p><br><br><img src="/images/zabbix_database.png" alt="zabbix-database alt=&quot;zabbix-database&quot;"></p>
<p><br></p>
<h3 id="配置zabbix-server并启动"><a href="#配置zabbix-server并启动" class="headerlink" title="配置zabbix server并启动"></a>配置zabbix server并启动</h3><p>编辑zabbix server配置文件：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">vim /etc/zabbix/zabbix_server.conf</div><div class="line"></div><div class="line"><span class="comment">#常会修改的参数</span></div><div class="line"></div><div class="line"><span class="comment">#数据库配置</span></div><div class="line">DBHost=localhost</div><div class="line">DBName=zabbix</div><div class="line">DBUser=zabbix</div><div class="line">DBPassword=zabbix</div><div class="line">DBPort=3306</div><div class="line">DBSocket=/var/lib/mysql/mysql.sock</div><div class="line"></div><div class="line"><span class="comment">#服务监听端口</span></div><div class="line">ListenPort=10051</div><div class="line"></div><div class="line"><span class="comment">#服务端源IP</span></div><div class="line">SourceIP=</div><div class="line"></div><div class="line"><span class="comment">#日志记录方式，file使用指定文件作为日志文件，system将日志发往syslog，console将日志发送控制台</span></div><div class="line">LogType=file</div><div class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_server.log</div></pre></td></tr></table></figure></p>
<p>启动zabbix服务端：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">systemctl start zabbix-server</div><div class="line"></div><div class="line"><span class="comment">#此处可能由于没有关闭SELinux而报错</span></div><div class="line">tail /var/<span class="built_in">log</span>/zabbix/zabbix_server.log</div><div class="line">cannot <span class="built_in">set</span> resource <span class="built_in">limit</span>: [13] Permission denied</div><div class="line"></div><div class="line"><span class="comment">#关闭SELinux</span></div><div class="line">setenforce=0</div><div class="line"></div><div class="line">vim /etc/selinux/config</div><div class="line">SELINUX=disabled</div><div class="line"></div><div class="line"><span class="comment">#查看zabbix-server默认监听的10051端口</span></div><div class="line">netstat -nltp</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="安装zabbix-web"><a href="#安装zabbix-web" class="headerlink" title="安装zabbix web"></a>安装zabbix web</h3><p>zabbix web可以安装在单独的主机上，只要能连接到zabbix database所在数据库就行。但为了方便，都安装在了server上。</p>
<p>zabbix web需要LAMP环境：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可能需要自己配置PHP remi源，注意PHP及扩展版本问题</span></div><div class="line">yum install -y httpd php php-mysql php-mbstring php-gd php-bcmatch php-ldap php-xml</div></pre></td></tr></table></figure></p>
<p>安装zabbix web所需的两个包：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install -y zabbix-web zabbix-web-mysql</div><div class="line"></div><div class="line">rpm -ql zabbix-web</div><div class="line"><span class="comment">#zabbix-web位于/usr/share/zabbix/</span></div></pre></td></tr></table></figure></p>
<h3 id="编辑zabbix的前端Apach-PHP配置文件"><a href="#编辑zabbix的前端Apach-PHP配置文件" class="headerlink" title="编辑zabbix的前端Apach-PHP配置文件"></a>编辑zabbix的前端Apach-PHP配置文件</h3><p>zabbix前端的Apache配置文件位于 /etc/httpd/conf.d/zabbix.conf:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">vim /etc/httpd/conf.d/zabbix.conf</div><div class="line"></div><div class="line"><span class="comment">#需修改时区</span></div><div class="line">php_value max_execution_time 300</div><div class="line">php_value memory_limit 128M</div><div class="line">php_value post_max_size 16M</div><div class="line">php_value upload_max_filesize 2M</div><div class="line">php_value max_input_time 300</div><div class="line">php_value always_populate_raw_post_data -1</div><div class="line">php_value date.timezone Asia/Shanghai</div><div class="line"></div><div class="line"><span class="comment">#建议顺便修改/etc/php.ini的时区</span></div><div class="line">vim /etc/php.ini</div><div class="line"></div><div class="line">date.timezone = Asia/Shanghai</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#添加httpd的虚拟主机访问zabbix web</span></div><div class="line">&lt;VirtualHost IP:80&gt;</div><div class="line">servername zabbix.me</div><div class="line">documentroot /usr/share/zabbix</div><div class="line"></div><div class="line">默认数据</div><div class="line"></div><div class="line">&lt;/VirtualHost&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#开启httpd服务</span></div><div class="line">systemctl start httpd</div></pre></td></tr></table></figure></p>
<p><br><br><img src="/images/zabbix_conf.png" alt="/etc/httpd/conf.d/zabbix.conf"></p>
<p><br><br>添加hosts后就可以利用域名访问zabbix-web端了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> -e <span class="string">"192.168.1.9 \t zabbix.me"</span> &gt;&gt; /etc/hosts</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="在web端配置zabbix"><a href="#在web端配置zabbix" class="headerlink" title="在web端配置zabbix"></a>在web端配置zabbix</h3><p>在浏览器访问 <a href="http://zabbix.me" target="_blank" rel="external">http://zabbix.me</a> 初始化zabbix配置。<br>配置好后就需要用账号密码进行登录zabbix-web端dashboard。</p>
<p>默认用户名是：admin，密码是配置文件里面设置的。<br><img src="/images/zabbix_me.png" alt="登录zabbix Dashboard"></p>
<p><br><br>登录进Dashboard后，可修改语言为中文。</p>
<p><img src="/images/dashboard.jpg" alt="Dashboard"></p>
<p><br><br><strong>如果你的Zabbix无法看到中文选项，那么可能需要如下操作：</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /usr/share/zabbix/include/locales.inc.php</div><div class="line"></div><div class="line"><span class="comment">#修改</span></div><div class="line"><span class="string">'zh_CN'</span> =&gt; [<span class="string">'name'</span> =&gt; _(<span class="string">'Chinese (zh_CN)'</span>),     <span class="string">'display'</span> =&gt; <span class="literal">true</span>],</div></pre></td></tr></table></figure></p>
<p><strong>如果又遇到中文乱码的问题，则可以从windows中挑选一些好看的中文字体，将对应字体文件放置到zabbix web的字体目录中。</strong><br>windows中字体后缀.TTF，Linux中为.ttf。注意修改大小写。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/share/zabbix/fonts</div><div class="line"><span class="comment">#只有一个默认字体 graphfont.ttf</span></div><div class="line"><span class="comment">#将新字体放置到此目录下</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#修改配置文件中对应字体名称</span></div><div class="line">vim /usr/share/zabbix/include/define.inc.php</div><div class="line"></div><div class="line"><span class="comment">#将默认字体名字修改为字体目录下 你需要的字体名</span></div><div class="line">define(<span class="string">'ZBX_FONT_NAME'</span>, <span class="string">'graphfont'</span>);</div><div class="line">define(<span class="string">'ZBX_GRAPH_FONT_NAME'</span>,           <span class="string">'graphfont'</span>); // font file name</div><div class="line"></div><div class="line"><span class="comment">#栗子，如perpetua字图PER.ttf</span></div><div class="line">define(<span class="string">'ZBX_FONT_NAME'</span>, <span class="string">'PER'</span>);</div><div class="line">define(<span class="string">'ZBX_GRAPH_FONT_NAME'</span>,           <span class="string">'PER'</span>); // font file name</div></pre></td></tr></table></figure></p>
<p><br><br>Zabbix Web界面菜单：<br><img src="/images/zabbix_menu.png" alt="zabbix菜单"></p>
<p><br></p>
<ul>
<li>管理菜单，用于管理zabbix自身及zabbix相关设置；</li>
<li>配置菜单，用于配置监控相关设置；</li>
<li>报表菜单，为管理员生成一段时间内的监控统计信息；</li>
<li>检测中菜单，用于查看被监控的相关数据；</li>
<li>资产记录菜单，查看被监控的主机有哪些，以及相关的资产信息。</li>
</ul>
<p><br></p>
<h2 id="安装zabbix-agent"><a href="#安装zabbix-agent" class="headerlink" title="安装zabbix agent"></a>安装zabbix agent</h2><p>Agent端安装也非常方便，直接在Client上安装两个包即可。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#配置zabbix源</span></div><div class="line">rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-1.el7.centos.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment">#aliyun镜像</span></div><div class="line"><span class="comment">#rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.4-1.el7.noarch.rpm</span></div><div class="line"></div><div class="line"><span class="comment">#安装</span></div><div class="line">yum install -y zabbix-agent zabbix-sender</div><div class="line"></div><div class="line">rpm -ql zabbix-agent</div><div class="line"><span class="comment">#/etc/zabbix/zabbix_agentd.conf</span></div></pre></td></tr></table></figure>
<p>zabbix的“主动模式”与“被动模式”都在<code>/etc/zabbix/zabbix_agentd.conf</code>中定义。<br>配置最常用的agent端：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">vim /etc/zabbix/zabbix_agentd.conf</div><div class="line"></div><div class="line"><span class="comment">####GENERAL PARAMETERS 通用配置</span></div><div class="line">PidFile=</div><div class="line">LogFile=</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">####Passive checks related 被动模式配置</span></div><div class="line"><span class="comment">#指定允许哪台服务器拉取本机数据</span></div><div class="line">Server=</div><div class="line"><span class="comment">#指定agent端工作于被动模式时监听的端口号</span></div><div class="line">ListenPort=10050(默认)</div><div class="line"><span class="comment">#指定agent端工作与被动模式时所监听的IP地址</span></div><div class="line">ListenIP=0.0.0.0(默认)</div><div class="line"><span class="comment">#指定预生成的agent进程数量</span></div><div class="line">StartAgents=</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">####Active checks related</span></div><div class="line"><span class="comment">#agent工作于主动模式时，将消息推送到哪台Server上</span></div><div class="line">ServerActive=IP1,IP2...</div><div class="line"><span class="comment">#指定当前主机主机名，Server端通过对应的主机名识别主机</span></div><div class="line">Hostname=</div><div class="line"><span class="comment">#指明agent端每隔多少秒将采集的数据发往Server端</span></div><div class="line">RefreshActiveChecks=</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#栗子</span></div><div class="line">Server=192.168.1.9</div><div class="line">ServerActive=192.168.1.9</div><div class="line">Hostname=zabbix.me</div></pre></td></tr></table></figure></p>
<p><br><br><strong>启动zabbix-agent</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl zabbix-agent start</div><div class="line"></div><div class="line"><span class="comment">#查看状态,默认端口10050</span></div><div class="line">netstat -nltp</div></pre></td></tr></table></figure></p>
<p><img src="/images/zabbix-agent.png" alt="zabbix-agent状态"></p>
<p><br><br><br></p>
<h1 id="快速开始zabbix-web菜单"><a href="#快速开始zabbix-web菜单" class="headerlink" title="快速开始zabbix-web菜单"></a>快速开始zabbix-web菜单</h1><p>zabbix-web界面中包含有<strong>监测中、资产记录、报表、配置、管理</strong>五项菜单。</p>
<p><br></p>
<h2 id="登录和配置用户"><a href="#登录和配置用户" class="headerlink" title="登录和配置用户"></a>登录和配置用户</h2><p>在浏览器输入 <a href="zabbix.me">zabbix.me</a> (修改hosts)，登录zabbix-web后台。<br>默认用户名：<strong>Admin</strong>，密码：<strong>zabbix</strong>。它是超级管理员。</p>
<p>为了防止暴力破解和词典攻击，连续尝试五次登录失败，zabbix界面将暂停30秒。</p>
<p><br><br>可以通过<strong>管理(Management)</strong>菜单下的<strong>用户(User)</strong>，新建、查看、管理用户信息。</p>
<p>zabbix在安装后自定义了两个用户：</p>
<ul>
<li>Admin用户是zabbix的超级管理员，拥有所有权限；</li>
<li>Guest用户是一个特殊的默认用户。如果你没有登录，你访问zabbix的时候其实就是“guest”权限。guest默认没有任何权限。</li>
</ul>
<p>你可以创建一个用户(user)并将其加入特定的用户组(Group)以提升用户权限。<br><img src="/images/user.png" alt="新建用户"></p>
<p><br></p>
<h2 id="新建主机"><a href="#新建主机" class="headerlink" title="新建主机"></a>新建主机</h2><p>zabbix中的主机(host)是一个你想要监控的网络实体(物理的、虚拟的)。对于主机的定义非常灵活。它可以是一台物理服务器，一个网络交换机，一个虚拟机或一些应用。</p>
<p><br><br>可以通过<strong>配置(Configuration)</strong>菜单下的<strong>主机(Host)</strong>，查看已配置主机相关信息。<br>默认有一个“Zabbix Server”的定义好的主机。</p>
<p>点击<strong>创建主机(Create host)</strong>后，填写对应的主机名称、添加对应的主机群组，zabbix-agent的IP地址和端口，以及其它信息。</p>
<p><img src="/images/host.png" alt="创建主机"></p>
<p><br></p>
<h2 id="新建监控项"><a href="#新建监控项" class="headerlink" title="新建监控项"></a>新建监控项</h2><p>监控项是zabbix中获得数据的基础。没有监控项，就没有数据。因为一个主机中只有监控项定义了”单一的指标“或者”需要获得的数据“。</p>
<p><br><br>可以通过<strong>配置(Configuration)</strong>菜单下的<strong>主机(Item)</strong>，找到需要配置<strong>监控项(Item)</strong>的主机，然后创建监控项。<br>主机默认是没有定义任何监控项的。</p>
<p>填写对应的监控名称、类型、键值、主机接口、信息类型等等信息。<br><img src="/images/create-item.png" alt="添加监控项"></p>
<p><br><br>可在<strong>监控(Monitoring)</strong>菜单中<strong>最新数据(Latest data)</strong>查看之前定义的监控项和获得的值。<br>还可选择以<strong>图形(Graph)</strong>或<strong>值</strong>来查看监控项的相关信息。<br><img src="/images/upload.png" alt="upload监控信息"></p>
<p>同样也还以在Zabbix-Server端获得数据信息：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#zabbix_get -s $ip -k $value</span></div><div class="line">zabbix_get -s 192.168.1.9 -k system.cpu.load</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="新建触发器"><a href="#新建触发器" class="headerlink" title="新建触发器"></a>新建触发器</h2><p>监控项只用于收集数据。如果要自动评估收到的数据，我们则需要定义触发器(trigger)。<br>触发器包含了一个表达式，这个表达式定义了数据的可接受的阈值级别。</p>
<p>如果收到的数据超过了定义好的级别，触发器将被<strong>触发</strong>，或者进入<strong>异常状态</strong>(problem)。<br>从而引起我们的注意，让我们知道有问题发生。如果数据再次恢复到合理范围，触发器将会转到<strong>正常状态</strong>(OK)。</p>
<p><br><br>可以通过<strong>配置(Configuration)</strong>菜单下的<strong>主机(Hosts)</strong>选项，找到某主机的<strong>触发器(Triggers)</strong>创建触发器。</p>
<p>填写对应的触发器名称、表达式、描述等信息。<br><img src="/images/create-trigger.png" alt="创建触发器"></p>
<p><br></p>
<h2 id="获取问题通知"><a href="#获取问题通知" class="headerlink" title="获取问题通知"></a>获取问题通知</h2><p>当监控项收集了数据后，触发器会根据异常状态触发报警。根据一些报警机制，它也会通知我们一些重要的事情，而不是直接在zabbix-web端进行查看。<br>这就是<strong>通知(Notification)</strong>的功能。<br><strong>E-mail</strong>是最常用的异常通知发送方式。当然还有<strong>SMS（短信），脚本</strong>等媒体类型。</p>
<p><br><br>可以通过<strong>管理(Administration)</strong>菜单中的<strong>报警媒体类型(Media types)</strong>，点击预定义媒体类型列表中的Email，来配置Email。<br><img src="/images/create-email.png" alt="创建Email通知"></p>
<p>为了建立一个通知，我们需要在<strong>配置</strong>菜单下<strong>动作</strong>中，创建<strong>动作(Create action)</strong>。<br><img src="/images/create-action.png" alt="创建动作"></p>
<p>一旦满足了触发器的条件，变回触发执行动作。如收到E-mail等…</p>
<p><br></p>
<h2 id="新建模板"><a href="#新建模板" class="headerlink" title="新建模板"></a>新建模板</h2><p>如果我们配置上前台主机，一些自动化操作会带来更多便利性。没错，<strong>模板(templates)</strong>功能就可以实现。<br>模板允许对有用的监控项、触发器和其他对象进行分组，只需要一步就可以对监控主机应用模板，已达到反复重用的目的。</p>
<p>当一个模板链接到一个主机后，主机会继承这个模板中的所有对象。简单而言，一组预先定义好的检查会被快速应用到主机上。</p>
<p>Zabbix为各种操作系统、设备以及应用准备好了一些预定义的模板。你可以快速部署使用他们。<br><strong>但是请注意，一些模板需要根据你的实际情况和使用环境进行适当俄调整。</strong> 比如，一些检查项是不需要的，一些轮询周期过于频繁等。</p>
<p><br><br>在<strong>配置</strong>菜单下的<strong>模板(Templates)</strong>下，点击<strong>创建模板(Create template)</strong>。填写对应的模板名称，群组等信息。<br><img src="/images/create-template.png" alt="创建模板"></p>
<p>创建模板完毕后，可将模板链接到主机。之后，模板及其所有对象被添加到了主机。</p>
<p><br><br><br></p>
<h1 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a>配置(Configuration)</h1><h2 id="主机和主机组-Hosts-and-groups"><a href="#主机和主机组-Hosts-and-groups" class="headerlink" title="主机和主机组(Hosts and groups)"></a>主机和主机组(Hosts and groups)</h2><p>一般来讲，zabbix主机是指你希望监控的那些设备。如服务器、工作站、交换机等。<br>创建主机是使用zabbix过程的首要任务。</p>
<h3 id="配置一台主机"><a href="#配置一台主机" class="headerlink" title="配置一台主机"></a>配置一台主机</h3><p>配置–主机–创建主机–填写相关参数信息。</p>
<p>可以在已经存在的主机上使用 <strong>Clone</strong>或<strong>Full Clone</strong>创建一个新主机。</p>
<blockquote>
<p>Clone将保留所有的主机参数和模板链接；<br>Full Clone将额外保留指数实体(应用集、监控项、触发器、视图、规则、Web场景)。</p>
</blockquote>
<p><strong>新建主机下：</strong></p>
<ol>
<li>主机(Host)：包含了通用的主机属性；</li>
<li>模板(Template)：允许将模板链接诶到主机，所有实体将从模板继承；</li>
<li>IPMI：包含IPMI管理属性；</li>
<li>宏(Macros)：允许定义主机级别的<strong>用户宏</strong>；</li>
<li>主机资产记录(Host inventory)：允许为主机收工输入库存信息；</li>
<li>允许你请求与主机的加密的连接。</li>
</ol>
<p><br></p>
<h3 id="资产管理-Inventory"><a href="#资产管理-Inventory" class="headerlink" title="资产管理(Inventory)"></a>资产管理(Inventory)</h3><p>你可以将联网设备的资产信息保存在zabbix里。<br>资产信息实在配置主机时人工录入建立的资产信息数据，或者通过使用某些自动填充选项完成的录入。</p>
<p><strong>构建资产库：</strong></p>
<ul>
<li>手动模式： 在配置一台主机的时候，手动输入资产信息；</li>
<li>自动模式： 在配置主机的时候，选择自动。</li>
</ul>
<p>之后便可以在<strong>资产记录</strong>菜单中的<strong>概述，主机</strong>项中查看相关信息。</p>
<p><br></p>
<h3 id="批量更新-Mass-update"><a href="#批量更新-Mass-update" class="headerlink" title="批量更新(Mass update)"></a>批量更新(Mass update)</h3><p>有时候可能需要一次更改多个主机的某些属性，使用<strong>批量更新(mass update)</strong>功能来代替打开每个主机进行编辑。</p>
<p><img src="/images/mass-update.png" alt="批量更新"></p>
<p>可批量处理<strong>主机、模板、IPMI、资产、加密</strong>相关信息。</p>
<p><br><br><br></p>
<h2 id="监控项-Items"><a href="#监控项-Items" class="headerlink" title="监控项(Items)"></a>监控项(Items)</h2><p><strong>监控项</strong>是从主机收集的数据信息。<br>配置主机后，需要添加一些监控项以开始获取数据。快速添加多个监控项的一种方法是将预定义的模板附加到主机。</p>
<p>在单个监控项中，可指定从主机收集哪些数据信息。<br>为此，可使用<strong>监控项key</strong>。 如<strong>system.cpu.load</strong>将收集处理器负载的数据。<br>要给 key 指定更过参数，请在后面添加<strong>方括号[]</strong>。 如<strong>system.cpu.load[avg5]</strong>， 返回最近5分钟的CPU负载平均值。</p>
<p><br></p>
<h3 id="创建一个监控项"><a href="#创建一个监控项" class="headerlink" title="创建一个监控项"></a>创建一个监控项</h3><p>可在主机中新建一个监控项。<br>不支持的监控项：如果由于某种原因无法检索该值，则该监控项可能不被支持。这些监控项仍然以固定的间隔重新检查。</p>
<p><strong>监控项的key:</strong></p>
<ol>
<li>key名称允许使用字符： 0-9a-zA-Z_-.</li>
<li>key参数，用 逗,号 分隔： xxx[par1,par2…]</li>
<li>key参数也可以为空，此时使用默认值： key</li>
<li>key参数带引号，则允许任何Unicode字符，如果包含双引号则需要 \反斜杠 转义</li>
<li>key参数是一个数组，它需要包含在方括号中</li>
</ol>
<p><br><br><strong>自定义间隔(Custom intervals)</strong></p>
<p>创建关于监控项的自定义时间规则。<br>灵活间隔被设计为重新定义默认监控项的的更新间隔，但调度间隔用于指定独立执行的检查计划。</p>
<p><strong>灵活的间隔(Flexible intervals)：</strong>允许重定义特定时间段的默认间隔。</p>
<ul>
<li>间隔(Interval)： 指定时间段的更新间隔；</li>
<li>期间(Period)： 灵活间隔有效的时间段；</li>
<li>举个栗子： 60(interval), 1-7,00-24(period)。监控项每隔60s检查一次。</li>
</ul>
<p><br><br><strong>调度间隔(Scheduling intervals)：</strong>用于在特定时间检查监控项。</p>
<p>调度间隔定义为， <code>md&lt;filter&gt;wd&lt;filter&gt;h&lt;filter&gt;m&lt;filter&gt;s&lt;filter&gt;</code>。</p>
<ul>
<li>md: month days(1-31)</li>
<li>wd: week days(1-7)</li>
<li>h:  hours(0-23)</li>
<li>m:  minutes(0-59)</li>
<li>s:  seconds(0-58)</li>
<li><filter>: 指定其前缀的值—-[from-to/step]。</filter></li>
</ul>
<p>其实类似于Linux中定时任务的写法，只不过这里把单位(md,wd,h,m,s)写在了数值的前面。<br>举个栗子：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">md1-15	<span class="comment">#1-15号</span></div><div class="line"></div><div class="line">wd3	<span class="comment">#星期三</span></div><div class="line"></div><div class="line">h0-12	<span class="comment">#上半天</span></div><div class="line"></div><div class="line">m1,3,5,7,9	<span class="comment">#每个1,3,5,7,9分钟</span></div><div class="line"></div><div class="line">s/10	<span class="comment">#每个10s</span></div><div class="line"></div><div class="line"><span class="comment">#组合体</span></div><div class="line">wd1-5h9-18m/10	<span class="comment">#每个工作日的上班时间每个10分钟</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="监控项类型-Items-type"><a href="#监控项类型-Items-type" class="headerlink" title="监控项类型(Items type)"></a>监控项类型(Items type)</h3><p>监控项类型包含从系统获取数据的多种方式。每个监控项类型都有一组自己支持的监控项key和所需的参数。</p>
<p>zabbix提供的监控项类型：</p>
<ol>
<li>zabbix代理检查(agent checks)</li>
<li>SNMP代理检查</li>
<li>SNMP traps</li>
<li>IPMI检查</li>
<li>简单检查(simple checks)</li>
<li>VMware监控(monitoring)</li>
<li>日志文件监控</li>
<li>计算监控项(Calculated items)</li>
<li>zabbix内部检查(internal checks)</li>
<li>SSH检查</li>
<li>Telnet检查</li>
<li>外部检查(External checks)</li>
<li>汇总检查(Aggregate checks)</li>
<li>捕捉器监控项(Trapper items)</li>
<li>JMX监控</li>
<li>ODBC监控</li>
</ol>
<p><br><br><strong>zabbix代理(zabbix agent)：</strong><br>这些检查与zabbix代理进行通信实现数据的采集。</p>
<ol>
<li>zabbix agent-passive： 被动模式，Server向Agent索要数据；</li>
<li>zabbix agent-active： 主动模式，Agent主动上报数据给Server。</li>
</ol>
<p>可支持的监控项，可在新建监控项是在键值里面查看。</p>
<p><br><br><strong>SNMP代理(SNMP agent)：</strong></p>
<p>在启用SNMP的设备(如打印机，交换机，路由器…)上使用SNMP监控，为了能够监控SNMP代理在这些设备上提供的数据，zabbix服务器初始化配置时必须具有SNMP支持。<br>仅通过UDP协议执行SNMP检查。</p>
<p><strong>配置SNMP监控：</strong></p>
<ol>
<li>使用SNMP接口为设备创建一个主机；</li>
<li>找出要监控项目的SNMP字符串；</li>
<li>创建一个监控项。</li>
</ol>
<p><br><br><strong>IPMI检查：</strong><br>你可以在zabbix中监控 <strong>智能平台管理接口(IPMI)</strong> 设备的运行状况和可用性。<br>要执行IPMI检查，zabbix服务器必须首先配置IPMI支持。</p>
<p><br><br><strong>简单检查：</strong><br>简单检查通常用于远程无代理监控服务。</p>
<p><br><br><strong>日志文件监控：</strong><br>zabbix可用于集中监控和分析 具有/不具有 日志转动能力的日志文件。<br>当日志文件包含某些字符串或字符串模式时，通知信息可用于警告用户。</p>
<p><br><br><strong>计算监控项：</strong><br>计算监控项是创建虚拟数据源的一种方式。这些值将根据算术表达式定期计算。所有计算都由Server完成。</p>
<p><br><br><strong>内部检查：</strong><br>内部检查可以监控zabbix的内部检查。即Server或Agent Server的运行情况。</p>
<p><br><br><strong>SSH检查：</strong><br>运行SSH检查是作为无代理监控的，SSH检查不需要zabbix代理。<br>执行SSH检查zabbix服务器必须初始化配置为SSH2支持。</p>
<p>SSH检查提供两种身份验证方法，一种是用户/密码，另一种是基于密钥文件。</p>
<p>zabbix SSH 密钥配置:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vim /etc/zabbix/zabbix_server.conf</div><div class="line"></div><div class="line"><span class="comment">#SSHKeyLocation=</span></div><div class="line">SSHKeyLocation=/home/zabbix/.ssh</div><div class="line"></div><div class="line">usermod -m -d /home/zabbix zabbix</div><div class="line">chown zabbix:zabbix /home/zabbix</div><div class="line">chmod 700 /home/zabbix</div><div class="line"><span class="built_in">cd</span> /home/zabbix &amp;&amp; su zabbix</div><div class="line"></div><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure></p>
<p><br><br><strong>外部检查：</strong><br>外部检查是由zabbix Server通过运行shell脚本或二进制的检查。<br>外部检查不需要再被监控的主机上运行任何代理。</p>
<p><br><br><strong>汇总检查：</strong><br>在汇总检查中，zabbix通过直接从数据库中查询监控信息，然后进行信息聚合。<br>聚合检查不需要再被监控的主机上运行任何代理。</p>
<p><br><br><strong>捕捉器监控项：</strong><br>捕捉器监控项接收传入的数据，而不是查询它。对于想要推送到zabbix的任何数据都是适用的。</p>
<p>要使用捕捉器监控项，需要在zabbix中建立一个捕捉器监控项，将数据送给zabbix。</p>
<p><br><br><strong>JMX监控项：</strong><br>JMX监控可用于监视Java应用程序的JMX计数器。<br>JMX监视器以zabbix守护进程方式运行，名为zabbix java gateway。</p>
<p><br><br><strong>ODBC监控：</strong><br>ODBC监控对应于zabbix web管理端中的数据库监控器监控项类型。<br>ODBC是用于访问 数据库管理系统(DBMS) 的C语言中间件API。</p>
<p>zabbix可以查询ODBC支持的任何数据库。为了实现监控，zabbix不直接连接到数据库，而是使用ODBC中设置的ODBC接口和驱动。<br>该功能允许为多个目的更加有效地监控不同的数据库。</p>
<p><br></p>
<h3 id="历史与趋势-history-and-trends"><a href="#历史与趋势-history-and-trends" class="headerlink" title="历史与趋势(history and trends)"></a>历史与趋势(history and trends)</h3><p>历史与趋势是zabbix中存储数据的两种方式。<br>历史保持每个收集的值，而趋势是每小时的平均信息。</p>
<p>建议保持的历史数据尽可能少，但可以保留更多的趋势数据。</p>
<p><br></p>
<h3 id="用户自定义参数-user-parameter"><a href="#用户自定义参数-user-parameter" class="headerlink" title="用户自定义参数(user parameter)"></a>用户自定义参数(user parameter)</h3><p>有时你想运行一个代理检查，但它不是zabbix预定义的。这时就能用到<strong>用户参数</strong>。<br>用户参数是由zabbix代理之星的命令，最多可以返回512KB的数据。<br><strong>key</strong> 是唯一的。</p>
<p>用户参数用法：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">UserParameter=&lt;key&gt;,&lt;<span class="built_in">command</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">#栗子</span></div><div class="line">UserParameter=ping,<span class="built_in">echo</span> 1</div><div class="line"><span class="comment">#使用ping键为一个监控项返回 1</span></div><div class="line"></div><div class="line"><span class="comment">#复杂栗子</span></div><div class="line">UserParameter=mysql.ping,mysqladmin -uroot -ppwd ping | grep -c <span class="string">'alive'</span></div><div class="line"><span class="comment">#mysqld状态为alive返回1，否则0</span></div><div class="line"></div><div class="line"><span class="comment">#灵活的用户参数</span></div><div class="line">UserParameter=key[*],<span class="built_in">command</span></div><div class="line"><span class="comment">#[*]定义该key接受括号内的参数</span></div><div class="line"></div><div class="line"><span class="comment">#栗子</span></div><div class="line">UserParameter=ping[*],<span class="built_in">echo</span> <span class="variable">$1</span></div><div class="line"></div><div class="line">UserParameter=mysql.ping[*],mysqladmin -u<span class="variable">$1</span> -p<span class="variable">$2</span> ping | grep -c <span class="string">'alive'</span></div><div class="line"><span class="comment">#mysql.ping[zabbix,passwd]</span></div><div class="line"></div><div class="line">UserParameter=wc[*],grep -c <span class="string">"<span class="variable">$2</span>"</span> <span class="variable">$1</span></div><div class="line"><span class="comment">#wc[/etc/passwd,root]</span></div></pre></td></tr></table></figure></p>
<p><br><br><strong>用户自定义参数扩展zabbix代理：</strong><br>是将key添加到被监控的主机哦！<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#编写命令--SQL查询总数</span></div><div class="line">mysqladmin -uxxx -pxxx status | cut -f4 -d<span class="string">":"</span> | cut -f1 -d<span class="string">"S"</span></div><div class="line"></div><div class="line"><span class="comment">#将命令添加到zabbix_agentd.conf</span></div><div class="line">vim /etc/zabbix/zabbix_agentd.conf</div><div class="line"></div><div class="line"><span class="comment">#找到如下字段</span></div><div class="line"><span class="comment">### Option: UserParameter</span></div><div class="line">UserParameter=mysql.totalquery,mysqladmin -uroot -pxxx status | cut -f4 -d<span class="string">":"</span> | cut -f1 -d<span class="string">"S"</span></div><div class="line"><span class="comment">#mysql.totalquery这个key是唯一的标识符</span></div><div class="line"></div><div class="line"><span class="comment">#测试此参数</span></div><div class="line"><span class="comment">##测试参数可用与否很重要哈</span></div><div class="line">zabbix_agentd -t mysql.totalquery</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#重启zabbix-agent，将重新加载配置</span></div><div class="line">zabbix_get -s <span class="variable">$host</span> -k mysql.totalquery</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="可加载模块-loadable-modules"><a href="#可加载模块-loadable-modules" class="headerlink" title="可加载模块(loadable modules)"></a>可加载模块(loadable modules)</h3><p>可加载模块提供了一种关于zabbix性能扩展的选项。</p>
<p>可加载模块基本上只zabbix守护程序使用的共享库，并在启动时加载。<br>可加载模块具有很多优点，卓越的性能和可实现任何逻辑的能力，更重要的是使用和共享了zabbix模块的开发能力。</p>
<p><br></p>
<h3 id="windows性能计数器-windows-perfomance-counter"><a href="#windows性能计数器-windows-perfomance-counter" class="headerlink" title="windows性能计数器(windows perfomance counter)"></a>windows性能计数器(windows perfomance counter)</h3><p>使用perf_counter[]key有效的监控windows性能计数器</p>
<p><br></p>
<h3 id="批量更新-mass-update"><a href="#批量更新-mass-update" class="headerlink" title="批量更新(mass update)"></a>批量更新(mass update)</h3><p>使用批量更新功能，可一次更改多个监控属性。</p>
<p><br></p>
<h3 id="值映射-value-mapping"><a href="#值映射-value-mapping" class="headerlink" title="值映射(value mapping)"></a>值映射(value mapping)</h3><p>对于接收值更人性化的表示，可以使用包含数值和字符串之间的映射的<strong>值映射</strong>。</p>
<p>如：</p>
<ul>
<li>0 —&gt; error</li>
<li>1 —&gt; true</li>
<li>F —&gt; Full</li>
<li>D —&gt; Differential</li>
<li>I —&gt; Incremental</li>
<li>…</li>
</ul>
<p><br></p>
<h3 id="应用集-Application"><a href="#应用集-Application" class="headerlink" title="应用集(Application)"></a>应用集(Application)</h3><p><strong>应用集</strong>对逻辑组中的监控项进行分组。</p>
<p>如，对MongoDB的可用性，空间，负载，慢查询，执行命令…，可归于 MongoDB应用于中。</p>
<p><br></p>
<h3 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列(queue)"></a>队列(queue)</h3><p><strong>队列</strong>显示正在等待刷新的监控项。<br>队列只是一个逻辑表达的数据。</p>
<p>队列显示的统计信息是zabbix服务器性能是否健康的指标。<br>在 管理–队列 下对去队列。</p>
<p><br></p>
<h3 id="值缓存-value-cache"><a href="#值缓存-value-cache" class="headerlink" title="值缓存(value cache)"></a>值缓存(value cache)</h3><p>为了计算触发表达式，以及让计算/聚合监控项和一些宏更快，zabbix服务器支持值的缓存选项。</p>
<p>在内存中的缓存可用于访问历史数据，而不用之间调用数据库。如果缓存中不存在历史值，则从数据库请求缺少的值，并相应地跟新缓存。</p>
<p>要启用值缓存功能，修改zabbix_server.conf中可选的ValueCacheSize参数。</p>
<p><br><br><br></p>
<h2 id="触发器-Trigger"><a href="#触发器-Trigger" class="headerlink" title="触发器(Trigger)"></a>触发器(Trigger)</h2><p>触发器是评估有项目采集的数据并表示当前系统状况的逻辑表达式。<br>触发器表达式允许定义一个什么状况的数据是“可接受”的阈值。如果超过了可接受状态，则触发器会被触发。</p>
<p><br></p>
<h3 id="配置一个触发器-configuring-a-trigger"><a href="#配置一个触发器-configuring-a-trigger" class="headerlink" title="配置一个触发器(configuring a trigger)"></a>配置一个触发器(configuring a trigger)</h3><p>在主机里面配置触发器。</p>
<p><br></p>
<h3 id="触发器表达式-trigger-expression"><a href="#触发器表达式-trigger-expression" class="headerlink" title="触发器表达式(trigger expression)"></a>触发器表达式(trigger expression)</h3><p>一个简单有效的表达式看起来像：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&lt;server&gt;:&lt;key&gt;.&lt;<span class="keyword">function</span>&gt;(&lt;parameter&gt;)&#125;&lt;operator&gt;&lt;constant&gt;</div><div class="line"></div><div class="line"><span class="comment">#如</span></div><div class="line">&#123;192.168.1.7:agent.ping.time()&#125;=0</div></pre></td></tr></table></figure></p>
<p><strong>函数参数(function parameters)：</strong><br>大多数数字型的函数接受秒数来作为参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#600s内所有值的总和</div><div class="line">sum(600)</div><div class="line"></div><div class="line">#随后5个值总和</div><div class="line">sum(#5)</div><div class="line"></div><div class="line">avg()</div><div class="line">count()</div><div class="line">last()</div><div class="line">min()</div><div class="line">max()</div><div class="line"></div><div class="line">#5m 可被 300s 代替</div><div class="line">#1k 代表 1024bytes</div></pre></td></tr></table></figure>
<p><strong>运算符(operators)：</strong></p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>-</td>
<td>负号(minus)</td>
</tr>
<tr>
<td>2</td>
<td>not</td>
<td>逻辑非(NOT)</td>
</tr>
<tr>
<td>3</td>
<td>*, /</td>
<td>乘，除</td>
</tr>
<tr>
<td>4</td>
<td>+, -</td>
<td>加，减</td>
</tr>
<tr>
<td>5</td>
<td>&lt;, &lt;=, &gt;, &gt;=</td>
<td>-</td>
</tr>
<tr>
<td>6</td>
<td>=, &lt;&gt;</td>
<td>相等，不等于</td>
</tr>
<tr>
<td>7</td>
<td>and</td>
<td>逻辑与</td>
</tr>
<tr>
<td>8</td>
<td>or</td>
<td>逻辑或</td>
</tr>
</tbody>
</table>
<p><strong>触发器示例：</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;www.zabbix.com:system.cpu.load[all,avg1].last()&#125;&gt;5</div><div class="line"></div><div class="line">&#123;www.zabbix.com:system.cpu.load[all,avg1].last()&#125;&gt;5 or &#123;www.zabbix.com:system.cpu.load[all,avg1].min(10m)&#125;&gt;2</div><div class="line"></div><div class="line">&#123;www.zabbix.com:net.if.in[eth0,bytes].min(5m)&#125;&gt;100k</div><div class="line"></div><div class="line">&#123;<span class="variable">$url1</span>:net.tcp.service[smtp].last()&#125;=0 and &#123;<span class="variable">$url2</span>:net.tcp.service[smtp].last()&#125;=0</div><div class="line"></div><div class="line">&#123;<span class="variable">$host</span>:icmpping.count(30m,0)&#125;&gt;5</div><div class="line"></div><div class="line">&#123;<span class="variable">$host</span>:system.cpu.load[all,avg1].min(5m)&#125;&gt;2 and &#123;<span class="variable">$hsot</span>:system.cpu.load[all,avg1].time()&#125;&gt;000000 and &#123;<span class="variable">$host</span>:system.cpu.load[all,avg1].time)()&#125;&lt;060000</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p><strong>滞后(Hysteresis):</strong><br>有时候需要一个触发器状态OK和PROBLEM之间的间隔，而不是简单的阈值。</p>
<p>要做到这一点，我们首先定义一个PROBLEM事件的触发器表达式，然后为OK选择 ‘Recovery expression’，并未OK事件书如不同的表达式</p>
<p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#Problem expression</div><div class="line">&#123;server:temp.last()&#125;&gt;20</div><div class="line"></div><div class="line">#Recovery expression</div><div class="line">&#123;server:temp.last()&#125;&lt;=15</div><div class="line"></div><div class="line">#两者之间便有了几个滞后值</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="触发器依赖-trigger-dependency"><a href="#触发器依赖-trigger-dependency" class="headerlink" title="触发器依赖(trigger dependency)"></a>触发器依赖(trigger dependency)</h3><p>有时候，一台主机的可用性取决于另一台主机。如一台路由器后的上网设备。<br>这就是主机之间某些依赖关系可能有用的地方，依赖关系设置的通知可能会被抑制，而只发送根本问题的通知。</p>
<p>zabbix中触发器的依赖，一个触发器可能有多个依赖于它的触发器。</p>
<p>路由器和路由器后的Server同时宕机，如果有依赖关系，则zabbix不会执行服务器的触发动作。<br>值得注意的是，如果触发器所依赖的触发器被禁用，则次触发器的事件和动作将不会被抑制。</p>
<p><br></p>
<h3 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h3><p>使用批量更新，可一次更改一些触发器的某些属性。</p>
<p><br></p>
<h3 id="触发器严重性-trigger-severity"><a href="#触发器严重性-trigger-severity" class="headerlink" title="触发器严重性(trigger severity)"></a>触发器严重性(trigger severity)</h3><p>触发器严重性定义了触发器的重要程度:</p>
<ol>
<li>未分类(not classified), 灰色</li>
<li>信息(information), 淡蓝</li>
<li>警告(warning), 黄色</li>
<li>一般严重(average), 橙色</li>
<li>严重(High), 淡红</li>
<li>灾难(disaster), 红色</li>
</ol>
<p><br></p>
<h3 id="自定义触发器严重性-customising-trigger"><a href="#自定义触发器严重性-customising-trigger" class="headerlink" title="自定义触发器严重性(customising trigger)"></a>自定义触发器严重性(customising trigger)</h3><p>在 管理 – 一般 – 触发器严重性，里面自定义触发器严重性。</p>
<p><br></p>
<h3 id="预测触发功能-predictive-trigger-function"><a href="#预测触发功能-predictive-trigger-function" class="headerlink" title="预测触发功能(predictive trigger function)"></a>预测触发功能(predictive trigger function)</h3><p>有时候有即将到来的问题的迹象。可以发现这些迹象，以便提前采取行动，以减小影响。</p>
<p>zabbix具有基于历史数据预测受监视系统的未来行为的工具，这些工具通过预测触发功能实现。</p>
<p><br></p>
<h3 id="事件标签-event-tag"><a href="#事件标签-event-tag" class="headerlink" title="事件标签(event tag)"></a>事件标签(event tag)</h3><p>在zabbix中可以自定义事件标签，在触发器级别上定义事件标签。在事件标签定以后，相应的新事件被标记为时间标签数据。<br>在拥有自定义时间标签的情况下，可以变得更加灵活。</p>
<p>例如：</p>
<ol>
<li>识别日志文件中的问题并单独关闭他们；</li>
<li>用它来过滤通知；</li>
<li>查看前端的事件标签信息；</li>
<li>从项目值中提取的信息作为标签值；</li>
<li>在通知中更好地识别问题；</li>
<li>通过使用模板级别的标签来建华配置任务；</li>
<li>使用低级别发现的标签创建触发器。</li>
</ol>
<p><br><br><br></p>
<h2 id="事件-Events"><a href="#事件-Events" class="headerlink" title="事件(Events)"></a>事件(Events)</h2><p>zabbix可以生成一下几种类型的事件：</p>
<ol>
<li>trigger events-触发器事件；</li>
<li>discovery events-发现事件；</li>
<li>auto registration events-自动注册事件；</li>
<li>internal events-内部事件；</li>
</ol>
<p>事件以时间戳，并可以发送Email等基础动作。<br>在 监控-问题 里面查看信息信息。</p>
<p><br></p>
<h3 id="触发器事件生成-trigger-events-generation"><a href="#触发器事件生成-trigger-events-generation" class="headerlink" title="触发器事件生成(trigger events generation)"></a>触发器事件生成(trigger events generation)</h3><p>触发器状态的变化是事件最常见和最重要的来源。每次触发器的状态改变时，都会生成一个事件。<br>改时间包含了触发器状态变更的详细信息、发生时间以及信息的状态。</p>
<p>触发器会创建两种类型的事件：问题(problem)和正常(OK)</p>
<p><br></p>
<h3 id="手动关闭问题事件-manual-closing-of-problems"><a href="#手动关闭问题事件-manual-closing-of-problems" class="headerlink" title="手动关闭问题事件(manual closing of problems)"></a>手动关闭问题事件(manual closing of problems)</h3><p>当触发器状态从“问题(problem)”变成“正常(OK)”时，很难判断是通过触发器表达式的方式解决。这时就需要手动解决。</p>
<p>只有在触发器中启用 “允许手动关闭” 选项，问题事件才可以被手动关闭。</p>
<p><br></p>
<h3 id="其他事件来源-other-event-source"><a href="#其他事件来源-other-event-source" class="headerlink" title="其他事件来源(other event source)"></a>其他事件来源(other event source)</h3><p>zabbix定期扫描网络发现规则中定义的IP范围，可以为每个规则单独配置检查频率。一旦发现主机或服务，就会生成一个发现事件。</p>
<p>zabbix可以生成以下事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Service Up/Down</div><div class="line">Host Up/Down</div><div class="line">Service Discovered/Lost</div><div class="line">Host Discovered/Lost</div></pre></td></tr></table></figure></p>
<p><br><br><br></p>
<h2 id="事件关联-event-correlation"><a href="#事件关联-event-correlation" class="headerlink" title="事件关联(event correlation)"></a>事件关联(event correlation)</h2><p>通常，在zabbix中正常事件会关闭所有的问题事件，但在某些情况下需要更细致的方法。可以根据<strong>事件标签</strong>关联问题事件。<br>如，当监控日志文件时，在日志文件中想要发现某些问题，并将它们单独关闭，而不是一起关闭。</p>
<p><br><br><br></p>
<h2 id="可视化-visualisation"><a href="#可视化-visualisation" class="headerlink" title="可视化(visualisation)"></a>可视化(visualisation)</h2><h3 id="图形-graphs"><a href="#图形-graphs" class="headerlink" title="图形(graphs)"></a>图形(graphs)</h3><p>大量的监控数据被采集到zabbix中，如果能用可视化的表现形式来查看，那就直观和容易多了。</p>
<p>zabbix为用户提供了如下图形：</p>
<ol>
<li>监控项数据的内置简单图形 “simple graphs”；</li>
<li>创建更复杂的自定义图形 “customised graphs”；</li>
<li>特定图形 “ad-hosc graphs”快速访问几个监控项的数据比较。</li>
</ol>
<p><strong>简单图形(simple graphs)：</strong><br>zabbix提供的简单图形，用来可视化显示监控项采集到的数据。并不需要配置就可以查看。</p>
<p>通过 监控-最新数据-图形 来展示图形。</p>
<p><strong>自定义图形(customised graphs)：</strong><br>自定义图形，提供定制功能。这就有点厉害了。这个是手动配置的。<br>可以为单个主机、多个主机、单个模板、多个模板创建自定义图形。</p>
<p>在 配置-主机-图形-创建图形 里编辑图形属性；<br>图形编辑后可点击预览。</p>
<p><strong>特设图形(ad-hoc graphs)：</strong><br>简单图形和自定义图形都不允许快速创建多个监控项目数据的比较图形，工作量小且没有维护。</p>
<p>在 检测-最新数据-旋转监控项前复选框-显示数据图(显示堆叠数据图) 下， 里面也包含了 正常和层积 的图形风格。</p>
<p><br></p>
<h3 id="拓扑图-networking-maps"><a href="#拓扑图-networking-maps" class="headerlink" title="拓扑图(networking maps)"></a>拓扑图(networking maps)</h3><p>运维人员如果想要了解网络环境的基础设施状况，可以在zabbix中创建网络拓扑图。</p>
<p><strong>配置拓扑图(configurating network maps):</strong></p>
<p>在 监控-拓扑图 下，可以创建拓扑图。点击拓扑图中的 构造函数 选项，来打开编辑区域。<br>然后在编辑区域中添加元素和链接元素。</p>
<p><strong>链接指示器(link indicators):</strong><br>可以为网络拓扑图中的元素之间的链接分配一些触发器，当这些触发器状况为“Problem”时，可以在链接上体现出来。<br>如果多个触发器进入”Problem”状态，则严重程度最高的将决定链接的颜色和样式。</p>
<p><br></p>
<h3 id="聚合图形-screen"><a href="#聚合图形-screen" class="headerlink" title="聚合图形(screen)"></a>聚合图形(screen)</h3><p>在zabbix的聚合图形页面上，你可把各种来源的信息聚集到一起，一边在单个屏幕上快速查看。<br>在 监测-图形聚合 下，对其进行创建、配置、管理和查看。</p>
<p>基本上，聚合图形是一个表格，你选择把每个表格有多少单元格以及其中要显示的元素。<br>元素如下：</p>
<ul>
<li>简单图形；</li>
<li>简单图形原型；</li>
<li>用户自定义图形；</li>
<li>自定义图形原型；</li>
<li>拓扑图；</li>
<li>其他聚合图形；</li>
<li>纯文本信息；</li>
<li>服务器信息；</li>
<li>触发器信息；</li>
<li>主机/主机组信息；</li>
<li>系统状态；</li>
<li>数据概述；</li>
<li>时钟；</li>
<li>事件历史；</li>
<li>动作历史；</li>
<li>URL。</li>
</ul>
<p><br></p>
<h3 id="幻灯片演示-slide-shows"><a href="#幻灯片演示-slide-shows" class="headerlink" title="幻灯片演示(slide shows)"></a>幻灯片演示(slide shows)</h3><p>在幻灯片演示中，可以配置多个聚合图形以设定的间隔逐个显示。<br>在 监测-聚合图形-幻灯片演示 下。</p>
<p><br><br><br></p>
<h2 id="模板-template"><a href="#模板-template" class="headerlink" title="模板(template)"></a>模板(template)</h2><p>模板是可以方便地应用于多个主机的一组实体。</p>
<p><strong>配置模板(configuring a template)：</strong><br>配置模板需要首先通过定义一些参数来创建模板，然后添加实例。<br>在 配置-模板-创建模板</p>
<p><strong>链接模板(linking)：</strong><br>链接是将模板应用于主机的过程，之后主机将拥有模板的所有实体。</p>
<p><strong>嵌套(nesting)：</strong><br>嵌套是一种包含一个或多个其它模板的模板方式。<br>可以在一个嵌套模板中奖一些模板链接在一起。</p>
<p>嵌套的好处在于，您只需要讲一个模板链接到主机，并且主机会自动继承链接的模板的所有实体。</p>
<p><br><br><br></p>
<h2 id="事件通知-notifications-upon-events"><a href="#事件通知-notifications-upon-events" class="headerlink" title="事件通知(notifications upon events)"></a>事件通知(notifications upon events)</h2><p>当配置了一些项目和触发器，并且由于触发器改变状态，现在正在发生一些事件，之后就要考虑 action。<br>发送通知是zabbix提供的主要操作之一。</p>
<p>为了能够发送和接收通知，必须：</p>
<ol>
<li>定义一些media；</li>
<li>配置action，向指定的media发送消息。</li>
</ol>
<p>action由condition和operation组成。当条件满足是，执行操作。<br>操作主要是 <strong>发送消息</strong>和<strong>执行远程命令</strong>。</p>
<p><br></p>
<h3 id="media类型"><a href="#media类型" class="headerlink" title="media类型"></a>media类型</h3><p>媒体是zabbix中发送通知和警报的传送通道。</p>
<p><strong>E-mail:</strong><br>在 管理-媒体类型 下，配置Email。</p>
<p><strong>SMS：</strong><br>zabbix支持使用连接到zabbix-server的串行端口的串行GSM调制解调器发送SMS消息。</p>
<p>确保：</p>
<ul>
<li>串行设备的速度(在Linux下通常为/dev/ttyS0) 与 GSM调制解调器的速度相匹配。zabbix没有设置串行链路的速度，它使用默认设置。</li>
<li>zabbix用户对串行设备有读写访问权限。</li>
<li>GSM调制解调器输入PIN码，并在电源复位后保留PIN码。或者在SIM卡上禁用PIN。</li>
</ul>
<p>管理-媒体类型下<br>要为用户分配电话号码：管理-用户-报警媒介，添加报警媒介(如电话号码等)</p>
<p><strong>Jabber：</strong><br>zabbix支持发送jabber消息。</p>
<p><strong>Ez Texting：</strong><br>可以使用 zabbix技术合作伙伴 Ez Texting发送信息。</p>
<p><strong>脚本：</strong><br>警报脚本在zabbix服务器上执行，这些脚本位于服务器配置文件中定义的目录中(AlertScriptsPath)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cat /etc/zabbix/zabbix_server.conf</div><div class="line"></div><div class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</div><div class="line"></div><div class="line"></div><div class="line">#创建报警脚本</div><div class="line">vim /usr/lib/zabbix/alertscripts/zabbix_test.sh</div><div class="line"></div><div class="line">#!/bin/bash</div><div class="line">to=$1</div><div class="line">subject=$2</div><div class="line">body=$3</div><div class="line"></div><div class="line">cat &lt;&lt;EOF | mail -s &quot;$subject&quot; &quot;to&quot;</div><div class="line">$body</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>然后我们在创建脚本媒体的时候，写入相关参数。</p>
<p><br></p>
<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>可以根据所有支持的类型的时间定义操作：</p>
<ul>
<li>触发事件：当trigger的状态从OK转到Problem或回转时；</li>
<li>发现事件；</li>
<li>自动注册事件；</li>
<li>内部事件；</li>
</ul>
<p>配置-动作-创建动作</p>
<p><strong>条件(condition):</strong><br>只有在事件与定义的条件匹配的情况下才执行操作。</p>
<p>注意运算类型：似与非似</p>
<p><strong>操作(operation)：</strong><br>操作：发送信息，执行远程命令。</p>
<p>1.发送消息；<br>2.远程命令(不支持在zabbix-agent上执行远程命令，需要在zabbix-server到代理的命令才能直接连接。远程命令限制255字符，可以将过个命令放置于新行上来执行过个命令。及时目标主机处于维护状态，也会执行远程命令)；</p>
<p>配置-动作-操作，在操作细节中修改操作类型为远程命令。<br>支持自定义脚本、SSH、Telnet等方式。</p>
<p><strong>在信息中使用宏(using macros in messages)：</strong><br>在消息主题和消息文本中，可使用宏来更有效的问题报告。</p>
<p><strong>恢复操作(recovery operation):</strong><br>恢复操作允许在问题解决时通知我们。<br>恢复操作支持消息和远程命令。</p>
<p><br></p>
<h3 id="宏-macros"><a href="#宏-macros" class="headerlink" title="宏(macros)"></a>宏(macros)</h3><p>zabbix支持许多在多种情况下使用的宏。宏是一个变量，由如下特殊语法标识。</p>
<p><code>{MACRO}</code></p>
<p>根据在上下文汇总，宏解析为一个特殊的值。有效地使用宏可以节省时间，病史zabbix更加高效。</p>
<p>宏可以在监控项键值参数中使用。宏只能用在监控项键值参数的一部分中。<br>如<code>item.key[server_{HOST.HOST}_local]</code> 。</p>
<p><strong>宏函数(macro function)：</strong><br>宏函数能提供自定义宏值的功能。</p>
<p>宏函数语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;&lt;macro&gt;.&lt;func&gt;(&lt;params&gt;)&#125;</div><div class="line"></div><div class="line">#&lt;macro&gt;, 要定义的宏</div><div class="line">#&lt;func&gt;, 要应用的函数</div><div class="line">#&lt;params&gt;, 以逗号分隔的函数参数列表</div><div class="line"></div><div class="line">#栗子</div><div class="line">&#123;&#123;ITEM.VALUE&#125;.regsub&#123;pattern, output&#125;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>用户宏(user macro)：</strong><br>除了支持开箱即用的宏之外，zabbix还支持更灵活的用户宏。</p>
<p>用户宏可在全局、模板和主机级别进行定义。有一个特殊语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;$MACRO&#125;</div></pre></td></tr></table></figure></p>
<p>用户宏可用于：</p>
<ul>
<li>监控项名称；</li>
<li>监控项键值参数；</li>
<li>触发器名称和描述；</li>
<li>触发器表达式参数和常量；</li>
<li>许多其他位置。</li>
</ul>
<p><strong>自动发现宏：</strong><br>有一种自动发现(LLD)函数中使用的宏类型，可用于创建监控项、触发器和图形原型。然后，当发现真实的文件系统、网络接口等，这些宏将替换为真实的值，并且以这些值来创建真实的监控项、触发器和图形。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;#MACRO&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="用户和用户组-user-and-group"><a href="#用户和用户组-user-and-group" class="headerlink" title="用户和用户组(user and group)"></a>用户和用户组(user and group)</h3><p>zabbix中所有用户都通过web前端去访问zabbix应用程序。并为每一个用户分配唯一的登录名和密码，被加密储存于zabbix数据库中。</p>
<p><strong>配置用户(configuring user)</strong><br>管理-用户，创建和管理用户。</p>
<p><strong>权限(permission)</strong><br>可定义相应的用户类型，如用户，管理员和超级管理员。</p>
<p><strong>用户组(groups)</strong><br>管理-用户组，创建和配置用户组。</p>
<p><br></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h1 id="服务监控-service-monitoring"><a href="#服务监控-service-monitoring" class="headerlink" title="服务监控(service monitoring)"></a>服务监控(service monitoring)</h1><p>服务监控，旨在帮助那些想要高级业务监控的人。<br>在很多情况下，我们关注的不是底层细节，而是提供的可用性服务。</p>
<p>服务是分层表示监控数据。</p>
<blockquote>
<p>IT</p>
<blockquote>
<p>Workstations</p>
<blockquote>
<p>workstation1<br>workstation2</p>
</blockquote>
<p>Services</p>
</blockquote>
</blockquote>
<p>配置-服务，最高节点的服务是’root’。<br>你可以通过添加低级服务节点和各个节点服务创建下层层次结构。</p>
<p><br><br><br></p>
<h1 id="Web监控-web-monitoring"><a href="#Web监控-web-monitoring" class="headerlink" title="Web监控(web monitoring)"></a>Web监控(web monitoring)</h1><p>配置-主机-web监测，创建或修改web监测信息。<br>可使用zabbix检查几个网站可用性方面。(zabbix中包含libcurl库才行)</p>
<p>要使用web监控，需要定义web场景。包括一个或多个HTTP请求或步骤。Zabbix-Server根据预定义的命令周期性的执行这些步骤。</p>
<p>所有web场景会手机下列数据：</p>
<ul>
<li>整个场景中所有步骤的平均下载速度；</li>
<li>失败的步骤数量；</li>
<li>最后一次错误信息</li>
</ul>
<p>web场景的所有步骤，都会收集下列数据：</p>
<ul>
<li>平均下载速度；</li>
<li>响应时间</li>
<li>HTTP状态吗</li>
</ul>
<p><br></p>
<h2 id="Web监控项-web-monitoring-items"><a href="#Web监控项-web-monitoring-items" class="headerlink" title="Web监控项(web monitoring items)"></a>Web监控项(web monitoring items)</h2><p>在创建web场景时，会自动添加一些新监控项进行监控。</p>
<p>创建场景后，zabbix会自动添加以下监控项进行监控，将它们链接到所选的应用程序。</p>
<ul>
<li>场景<scenario>的下载速度；</scenario></li>
<li>场景<scenario>的失败步骤；</scenario></li>
<li>场景<scenario>的最后一个错误消息；</scenario></li>
</ul>
<p><br><br><strong>举个栗子：</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##创建Web监测</span></div><div class="line"><span class="comment">#配置-主机-Web监测-创建web监测</span></div><div class="line"></div><div class="line">URL：web.zabbix.me/monitor.php</div><div class="line">要求的状态码：200</div><div class="line">超时：20s</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##创建web监测触发器</span></div><div class="line"><span class="comment">#配置-主机-触发器-创建触发器</span></div><div class="line"></div><div class="line">严重性：一般严重</div><div class="line"><span class="comment">#触发条件：状态码!=200</span></div><div class="line">表达式：N&lt;&gt;200</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##创建触发报警对应的动作</span></div><div class="line"><span class="comment">#配置-动作-创建动作</span></div><div class="line"></div><div class="line"><span class="comment">#触发条件</span></div><div class="line">触发器示警度=一般严重 or 触发器=web.zabbix.me</div><div class="line"></div><div class="line"><span class="comment">#操作：发送Email</span></div><div class="line">发送给zabbix administrator用户群组</div><div class="line">仅送到Email</div><div class="line">默认信息/自定义信息</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##在媒体类型中定义Email相关信息</span></div><div class="line"><span class="comment">#管理-报警媒体类型-Email</span></div><div class="line"></div><div class="line">SMTP服务器：smtp.xxx.com</div><div class="line">smtp端口：465</div><div class="line">SMTP电邮：发件人Email</div><div class="line">安全链接：SSL/TLS</div><div class="line">认证：Usernameand passwd</div><div class="line">用户名：xxx</div><div class="line">密码： xxx</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##接下来就可以测试接收报警Email了</span></div></pre></td></tr></table></figure></p>
<p><br><br><br></p>
<h1 id="虚拟机监控-VM-monitoring"><a href="#虚拟机监控-VM-monitoring" class="headerlink" title="虚拟机监控(VM monitoring)"></a>虚拟机监控(VM monitoring)</h1><p>zabbix支持对VMware的监控，使用low-levle-discovery(LLD)自动发现VMware hypervisors和虚拟机，并根据事先定义的主机原型，为这些虚拟机建立主机，添加监控。</p>
<p>zabbix中提供了几个模板，可以直接用来解控VMware vCenter 或 ESX hypervisor。</p>
<p><br><br>虚拟机监控分为两个步骤：</p>
<ul>
<li>首先，zabbix是通过VMware collector进程来监控虚拟机。这些进程通过SOAP协议从VMware服务获取必要的信息，对其进行预处理并储存到zabbix-server共享内存中；</li>
<li>然后，zabbix-pollers通过zabbix简单检查VMware keys来检索这些数据。</li>
</ul>
<p>要使虚拟机监控正常工作，需要libxml2库和libcurl库的支持。</p>
<blockquote>
<p>配置-自动发现-创建自动发现<br>配置-主机-自动发现</p>
</blockquote>
<p><br><br><br></p>
<h1 id="维护-maintenance"><a href="#维护-maintenance" class="headerlink" title="维护(maintenance)"></a>维护(maintenance)</h1><p>可在zabbix中为主机和主机组定义维护周期。<br>有两种维护类型：“继续对目标进行监控数据的收集” 和 “停止对目标进行监控数据的收集”</p>
<p>要在维护期间正常接收问题通知，必须在动作配置中的选项中取消选择暂停操作。<br>为了确保定期维护按照预期的时间进行，需要对zabbix的所有部分使用通用时区。</p>
<blockquote>
<p>配置-维护-创建维护期</p>
</blockquote>
<p>维护期的主机显示的是橙色背景！</p>
<p><br><br><br></p>
<h1 id="事件确认-event-acknowledgment"><a href="#事件确认-event-acknowledgment" class="headerlink" title="事件确认(event acknowledgment)"></a>事件确认(event acknowledgment)</h1><p>zabbix中的问题事件可以由用户确认。</p>
<p>如果用户获得了有关问题时间的通知，可以访问zabbix前端，从时间导航到确认屏幕并确认问题。<br>当他们确认时，可输入评论或其他一些相关描述。<br>这样其他系统用户同样的问题，他们便会立即看到是否已被解决和目前的评论。</p>
<p>以这种方式，可以更协调的进行解决多个系统用户的问题的工作流程。</p>
<p>要确认事件，用户必须至少要有对相应触发器的读取权限。</p>
<p><br><br>在Dashboard下，在出现的问题里，点击确认，进入确认事件。<br>也可在监控-问题下查看问题详细信息。</p>
<p><br><br><br></p>
<h1 id="配置导出-导入-Configuration-export-import"><a href="#配置导出-导入-Configuration-export-import" class="headerlink" title="配置导出/导入(Configuration export/import)"></a>配置导出/导入(Configuration export/import)</h1><p>zabbix导入/导出功能，使得可以在一个zabbix系统与另一个zabbix系统之间交换各种配置实体。<br>类似于数据库的导入导出。即也可以对zabbix做备份。</p>
<p>可导出/导入的对象有：主机组； 模板； 主机； 拓扑； 图片； 聚合图形； 值映射。</p>
<p>数据也可导出：</p>
<ul>
<li>XML - 在前端</li>
<li>XML or JSON - 在zabbix API</li>
</ul>
<p>导出的详细信息：</p>
<ul>
<li>所有支持的元素都导出到一个文件中；</li>
<li>不导出从连链接模板继承的主机和模板实体；</li>
<li>由低级别发现创建的实体依赖于他们的任何实体不会导出。</li>
</ul>
<p>导入详细信息：</p>
<ul>
<li>第一次遇到错误停止导入；</li>
<li>导入支持XML和JSON文件；</li>
<li>使用“删除缺失”选项导入主机/模板时，导入的XML文件中不存在主机/模板宏也将被删除。</li>
</ul>
<p><br><br><br></p>
<h1 id="将Zabbix展现在Nginx上"><a href="#将Zabbix展现在Nginx上" class="headerlink" title="将Zabbix展现在Nginx上"></a>将Zabbix展现在Nginx上</h1><p>毕竟现在Nginx用的多，那就把Apache换成Nginx吧！</p>
<p>Nginx仓库:<a href="http://nginx.org/packages/" target="_blank" rel="external">http://nginx.org/packages/</a></p>
<p>自己安装Nginx:</p>
<ol>
<li>下载<code>nginx-release-xx.rmp</code>仓库源来安装；</li>
<li>手动创建<code>/etc/yum.repo.d/nginx.repo</code>；</li>
<li>直接下载<code>ngix.rpm</code>来安装；</li>
<li>直接下载源码来安装。</li>
</ol>
<p>相较于Apache，Nginx也只是配置个server就行了。优化什么的自己弄。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">vim /etc/nginx/conf.d/zabbix.me</div><div class="line"></div><div class="line">server &#123;</div><div class="line">	listen 80;</div><div class="line">    server_name zabbix.me;</div><div class="line">    root /usr/share/zabbix;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">    	<span class="keyword">if</span> (!f <span class="variable">$request_filename</span>) &#123;</div><div class="line">        	rewrite ^([^\?]+)$ /index.php?1=<span class="variable">$1</span> last;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">    	root /usr/share/zabbix;</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span>/<span class="variable">$fastcgi_script_name</span>;</div><div class="line">        include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">nginx -t</div><div class="line">systemctl start nginx</div></pre></td></tr></table></figure></p>
<p>下载就可以正常访问<code>zabbix-web</code>端了!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zabbix简介&quot;&gt;&lt;a href=&quot;#Zabbix简介&quot; class=&quot;headerlink&quot; title=&quot;Zabbix简介&quot;&gt;&lt;/a&gt;Zabbix简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.zabbix.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zabbix官方网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zabbix.com/documentation/3.4/zh/manual/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zabbix中文文档&lt;/a&gt;&lt;br&gt;Zabbix-repo仓库：&lt;repo.zabbix.com&gt;， 阿里云上也有镜像！&lt;/repo.zabbix.com&gt;&lt;/p&gt;
&lt;p&gt;本文系统环境是CentOS7x86_64, Zabbix 3.4。&lt;/p&gt;
&lt;p&gt;Zabbix （音同 zæbix），是由 Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。Zabbix 的授权是属于 GPLv2。&lt;br&gt;Zabbix可用于监视各种网络服务、服务器和网络机器等状态。是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。&lt;br&gt;Zabbix也可经由SNMP、TCP、ICMP、SSH等对目标进行监视。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Zabbix" scheme="https://zhang21.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Love at First Sight</title>
    <link href="https://zhang21.github.io/2017/11/06/Love-at-First-Sight/"/>
    <id>https://zhang21.github.io/2017/11/06/Love-at-First-Sight/</id>
    <published>2017-11-06T02:03:00.000Z</published>
    <updated>2017-11-06T05:27:19.950Z</updated>
    
    <content type="html"><![CDATA[<p>——波兰诗人维斯拉瓦·辛波丝卡(Wislawa Szymborska)<br><br></p>
<p>They’re both convinced<br>that a sudden passion joined them.</p>
<p>Such certainty is beautiful,<br>but uncertainty is more beautiful still.</p>
<p>Since they’d never met before,<br>they’re sure that there’d been nothing between them.</p>
<p>But what’s the word from the streets, staircases, hallways –<br>perhaps they’ve passed each other a million times?<br><a id="more"></a></p>
<p>I want to ask them<br>if they don’t remember<br>a moment face to face<br>in some revolving door?<br>perhaps a “sorry” muttered in a crowd?<br>a curt “wrong number” caught in the receiver?<br>but I know the answer.</p>
<p>No, they don’t remember<br>They’d be amazed to hear<br>that Chance has been toying with them<br>now for years.</p>
<p>Not quite ready yet<br>to become their Destiny,<br>it pushed them close, drove them apart,<br>it barred their path, stifling a laugh,<br>and then leaped aside.</p>
<p>There were signs and signals,<br>even if they couldn’t read them yet.</p>
<p>Perhaps three years ago<br>or just last Tuesday<br>a certain leaf fluttered<br>from one shoulder to another?</p>
<p>Something was dropped and then picked up.<br>Who knows, maybe the ball that vanished into childhood’s thicket?</p>
<p>There were doorknobs and doorbells<br>where one touch had covered another beforehand.</p>
<p>Suitcases checked and standing side by side.<br>One night, perhaps, the same dream,<br>grown hazy by morning.</p>
<p>Every beginning is only a sequel,<br>after all,<br>and the book of events<br>is always open halfway through.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;——波兰诗人维斯拉瓦·辛波丝卡(Wislawa Szymborska)&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;They’re both convinced&lt;br&gt;that a sudden passion joined them.&lt;/p&gt;
&lt;p&gt;Such certainty is beautiful,&lt;br&gt;but uncertainty is more beautiful still.&lt;/p&gt;
&lt;p&gt;Since they’d never met before,&lt;br&gt;they’re sure that there’d been nothing between them.&lt;/p&gt;
&lt;p&gt;But what’s the word from the streets, staircases, hallways –&lt;br&gt;perhaps they’ve passed each other a million times?&lt;br&gt;
    
    </summary>
    
      <category term="Literature" scheme="https://zhang21.github.io/categories/Literature/"/>
    
    
      <category term="Poetry" scheme="https://zhang21.github.io/tags/Poetry/"/>
    
  </entry>
  
  <entry>
    <title>LinuxShell脚本攻略</title>
    <link href="https://zhang21.github.io/2017/10/24/LinuxShell%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5/"/>
    <id>https://zhang21.github.io/2017/10/24/LinuxShell脚本攻略/</id>
    <published>2017-10-24T10:16:38.000Z</published>
    <updated>2017-11-28T08:03:24.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#bash(Bourne Again Shell)，shell环境使得用户能与操作系统的内核进行交互操作</span></div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#date</span></div><div class="line"><span class="comment">#description</span></div><div class="line"></div><div class="line">cmd1; cmd2</div><div class="line">cmd3</div><div class="line"></div><div class="line"><span class="comment">#sh /path/xx.sh</span></div><div class="line"><span class="comment">#Bash还有一个历史记录文件 ~/.bash_history</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><br></p>
<h2 id="终端打印"><a href="#终端打印" class="headerlink" title="终端打印"></a>终端打印</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#终端作为交互式工具，用户可以通过它与shell环境进行交互</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">'$var'</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$var</span></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"1\t2\t3"</span></div><div class="line"><span class="built_in">echo</span> -e <span class="string">'\e[1;31m Red color \e[0m'</span>    <span class="comment">#彩色</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> &#123;1..10&#125;		<span class="comment">#输出1到10</span></div><div class="line"><span class="built_in">echo</span> &#123;A..H&#125;		<span class="comment">#for i in &#123;a..z&#125;</span></div><div class="line"></div><div class="line">cat &lt;&lt; EOF</div><div class="line">11</div><div class="line">22</div><div class="line">33</div><div class="line">EOF</div><div class="line"></div><div class="line"><span class="comment"># \转义字符</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%-5s %-10s $-4.2f\n"</span> 001 Zhang 56.789</div><div class="line"><span class="comment">#格式替代符%s %d %c %f, -左对齐</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="玩转变量和环境变量"><a href="#玩转变量和环境变量" class="headerlink" title="玩转变量和环境变量"></a>玩转变量和环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Bash中，每一个变量默认值值都是字符串形式</span></div><div class="line"><span class="comment">#环境变量和自定义变量</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$UID</span></div><div class="line"></div><div class="line">var=value	<span class="comment">#这是赋值</span></div><div class="line"><span class="comment">#var = value这是相等操作</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$var</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#var&#125;</span>	<span class="comment">#字符数</span></div><div class="line"></div><div class="line"><span class="comment">#export用来设置环境变量，此后，任何shell中的程序都会继承环境变量</span></div><div class="line">ZHANG=Gentleman</div><div class="line"><span class="built_in">export</span> ZHANG</div><div class="line"></div><div class="line">PATH=<span class="string">"<span class="variable">$PATH</span>:/home/zhang/bin"</span></div><div class="line"><span class="built_in">export</span> <span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="通过shell进行数学运算"><a href="#通过shell进行数学运算" class="headerlink" title="通过shell进行数学运算"></a>通过shell进行数学运算</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#let, expr, bc, [], (())</span></div><div class="line"><span class="comment">#要注意默认是字符串类型哦</span></div><div class="line"></div><div class="line">n1=1;n2=2</div><div class="line"><span class="built_in">let</span> sum=n1+n2</div><div class="line"><span class="built_in">let</span> n1++;<span class="built_in">let</span> n2-=1</div><div class="line"></div><div class="line">sum=$[ n1 + n2 ]</div><div class="line">sum2=$(( sum + 3 ))</div><div class="line"></div><div class="line">sum=`expr 3 + 4`</div><div class="line"></div><div class="line"><span class="comment">#浮点计算 bc</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"8 * 1.1"</span> | bc</div><div class="line"></div><div class="line"><span class="comment">#设置小数点精度</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"scale=2; 3/8"</span> | bc</div><div class="line"></div><div class="line"><span class="comment">#进制转换</span></div><div class="line">num=100</div><div class="line"><span class="built_in">echo</span> <span class="string">"obase=2; <span class="variable">$num</span>"</span> | bc</div><div class="line"></div><div class="line">num=1100100</div><div class="line"><span class="built_in">echo</span> <span class="string">"obase=10; ibase=2; <span class="variable">$num</span>"</span> | bc</div><div class="line"></div><div class="line"><span class="comment">#平方和平方根</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"sqrt(100)"</span> | bc</div><div class="line"><span class="built_in">echo</span> <span class="string">"10^2"</span> | bc</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="文件描述符重定向"><a href="#文件描述符重定向" class="headerlink" title="文件描述符重定向"></a>文件描述符重定向</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#最常用的文件描述符是 stdin(0), stdout(1), stderr(2); 通过内容过滤将输出重定向到文件</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"This is a sample text 1"</span> &gt; temp.txt	<span class="comment">#覆盖</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"This is sample text 2"</span> &gt;&gt; temp.txt	<span class="comment">#追加</span></div><div class="line"></div><div class="line">ls + &gt;stdout.txt 2&gt;stderr.txt</div><div class="line">cmd 2&gt;&amp;1 /dev/null  == com &amp;&gt; /dev/null		<span class="comment">#null设备也被称为黑洞</span></div><div class="line"></div><div class="line"><span class="comment">#当一个command发生错误并退回时，它会返回一个非0的状态码</span></div><div class="line"><span class="built_in">echo</span> $?</div><div class="line"></div><div class="line"><span class="comment">#tee命令，一方面可将数据重定向到文件，另一方面还可提供一份重定向数据的副本作为后续命令的stdin</span></div><div class="line"><span class="comment">#tee默认覆盖文件，-a选项追加</span></div><div class="line">cat temp.txt | tee tee.txt | cat -n</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="数组和关联数组"><a href="#数组和关联数组" class="headerlink" title="数组和关联数组"></a>数组和关联数组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#数组借助索引将多个独立的数据存储为一个集合</span></div><div class="line"><span class="comment">#普通数组只能使用整数作为数组索引，而关联数组可以使用字符串作为数组索引</span></div><div class="line"><span class="comment">#还可将数组定义成一组索引-值(index-value)</span></div><div class="line"></div><div class="line">arr=(1 two 3 four 5)</div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[0]&#125;</span></div><div class="line">arr[0]=One</div><div class="line"></div><div class="line">index=3</div><div class="line"><span class="built_in">echo</span> $&#123;arr[<span class="variable">$index</span>]		<span class="comment">#arr[3]</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#arr[*]&#125;</span>		<span class="comment">#arr-length</span></div><div class="line"></div><div class="line"><span class="comment">#关联数组可用任意文本作为数组索引</span></div><div class="line"><span class="built_in">declare</span> -A ass_arr</div><div class="line">ass_arr=([index1]=val1 [index2]=val2 ...)	<span class="comment">#内嵌索引-值</span></div><div class="line">ass_arr[index3]=val3	<span class="comment">#独立索引-值</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!ass_arr[*]&#125;</span>		<span class="comment">#列出数组索引</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#alias作用是暂时的，关闭终端后别名就失效；</span></div><div class="line"><span class="comment">#为使别名一直保持，可将其写入 ~/.bashrc，因为每一个新的shell都会执行~/.bashrc中的命令</span></div><div class="line"><span class="comment">#新设置的别名将取代已有别名</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> vi=vim; <span class="built_in">unalias</span> vi</div><div class="line"><span class="built_in">echo</span> <span class="string">"alias ll='ls -l --color=auto'"</span> &gt;&gt; ~/.bashrc</div><div class="line"></div><div class="line"><span class="comment">#\对别名命令进行转义，执行原本的命令。避免攻击者利用别名将某些特权命令替换成别有用心的命令</span></div><div class="line">\vi test.sh</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="获取、设置日期和延时"><a href="#获取、设置日期和延时" class="headerlink" title="获取、设置日期和延时"></a>获取、设置日期和延时</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#很多应用程序需要以不同的格式打印日期，设置日期和时间，以及根据日期和时间执行操作;</span></div><div class="line"><span class="comment">#延时通常用于在程序执行过程中提供一段等待时间;</span></div><div class="line"><span class="comment">#在Unix-like系统中，日期被存储为一个整数，其大小为世界标准时间1970年1月1日0时0分0秒起所流逝的秒数；</span></div><div class="line"><span class="comment">#这种计时方式被称之为 纪元时或Unix时间；</span></div><div class="line"><span class="comment">#通过纪元时间，可知道两个日期之间相隔了多少秒</span></div><div class="line"><span class="comment">#编写以循环方式运行的监视脚本时，设置时间间隔是必不可少的</span></div><div class="line"></div><div class="line">date +%s</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">start=$(date +%s)</div><div class="line">commands</div><div class="line">sleep 1</div><div class="line">end=$(date +%s)</div><div class="line">diff=$((end - start))</div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$diff</span> seconds"</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#调试功能能在出现一些异常情况时生成运行信息</span></div><div class="line"></div><div class="line"><span class="comment">#!/bin/bash -xv</span></div><div class="line">sh -x</div><div class="line">sh -n</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="函数和参数"><a href="#函数和参数" class="headerlink" title="函数和参数"></a>函数和参数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fname()</div><div class="line">&#123;</div><div class="line">statements</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">fname()</div><div class="line">&#123;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$1</span>, <span class="variable">$2</span>		<span class="comment">#访问第参数1和参数2,$n第n个参数</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span>		<span class="comment">#以列表的形式一次性打印所有参数</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"$*"</span>		<span class="comment">#类似于$@，但参数被作为单个实体</span></div><div class="line"><span class="built_in">return</span> 0		<span class="comment">#f返回值</span></div><div class="line">&#125;</div><div class="line">fname 1 22 333	<span class="comment">#返回上面定义的变量</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#递归函数，能够调用自身，不断地生成新的进程，最终会造成xx</span></div><div class="line"><span class="comment">#导出函数，使用export导出，这样函数作用域就可以扩展到子进程</span></div><div class="line"><span class="built_in">export</span> -f fname</div><div class="line"><span class="comment">#读取命令返回值</span></div><div class="line"><span class="built_in">echo</span> $?</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="读取命令序列输出"><a href="#读取命令序列输出" class="headerlink" title="读取命令序列输出"></a>读取命令序列输出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#输入通常是stdin，输出stderr或stdout,这些命令称为 过滤器(filter)。我们使用 管道(pipe) 来连接每一个过滤器</span></div><div class="line">cmd1 | cmd2 | cmd3</div><div class="line"></div><div class="line"><span class="comment">#子shell，子shell生成独立的进程，不会对当前shell有任何影响，所做改变仅限于子shell内</span></div><div class="line">zhang=$(ls | cat -n)</div><div class="line"><span class="comment">#反引用</span></div><div class="line">zhang=`ls | cat -n`</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="读取字符"><a href="#读取字符" class="headerlink" title="读取字符"></a>读取字符</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#read是一个重要的从标准输入中读取文本的命令</span></div><div class="line"><span class="comment">#可以使用read以交互的形式来读取用户的输入</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> -n 5 zhang		<span class="comment">#读取字符数</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$zhang</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> -s passwd		<span class="comment">#不回显</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$passwd</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> -t 5 zhang		<span class="comment">#超时时间</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$zhang</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> -p zhang		<span class="comment">#显示提示信息</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$zhang</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> -d <span class="string">":"</span> zhang		<span class="comment">#定界符结束输入</span></div><div class="line">123：</div><div class="line"><span class="built_in">echo</span> <span class="variable">$zhang</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="字段分隔符和迭代器"><a href="#字段分隔符和迭代器" class="headerlink" title="字段分隔符和迭代器"></a>字段分隔符和迭代器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#内部字段分隔符(Internal Field Separator, IFS)是shell中的一个重要概念</span></div><div class="line"><span class="comment">#IFS的默认值为空白字符(换行符、制表符、空格)</span></div><div class="line">awk -F: <span class="string">'&#123;print $1,$3&#125;'</span> /etc/passwd		<span class="comment">#IFS=":"</span></div><div class="line"></div><div class="line"><span class="comment">#对一些列值进行迭代，循环非常有用</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">cmd</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> condition</div><div class="line"><span class="keyword">do</span></div><div class="line">cmd</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line">until condition</div><div class="line"><span class="keyword">do</span></div><div class="line">cmd</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="比较与测试"><a href="#比较与测试" class="headerlink" title="比较与测试"></a>比较与测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#程序中的流程控制是由比较和测试语句来处理的</span></div><div class="line"><span class="keyword">if</span> condition1 || condition2</div><div class="line"><span class="keyword">then</span></div><div class="line">	cmd1</div><div class="line"><span class="keyword">elif</span> condition3 &amp;&amp; condition4</div><div class="line"><span class="keyword">then</span></div><div class="line">	cmd2</div><div class="line"><span class="keyword">else</span></div><div class="line">	cmd3</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#算术比较</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -ge 10 -a <span class="variable">$num</span> -lt 20 ]</div><div class="line"></div><div class="line">-eq</div><div class="line">-gt</div><div class="line">-ge</div><div class="line">-lt</div><div class="line">-le</div><div class="line">-a</div><div class="line">-o</div><div class="line"></div><div class="line"><span class="comment">#文件系统相关</span></div><div class="line"><span class="keyword">if</span> [ -f <span class="variable">$file1</span> -o -x <span class="variable">$file2</span>]</div><div class="line"></div><div class="line">-x</div><div class="line">-w</div><div class="line">-r</div><div class="line">-f</div><div class="line">-d</div><div class="line">-e</div><div class="line">-b		<span class="comment">#block</span></div><div class="line">-l</div><div class="line"></div><div class="line"><span class="comment">#字符串比较</span></div><div class="line">[[ <span class="variable">$str1</span> = <span class="variable">$str2</span>]]</div><div class="line"></div><div class="line">=		<span class="comment">#=号旁有空格--是比较关系；=号旁没空格，是赋值语句</span></div><div class="line">!=</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">-z		<span class="comment">#空字符</span></div><div class="line">-n		<span class="comment">#非空字符</span></div><div class="line"></div><div class="line"><span class="comment">#使用test命令来执行条件检测</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]  -- <span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$num</span> -eq 0</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="命令之乐"><a href="#命令之乐" class="headerlink" title="命令之乐"></a>命令之乐</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>各种命令可谓Unix-Like系统中优美的部分，它能帮我们搞定各种繁杂的任务。<br>一旦你尝试过Linux提供的这些利器，你一定会感到惊讶：以前没有这些命令的时候，自己是什么熬过来的。<br>最钟爱的莫过于 <code>grep</code>, <code>awk</code>, <code>sed</code>, <code>find</code> 命令了！</p>
<p>本章将会为你介绍一些最有趣同时也是最实用的命令。</p>
<p><br></p>
<h2 id="用cat进行拼接"><a href="#用cat进行拼接" class="headerlink" title="用cat进行拼接"></a>用cat进行拼接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat命令通常用于读取、显示或拼接文件内容，不过它所具备的能力远不止此</span></div><div class="line"><span class="comment">#cat(concatenate, 拼接)</span></div><div class="line">cat file1 file2 ···</div><div class="line"><span class="built_in">echo</span> <span class="string">"Ahaha"</span> | cat - file1 file2		<span class="comment">#-指stdin文本文件名</span></div><div class="line"></div><div class="line">cat -s file3  -- cat file3 | tr -s <span class="string">'\n'</span>		<span class="comment">#压缩空白行</span></div><div class="line">cat -T test.py		<span class="comment">#将制表符显示为 ^I, 避免制表符和连续空格误用, 产生错误缩进</span></div><div class="line">cat -n file4		<span class="comment">#显示行号</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="录制与回放终端会话"><a href="#录制与回放终端会话" class="headerlink" title="录制与回放终端会话"></a>录制与回放终端会话</h2><p>当你需要准备一个命令行教程时，如果将我们输入命令后的一切按照先后次序记录下来，再进行回放，是不是很nice！<br>通过 <code>script</code>, <code>scriptreplay</code> 命令, 把终端会话记录到文件，并回放。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-t,将时间数据输出到标准错误； -a,追加输出</span></div><div class="line">script -t 2&gt; timing.log -a output.session		<span class="comment">#两个文件随意取名, 如不将错误重定向会显示在屏幕上导致很乱</span></div><div class="line">输入命令</div><div class="line">cmd2</div><div class="line">···</div><div class="line"><span class="built_in">exit</span>		<span class="comment">#退出录制</span></div><div class="line"></div><div class="line">scriptreplay -t timing.log output.session		<span class="comment">#播放</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="文件查找与文件列表"><a href="#文件查找与文件列表" class="headerlink" title="文件查找与文件列表"></a>文件查找与文件列表</h2><p><code>find</code> 是Unix/Linux命令行工具箱中最棒的工具之一。<br><code>find</code> 命令沿着文件层次结构向下遍历，匹配符合条件的文件，并执行相应的操作。</p>
<p>find - search for files in a directory hierarchy<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#基于文件名及正则表达式搜索</span></div><div class="line">find /home/zhang		<span class="comment">#列出/home/zhang目录及其子目录线所有文件和文件夹</span></div><div class="line">find /home/zhang -name <span class="string">"*.txt"</span></div><div class="line">find . -name <span class="string">"*.sh"</span> -o -iname <span class="string">"zhang*"</span>		<span class="comment">#匹配多个</span></div><div class="line">find /home/zhang -path <span class="string">"201710*"</span>		<span class="comment">#-path将文件路径作为一个整体进行匹配</span></div><div class="line">find . -regex	<span class="string">".*\(\.txt|\.[0-9]+\)$"</span>		<span class="comment">#匹配以.txt或数字结尾的文件</span></div><div class="line"></div><div class="line"><span class="comment">#使用-maxdepth, -mindepth参数，来限制find的遍历深度</span></div><div class="line"><span class="comment">#-type, 根据文件类型搜索。 f(普通文件)，d(目录)，b(块设备)，l(符号链接)，s(套接字)等</span></div><div class="line">find /home -maxdepth 1 -<span class="built_in">type</span> f(d)		<span class="comment">#参数顺序也会影响find的查找效率</span></div><div class="line"></div><div class="line"><span class="comment">#根据文件类型搜索</span></div><div class="line">find /dev -<span class="built_in">type</span> b		<span class="comment">#查看/dev及其子目录下设备文件</span></div><div class="line">find / -maxdepth 1 -<span class="built_in">type</span> l		<span class="comment">#查找/下链接文件</span></div><div class="line"></div><div class="line"><span class="comment">#根据文件时间进行搜索</span></div><div class="line"><span class="comment">#Unix/Linux文件系统中的每一个文件都有三种时间戳(timestamp),-表示小于，+表示大于</span></div><div class="line"><span class="comment">#Unix中并没有所谓的 "创建时间" 的概念</span></div><div class="line"><span class="comment">#访问时间(-atime,以天为单位； -amin,以分钟为单位):用户最近一次访问文件时间；</span></div><div class="line"><span class="comment">#修改时间(-mtime,以天为单位； -mmin,以分钟为单位):文件最后一次修改时间；</span></div><div class="line"><span class="comment">#变化时间(-ctime,以天为单位； -cmin,以分钟为单位):文件元数据(如权限，所有权)最后一次变化时间；</span></div><div class="line">find /home/zhang -<span class="built_in">type</span> f -mtime 7		<span class="comment">#7天前被修改的普通文件</span></div><div class="line">find /home/zhang -<span class="built_in">type</span> f -amin -10		<span class="comment">#搜索10分钟内被修改的普通文件</span></div><div class="line">find . -<span class="built_in">type</span> f -newer file1.txt		<span class="comment">#找出比file1.txt新的文件</span></div><div class="line"></div><div class="line"><span class="comment">#基于文件大小的搜索</span></div><div class="line"><span class="comment">#b(块，512字节), c(字节), w(字，2字节), k(千字节), M(兆字节), G(吉字节)</span></div><div class="line">find . -<span class="built_in">type</span> -f -size +100k</div><div class="line"></div><div class="line"><span class="comment">#删除匹配的文件</span></div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.swp"</span> -delete</div><div class="line"></div><div class="line"><span class="comment">#基于文件权限和所有权的匹配</span></div><div class="line">find . -<span class="built_in">type</span> f -perm 644</div><div class="line">find /var/apache -<span class="built_in">type</span> f -name <span class="string">"*.php"</span> -perm 644		<span class="comment">#搜索基于权限的文件</span></div><div class="line">find /var -maxdepth 2 -<span class="built_in">type</span> f -user zhang		<span class="comment">#搜索基于用户的文件</span></div><div class="line"></div><div class="line"><span class="comment">#执行命令或动作</span></div><div class="line"><span class="comment">#find命令可以借助-exec与其他命令进行结合</span></div><div class="line"><span class="comment">#&#123;&#125;是一个特殊字符串，将替换为相应文件名</span></div><div class="line">find . -<span class="built_in">type</span> f -perm 764 -user zhang -<span class="built_in">exec</span> chmod 644 &#123;&#125; \;		<span class="comment">#将所属用户zhang，权限764的文件权限修改为644</span></div><div class="line">find . -<span class="built_in">type</span> f -mmin +30 -name <span class="string">"*.txt"</span> -<span class="built_in">exec</span> cp &#123;&#125; &#123;&#125;.old \;		<span class="comment">#复制最近30内修改的名字为.txt的文件</span></div><div class="line"></div><div class="line"><span class="comment">#-exec结合多个命令</span></div><div class="line"><span class="comment">#我们无法在-exec参数中直接使用多个命令，不过我们可以把多个命令写到一个shellscript中，然后执行</span></div><div class="line">-<span class="built_in">exec</span> ./test.sh &#123;&#125; \;</div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.sh"</span> -mmin -10 -<span class="built_in">exec</span> sh &#123;&#125; \;</div><div class="line"></div><div class="line"><span class="comment">#让find跳过特定目录</span></div><div class="line">-prune</div></pre></td></tr></table></figure></p>
<p><br><br><strong>利用<code>stat</code>命令查看atime, mtime, ctime :</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#stat - display file or file system status</div><div class="line">stat 1.txt</div><div class="line"></div><div class="line">#Access:</div><div class="line">#Modify:</div><div class="line">#Change:</div></pre></td></tr></table></figure></p>
<p><br><br><strong>利用<code>touch</code>命令修改atime, mtime, ctime：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#touch - change file timestamps</div><div class="line"></div><div class="line">#-a     change only the access time</div><div class="line">#-m     change only the modification time</div><div class="line">#-d     instead of current time</div><div class="line">#-t     instead of current time</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="玩转xargs"><a href="#玩转xargs" class="headerlink" title="玩转xargs"></a>玩转xargs</h2><p>xargs - build and execute command lines from standard input<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#xargs能够处理stdin并将其转换为特定命令的命令行参数</span></div><div class="line"><span class="comment">#也可以将单行或多行输入文本转换成其他格式(如多行变单行)</span></div><div class="line">cmd | xargs</div><div class="line"></div><div class="line"><span class="comment">#将多行输入转换为单行输出</span></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"1\n2\n3"</span> | xargs	<span class="comment">#将换行符替换为空格</span></div><div class="line"><span class="comment">#将单行输入转换成多行输出</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"1 2 3"</span> | xargs -n 1	<span class="comment">#每行一个参数</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"hahaZhahaZhahaZhaha"</span> | xargs -n 2 -d Z	<span class="comment">#-d指定分隔符</span></div><div class="line"></div><div class="line"><span class="comment">#读取stdin，将格式化参数传递给命令</span></div><div class="line">cat test.txt | xargs -n 1 ./zhang.sh	<span class="comment">#zhang.sh arg1; zhang.sh arg2... 每次提供一个参数</span></div><div class="line">cat test.txt | xargs -n X ./zhang.sh	<span class="comment">#X为参数个数，一次提供全部参数</span></div><div class="line"></div><div class="line"><span class="comment">#指定替换字符串</span></div><div class="line">cat test.txt | xargs -I &#123;&#125; ./zhang.sh &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">#结合find使用xargs</span></div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.txt"</span> -print0 | xargs -0 ls	<span class="comment">#-print0无换行输出, -0将\0作为输入界定符</span></div><div class="line"></div><div class="line"><span class="comment">#统计某文件行数</span></div><div class="line">find /path -<span class="built_in">type</span> f -name <span class="string">"*.c"</span> -print0 | xargs -0 wc -l</div><div class="line"></div><div class="line"><span class="comment">#结合stdin，运用while和子shell</span></div><div class="line">cat file.txt | <span class="keyword">while</span> <span class="built_in">read</span> arg; <span class="keyword">do</span> cat <span class="variable">$arg</span>; <span class="keyword">done</span> == cat file.txt | xargs - &#123;&#125; cat &#123;&#125;</div><div class="line">cmd0 | (cmd1; cmd2; cmd3) | cmd4	<span class="comment">#子shell</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="用tr进行转换"><a href="#用tr进行转换" class="headerlink" title="用tr进行转换"></a>用tr进行转换</h2><p>tr - translate or delete characters<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#tr命令经常用来编写优美的单行命令</span></div><div class="line"><span class="comment">#tr可对来自stdin的字符 进行替换、删除以及压缩</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"AH WONDERFUL"</span> | tr <span class="string">'A-Z'</span> <span class="string">'a-z'</span>	<span class="comment">#转换大小写</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"AH WONDERFUL"</span> | tr <span class="string">'A-Z'</span> <span class="string">'a-b'</span> --&gt; ab bbbbbbbbb</div><div class="line"><span class="comment">#tr [option] set1 set2</span></div><div class="line"><span class="comment">#如果两个字符集长度不相等，那么set2会不断重复其最后一个字符，直到长度与set1相同</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> 12345 | tr <span class="string">'0-9'</span> <span class="string">'9876543210'</span>	<span class="comment">#数字加密</span></div><div class="line"><span class="built_in">echo</span> 87654 | tr <span class="string">'9876543210'</span> <span class="string">'0-9'</span>	<span class="comment">#数字解密</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">'He is a cool boy, and she is a beautiful girl'</span> | tr <span class="string">'A-Za-z'</span> <span class="string">'NOPQRSRUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'</span>	<span class="comment">#加密</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'Ur vf n pbby obl, naq fur'</span> | tr <span class="string">'NOPQRSRUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'</span> <span class="string">'A-Za-z'</span>	<span class="comment">#解密</span></div><div class="line"></div><div class="line">cat 1.txt | tr <span class="string">'\t'</span> <span class="string">' '</span>	<span class="comment">#将制表符转换为空格</span></div><div class="line"></div><div class="line"><span class="comment">#删除字符</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Hello 530 World"</span> | tr -d <span class="string">'0-9'</span>	<span class="comment">#-d删除，删除数字</span></div><div class="line">Hello  World</div><div class="line"><span class="built_in">echo</span> <span class="string">"Hello 520 World"</span> | tr -d -c <span class="string">'0-9'</span>	<span class="comment">#-c补集</span></div><div class="line"> 520</div><div class="line"></div><div class="line"><span class="comment">#压缩字符，将连续的重复字符压缩为单个字符</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"GNU's    not   Unix"</span> | tr -s <span class="string">' '</span>	<span class="comment">#-s压缩，压缩空格</span></div><div class="line">GNU<span class="string">'s not Unix</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">echo -e "1\n2\n3\n4\n5" &gt; sum.txt</span></div><div class="line"><span class="string">cat sum.txt | echo $[ $(tr '</span>\n<span class="string">' '</span>+<span class="string">') 0 ] -- echo $[1+2+3+4+5+0]</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#tr字符类</span></div><div class="line"><span class="string">\a	终端鸣响</span></div><div class="line"><span class="string">\b	退格</span></div><div class="line"><span class="string">\f	换页</span></div><div class="line"><span class="string">\n	换行</span></div><div class="line"><span class="string">\r	回车</span></div><div class="line"><span class="string">\t	水平制表符</span></div><div class="line"><span class="string">\v	垂直制表符</span></div><div class="line"><span class="string">string1-stringN	#从字符1到字符N升序过程中的所有字符</span></div><div class="line"><span class="string">[字符*次数]</span></div><div class="line"><span class="string">[:alnum:]	#所有字母和数字</span></div><div class="line"><span class="string">[:alpha:]	#所有字母</span></div><div class="line"><span class="string">[:digit:]	#所有数字</span></div><div class="line"><span class="string">[:lower:]	#所有小写字母</span></div><div class="line"><span class="string">[:upper:]	#所有大写字母</span></div><div class="line"><span class="string">[:graph:]	#所有可打印字符，不含空格</span></div><div class="line"><span class="string">[:print:]	#所有可打印字符，包含空格</span></div><div class="line"><span class="string">[:blank:]	#所有水平排列的空白字符</span></div><div class="line"><span class="string">[:cntrl:]	#所有控制字符</span></div><div class="line"><span class="string">[:punct:]	#所有标点字符</span></div><div class="line"><span class="string">[:space:]	#所有空白字符</span></div><div class="line"><span class="string">[:xdigit:]	#所有十六进制数</span></div><div class="line"><span class="string">[=字符]	#指定字符</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="校验和-与-核实文件完整性"><a href="#校验和-与-核实文件完整性" class="headerlink" title="校验和 与 核实文件完整性"></a>校验和 与 核实文件完整性</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#校验和(checksum)程序从文件中生成校验和密钥，然后利用校验和密钥核实文件的完整性</span></div><div class="line"><span class="comment">#校验和对于编写备份脚本或系统维护脚本非常重要，因为它们都会涉及通过网络传输文件</span></div><div class="line"><span class="comment">#通过使用校验和核实，我们就可以识别那些在网络传输过程中出现损坏的文件，并重传，从而确保数据完整性</span></div><div class="line"><span class="comment">#校验和对于核实数据完整性非常有用</span></div><div class="line"><span class="comment">#广泛使用的校验和技术有：md5sum, sha1sum</span></div><div class="line"></div><div class="line"><span class="comment">#对单个文件进行校验</span></div><div class="line">md5sum sum.txt &gt; sum.md5</div><div class="line"><span class="comment">#302c28003d487124d97c242de94da856  sum.txt</span></div><div class="line">md5sum -c sum.md5	<span class="comment">#-c检查</span></div><div class="line"><span class="comment">#sum.txt: 确定</span></div><div class="line"></div><div class="line"><span class="comment">#对目录进行校验</span></div><div class="line"><span class="comment">#对目录计算校验和意味着我们需要对目录中的所有文件以递归的方式进行计算</span></div><div class="line">yum install -y md5deep</div><div class="line">md5deep -r ./dir &gt; dir.md5	<span class="comment">#recursive递归</span></div><div class="line">md5sum -c dir.md5</div><div class="line"></div><div class="line"><span class="comment">#可以将测试dir下某个文件更改一下，校验的时候会报错</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="排序、单一、重复"><a href="#排序、单一、重复" class="headerlink" title="排序、单一、重复"></a>排序、单一、重复</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sort - 对文本文件进行行排序</span></div><div class="line"><span class="comment">#uniq - 删除排序文件中的重复行</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"333\n1"</span> &gt; 1.txt; <span class="built_in">echo</span> -e <span class="string">"22\n22"</span> &gt; 2.txt</div><div class="line">sort 1.txt 2.txt -o ./sorted.txt</div><div class="line"><span class="comment">#1</span></div><div class="line"><span class="comment">#22</span></div><div class="line"><span class="comment">#22</span></div><div class="line"><span class="comment">#333</span></div><div class="line">cat sortec.txt | uniq</div><div class="line"><span class="comment">#1</span></div><div class="line"><span class="comment">#22</span></div><div class="line"><span class="comment">#333</span></div><div class="line"></div><div class="line">sort -n	<span class="comment">#按数字进行排序</span></div><div class="line">sort -r	<span class="comment">#逆向排序</span></div><div class="line">sort -M	<span class="comment">#按月份排序</span></div><div class="line">sort -C	<span class="comment">#检查是否排序</span></div><div class="line">sort -b	<span class="comment">#忽略空白</span></div><div class="line"></div><div class="line"><span class="comment">#依据键或列进行排序</span></div><div class="line">sort -k 2 data.txt	<span class="comment">#依据第二列来排序</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#uniq要么使用管道，要么使用排过序的文件作文输入</span></div><div class="line">uniq -u sorted.txt	<span class="comment">#只显示唯一的行(即没有重复出现的行)</span></div><div class="line">uniq -d sorted.txt	<span class="comment">#只显示重复的行</span></div><div class="line">uniq -s 2 -w 2 sorted.txt	<span class="comment">#-s忽略前2个字符，-w指定用于比较的最大字符数</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="临时文件命名、随机数"><a href="#临时文件命名、随机数" class="headerlink" title="临时文件命名、随机数"></a>临时文件命名、随机数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在编写shell脚本时，我们经常需要存储临时文件。最适合存储临时数据的位置是 /tmp</span></div><div class="line"><span class="comment">#/tmp目录中的内容会在系统重启后被清空</span></div><div class="line"></div><div class="line">filename=<span class="variable">$RANDOM</span>	<span class="comment">#RANDOM返回一个随机数</span></div><div class="line">filename2=$$	<span class="comment">#当前shell的PID</span></div><div class="line">filename3=$((date +%F))	<span class="comment">#通过日期命令</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="分割文件和数据"><a href="#分割文件和数据" class="headerlink" title="分割文件和数据"></a>分割文件和数据</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#某些情况下，需要把文件分割成多个更小的片段</span></div><div class="line">dd <span class="keyword">if</span>=/dev/zero bs=100k count=1 of=./data.file	<span class="comment">#生成一个大小100k内容全是0的文件</span></div><div class="line">split -b 20k data.file	<span class="comment">#-d指定分割大小</span></div><div class="line"><span class="comment">#data.file xaa xab xac xad xae,这五个文件都为20k</span></div><div class="line"><span class="comment">#我测试了一下，几个文件加起来数据没变，几个文件总行数没变</span></div><div class="line"><span class="comment">#单位有 k, m, G, c(byte), w(word)</span></div><div class="line"><span class="comment">#-d以数字为后缀， -a指定后缀长度</span></div><div class="line"></div><div class="line">split data.file -b 20k -d -a 2 spt	<span class="comment">#增加前缀名'spt'</span></div><div class="line"><span class="comment">#data.file  spt00  spt01  spt02  spt03  spt04</span></div><div class="line"></div><div class="line">split -l 10 data.file	<span class="comment">#-l按行数来分割文件</span></div><div class="line"><span class="comment">#split只能根据大小或行数分割文件</span></div><div class="line"></div><div class="line"><span class="comment">#csplit可以根据文件本身特点进行分割</span></div><div class="line">-f	<span class="comment">#指定分割后文件前缀</span></div><div class="line">-n	<span class="comment">#指定分割后文件后缀数字个数</span></div><div class="line">-b	<span class="comment">#指定后缀格式</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="根据扩展名切分文件名"><a href="#根据扩展名切分文件名" class="headerlink" title="根据扩展名切分文件名"></a>根据扩展名切分文件名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#借助%操作符将名称从 “名称.扩展名” 格式中提取出来</span></div><div class="line"></div><div class="line">file=<span class="string">"zhang.txt"</span></div><div class="line">name1=<span class="variable">$&#123;file%.*&#125;</span>	<span class="comment">#删除位于%右侧的通配符(.*)所匹配的字符串，通配符从右向左进行匹配</span></div><div class="line"><span class="comment">#zhang</span></div><div class="line"><span class="comment">#*号通配符，.号</span></div><div class="line"><span class="comment">#%属于非贪婪匹配(non-greedy),它会匹配通配符最短结果</span></div><div class="line"><span class="comment">#%%属于贪婪匹配(greedy)，它会匹配符号条件的最长字符串</span></div><div class="line"></div><div class="line">name2=<span class="variable">$&#123;file#*.&#125;</span>	<span class="comment">#删除位于#右侧的通配符(*.)所匹配的字符串，通配符从左向右进行匹配</span></div><div class="line"><span class="comment">#txt</span></div><div class="line"><span class="comment"># #属于非贪婪匹配</span></div><div class="line"><span class="comment"># ##属于贪婪匹配</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#栗子</span></div><div class="line">URL=“www.google.com”</div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%.*&#125;</span>	<span class="comment">#非贪婪匹配，移除最右边.及其后面内容</span></div><div class="line">www.google</div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%%.*&#125;</span>	<span class="comment">#贪婪匹配</span></div><div class="line">www</div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*.&#125;</span>	<span class="comment">#非贪婪匹配，移除最左边.及其前面内容</span></div><div class="line">google.com</div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL##*.&#125;</span>	<span class="comment">#贪婪匹配</span></div><div class="line">com</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="批量重命名和移动"><a href="#批量重命名和移动" class="headerlink" title="批量重命名和移动"></a>批量重命名和移动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#综合运用find、rename、mv命令</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="拼写检查与词典操作"><a href="#拼写检查与词典操作" class="headerlink" title="拼写检查与词典操作"></a>拼写检查与词典操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Linux大多数发行版都含有一份词典文件，另外还有一个被称为aspell的拼写检查命令</span></div><div class="line"><span class="comment">#words --&gt; /usr/share/dict/linux.words</span></div><div class="line"></div><div class="line">grep <span class="string">"^good"</span> /usr/share/dict/linux.words</div><div class="line"></div><div class="line">aspell</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="交互输入自动化"><a href="#交互输入自动化" class="headerlink" title="交互输入自动化"></a>交互输入自动化</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#写一个读取交互式输入脚本</span></div><div class="line">vi jiaohu.sh</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">read</span> -p <span class="string">"Input a number:"</span> num</div><div class="line"><span class="built_in">read</span> -p <span class="string">"Input name:"</span> name</div><div class="line"><span class="built_in">echo</span> <span class="string">"You have enterd number:<span class="variable">$num</span>, name:<span class="variable">$name</span>"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"1\nzhang"</span> | ./jiaohu.sh</div><div class="line">You have entered number:1, name:hello</div><div class="line"></div><div class="line"><span class="comment">#or</span></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"1\nzhang"</span> &gt; input.txt</div><div class="line">./jiaohu.sh &lt; input.txt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#交互式输入自动化</span></div><div class="line"><span class="comment">#用expect实现自动化</span></div><div class="line">yum install -y expect</div><div class="line">vim auto_expect.sh</div><div class="line"></div><div class="line"><span class="comment">#!/bin/expect</span></div><div class="line">spawn ./jiaohu.sh	<span class="comment">#spawn指定需要自动化哪一个命令</span></div><div class="line">expect <span class="string">"Input a number:"</span>	<span class="comment">#expect提供需要等待的消息</span></div><div class="line">send <span class="string">"1\n"</span>		<span class="comment">#send是要发送的消息</span></div><div class="line">expect <span class="string">"Input name:"</span></div><div class="line">send <span class="string">"zhang"</span></div><div class="line">expect eof	<span class="comment">#expect eof指明命令交互结束</span></div><div class="line"></div><div class="line">./auto_expect.sh</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="以文件之名"><a href="#以文件之名" class="headerlink" title="以文件之名"></a>以文件之名</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>Unix将操作系统中的一切都视为文件。</p>
<p><br></p>
<h2 id="生成任意大小的文件"><a href="#生成任意大小的文件" class="headerlink" title="生成任意大小的文件"></a>生成任意大小的文件</h2><p>由于各种原因，可能需要生成一个包含随机数据的文件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#dd命令会克隆给定的输入内容，然后将一模一样的副本写到输出</span></div><div class="line"><span class="comment">#如果不指定if，dd会从stdin中读取输入；如果不指定of，dd会输出到stdout</span></div><div class="line"><span class="comment">#/dev/zero是一个字符设备，它会不断返回0值字节(\0)</span></div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=junk.data bs=1M count=1</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="文本文件的交集与差集"><a href="#文本文件的交集与差集" class="headerlink" title="文本文件的交集与差集"></a>文本文件的交集与差集</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#comm命令用于两个文件之间的比较</span></div><div class="line"><span class="comment">#交集(intersection),差集(set difference), 求差</span></div><div class="line"><span class="comment">#comm必须使用排过序的文件作为输入</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"1\n2\n3"</span> &gt; A.txt &amp;&amp; <span class="built_in">echo</span> -e <span class="string">"3\n2\n3"</span> &gt; B.txt</div><div class="line">sort -n A.txt -o A.txt &amp;&amp; sort -n B.txt -o B.txt</div><div class="line">comm A.txt B.txt</div><div class="line"><span class="comment">#输出第一列为A独有，第二列为B独有，第三列为交集</span></div><div class="line"></div><div class="line">comm A.txt B.txt -1 -2</div><div class="line"><span class="comment">#-1从输出中删除第一列，-2删除第二列，-3删除第三列</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="查找并删除重复文件"><a href="#查找并删除重复文件" class="headerlink" title="查找并删除重复文件"></a>查找并删除重复文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#重复文件指的是那些虽然名字不同但内容却一模一样的文件</span></div><div class="line"></div><div class="line">ls -lS	<span class="comment">#以文件大小排序，识别大小相等的文件</span></div><div class="line">md5sum	<span class="comment">#接下来计算这些文件的校验和</span></div></pre></td></tr></table></figure>
<h2 id="创建长路径目录"><a href="#创建长路径目录" class="headerlink" title="创建长路径目录"></a>创建长路径目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/zhang/1/22/333 2&gt;/dev/null</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="文件权限、所有权和粘滞位"><a href="#文件权限、所有权和粘滞位" class="headerlink" title="文件权限、所有权和粘滞位"></a>文件权限、所有权和粘滞位</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#用户(user)，用户组(group)，其他用户(other)</span></div><div class="line">ll ./*</div><div class="line"><span class="comment">#d目录，c字符设备，b块设备，l符号链接，s套接字，p管道，-普通文件</span></div><div class="line"></div><div class="line"><span class="comment">#用户还有一个称为setuid(S)的特殊权限，它出现在用户的x位置</span></div><div class="line"><span class="comment">#setuid权限允许用户以其拥有者的权限来执行可执行文件，即便这个文件是由其他用户运行的</span></div><div class="line">-rwSrw-r--</div><div class="line"></div><div class="line"><span class="comment">#组也拥有一个setgid(S)权限，它出现在组的x位置</span></div><div class="line"><span class="comment">#它允许以同该目录拥有者所在组相同的有效组权限来运行可执行文件</span></div><div class="line">-rwxrwSr--</div><div class="line"></div><div class="line"><span class="comment">#目录有一个特殊权限，叫做粘滞位(sticky bit)(T或t)，出现在其他用户的x位置</span></div><div class="line"><span class="comment">#当一个目录设置了粘滞位，只有创建该目录的用户才能删除目录中的文件,即便group和other有w权限</span></div><div class="line">-rwxr--rwT</div><div class="line"></div><div class="line">chmod u=rwx g=rw o=r file1</div><div class="line">chmod u+x g-w file2</div><div class="line">chmod 744 file3</div><div class="line"></div><div class="line">chmod a+x . -R	<span class="comment">#以递归方式设置权限</span></div><div class="line">chown user.group . -R	<span class="comment">#以递归方式设置所有权</span></div><div class="line"></div><div class="line">chmod a+t dir1	<span class="comment">#设置粘滞位</span></div><div class="line"></div><div class="line">chmod +s fiel4</div><div class="line">chown root.root file4</div><div class="line">chmod +s file4</div><div class="line">./file4	<span class="comment">#每次file4都是以root运行</span></div><div class="line"></div><div class="line"><span class="comment">#setuid的使用不是无限制的，它只能应用在Linux ELF格式二进制，而不能用于脚本文件。</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="创建不可修改文件"><a href="#创建不可修改文件" class="headerlink" title="创建不可修改文件"></a>创建不可修改文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#不可修改(immutable),是保护文件不被修改的安全手段之一。</span></div><div class="line"><span class="comment">#一旦文件被设置为不可修改，任何用户(包括root)都不能修改，除非将其不可修改属性移除</span></div><div class="line"></div><div class="line">chattr	<span class="comment">#修改文件在Linux第二扩展文件系统(E2fs)上的特有属性</span></div><div class="line">chattr +i file1	<span class="comment">#这样就无法删除file1</span></div><div class="line">chattr -i file1</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="批量生成空白文件"><a href="#批量生成空白文件" class="headerlink" title="批量生成空白文件"></a>批量生成空白文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#touch命令可用来生成空白文件，如果文件存在，则可以用它修改文件的时间戳</span></div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> &#123;1..100&#125;.txt;<span class="keyword">do</span></div><div class="line">touch <span class="variable">$name</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line">touch -a/-m	<span class="comment">#更改文件访问/修改时间</span></div><div class="line">touch -d <span class="string">"Thu Oct 31 14:20:13 CST 2017"</span> file1	<span class="comment">#指定特定时间戳</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="查找符号链接及其指向目标"><a href="#查找符号链接及其指向目标" class="headerlink" title="查找符号链接及其指向目标"></a>查找符号链接及其指向目标</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#符号链接(软链接)只不过是指向其他文件的指针</span></div><div class="line">ln -s /usr/bin /bin</div><div class="line">ls -l / | grep <span class="string">"^l"</span></div><div class="line">find / -maxdepth 1 -<span class="built_in">type</span> l</div><div class="line"></div><div class="line">readlink /bin	<span class="comment">#找出链接目标</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="列举文件类型统计信息"><a href="#列举文件类型统计信息" class="headerlink" title="列举文件类型统计信息"></a>列举文件类型统计信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在Unix/Linux系统中，文件类型并不是由文件扩展名决定的</span></div><div class="line">file /etc/passwd</div><div class="line">file -b /etc/passwd</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="环回文件与挂载"><a href="#环回文件与挂载" class="headerlink" title="环回文件与挂载"></a>环回文件与挂载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#环回文件系统是指那些在文件中而非物理设备中创建的文件系统</span></div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=loopback.file bs=1G count=1</div><div class="line">mkfs.ext4 loopback.file</div><div class="line">mount -o loop loopback.file /mnt/loopback	<span class="comment">#-o loop来挂载环回文件</span></div><div class="line">df -h</div><div class="line">umount /mnt/loopback</div><div class="line"></div><div class="line"><span class="comment">#将ISO文件作为环回文件挂载</span></div><div class="line">mount -o loop linux.iso /mnt/iso</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="生成ISO文件以及混合ISO"><a href="#生成ISO文件以及混合ISO" class="headerlink" title="生成ISO文件以及混合ISO"></a>生成ISO文件以及混合ISO</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可引导光盘自身具备引导能力，也可以运行操作系统或其他软件。不可引导光盘则做不到这些。</span></div><div class="line">cat /dev/cdrom  &gt; /dev/sdc	<span class="comment">#sdc指U盘</span></div><div class="line">dd <span class="keyword">if</span>=/dev/cdrom of=/dev/sdc	<span class="comment">#将ISO写入usb存储设备</span></div><div class="line">mkisofs -V <span class="string">"Label"</span> -o /dev/sdc /dev/cdrom</div><div class="line"></div><div class="line">cdrecord -v dev=/dev/cdrom image.iso</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="查找文件差异并进行修补"><a href="#查找文件差异并进行修补" class="headerlink" title="查找文件差异并进行修补"></a>查找文件差异并进行修补</h2><p>diff - compare files line by line<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#补丁文件(patch file)</span></div><div class="line"><span class="comment">#diff命令可以生成差异文件</span></div><div class="line">diff -u file1 file2	<span class="comment">#一体化形式输出</span></div><div class="line">diff -u file1 file2 &gt; diff.patch</div><div class="line">patch -p1 file1 &lt; diff.patch	<span class="comment">#得到file2</span></div><div class="line">patch -p1 file2 &lt; diff.patch	<span class="comment">#得到file1</span></div><div class="line">patch -R file1 &lt; diff.patch; patch -R file2 &lt; diff.patch	<span class="comment">#还原</span></div><div class="line"></div><div class="line"><span class="comment">#diff也能够以递归的形式作用于目录，它对目录中所有内容生成差异输出</span></div><div class="line">diff -Naur dir1 dir2</div><div class="line"><span class="comment">#-N将所有确实文件视为空文件， -a将所有文件视为文本文件</span></div><div class="line"><span class="comment">#-u生成一体化输出， -r遍历目录下所有文件</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="head与tail"><a href="#head与tail" class="headerlink" title="head与tail"></a>head与tail</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">head file1; tail file1	<span class="comment">#head与tail默认打印10行</span></div><div class="line">head -n 5 file1; tail -n 6 file1	<span class="comment">#指定行数</span></div><div class="line">head -n -5 file1	<span class="comment">#打印除了最后5行外所有行</span></div><div class="line">tail -n +(5+1) file1	<span class="comment">#打印除了开始5行外所有行</span></div><div class="line"></div><div class="line">tail -f /var/<span class="built_in">log</span>/nginx/access.log	<span class="comment">#--follow，动态关注文件</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="只列出目录的其他方法"><a href="#只列出目录的其他方法" class="headerlink" title="只列出目录的其他方法"></a>只列出目录的其他方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls -d .</div><div class="line">ls -l . | grep &quot;^d&quot;</div><div class="line">ls -F . | grep &quot;/$&quot;</div><div class="line">find . -maxdepth 1 -type d</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="pushd和popd"><a href="#pushd和popd" class="headerlink" title="pushd和popd"></a>pushd和popd</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在命令行中使用pushd和popd快速定位，pushd和popd以栈的方式运作</span></div><div class="line"><span class="comment">#当没有鼠标时，复制粘贴就不怎么实用了</span></div><div class="line"><span class="comment">#pushd和popd可以用于在多个目录之间进行切换而无需复制并粘贴目录路径</span></div><div class="line"></div><div class="line"><span class="built_in">pushd</span> /home/user1; <span class="built_in">pushd</span> /home/user2; <span class="built_in">pushd</span> /home/user3	<span class="comment">#将路径添加到栈</span></div><div class="line"><span class="built_in">pushd</span> +2	<span class="comment">#切换到/home/user3</span></div><div class="line"></div><div class="line"><span class="built_in">popd</span>	<span class="comment">#移除最近添加入栈的目录</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> /root; <span class="built_in">cd</span> /home/user</div><div class="line"><span class="built_in">cd</span> -	<span class="comment">#回到上次的目录</span></div><div class="line"><span class="built_in">cd</span> ..	<span class="comment">#切换到上一级目录</span></div><div class="line"><span class="built_in">cd</span> ~	<span class="comment">#切换到用户主目录</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="统计文件的行数、单词数、字符数"><a href="#统计文件的行数、单词数、字符数" class="headerlink" title="统计文件的行数、单词数、字符数"></a>统计文件的行数、单词数、字符数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#wc(word count)，是一个统计工具</span></div><div class="line">wc -l file1	<span class="comment">#统计行数</span></div><div class="line">wc -w file1	<span class="comment">#统计单词数</span></div><div class="line">wc -c file	<span class="comment">#统计字符数</span></div><div class="line">wc -L file	<span class="comment">#打印最长行长度</span></div><div class="line">wc file1	<span class="comment">#行、单词、字符数</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#tree命令是以图形化的树状结构打印文件和目录,在Linux发行版中默认未安装</span></div><div class="line">yum install -y tree</div><div class="line">tree /home/zhang</div><div class="line">tree /home/zhang -P <span class="string">"*.sh"</span>	<span class="comment">#只标记出.sh文件</span></div><div class="line">tree /home/zhang -I <span class="string">"*.sh"</span>	<span class="comment">#标记出除.sh文件外所有文件</span></div><div class="line">tree /home/zhang -h	<span class="comment">#显示大小</span></div><div class="line"></div><div class="line">tree /home/zhang -H http://localhost -o tree.html	<span class="comment">#以html形式输出目录树</span></div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="让文本飞"><a href="#让文本飞" class="headerlink" title="让文本飞"></a>让文本飞</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>shell脚本可以将<code>sed</code>, <code>awk</code>, <code>grep</code>, <code>cut</code>等这类优美的工具组合在一起，用于解决文本处理相关问题。</p>
<p><br></p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式是一种用于文本匹配的形式小巧、具有高度针对性的编程语言。只依靠通配符技术，能够匹配的文本范围相当有限。<br></p>
<p><strong>正则表达式基本组成</strong></p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>行起始标记</td>
</tr>
<tr>
<td>$</td>
<td>行尾标记</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td>[]</td>
<td>匹配包含在[]中的任意一个字符</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配出[^]之外任意一个字符</td>
</tr>
<tr>
<td>[-]</td>
<td>匹配[]中范围内的任意一个字符</td>
</tr>
<tr>
<td>？</td>
<td>重复0或1次</td>
</tr>
<tr>
<td>+</td>
<td>重复&gt;=1次</td>
</tr>
<tr>
<td>*</td>
<td>重复&gt;=0次</td>
</tr>
<tr>
<td>()</td>
<td>创建一个用于匹配的子串</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n, }</td>
<td>重复&gt;=n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
<tr>
<td>\</td>
<td>转义字符</td>
</tr>
<tr>
<td>竖线l</td>
<td>匹配竖线l两边任意一项</td>
</tr>
</tbody>
</table>
<p><br><br><strong>POSIX字符类</strong></p>
<p>POSIX字符类(POSIX character class),是一个形如[:…:]的特殊元序列，它用于匹配特定的字符范围。<br></p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>[:alnum:]</td>
<td>字母与数字字符</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>字母字符</td>
</tr>
<tr>
<td>[:blank:]</td>
<td>空格与制表符</td>
</tr>
<tr>
<td>[:digit:]</td>
<td>数字字符</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>小写字母</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>大写字母</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>标点符号</td>
</tr>
<tr>
<td>[:space:]</td>
<td>所有空白字符</td>
</tr>
</tbody>
</table>
<p><br><br><strong>元字符</strong></p>
<p>元字符(meta character)，是一种Perl风格的正则表达式，只有一部分文本处理工具支持它。<br></p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\b</td>
<td>单词边界</td>
</tr>
<tr>
<td>\B</td>
<td>非单词边界</td>
</tr>
<tr>
<td>\d</td>
<td>单个数字字符</td>
</tr>
<tr>
<td>\D</td>
<td>单个非数字字符</td>
</tr>
<tr>
<td>\w</td>
<td>单个单词字符(数字，字母和_)</td>
</tr>
<tr>
<td>\W</td>
<td>单个非单词字符</td>
</tr>
<tr>
<td>\s</td>
<td>单个空白字符</td>
</tr>
<tr>
<td>\S</td>
<td>单个非空白字符</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
</tbody>
</table>
<p><br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#匹配一个ipv4地址</span></div><div class="line">[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;</div><div class="line"></div><div class="line"><span class="comment">#匹配一个邮箱地址</span></div><div class="line">[\w]+@[\w]\.com</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="用grep在文件中搜索文本"><a href="#用grep在文件中搜索文本" class="headerlink" title="用grep在文件中搜索文本"></a>用grep在文件中搜索文本</h2><p><code>grep</code>命令是Unix中用于文本搜索的工具，它能够接受正则表达式和通配符。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">grep <span class="string">"匹配文本/通配符"</span> file1 file2... --color=auto	<span class="comment">#重点标记匹配</span></div><div class="line">grep -E <span class="string">"正则表达式"</span> file</div><div class="line">egrep <span class="string">"正则"</span> file</div><div class="line"></div><div class="line">grep -v	<span class="comment">#反向匹配</span></div><div class="line">grep -c	<span class="comment">#统计匹配行数</span></div><div class="line">grep -n	<span class="comment">#打印出匹配的行号</span></div><div class="line">grep -o	<span class="comment">#唯一匹配</span></div><div class="line">grep -l	<span class="string">"匹配"</span> file1 file2	<span class="comment">#返回匹配的文件名</span></div><div class="line">grep -R	<span class="comment">#递归匹配</span></div><div class="line">grep -i	<span class="comment">#忽略大小写</span></div><div class="line">grep -e <span class="string">"匹配1"</span> -e <span class="string">"匹配2"</span>	<span class="comment">#匹配多个样式</span></div><div class="line">grep -f match.txt file1	<span class="comment">#从match.txt文件读取匹配</span></div><div class="line">grep <span class="string">"匹配"</span> --include=*.&#123;sh,txt&#125; --exclude=*.<span class="built_in">log</span> --exclude-dir=/home/user -r /home	<span class="comment">#包括或排除文件</span></div><div class="line">-A/-B n	<span class="comment">#输出匹配 之后/之前 n行</span></div><div class="line">-c n	<span class="comment">#输出匹配 前后 n行</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="用cut按列切分文件"><a href="#用cut按列切分文件" class="headerlink" title="用cut按列切分文件"></a>用cut按列切分文件</h2><p><code>cut</code>是一个将文本按列进行切分的小工具，它也可以指定每列定界符。在cut的术语中，每列都是一个字段。<br></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#制表符'\t' 是cut默认的定界符</span></div><div class="line">cut -d<span class="string">' '</span> -f1 1.txt	<span class="comment">#-d指定分隔符，-f打印第几个字段</span></div><div class="line">cut -f1,2,3	<span class="comment">#打印1,2，3列</span></div><div class="line">-c字符；	-b字节；</div><div class="line">cut -c 1-5 1.txt	<span class="comment">#打印1-5字符</span></div><div class="line">cut -c -2 1.txt	<span class="comment">#打印前2个字符</span></div><div class="line">cut -c 3-	<span class="comment">#打印第3个字符到行尾</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="统计特定文件词频"><a href="#统计特定文件词频" class="headerlink" title="统计特定文件词频"></a>统计特定文件词频</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#单词解析可以用 关联数组,正则表达式配合sed,awk,grep等工具来完成</span></div><div class="line"><span class="comment">#关联数组中，将单词作为数组索引，单词次数作为数组值</span></div><div class="line">egrep -o <span class="string">"\b[:alpha:]+\b"</span>	<span class="comment">#匹配单词</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="sed入门"><a href="#sed入门" class="headerlink" title="sed入门"></a>sed入门</h2><p><code>sed</code>是stream editor(流编辑器)的缩写，它是文本处理中非常重要的工具。能够完美地配合正则表达式使用。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sed - stream editor for filtering and transforming text</span></div><div class="line"><span class="comment">#字符/在sed中最为定界符使用</span></div><div class="line"></div><div class="line"><span class="comment">#替换</span></div><div class="line"><span class="comment">#sed 's/匹配样式/替代字符串/'</span></div><div class="line">sed <span class="string">'s/pattern/repalce/'</span> file	<span class="comment">#替换</span></div><div class="line">sed -i <span class="string">'s/pattern/repalce/'</span> file	<span class="comment">#将替换应用于file</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"1.txt"</span> &gt; 1.txt &amp;&amp; sed <span class="string">'s/txt/haha'</span> 1.txt	<span class="comment">#在输出中用haha替换txt</span></div><div class="line">sed -i <span class="string">'s/txt/haha/'</span> 1.txt	<span class="comment">#将1.txt文件中的txt用haha替换掉</span></div><div class="line"><span class="comment">#-i选项替换原文件</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"hahaha"</span> | sed <span class="string">'s/ha/HA/g'</span>	<span class="comment">#全部替换</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"hahaha"</span>	| sed <span class="string">'s/ha/HA/2g'</span>	<span class="comment">#指定位置替换，从第2处开替换全局</span></div><div class="line"></div><div class="line"><span class="comment">#移除匹配样式的行</span></div><div class="line">sed <span class="string">'/pattern/d</span></div><div class="line"><span class="string">sed '</span>/^$/d<span class="string">'	##移除空白行</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#在sed中用&amp;标记已匹配字符串</span></div><div class="line"><span class="string">echo "A wonderful goal" | sed '</span>s/\w\+/[&amp;]/g<span class="string">'	#\w\+匹配每一个单词</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#子串匹配标记\1,\2...</span></div><div class="line"><span class="string">echo "1st 2nd 3rd" | sed '</span>s/\(\w\+\) \(\w\+\) \(\w\+\)/\2 \1 \3/<span class="string">'</span></div><div class="line"><span class="string">2nd 1st 3rd</span></div><div class="line"><span class="string">#将\2和\1交换次序，(),+等在sed中要转义，否则要报错</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#组合多个表达式</span></div><div class="line"><span class="string">sed '</span>expression1; expression2; ...</div><div class="line"><span class="built_in">echo</span> <span class="string">"aabbcc"</span> | sed <span class="string">'s/a/A/; s/b/B/; s/c/C/g'</span></div><div class="line">AaBbCC</div><div class="line"></div><div class="line"><span class="comment">#双引号 " " 内的特殊符号（如$等），可以保有原本的特性</span></div><div class="line"><span class="comment">#单引号 ' ' 内的特殊字符则仅为一般字符（纯文本）</span></div><div class="line"><span class="comment">#引用</span></div><div class="line">text=hello</div><div class="line"><span class="built_in">echo</span> <span class="string">'hello world'</span> | sed <span class="string">"s/<span class="variable">$text</span>/HELLO/"</span></div><div class="line">HELLO world</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="awk入门"><a href="#awk入门" class="headerlink" title="awk入门"></a>awk入门</h2><p><code>awk</code>被设计用于数据流，它可以对列和行进行操作。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#awk ‘begin&#123;print "start"&#125; pattern &#123;command&#125; end&#123;print "end"&#125;’ file</span></div><div class="line">awk <span class="string">'&#123;sum += $1&#125;; &#123;print sum&#125;'</span></div><div class="line"><span class="comment">#awk脚本由:begin块、end块和能使用模式(pattern)匹配的通用语句块 组成</span></div><div class="line"><span class="comment">#3个部分都是可选的</span></div><div class="line"><span class="comment">#awk也可以从stdin中读取内容</span></div><div class="line">cat /etc/passwd | awk -F: <span class="string">'&#123;print $1&#125;'</span>	<span class="comment">#-F指定界定符</span></div><div class="line"></div><div class="line"><span class="comment">#awk中的特殊变量</span></div><div class="line"><span class="comment">#NR：记录数量(number of records)，对应于当前行号</span></div><div class="line"><span class="comment">#NF：字段数量(number of fields)，对应于当前行的字段数</span></div><div class="line"><span class="comment">#$0：执行过程中当前行的文本内容</span></div><div class="line"><span class="comment">#$1,$2...$NF：第1个/2个.../最后一个 字段的内容</span></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"L1 1\nL2 22\nL3 333"</span> | awk <span class="string">'&#123;print NR NF $0 $1 $2&#125;'</span></div><div class="line"><span class="comment"># NR NF $0    $1  $2 $NF=最后一个=$2</span></div><div class="line">  1  2  L1 1  L1  1  1</div><div class="line">  2  2  L2 2  L2  2  2</div><div class="line">  3  2  L3 3  L3  3  3</div><div class="line"></div><div class="line"><span class="comment">#将外部变量传递给awk</span></div><div class="line"><span class="comment">#-v选项可将外部值传递给awk</span></div><div class="line"><span class="comment">#  -v var=val  --assign=var=val</span></div><div class="line">var=<span class="string">'12345'</span></div><div class="line"><span class="built_in">echo</span> | awk -v v1=<span class="variable">$var</span> <span class="string">'&#123;print v1&#125;'</span></div><div class="line"><span class="comment">#多个变量</span></div><div class="line">var1=111; var2=222</div><div class="line"><span class="built_in">echo</span> | awk <span class="string">'&#123;print v1,v2&#125;'</span> v1=<span class="variable">$var1</span> v2=<span class="variable">$var2</span></div><div class="line"><span class="comment">#变量来自文件而非标准输入</span></div><div class="line">awk <span class="string">'&#123;print v1,v2&#125;'</span> v1=<span class="variable">$var1</span> v2=<span class="variable">$var2</span> file</div><div class="line"></div><div class="line"><span class="comment">#用样式对awk进行过滤处理</span></div><div class="line">awk <span class="string">'NR &lt; 3,NR==4'</span> 1.txt	<span class="comment">#行号&lt;5的行</span></div><div class="line">awk <span class="string">'/linux/'</span> 1.txt	<span class="comment">#匹配带有linux的行（可用re）</span></div><div class="line">awk <span class="string">'!/linux/'</span> 1.txt <span class="comment">#!匹配不带linux的行</span></div><div class="line"></div><div class="line"><span class="comment">#设置定界符</span></div><div class="line">awk -F: <span class="string">'&#123;print $1&#125;'</span> /etc/passwd</div><div class="line">awk <span class="string">'&#123;FS=":"&#125; &#123;print $1&#125;'</span> /etc/passwd</div><div class="line">awk <span class="string">'&#123;FS=":"; print $1&#125;'</span> /etc/passwd</div><div class="line"></div><div class="line"><span class="comment">#从awk中读取命令输出，用getline读取行</span></div><div class="line"><span class="built_in">echo</span> | awk <span class="string">'&#123;"grep root /etc/passwd" | getlin out; print out&#125;'</span></div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line"></div><div class="line"><span class="comment">#在awk中使用循环</span></div><div class="line">awk <span class="string">'&#123;for(i=1;i&lt;4;i++) &#123;print $i&#125;&#125;'</span> 2.txt	<span class="comment">#输出第1,2,3列</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="对文件中的行、单词、字符进行迭代"><a href="#对文件中的行、单词、字符进行迭代" class="headerlink" title="对文件中的行、单词、字符进行迭代"></a>对文件中的行、单词、字符进行迭代</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#迭代文件中的每一行</span></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"1\n22\n333"</span> | <span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$line</span>;<span class="keyword">done</span></div><div class="line">grep <span class="string">"bash"</span> /etc/passwd | <span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$line</span>;<span class="keyword">done</span></div><div class="line"><span class="comment">#1</span></div><div class="line"><span class="comment">#22</span></div><div class="line"><span class="comment">#333</span></div><div class="line"></div><div class="line"><span class="comment">#迭代一行中的每一个单词</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"1 22 333"</span> | <span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> <span class="keyword">for</span> word <span class="keyword">in</span> <span class="variable">$line</span>;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$word</span>;<span class="keyword">done</span>;<span class="keyword">done</span></div><div class="line"><span class="comment">#1</span></div><div class="line"><span class="comment">#22</span></div><div class="line"><span class="comment">#333</span></div><div class="line"></div><div class="line"><span class="comment">#迭代一个单词中的每一个字符</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"abc"</span> | <span class="keyword">while</span> <span class="built_in">read</span> line;</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="keyword">for</span> word <span class="keyword">in</span> <span class="variable">$line</span>;</div><div class="line">	<span class="keyword">do</span></div><div class="line">    	<span class="keyword">for</span>((i=0;i&lt;<span class="variable">$&#123;#word&#125;</span>;i++));</div><div class="line">		<span class="keyword">do</span></div><div class="line">        	<span class="built_in">echo</span> <span class="variable">$&#123;word:i:1&#125;</span>;</div><div class="line">		<span class="keyword">done</span>;</div><div class="line">	<span class="keyword">done</span>;</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#写成一行</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"abc"</span> | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="keyword">for</span> word <span class="keyword">in</span> <span class="variable">$line</span>; <span class="keyword">do</span> <span class="keyword">for</span>((i=0;i&lt;<span class="variable">$&#123;#word&#125;</span>;i++)); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$&#123;word:i:1&#125;</span>; <span class="keyword">done</span>; <span class="keyword">done</span>; <span class="keyword">done</span></div><div class="line"><span class="comment">#a</span></div><div class="line"><span class="comment">#b</span></div><div class="line"><span class="comment">#c</span></div><div class="line"><span class="comment">#$&#123;#word&#125;返回变量word的长度</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="按列合并文件"><a href="#按列合并文件" class="headerlink" title="按列合并文件"></a>按列合并文件</h2><p>可以使用<code>paste</code>命令实现列拼接<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#paste - merge(整合) lines of files</span></div><div class="line"><span class="built_in">echo</span> -e  <span class="string">"1\n2\n3"</span> &gt; 1.txt &amp;&amp; <span class="built_in">echo</span> -e <span class="string">"Line1\nLine2\nLine3"</span> &gt; 2.txt</div><div class="line">paste 1.txt 2.txt</div><div class="line">1	Line1</div><div class="line">2	Line2</div><div class="line">3	Line3</div><div class="line"><span class="comment">#默认定界符是制表符，用-d指定</span></div><div class="line">paste 1.txt 2.txt -d<span class="string">','</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="打印文件或行中的第n个单词或n列"><a href="#打印文件或行中的第n个单词或n列" class="headerlink" title="打印文件或行中的第n个单词或n列"></a>打印文件或行中的第n个单词或n列</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">awk -F<span class="string">':'</span> <span class="string">'&#123;print $1,$3&#125;'</span> file1</div><div class="line">cut -d<span class="string">':'</span> -f 1,3 file1</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="打印不同行或样式之间的文本"><a href="#打印不同行或样式之间的文本" class="headerlink" title="打印不同行或样式之间的文本"></a>打印不同行或样式之间的文本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'NR==1,NR==10'</span> /etc/passwd</div><div class="line">awk <span class="string">'NR==1,NR==10'</span> /etc/passwd | awk -F<span class="string">":"</span> <span class="string">'&#123;print $1,$NF&#125;'</span> <span class="comment">#打印特定行内的特定列</span></div><div class="line"></div><div class="line">awk <span class="string">'/start_pattern/, /end_pattern/'</span> file	<span class="comment">#打印start到end之间的内容,可使用re</span></div><div class="line">awk <span class="string">'/root/, /zhang/'</span> /etc/passwd	<span class="comment">#打印root到zhang之间内容</span></div><div class="line">awk <span class="string">'/^ro.?t'</span>/, /bash$/<span class="string">' /etc/pass</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="以逆序形式打印行"><a href="#以逆序形式打印行" class="headerlink" title="以逆序形式打印行"></a>以逆序形式打印行</h2><p>可以使用<code>awk</code>, <code>tac</code>完成。tac就是反过来的cat。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#tac - 反转显示文件中的行，行内的内容无法用tac反向排列</span></div><div class="line">tac 1.txt</div><div class="line">awk <span class="string">'&#123;lifo[NR]=$0; lno=NR&#125; END&#123; for(;lno&gt;-1;lno--) &#123;print lifo[lno]&#125;;&#125;'</span> 1.txt</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="解析文本中的电子邮件和URL"><a href="#解析文本中的电子邮件和URL" class="headerlink" title="解析文本中的电子邮件和URL"></a>解析文本中的电子邮件和URL</h2><p>从给定的文件中解析出所需要的文本是我们从事文本处理时的一项任务。</p>
<p>grep, egrep, fgrep - print lines matching a pattern<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#egrep</span></div><div class="line"></div><div class="line"><span class="comment">#匹配一个邮箱地址</span></div><div class="line">egrep -o <span class="string">'[a-zA-Z0-9.]+@[0-9a-zA-Z.]+\.[a-zA-Z]&#123;2,4&#125;'</span> emails.txt</div><div class="line"></div><div class="line"><span class="comment">#匹配一个URL地址</span></div><div class="line">egrep -o <span class="string">"http://[a-zA-Z0-9.]+\.[a-zA-Z]&#123;2,3&#125;"</span> urls.txt</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="打印某个样式之前-之后n行"><a href="#打印某个样式之前-之后n行" class="headerlink" title="打印某个样式之前/之后n行"></a>打印某个样式之前/之后n行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grep <span class="string">"zhang"</span> /etc/passwd -A 5	<span class="comment">#Ater</span></div><div class="line">grep <span class="string">"zhang"</span> /etc/passwd -B 5	<span class="comment">#Before</span></div><div class="line">grep <span class="string">"zhang"</span> /etc/passwd -C 5	<span class="comment">#前后五行都打印</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="在文件中移除包含某个单词的句子"><a href="#在文件中移除包含某个单词的句子" class="headerlink" title="在文件中移除包含某个单词的句子"></a>在文件中移除包含某个单词的句子</h2><p>只要能写出正确的正则表达式(Regular Expression)，那就手到擒来</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed <span class="string">'s/[^.]*handsome boy[^.]*\.//g'</span> file.txt	<span class="comment">#句子以.结束</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="文本切片与参数操作"><a href="#文本切片与参数操作" class="headerlink" title="文本切片与参数操作"></a>文本切片与参数操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#替换变量内容中的部分文字</span></div><div class="line">var=<span class="string">"One two three"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var/t/T&#125;</span>	<span class="comment">#只替换了一个</span></div><div class="line"><span class="comment">#One Two three</span></div><div class="line"></div><div class="line"><span class="comment">#指定字符串起始位置和长度</span></div><div class="line"><span class="comment">#$&#123;变量:开始部分:长度&#125;</span></div><div class="line"><span class="variable">$&#123;vari:start:length&#125;</span></div><div class="line"><span class="built_in">echo</span> &#123;var:0:2&#125;	<span class="comment">#On</span></div><div class="line"><span class="built_in">echo</span> &#123;var:1:6&#125;	<span class="comment">#ne two</span></div><div class="line"></div><div class="line"><span class="comment">#起始字符的索引是0,将最后一个字符索引记为-1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:(-1)&#125;</span>	<span class="comment">#e</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:(-3):3&#125;</span>	<span class="comment">#ree</span></div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="一团乱麻？没这回事"><a href="#一团乱麻？没这回事" class="headerlink" title="一团乱麻？没这回事"></a>一团乱麻？没这回事</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>本章会研究一些用于解析网站内容、下载数据、发送数据表单以及网站颇为任务自动化之类的实例。我们可以仅用几行脚本就将很多原本需要通过浏览器交互进行的活动管理自动化。通过命令行工具利用HTTP协议所提供的功能，我们可以用脚本解决大部分Web自动化的问题。</p>
<p><br></p>
<h2 id="网站下载"><a href="#网站下载" class="headerlink" title="网站下载"></a>网站下载</h2><p>使用一些命令行下载工具，从给定的URL中下载文件或网页。<br></p>
<p>wget是一个用于文件下载的命令行工具，选项多且用法灵活。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Wget - The non-interactive(非交互式) network downloader</span></div><div class="line"></div><div class="line">wget URL1 URL2...</div><div class="line">wget http://xxx.com/nginx-1.12.0.tag.gz</div><div class="line">wget https://xxx/a.rpm http://xxxx/bb.rpm</div><div class="line"></div><div class="line"><span class="comment">#指定文件名，指定信息输出(wget默认是stdout)</span></div><div class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo -O aliyun.repo -o ./wget.log</div><div class="line">wget URL -t 5	<span class="comment">#-t，重试次数</span></div><div class="line"></div><div class="line"><span class="comment">#下载限速</span></div><div class="line">wget --<span class="built_in">limit</span>-rate=10m URL	<span class="comment">#下载限速</span></div><div class="line">wget -Q 100m URL	<span class="comment">#指定下载配额</span></div><div class="line"></div><div class="line"><span class="comment">#端点续传</span></div><div class="line"><span class="comment">#wget进行的下载在完成前被中断，从断点开始下载</span></div><div class="line">wget -c URL</div><div class="line"></div><div class="line"><span class="comment">#用cURL下载</span></div><div class="line"><span class="comment">#cURL是一个比wget更强大的高级命令工具</span></div><div class="line"><span class="comment">#和wget不同，curl并不将下载数据写入文件，而是写入stdout，因此必须重定向到文件</span></div><div class="line"></div><div class="line"><span class="comment">#复制或镜像整个网站</span></div><div class="line"><span class="comment">#wget有一个选项可以使其像爬虫一样以递归方式手机网页上所有URL链接，并逐个下载</span></div><div class="line"><span class="comment">#这样一来就可以下载一个网站的所有页面</span></div><div class="line">wget --mirror URL</div><div class="line"><span class="comment">#-m(--mirror) -N -r -l inf --no-remove-listing 的缩写形式。</span></div><div class="line">或 wget -r -N -l DEPTH URL</div><div class="line"><span class="comment">#-r递归下载，-l指定递归深度，-N(timestamp)只获取比本地时间新的文件</span></div><div class="line"></div><div class="line"><span class="comment">#访问需要认证的HTTP或FTP页面</span></div><div class="line">wget --user <span class="string">"username"</span> --password <span class="string">"pass"</span> URL</div><div class="line"><span class="comment">#如未在命令行内输入密码，则会由网页提示手动输入</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="以格式化纯文本下载网页"><a href="#以格式化纯文本下载网页" class="headerlink" title="以格式化纯文本下载网页"></a>以格式化纯文本下载网页</h2><p>网页其实就是包含HTML标记和其他诸如Javascript，CSS等元素的HTML页面。HTML标记是网页的基础，也许需要解析网页来查找特定的内容。<br></p>
<p>links,是一个基于命令行的Web浏览器</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#links - lynx-like alternative character mode WWW browser</span></div><div class="line"></div><div class="line"><span class="comment">#在命令行中浏览一个网页</span></div><div class="line">links www.baidu.com</div><div class="line"></div><div class="line"><span class="comment">#以ASCII形式下载网页</span></div><div class="line">links --dump URL &gt; URL.txt</div><div class="line"></div><div class="line"><span class="comment">#打开本地html文件</span></div><div class="line">links 1.html</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="cURL入门"><a href="#cURL入门" class="headerlink" title="cURL入门"></a>cURL入门</h2><p>cURL支持包括HTTP、HTTPS、FTP在内的众多协议。它还支持POST、cookie、认证、从指定偏移处下载部分文件、参照页(referer)、用户代理字符串、扩展头部(extra header)、限速、文件大小限制、进度条等特性。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#curl - transfer a URL</span></div><div class="line"><span class="comment">#cURL通常将下载文件输出到stdout，将进度信息输出到stderr</span></div><div class="line"><span class="comment">#要想避免显示进度信息，可使用--silent</span></div><div class="line"><span class="comment">#curl可用来下载、发送各种HTTP请求、指定HTTP头部等操作</span></div><div class="line"></div><div class="line">curl URL --silent	<span class="comment">#输出到stdout</span></div><div class="line"></div><div class="line"><span class="comment">#-O写入文件，文件名从URL中解析</span></div><div class="line">curl http://www.baidu.com/index.html -O --silent	<span class="comment">#创建index.html</span></div><div class="line"></div><div class="line"><span class="comment">#-o将数据写入指定文件</span></div><div class="line">curl URL -o baidu.html --progress	<span class="comment">#--progress显示进度条</span></div><div class="line">links baidu.html</div><div class="line"></div><div class="line"><span class="comment">#端点续传</span></div><div class="line"><span class="comment">#和wget不同，cURL包含更高级的下载恢复特性，能够从特定的文件偏移处继续下载</span></div><div class="line"><span class="comment">#curl可以通过指定一个偏移量来下载部分文件</span></div><div class="line">手动：curl URL/file -C offset	<span class="comment">#偏移量以Byte为单位的整数</span></div><div class="line">自动：curl -C -URL	<span class="comment">#自动续传</span></div><div class="line"></div><div class="line"><span class="comment">#用cURL设置参照页字符串, --referer</span></div><div class="line"><span class="comment">#参照页(referer)是位于HTTP头部中的一个字符串，用来标识用户从哪个页面到达当前页面的</span></div><div class="line"><span class="comment">#如果用户点击网页A中某个链接，转到了网页B。那么网页B头部的referer会包含网页A的URL</span></div><div class="line">curl --referer Referer_URL target_URL</div><div class="line">curl --referer http://www.baidu.com http://jianshu.com</div><div class="line"></div><div class="line"><span class="comment">#用cURL设置cookie, --cookie</span></div><div class="line"><span class="comment">#可以用curl来存储HTTP操作过程中使用到的cookie</span></div><div class="line"><span class="comment">#cookie用key=value形式，指定多个用 分号 分隔</span></div><div class="line">curl URL --cookie <span class="string">"user=AAA;name=bbb"</span></div><div class="line">curl URL --cookie-jar cookie.txt	<span class="comment">#将cookie另存为</span></div><div class="line"></div><div class="line"><span class="comment">#用cURL设置用户代理字符串, --user-agent</span></div><div class="line"><span class="comment">#如果不指定代理，一些需要用户代理的网页就无法显示</span></div><div class="line">curl URL --user-agent(-A) <span class="string">"Mozilla"</span></div><div class="line"></div><div class="line"><span class="comment">#用-H "头部信息"传递多个头部信息</span></div><div class="line">curl -H <span class="string">"Host:www.haha.com"</span> -H <span class="string">"Accept-language: en"</span> URL</div><div class="line"></div><div class="line"><span class="comment">#限定cURL可占用的带宽</span></div><div class="line">curl URL --<span class="built_in">limit</span>-rate 10m</div><div class="line"></div><div class="line"><span class="comment">#指定最大下载量</span></div><div class="line">curl URL --max-filesize 大小(Bytes)</div><div class="line"></div><div class="line"><span class="comment">#用cURL进行认证，-u username:password指定用户名和密码</span></div><div class="line">curl -u user:pass URL</div><div class="line">curl -u user URL	<span class="comment">#手动输入密码</span></div><div class="line"></div><div class="line"><span class="comment">#只打印响应头部信息(无数据部分), -I</span></div><div class="line">curl -I URL</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="从命令行访问163邮箱"><a href="#从命令行访问163邮箱" class="headerlink" title="从命令行访问163邮箱"></a>从命令行访问163邮箱</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -u user http://mail.163.com</div><div class="line"><span class="comment">#手动输入密码</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="制作图片抓取器及下载工具"><a href="#制作图片抓取器及下载工具" class="headerlink" title="制作图片抓取器及下载工具"></a>制作图片抓取器及下载工具</h2><p>可以用脚本解析图像文件并将图片自动下载下来。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -s URL | grep -o <span class="string">"&lt;img src=[^&gt;]*&gt;"</span> | sed <span class="string">'s/&lt;img src=//g; s/&gt;//g'</span> &gt; img.list</div><div class="line"><span class="comment">#匹配图片的URL，可能还需要细化修改</span></div><div class="line"><span class="comment">#不同的URL可能有不同的规则，根据实际情况取出img的URL</span></div><div class="line"></div><div class="line"><span class="comment">#下载图片</span></div><div class="line">wget <span class="variable">$URL</span> 或 curl -s -O <span class="variable">$URL</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="查找网站中的无效链接"><a href="#查找网站中的无效链接" class="headerlink" title="查找网站中的无效链接"></a>查找网站中的无效链接</h2><p>将查找无效链接的工作自动化，那就比纯手动厉害多了！</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">lynx -traversal URL <span class="comment">#会将URL中所有链接生成到reject.dat文件中</span></div><div class="line">sort -u reject.dat | <span class="keyword">while</span> <span class="built_in">read</span> link</div><div class="line"><span class="keyword">do</span></div><div class="line">	output=`curl -I <span class="variable">$link</span> -s | grep <span class="string">"HTTP/.*OK"</span>`</div><div class="line">    <span class="keyword">if</span> [[ -z <span class="variable">$output</span> ]]</div><div class="line">    <span class="keyword">then</span></div><div class="line">    	<span class="built_in">echo</span> <span class="variable">$link</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span> &lt; links.txt</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="跟踪网站变更"><a href="#跟踪网站变更" class="headerlink" title="跟踪网站变更"></a>跟踪网站变更</h2><p>可以编写一个定期运行的变更跟踪器(change tracker)，一旦发生变更，跟踪器便会发出声音或发送提示信息。<br>在不同时间检索网站，然后利用 <code>diff</code> 命令进行比对。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl URL --silent -o `date +%F`.html	<span class="comment">#第一次</span></div><div class="line">curl URL --silent -o `date +%F`.html	<span class="comment">#第二次</span></div><div class="line">diff -u 第一次 第二次</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="以POST方式发送网页并读取响应"><a href="#以POST方式发送网页并读取响应" class="headerlink" title="以POST方式发送网页并读取响应"></a>以POST方式发送网页并读取响应</h2><p>POST 和 GET 是HTTP协议中用于发送或检索信息的两种请求类型。<br>在GET请求方式中，利用网页的URL来发送参数(“键-值”)；而POST方式用于提交表单，如提交用户名、密码以及检索登录页面等。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl URL -d “postarg=AABBCC” <span class="comment">#-d,http post data</span></div><div class="line">curl URL -d <span class="string">"post1=key1&amp;post2=key2&amp;post3..."</span>	<span class="comment">#指定多个数据</span></div><div class="line"></div><div class="line">wget URL -post-data <span class="string">"post1=key1"</span></div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="Plan-B"><a href="#Plan-B" class="headerlink" title="Plan B"></a>Plan B</h1><p><br></p>
<h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>提取快照和备份数据都是重要的工作，我们可以通过shell脚本来实现备份自动化。<br>归档和压缩对于SA来说同样很重要，有多种压缩格式。<br>加密是一种保护数据的方法，为了减少加密数据的大小，文件在加密前通常需要先归档和压缩。</p>
<p><br></p>
<h2 id="用tar归档"><a href="#用tar归档" class="headerlink" title="用tar归档"></a>用tar归档</h2><p><code>tar</code>命令可以用来归档文件(tar archives tar)。可以将多个文件和文件夹打包为单个文件，同时还能保留所有的文件属性。<br>由<code>tar</code>命令创建的文件通常称为tarball。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#归档文件，-c(create file)</span></div><div class="line">tar -cf 1.tar [sources]	<span class="comment">#-f(specify filename)指定文件名</span></div><div class="line"><span class="comment">#文件名必须紧跟在-f之后</span></div><div class="line">tar -cvf txt.tar *.txt	<span class="comment">#-v(verbose)详细信息</span></div><div class="line"></div><div class="line"><span class="comment">#向已归档文件中添加文件，-r</span></div><div class="line">tar -rvf txt.tar *.html</div><div class="line"></div><div class="line"><span class="comment">#列出归档文件中的内容，-t</span></div><div class="line">tar -tf txt.tar	<span class="comment">#列出归档内容</span></div><div class="line">tar -tvf txt.tar	<span class="comment">#列出内容详细信息</span></div><div class="line"></div><div class="line"><span class="comment">#从归档文件中提取文件或文件夹，-x(exact)</span></div><div class="line">tar -xf txt.tar	<span class="comment">#默认提取到当前目录</span></div><div class="line"><span class="comment">#-C指定提取目录</span></div><div class="line">tar -xvf txt.tar -C /dir/path</div><div class="line"><span class="comment">#只提取归档中特定文件</span></div><div class="line">tar -xf txt.tar 1.txt 1.html -C /tmp	<span class="comment">#只会提取1.txt和1.html文件</span></div><div class="line"></div><div class="line"><span class="comment">#在tar中使用stdin和stdout</span></div><div class="line">tar -cvf - *.text | tar -xvf - -C /tmp</div><div class="line"></div><div class="line"><span class="comment">#拼接两个归档文件，-A</span></div><div class="line">tar -Af txt.tar html.tar</div><div class="line">tar -tvf txt.tat	<span class="comment">#验证是否成功</span></div><div class="line"></div><div class="line"><span class="comment">#添加选项，可以将指定的任意文件加入到归档文件中。如果同名文件已存在，不会覆盖源文件，那么结果就是归档中包含了多个同名文件</span></div><div class="line"><span class="comment">#通过检查时间戳来更新对党文件中的内容，-u</span></div><div class="line"><span class="comment">#只有比归档文件中同名文件 更新(newer) 才添加</span></div><div class="line">tar -uvf html.tar 1.html</div><div class="line"></div><div class="line"><span class="comment">#比较归档文件与文件系统中的内容，-d</span></div><div class="line">tar -df txt.tar 1.txt 2.txt</div><div class="line"></div><div class="line"><span class="comment">#从归档文件中删除文件，--delete</span></div><div class="line">tar -f txt.tar --delete 1.txt 2.txt</div><div class="line"></div><div class="line"><span class="comment">#从归档文件中排除部分文件,--exclude</span></div><div class="line">tar -cf all.tar ./* --exclude=<span class="string">"*.html"</span>	<span class="comment">#排除.html文件</span></div><div class="line">tar -cvf txt.tar *.txt --exclude=<span class="string">"1.txt"</span></div><div class="line"></div><div class="line"><span class="comment">#打印总字节数,--totals</span></div><div class="line">tar -cf all.txt ./* --totals</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#压缩tar归档文件，指定不同压缩格式</span></div><div class="line"></div><div class="line"><span class="comment">#-z,	.tar.gz</span></div><div class="line"><span class="comment">#-j,	.tar.bz2</span></div><div class="line"><span class="comment">#--lzma,	.tar.lzma,</span></div><div class="line"><span class="comment">#.tar.lzo</span></div><div class="line">tar -czvf txt.tar.gzip *.txt</div><div class="line">tar -xzvf txt.tar -C /dir/path</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用cpio归档"><a href="#用cpio归档" class="headerlink" title="用cpio归档"></a>用cpio归档</h2><p><code>cpio</code>是类似于tar的另一种归档格式。它多用于RPM软件包、Linux内核和initramfs文件等。<br>cpio通过stdin获取输入，并将归档写入stdout。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">touch file&#123;1..4&#125;</div><div class="line"></div><div class="line"><span class="built_in">echo</span> file1 file2 file3 file4 | cpio -ov file.cpio</div><div class="line"><span class="comment">#-o指定输出，-v打印归档文件列表</span></div><div class="line"></div><div class="line"><span class="comment">#-i指定输入，-t列出归档中文件</span></div><div class="line">cpio -it &lt; file.cpio</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用gunzip或gzip压缩"><a href="#用gunzip或gzip压缩" class="headerlink" title="用gunzip或gzip压缩"></a>用gunzip或gzip压缩</h2><p>gzip是GNU/Linux下常用压缩格式。<code>gzip</code>,<code>gunzip</code>都可处理gzip压缩文件类型。<br><code>gzip</code>只能够压缩单个文件，而无法对目录和多个文件进行归档。因此需要先交给<code>tar</code>，然后再用<code>gzip</code>压缩</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">gzip file	<span class="comment">#file.gz，会覆盖原文件</span></div><div class="line">gunzip file.gz	<span class="comment">#file，也会删除原文件</span></div><div class="line"></div><div class="line"><span class="comment">#列出压缩文件的属性信息，-l</span></div><div class="line">gzip -l file.gz</div><div class="line"></div><div class="line"><span class="comment">#指定gzip的压缩级别，--fast或--best</span></div><div class="line">--fast	最低压缩比，最快速度完成</div><div class="line">--best	最高压缩比，最慢速度完成</div><div class="line"></div><div class="line"><span class="comment">#将gzip与归档文件结合，-z</span></div><div class="line">tar -czvf txt.tar.gzip ./*.txt</div><div class="line"><span class="comment">#-a指定从文件扩展名自动判断压缩格式</span></div><div class="line">tar -cavf txt.tar.gzip ./*.txt</div><div class="line"></div><div class="line"><span class="comment">#tar只能从命令行中接收有限个文件，要解决这个问题，可以写一个循环并添加-r选项</span></div><div class="line"></div><div class="line"><span class="comment">#解压缩，-x</span></div><div class="line">tar -xzvf txt.tar.gzip</div><div class="line">tar -xavf txt.tar.gzip -C /dir/path</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用bunzip或bzip压缩"><a href="#用bunzip或bzip压缩" class="headerlink" title="用bunzip或bzip压缩"></a>用bunzip或bzip压缩</h2><p><code>bzip2</code>通常能够生成比gzip更小(压缩比更高)的文件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">bzip2 file	<span class="comment">#file.bz2,同理会覆盖原文件</span></div><div class="line">bzip2 file -k	<span class="comment">#保留原文件</span></div><div class="line">bunzip2 file.bz2	<span class="comment">#解压缩</span></div><div class="line">bunzip file.bz2 -k</div><div class="line"></div><div class="line"><span class="comment">#从stdin读入并写到stdout</span></div><div class="line">cat file | bzip2 -c &gt; file.bz2</div><div class="line"></div><div class="line"><span class="comment">#将bzip2与归档文件结合，-j</span></div><div class="line">tar -cvjf 1.tar.bz2 ./1.*</div><div class="line">tar -cavf 1.tar.bz2 ./1.*	<span class="comment">#-a根据文件扩展名自动判断压缩格式</span></div><div class="line">tar -xjvf 1.tar.bz2</div><div class="line">tar -xavf 1.tar.bz2 -C /tmp</div><div class="line"></div><div class="line"><span class="comment">#压缩比</span></div><div class="line"><span class="comment">#从1级(速度最快，压缩率最低)到9级</span></div><div class="line">bzip -9 -k file</div><div class="line"></div><div class="line"><span class="comment">#对成千上万的文件进行归档，需要借助 循环和-r选项</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="lzma压缩"><a href="#lzma压缩" class="headerlink" title="lzma压缩"></a>lzma压缩</h2><p><code>lzma</code>是一个较新的压缩工具，它提供了比gzip或bzip2更好的压缩率。<br>xz, unxz, xzcat, lzma, unlzma, lzcat - Compress or decompress .xz and .lzma files</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">lzma file	<span class="comment">#file.lzma,同样也会删除原文件</span></div><div class="line">lzma file -k 	<span class="comment">#保留原文件</span></div><div class="line">unlzma file.lzma</div><div class="line"></div><div class="line"><span class="comment">#从stdin读入并写入stdout</span></div><div class="line">cat file | lzma -C &gt; file.lzma</div><div class="line"></div><div class="line"><span class="comment">#与tar相结合,--lzma</span></div><div class="line">tar -cvf 1.tar.lzma ./1.* --lzma</div><div class="line">tar -cavf 1.tat.lzma ./1.*	<span class="comment">#自动判断</span></div><div class="line">tar -xvf 1.tar.lzma --lzma</div><div class="line">tar -xavf 1.tar.lzma -C /tmp</div><div class="line"></div><div class="line"><span class="comment">#压缩率</span></div><div class="line"><span class="comment">#从1级到9级(压缩级别最高，速度最慢)</span></div><div class="line"></div><div class="line"><span class="comment">#对成千上万的文件，需要使用循环和-r选项</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="zip归档和压缩"><a href="#zip归档和压缩" class="headerlink" title="zip归档和压缩"></a>zip归档和压缩</h2><p><code>zip</code>在Linux下不如<code>gzip</code>,<code>bzip2</code>那么广泛，但在Internet上的文件通常都采用这种格式。<br>zip - package and compress (archive) files</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">zip file.zip file</div><div class="line">unzip file.zip</div><div class="line"><span class="comment">#与lzma,gzip,bzip2相比，zip完成后不会删除原文件</span></div><div class="line"></div><div class="line"><span class="comment">#对目录和文件进行递归操作,-r</span></div><div class="line">zip -r dir.zip /root/<span class="built_in">test</span> ./file</div><div class="line"></div><div class="line"><span class="comment">#向归档文件中增加内容，-u</span></div><div class="line">zip dir.zip -u newfile</div><div class="line"></div><div class="line"><span class="comment">#从压缩文件中删除内容，-d</span></div><div class="line">zip -d dir.zip file</div><div class="line"></div><div class="line"><span class="comment">#列出归档文件中内容</span></div><div class="line">unzip -l dir.zip</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="超高压缩率的squashfs文件系统"><a href="#超高压缩率的squashfs文件系统" class="headerlink" title="超高压缩率的squashfs文件系统"></a>超高压缩率的squashfs文件系统</h2><p><code>squashfs</code>是一种只读型的超高压缩率文件系统。这种文件系统能够将 2GB-3GB的数据压缩成一个700MB的文件。<br>你有没有想过Linux Live CD是怎样运行的？当Live CD启动后，它会加载一个完整的Linux环境。这就是利用了一种被称为squashfs的只读型压缩文件系统。它将根文件系统保存在一个压缩过的文件系统文件中。这个文件可以使用环回的形式来挂载并对其中的文件进行访问。一次当进程需要某些文件，可以将它们解压，然后载入内存中使用。<br>如果需要构建一个定制的Live OS，或是需要超高压缩率的文件并且无需解压就可以访问文件，那么squashfs的相关知识就能派上用场。要解压个头较大的压缩文件，需要花费不少时间。但如果将文件以环回形式挂载，速度就飞快，因为只有出现访问请求的时候，对应的那部分压缩文件才会被解压缩。而普通的解压缩方式是首先解压缩所有的数据。</p>
<p>环回文件系统就是指那些在文件中而非物理设备中创建的文件系统。比如我们可以创建一个文件，然后把这个文件格式化为我们常见ntfs、exfat或者ext4等文件系统格式，然后把它挂载在一个目录上使用。</p>
<p>如果你有一张Ubuntu CD，可以在CDRom Root/casper/filesystem.squashfs中找到文件.squashfs。<br>squashfs在内部采用了gzip和lzma这类压缩算法。</p>
<p>mksquashfs - tool to create and append to squashfs filesystems</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">yum install squashfs-tools -y</div><div class="line"></div><div class="line"><span class="comment">#创建squashfs文件</span></div><div class="line">mksquashfs <span class="built_in">source</span> compressfile.squashfs</div><div class="line"></div><div class="line">mksquashfs /etc etc.squashfs</div><div class="line"><span class="comment">#/etc(67M) --&gt; etc.suqashfs(18M)</span></div><div class="line"></div><div class="line"><span class="comment">#要挂载squashfs文件，利用环回形式进行挂载</span></div><div class="line">mkdir /mnt/squash</div><div class="line">mount -o loop etc.squashfs /mnt/squash</div><div class="line"><span class="comment">#此处挂载使用etc.squashfs文件系统</span></div><div class="line"><span class="comment">#如果直接查看etc.squashfs，就是一个普通文件，但是挂载以后所有文件都出现了</span></div><div class="line">umount /mnt/squash</div><div class="line"></div><div class="line"><span class="comment">#在创建squashfs文件时排除指定文件，-e</span></div><div class="line">mksquashfs /etc etc.squashfs -e /etc/passwd /etc/shadow /etc/*.txt</div><div class="line"><span class="comment">#在挂载之后就没有相关文件了</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="加密工具与散列"><a href="#加密工具与散列" class="headerlink" title="加密工具与散列"></a>加密工具与散列</h2><p>加密技术主要用于防止数据遭受未经授权的访问。<br>Linux下某些工具用于执行加密和解密，使用加密算法散列值来验证数据完整性。</p>
<p><strong><code>crypt</code>, <code>gpg</code>, <code>base64</code>, <code>md5sum</code>, <code>sha1sum</code>, <code>openssl</code>的用法</strong></p>
<h3 id="ccypt"><a href="#ccypt" class="headerlink" title="ccypt"></a>ccypt</h3><p>ccrypt是为了取代UNIX crypt而设计的，这个实用工具可用于文件和数据流加密及解密。<br>ccrypt - encrypt and decrypt files and streams</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ccrypt 1.txt	<span class="comment">#会要求输入口令(encryption key)</span></div><div class="line"><span class="comment">#之后会生成1.txt.cpt覆盖原文件</span></div><div class="line"></div><div class="line"><span class="comment">#更改key,-x</span></div><div class="line">ccrypt -x 1.txt.cpt	<span class="comment">#输入old key和new key</span></div><div class="line"></div><div class="line"><span class="comment">#解密，-d(--decrypt)</span></div><div class="line">ccrypt -d 1.txt.cpt	<span class="comment">#输入key解密</span></div></pre></td></tr></table></figure>
<h3 id="gpg"><a href="#gpg" class="headerlink" title="gpg"></a>gpg</h3><p>gpg(GNU privacy guard,GNU隐私保护)，是一种应用广泛的加密方案。<br>它采用签名密钥技术保护文件内容，只有经过认证的用户才能访问数据。我们对gpg签名早已耳熟能详。<br>gpg - OpenPGP encryption and signing tool<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#加密，-c(--symmetric)对称加密</span></div><div class="line">gpg -c file	<span class="comment">#会要求输入口令(Passphrase)，生成file.gpg</span></div><div class="line"><span class="comment">#解密</span></div><div class="line">gpg file.gpg</div></pre></td></tr></table></figure></p>
<h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p><code>base64</code>是一组类似的编码方案(encoding scheme)，它通过将ASCII字符转换成以64为基数的形式(radix-64 representation)来用ASCII字符串描述二进制数据。base64可用来对 编码和解码 base64字符串。<br>base64 - base64 encode/decode data and print to standard output<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将文件编码为base64格式</span></div><div class="line">base64 file &gt; outputfile</div><div class="line">cat file | base64 &gt; outputfile</div><div class="line"></div><div class="line"><span class="comment">#解码,-d</span></div><div class="line">base64 -d outputfile &gt; file</div></pre></td></tr></table></figure></p>
<h3 id="md5sum与sha1sum"><a href="#md5sum与sha1sum" class="headerlink" title="md5sum与sha1sum"></a>md5sum与sha1sum</h3><p><code>md5sum</code> 和 <code>sha1sum</code> 都是单向散列算法(unidirecrional hash algorithm)，均无法逆推出原始数据。<br>它们通常用于验证数据完整性或为特定数据生成唯一的密钥，因为通过分析文件内容，它们可以为每个文件生成一个唯一的密钥。</p>
<p>这种类型的散列算法是存储密码的理想方案。密码使用其对应的散列值来存储。如果某个用户需要认证，读取该用户提供的密码并转换成散列值，然后将其与之前存储的散列值进行比对。<br>将密码以明文的形式存储是非常危险的事情，它面临密码泄露的危险。而因为 md5sum和sha1sum 是单向散列算法，所以密码使用散列值存储是很安全的。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"1.txt"</span> &gt; 1.txt</div><div class="line">md5sum 1.txt	<span class="comment">#生成密钥到stdout</span></div><div class="line"><span class="comment">#39061daa34ca3de20df03a88c52530ea  1.txt</span></div><div class="line"></div><div class="line">sha1sum file	<span class="comment">#生成密钥到stdout</span></div><div class="line"><span class="comment">#659fcbc505db207c03b5c4c0b6981d63286abe21  1.txt</span></div><div class="line"></div><div class="line"><span class="comment">#查看/etc/shadow中密码的散列值</span></div><div class="line">awk <span class="string">'NR==1'</span> /etc/shadow | awk -F: <span class="string">'&#123;print $2&#125;'</span>	<span class="comment">#root密码散列</span></div><div class="line"><span class="comment">#$6$BxpV48gPsjuq6.pF$wE7pUDwtOI.v64kd5folG68yUt2UAQDTUGgKa5Iz69GaupEoRAdCeerP8nRKXo48c4azutUCGhnDgzd1qe8YX0</span></div></pre></td></tr></table></figure>
<h3 id="shadowlike散列-salted散列"><a href="#shadowlike散列-salted散列" class="headerlink" title="shadowlike散列(salted散列)"></a>shadowlike散列(salted散列)</h3><p>shadow密码通常都是salted密码，所谓SALT就是额外的一个字符串，用来起一个混淆的作用，使加密更加不同里被破解。salt由一些随机位组成，被用作密钥生成函数的输入之一，以生成密码的salted散列值。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/etc/passwd里面的密码散列类型就是salted散列</span></div><div class="line"></div><div class="line"><span class="comment">#查看root密码对应的散列值</span></div><div class="line">head -1 /etc/shadow</div><div class="line">root:<span class="variable">$6</span><span class="variable">$ZlHRCZG2iRwQUXAu</span><span class="variable">$RAEDH97nPdZB2RK20npua6Qf6jB7osatoC99ow3LtPQ6aORdLISYC7</span>/4iTYU162emkQLt4ZafdgjyAeoSB7IU0::0:99999:7:::</div><div class="line"></div><div class="line"><span class="comment">#openssl - OpenSSL command line tool</span></div><div class="line"></div><div class="line"><span class="comment">#shadow密码是使用openssl生成</span></div><div class="line"><span class="comment">#将SALT_STRING替换为随机字符串，同时将pass替换成你想测试的密码</span></div><div class="line">openssl -1 -salt SALT_STRING passwd</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用rsync备份系统"><a href="#用rsync备份系统" class="headerlink" title="用rsync备份系统"></a>用rsync备份系统</h2><p><code>rsync</code>借助差异计算以及压缩技术来最小化数据传输量。相较于<code>cp</code>命令，它的优势在于使用了高效的差异算法(difference algorithm)。<br>它还支持网络数据传输。在进行复制的同时，rsync会比较源端和目的端的文件，只有当文件有更新是才进行复制。默认情况下，rsync并不会在目的端删除源端已不存在的文件。</p>
<p>rsync - a fast, versatile, remote (and local) file-copying tool<br>inotifywait - wait for changes to files using inotify</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-a进行归档，-v详细信息</span></div><div class="line">rsync -av <span class="built_in">source</span> destination</div><div class="line">rsync -av /etc /tmp</div><div class="line"></div><div class="line"><span class="comment">#异地cp</span></div><div class="line">rsync -av <span class="built_in">source</span> username@host:PATH</div><div class="line">rsync -av username@host:PATH destination</div><div class="line"><span class="comment">#rsync借助于ssh，可以使用ssh无秘钥认证</span></div><div class="line">rsync -av /etc zhang@192.168.1.11:~</div><div class="line"></div><div class="line"><span class="comment">#-z, --compress  compress file data during the transfer</span></div><div class="line">rsync -avz zhang@192.168.1.11:/etc /tmp</div><div class="line"></div><div class="line"><span class="comment">#注意，路径格式</span></div><div class="line">rsync /etc /tmp	<span class="comment">#整个/etc目录</span></div><div class="line">rsync /etc/ /tmp	<span class="comment">#/etc目录下所有内容</span></div><div class="line"></div><div class="line"><span class="comment">#显示进度，--progress</span></div><div class="line">rsync -avz --progress /etc /tmp</div><div class="line"></div><div class="line"><span class="comment">#排除部分文件，--exclude</span></div><div class="line">rsync -avz /etc /tmp --exclude=/etc/nginx --exclude <span class="string">"*.txt"</span></div><div class="line"></div><div class="line"><span class="comment">#更新rsync时，删除不存在的文件，--delete</span></div><div class="line"><span class="comment">#默认情况下，rsync并不会在目的端删除源端已不存在的文件</span></div><div class="line">rsync -avz /etc zhang@192.168.1.1:~ --delete</div><div class="line"></div><div class="line"><span class="comment">#定期调度</span></div><div class="line">crontab -e</div><div class="line">0 */10 * * * rsync -avz /etc user@host:PATH</div><div class="line"></div><div class="line"><span class="comment">#实时同步，inotifywait+rsync</span></div><div class="line">yum install inotify-tools -y</div><div class="line"></div><div class="line"><span class="comment">#-m(monitor),-r(recursive),-q(--quiet)静默模式，-e(event)</span></div><div class="line"></div><div class="line">vi inotify_rsync.sh</div><div class="line">inotifywait -mrq -e creat,delete,modify,move --exclude <span class="string">"^.*\.filepart$"</span> /etc | <span class="keyword">while</span> <span class="built_in">read</span> file</div><div class="line"><span class="keyword">do</span></div><div class="line">rsync -az --exclude=<span class="string">".*"</span> --exclude=<span class="string">"*.swp"</span> --exclude=<span class="string">".filepart"</span> --delete /etc /tmp &gt; /dev/null 2&gt;<span class="variable">$1</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用Git备份版本控制"><a href="#用Git备份版本控制" class="headerlink" title="用Git备份版本控制"></a>用Git备份版本控制</h2><p>维护和恢复变更最好的方法是使用版本控制系统。由于代码变更频繁，版本控制系统多用于软件开发和代码维护。<br>Git(GNU it)是有名气也是最高效的版本控制系统。我们可在非编程环境下用Git备份普通文件。</p>
<p>git - the stupid content tracker</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">mkdir /home/zhang/gittest</div><div class="line"><span class="built_in">cd</span> /home/zhang/gittest</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#在源主机中添加用户信息</span></div><div class="line">git config --global user.name <span class="string">"username"</span>	<span class="comment">#设置用户名</span></div><div class="line">git config --global user.email <span class="string">"someone@example.com"</span>	<span class="comment">#设置邮箱</span></div><div class="line"></div><div class="line"><span class="comment">#创建一个空的Git版本库或初始化一个老版本</span></div><div class="line">git init</div><div class="line"></div><div class="line"><span class="comment">#记录变更到版本库</span></div><div class="line">git commit</div><div class="line"></div><div class="line"><span class="comment">#添加远程git目录并同步备份</span></div><div class="line">git remote add origin user@host:/home/zhang/gittest</div><div class="line"></div><div class="line"><span class="comment">#为git跟踪(git tracking)添加或删除文件</span></div><div class="line"><span class="comment">#add,添加内容至索引</span></div><div class="line">git add *</div><div class="line"><span class="comment">#git add *.txt; git add *.ph	#添加部分文件</span></div><div class="line"></div><div class="line"><span class="comment">#删除不需要跟踪的文件和文件夹</span></div><div class="line"><span class="comment">#rm,从工作去和索引删除文件</span></div><div class="line">git rm file</div><div class="line"><span class="comment">#git rm *.txt</span></div><div class="line"></div><div class="line"><span class="comment">#检查点或创建备份点(check point)</span></div><div class="line">git commit -m <span class="string">"Commit Message"</span></div><div class="line"></div><div class="line"><span class="comment">#push,更新远程</span></div><div class="line">git push</div><div class="line"></div><div class="line"><span class="comment">#用Git恢复数据</span></div><div class="line"><span class="comment">#log,显示提交日志</span></div><div class="line">git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment">#返回之前某个版本或状态</span></div><div class="line">git checkout xxxxxxxx(Commit ID)</div><div class="line"></div><div class="line"><span class="comment">#clone,克隆一个版本库到本地</span></div><div class="line">git <span class="built_in">clone</span> URL</div><div class="line">git <span class="built_in">clone</span> user@host:PATH</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用dd克隆磁盘"><a href="#用dd克隆磁盘" class="headerlink" title="用dd克隆磁盘"></a>用dd克隆磁盘</h2><p><code>dd</code>命令能用于克隆任何类型的磁盘，如硬盘、闪存、CD、DVD及软盘。<br>可能需要创建所有分区的副本而不仅仅是复制内容，包括硬盘分区、引导记录、分区表等信息。</p>
<p>使用dd的时候，要留意参数的顺序。错误的参数会损毁全部数据。dd基本上算是一个比特流复制器(bitstream duplicator),它可以将来自磁盘的比特流写入文件，也可以将来自文件的比特流写入硬盘。</p>
<p>dd - convert and copy a file</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dd <span class="keyword">if</span>=<span class="built_in">source</span> of=target bs=block_size count=count</div><div class="line"><span class="comment">#bs块大小，count块数</span></div><div class="line"></div><div class="line">dd <span class="keyword">if</span>=/tmp/centos7.iso of=/dev/sdc</div><div class="line"></div><div class="line"><span class="comment">#/dev/zero是一个字符设备，它总是返回字符'\0'</span></div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=./file bs=10m count=100</div><div class="line"></div><div class="line"><span class="comment">#用环回(loop back)方法可将任何由dd生产的文件镜像进行挂载</span></div><div class="line">mount -o loop file /mnt</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="无网不利"><a href="#无网不利" class="headerlink" title="无网不利"></a>无网不利</h1><h2 id="j简介"><a href="#j简介" class="headerlink" title="j简介"></a>j简介</h2><p>网络是计算机系统中重要的部分。我们以Tcp/Ip为协议栈，所有操作都是基于它进行的。</p>
<p>一些使用网络的应用通过打开并连接到防火墙端口进行运作，而有的管理任务可以通过网络进行。</p>
<p>##网络小知识</p>
<p>网络接口(Interface)用来连接网络。在每个系统中，默认都有一个称之为环回接口的lo，这个接口指向当前主机本身。<br>操作系统维护者一个被称为路由表(routing table)的表格，它包含了分组如何转发以及通过网络中的哪些节点转发的消息。<br>metric是路由算法用以确定到达目的地的最佳路径的计量标准，如路径长度。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#显示网络接口、子网掩码等详细信息</span></div><div class="line">ifconfig	<span class="comment">#/sbin/ifconfig</span></div><div class="line"></div><div class="line"><span class="comment">#显示某个特定接口</span></div><div class="line">ifconfig eth0</div><div class="line"></div><div class="line"><span class="comment">#提取IP地址</span></div><div class="line">ifconfig eth0 | egrep -o <span class="string">"inet [^ ]*"</span> | grep -o <span class="string">"[0-9.]*"</span></div><div class="line"></div><div class="line"><span class="comment">#设置网络接口的IP地址和子网掩码</span></div><div class="line">ifconfig eht0 192.168.1.11</div><div class="line">ifconfig eth0 192.168.1.11 netmask 255.255.255.0</div><div class="line"><span class="comment">#远程的时候，千万别乱改IP，不然连不上你就要去机房了</span></div><div class="line"></div><div class="line"><span class="comment">#MAC地址欺骗</span></div><div class="line">ifoconfig eth0 hw ether 11:22:33:44:55:66</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#域名服务器与DNS</span></div><div class="line">cat /etc/resolv.conf</div><div class="line"><span class="comment">#添加域名服务器</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"name 114.114.114.114"</span> &gt;&gt; /etc/resolv.conf</div><div class="line"><span class="comment">#nameserver 114.114.114.114</span></div><div class="line"></div><div class="line"><span class="comment">#一个域名可以分配多个地址，DNS只会返回其中一个</span></div><div class="line"><span class="comment">#要想获得域名所有IP地址，需要使用DNS查找工具</span></div><div class="line"></div><div class="line"><span class="comment">#DNS查找工具</span></div><div class="line">host www.baidu.com</div><div class="line">nslookup www.baidu.com</div><div class="line"></div><div class="line"><span class="comment">#自定义解析</span></div><div class="line">cat /etc/hosts</div><div class="line"><span class="built_in">echo</span> <span class="string">"192.168.1.11 www.zhang.me"</span> &gt;&gt; /etc/hosts</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#设置默认网关，显示路由表信息</span></div><div class="line"><span class="comment">#路由表</span></div><div class="line">route</div><div class="line">route -n	<span class="comment">#以数字形式显示地址</span></div><div class="line"></div><div class="line"><span class="comment">#设置默认网关</span></div><div class="line">route add default gw <span class="variable">$ip</span> <span class="variable">$interface</span></div><div class="line">route add default gw 192.168.1.1 eht0</div><div class="line"></div><div class="line"><span class="comment">#显示分组途经的所有网关地址</span></div><div class="line">traceroute www.baidu.com</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><code>ping</code>使用 <strong>网际控制报文协议(Internet Control Message Protocol,ICMP)</strong>的echo分组。如果分组能够送达且该主机为活动主机，那它就会发送一条回应。一旦主机不可到达，ping返回错误信息”Destination Host Unreachable”。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ping 192.168.1.1</div><div class="line"></div><div class="line"><span class="comment">#往返时间(Round Trip Time,RTT)</span></div><div class="line"></div><div class="line"><span class="comment">#发送分组数量</span></div><div class="line">ping <span class="variable">$URL</span> -c 6</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="列出网络上所有活动主机"><a href="#列出网络上所有活动主机" class="headerlink" title="列出网络上所有活动主机"></a>列出网络上所有活动主机</h2><p>当涉及大型局域网时，可能需要检查网络上的其他主机的活动状态。<br>一台非活动主机可能是：没有开机；网络连接有问题；主机禁ping；防火墙问题。</p>
<p>当我们要检测ip时，在一个脚本中，每一次<code>ping</code>都是依次执行。即使所有的ip地址都是彼此独立，由于编写的是顺式程序(sequential program)，<code>ping</code>命令也只能按顺序执行。每次执行一个<code>ping</code>命令。都要经历一段延迟——“发送echo分组，并接收或等待回应超时”。</p>
<p>要是处理几百个ip地址的话，这个延时就真不短了。我们可以使用并行方式来加速所有ping命令的执行。<br>可以将<code>ping</code>命令中的循环体放入<strong>( )&amp;</strong> 中，<strong>( )</strong> 使其中的命令可作为子shell来执行，<strong>&amp;</strong> 使之在后台继续运行。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#编写G一个并行方式的ping脚本</span></div><div class="line">fo ip <span class="keyword">in</span> 192.168.1.&#123;1..255&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">	(</div><div class="line">	ping <span class="variable">$ip</span> -c2 &amp;&gt; /dev/null;</div><div class="line">	<span class="keyword">if</span>[ $? -eq 0 ]</div><div class="line">		<span class="keyword">then</span></div><div class="line">			<span class="built_in">echo</span> <span class="string">"<span class="variable">$ip</span> is alive"</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line">	)&amp;</div><div class="line"><span class="built_in">wait</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#wait命令是脚本只有在所有子进程或后台进程全部终止或完成后才能结束</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#使用fping,-a显示活动主机，-g生成目标列表,-u显示无法到达主机</span></div><div class="line">fping -a 192.168.0.0/24 -g 2&gt; /dev/null</div><div class="line">fping -a 192.168.0.1 192.168.3.255 -g 2&gt; ./unreach.txt</div><div class="line"><span class="comment">#将unreach主机找出</span></div><div class="line">cat unreach.txt | egrep -o <span class="string">"to [0-9.]+$"</span> | grep -o <span class="string">"[0-9.]*"</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h2><p>有很多不同的方法可以在网络节点上传输文件，常见的协议有<strong>FTP, SFTP, RSYNC, SCP</strong>。</p>
<p>通过FTP传输文件可使用<code>lftp</code>命令；<br>通过SSH传输文件可使用<code>sftp</code>；<br>RSYNC使用<code>SSH</code>与<code>rsync</code>命令；<br><code>scp</code>通过SSH进行传输。</p>
<p><br><br>文件传输协议(File Transfer Protocol, FTP)，使用21端口。FTP是明文传输，So…<br>需要远程主机上启用了FTP服务器才能使用FTP。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lftp user@ftp-host</div><div class="line"><span class="comment">#输入密码后便可以操作如下命令</span></div><div class="line"><span class="built_in">cd</span> -- lcd(本地)</div><div class="line">mkdir</div><div class="line">get filename	<span class="comment">#下载文件</span></div><div class="line">put filename	<span class="comment">#上传文件</span></div><div class="line">quit	<span class="comment">#退出</span></div></pre></td></tr></table></figure></p>
<p><br><br>SFTP(Secure FTP,安全FTP)，运行在SSH连接之上。利用SSH连接模拟FTP接口。<br>它不需要源端运行FTP服务器，不要运行OpenSSH。SFTP是一个交互式命令，提供了命令提示符。</p>
<p>rsync广泛用于网络文件与系统快照的备份。</p>
<p>SCP(Secure Copy,安全复制)，远程文件复制工具。通过SSH加密通过进行传输。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scp SOURCE DESTINATION</div><div class="line"></div><div class="line">scp /path/file user@host:PATH</div><div class="line">scp usr@host:/dir/file /home/zhang</div><div class="line"><span class="comment">#需要输入密码，可以用SSH无秘钥认证</span></div><div class="line"></div><div class="line"><span class="comment">#-r递归复制,-p保持文件权限和模式</span></div><div class="line">scp -r /etc user@host:/tmp</div><div class="line">scp -rp user@host:/var/www  /var</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="SSH无秘钥认证"><a href="#SSH无秘钥认证" class="headerlink" title="SSH无秘钥认证"></a>SSH无秘钥认证</h2><p>特别是在定时任务传输备份文件时，无秘钥认证就很方便了。SSH服务默认在22端口，你可以在配置文件中修改。</p>
<p>具体步骤：</p>
<ol>
<li>创建SSH密钥(公钥和私钥)；</li>
<li>将客户端公钥上传给需要连接的主机，并写入~/.ssh/authorized_keys文件；</li>
<li>修改相关目录和文件权限；</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div><div class="line"><span class="comment">#后续操作默认即可</span></div><div class="line"><span class="comment">#生成~/.ssh/id_rsa.pub和id_rsa</span></div><div class="line"></div><div class="line"><span class="comment">#写入远程主机</span></div><div class="line">ssh user@host <span class="string">"cat &gt;&gt; ~/.ssh/authorized_keys"</span> &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用SSH在远程主机上运行命令"><a href="#用SSH在远程主机上运行命令" class="headerlink" title="用SSH在远程主机上运行命令"></a>用SSH在远程主机上运行命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#连接远程主机</span></div><div class="line">ssh user@host</div><div class="line"></div><div class="line"><span class="comment">#非默认端口</span></div><div class="line">ssh user@host -p 2211</div><div class="line"></div><div class="line"><span class="comment">#在远程主机中运行命令</span></div><div class="line">ssh user@host <span class="string">'command'</span></div><div class="line">ssh user@host <span class="string">'cmd1'</span>; <span class="string">'com2'</span>...</div><div class="line"></div><div class="line">ssh user@host <span class="string">'whoami'</span></div><div class="line"></div><div class="line"><span class="comment">#-C压缩功能，当带宽有限时</span></div><div class="line">ssh -C user@host <span class="string">'cmd'</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="在本地挂载远程驱动器"><a href="#在本地挂载远程驱动器" class="headerlink" title="在本地挂载远程驱动器"></a>在本地挂载远程驱动器</h2><p>在执行读写数据操作时，通过本地挂载远程主机文件系统。利用SSH和sshfs来实现这一功能。<br>sshfs是FUSE文件系统的一个扩展，FUSE允许其支持的操作系统像使用本地文件系统一样挂载各类数据。<br><code>sshfs</code>允许将远程文件系统挂载到本地挂载点上。</p>
<p>相当于便捷的NFS，但并不需要搭建NFS服务。</p>
<p>SSHFS - filesystem client based on ssh<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#挂载远程文件到本地</span></div><div class="line">ssh user@host:PATH /mnt/sshfs</div><div class="line"></div><div class="line">umout /mnt/sshfs</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="网络流量和端口分析"><a href="#网络流量和端口分析" class="headerlink" title="网络流量和端口分析"></a>网络流量和端口分析</h2><p>应用程序在主机上打开端口，然后与远程主机中打开的端口实现通信。<br>出于安全方面的考虑，必须留意系统中打开及关闭的端口。</p>
<p>恶意软件和rootkit可能会利用特定的端口及服务运行在系统之中，从而进行攻击。<br>通过分析开放端口列表以及运行在端口上的服务，我们便可以分析并检查恶意软件，保证主机安全。</p>
<p>了解及使用各种端口分析工具。</p>
<p>lsof - list open files<br><code>lsof</code>列出系统中开放端口以及运行在端口上的服务的详细信息;</p>
<p>netstat查看开放端口与服务<br><code>netstat</code> - 显示网络连接，路由表，接口状态，伪装连接，网络链路信息和组播成员组;</p>
<p>iftop - display bandwidth usage on an interface by host<br><code>iftop</code> - 展示带宽使用情况；</p>
<p>ifstat - handy utility to read network interface statistics<br><code>ifstat</code> - 展示某时刻网络状态；</p>
<p> nload - displays the current network usage<br><code>nload</code> - 可查看系统总带宽；</p>
<p>nethogs - Net top tool grouping bandwidth per process<br><code>nethogs</code>- 可查看每个进程流量情况；</p>
<p>ethtool - query or control network driver and hardware settings<br><code>ethtool</code> - 检查网卡支持的带宽</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#lsof的每一项都对应着一个打开了特定端口的服务</span></div><div class="line">lsof -i</div><div class="line"></div><div class="line"><span class="comment">#查看开放端口和服务</span></div><div class="line">netstat -nltp</div><div class="line"></div><div class="line"><span class="comment">#查看网络实时状态</span></div><div class="line">iftop</div><div class="line"></div><div class="line"><span class="comment">#查看当前网络状态</span></div><div class="line">ifstat</div><div class="line"></div><div class="line"><span class="comment">#查看系统带宽</span></div><div class="line">nload</div><div class="line"></div><div class="line"><span class="comment">#查看进程流量</span></div><div class="line">nethogs</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="当个好管家"><a href="#当个好管家" class="headerlink" title="当个好管家"></a>当个好管家</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p>操作系统(Operation System,OS)，是由一系列用于不同目的、服务于不同任务的系统软件组成。<br>日志记录(logging)和监视是很重要的，能帮助我们从大量数据中收集信息。</p>
<p>监视系统活动的各种命令，日志技术及其使用方法。</p>
<p><br></p>
<h2 id="统计磁盘使用情况"><a href="#统计磁盘使用情况" class="headerlink" title="统计磁盘使用情况"></a>统计磁盘使用情况</h2><p>磁盘空间是一种有限资源，我们需要了解磁盘的可用空间。</p>
<p><code>df</code>, <code>du</code>, <code>fdisk</code>是Linux中的磁盘管理三板斧<br>df(disk free): 报告文件系统磁盘空间的使用情况;<br>du(disk usage): 报告磁盘空间使用情况; 使用<code>du</code>时，要确保对其遍历的目录和文件拥有适合的读权限。<br>fdisk: Linux分区表操作工具软件。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">du file1	<span class="comment">#默认以字节为单位</span></div><div class="line"></div><div class="line"><span class="comment">#-a,显示目录下所有文件大小</span></div><div class="line">du -a /home/zhang</div><div class="line">du /home/zhang	<span class="comment">#只显示目录大小</span></div><div class="line"></div><div class="line"><span class="comment">#-h,以可读形式打印</span></div><div class="line">du -h /home/zhang</div><div class="line"></div><div class="line"><span class="comment">#-c,显示使用总量</span></div><div class="line">du -c file1 /dir2</div><div class="line">du -c *.txt *.sh</div><div class="line"></div><div class="line"><span class="comment">#-s，打印摘要</span></div><div class="line">du -s /dir</div><div class="line">du -sh /home/zhang</div><div class="line"></div><div class="line"><span class="comment">#-b,-k,-m,-B，用特定单位打印</span></div><div class="line">du -k file1</div><div class="line">du -m file2</div><div class="line"></div><div class="line"><span class="comment">#--exclude,从磁盘统计中排除部分文件</span></div><div class="line">du --exclude=<span class="string">"*.swap"</span> -sh /home/zhang</div><div class="line"></div><div class="line"><span class="comment">#--max-depth,指定最大遍历深度</span></div><div class="line">du -h --max-depth n /dir</div><div class="line">du -h --max-depth=2 /home/zhang</div><div class="line"></div><div class="line"><span class="comment">#-x,将/mnt中所有挂载点排除在磁盘统计之外</span></div><div class="line">du -xh /dir</div><div class="line"></div><div class="line"><span class="comment">#找出目录中最大的文件</span></div><div class="line">du -ak /dir | sort -nrk 1 | head -n 5</div><div class="line"><span class="comment">#此输出包含了目录大小，需要细化</span></div><div class="line"><span class="comment">#利用find替du过滤文件</span></div><div class="line">find /dir -<span class="built_in">type</span> f --<span class="built_in">exec</span> du -ak &#123;&#125; \; | sort -nrk 1 | head</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#df,磁盘可用空间信息</span></div><div class="line">df -h</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="计算命令执行时间"><a href="#计算命令执行时间" class="headerlink" title="计算命令执行时间"></a>计算命令执行时间</h2><p>当测试一个应用程序或比较不同的算法时，程序的执行时间非常重要。所以需要计算命令执行时间。</p>
<p>所有的Unix-Like操作系统都包含time命令，可将time放在需要计算执行时间的命令前。</p>
<blockquote>
<p>time命令有个可执行二进制文件位于/usr/bin/time，还有一个shell built-in命令也叫作time；<br>当运行time时，默认调用的是shell built-in命令。內建time命令选项有限；<br>因此，如果我们需要使用另外的功能，就应该使用/usr/bin/time命令。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#计算命令执行时间</span></div><div class="line">time <span class="built_in">command</span></div><div class="line">time ls</div><div class="line"></div><div class="line"><span class="comment">#real,挂钟时间(wall clock time),命令从开始执行到结束的时间；</span></div><div class="line"><span class="comment">#user,指进程花费在用户模式(user-mode)中的CPU时间。这是唯一用于执行进程所花费的时间；</span></div><div class="line"><span class="comment">#sys，指进程花费在内核模式(in the kernel)中的CPU时间。它代表在内核中执行系统调用所使用的时间。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#-o,将命令执行时间写入文件</span></div><div class="line">/usr/bin/time -o exetime.txt ls /</div><div class="line"></div><div class="line"><span class="comment">#-a,不影响原文件</span></div><div class="line">/usr/bin/time -a -o exetime.txt ls /home</div><div class="line"></div><div class="line"><span class="comment">#-f,格式化时间输出</span></div><div class="line"><span class="comment">#时间格式字符串</span></div><div class="line"><span class="comment">#real	%e</span></div><div class="line"><span class="comment">#user	%U</span></div><div class="line"><span class="comment">#sys	%S</span></div><div class="line">/usr/bin/time -f <span class="string">"FORMAT STRING"</span> <span class="built_in">command</span></div><div class="line">/usr/bin/time -f <span class="string">"Rtme: %e"</span> -a -o timing.log uname</div><div class="line">/usr/bin/time -f <span class="string">"Rtime: %e\nUtime: %U\nStime: %S"</span> -ao timing.log uname</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="当前登录用户、启动日志、启动故障的相关信息"><a href="#当前登录用户、启动日志、启动故障的相关信息" class="headerlink" title="当前登录用户、启动日志、启动故障的相关信息"></a>当前登录用户、启动日志、启动故障的相关信息</h2><p>收集与操作系统、当前登录用户、主机运行时间、启动故障等相关信息很有用处。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取当前登录用户</span></div><div class="line">who	<span class="comment">#显示已经登录的用户</span></div><div class="line">w	<span class="comment">#显示已经登录的用户以及他们在做什么</span></div><div class="line"><span class="comment">#会显示用户使用的伪终端(pseudo TTY)，对应设备文件出现在/dev/pts/n</span></div><div class="line"></div><div class="line"><span class="comment">#列出登录主机的用户列表</span></div><div class="line">users</div><div class="line"></div><div class="line"><span class="comment">#查看系统运行时间</span></div><div class="line">uptime</div><div class="line"></div><div class="line"><span class="comment">#显示用户登录列表</span></div><div class="line">last</div><div class="line"><span class="comment">#获取某个用户登录信息</span></div><div class="line">last zhang</div><div class="line"><span class="comment">#获取重启会话信息</span></div><div class="line">last reboot</div><div class="line"></div><div class="line"><span class="comment">#获取失败的用户登录信息</span></div><div class="line">lastb</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="打印10条最常使用的命令"><a href="#打印10条最常使用的命令" class="headerlink" title="打印10条最常使用的命令"></a>打印10条最常使用的命令</h2><p>终端是用来访问shell的工具，在shell中我们可以输入并执行命令。我们可以找出在shell中运行最多的命令。</p>
<p>~/.bash_history，默认保留1000个最近执行命令。或者<code>history</code>命令。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat .bash_history | sort -n | uniq -c | sorn -nr | head</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="列出占用CPU最多的进程"><a href="#列出占用CPU最多的进程" class="headerlink" title="列出占用CPU最多的进程"></a>列出占用CPU最多的进程</h2><p>CPU时间是一项重要资源，有时需要跟踪占用CPU周期最多的进程。<br>对于需要处理大量请求的服务器来说，CPU是极其重要的资源。通过监视某个时期内CPU的使用情况，可以找出长期占用CPU的进程并对其进行优化，或是调试其他问题。</p>
<p>用<code>ps</code>命令收集系统中进程的详细信息。<br>ps - report a snapshot of the current processes</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-e,以标准语法显示每个进程</span></div><div class="line">ps -e</div><div class="line">ps -ef</div><div class="line"></div><div class="line"><span class="comment">#ax,以BSD语法显示每个进程</span></div><div class="line">ps ax</div><div class="line">pa axu</div><div class="line"></div><div class="line"><span class="comment">#获取安全信息</span></div><div class="line"><span class="comment">#ps -eo euser,ruser,suser,fuser,f,comm,pcpu,label</span></div><div class="line"></div><div class="line"><span class="comment">#comm显示命令，pcpu显示CPU使用率</span></div><div class="line">ps -eo comm,pcpu</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#监视并计算一小时内CPU使用情况的shell脚本</span></div><div class="line">secs=3600</div><div class="line">unit_time=60</div><div class="line">steps=$((<span class="variable">$secs</span> / <span class="variable">$unit_time</span>))</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Whatching CPU usage..."</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>((i=0; i&lt;steps; i++))</div><div class="line"><span class="keyword">do</span></div><div class="line">	ps -eo comm,pcpu | tail -n +2 &gt;&gt; /tmp/cpu_usage.$$</div><div class="line">    sleep <span class="variable">$unit_time</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"CPU eaters: "</span></div><div class="line"></div><div class="line">cat /tmp/cpu_usage.$$ | \</div><div class="line">awk <span class="string">'&#123;process[$1]+=$2&#125;</span></div><div class="line"><span class="string">END&#123;</span></div><div class="line"><span class="string">	for (i in process) &#123;</span></div><div class="line"><span class="string">    	printf("%-20s %s",i,process[i]);</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;'</span> | sort -nrk 2 | head</div><div class="line"></div><div class="line"><span class="comment">#tail -n +K，从第K行开始输出。上面输出第一行是 COMAND 和 %CPU</span></div><div class="line"></div><div class="line"><span class="comment">#$1,command; $2,%CPU</span></div><div class="line"><span class="comment">#process[$1]是一个关联函数，相当于arr[command]</span></div><div class="line"><span class="comment">#arr[command]=arr[command]+ $2，计算同一命令的累积时间</span></div><div class="line"><span class="comment">#i指命令，process[i]指命令运行时间</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用watch监视命令输出"><a href="#用watch监视命令输出" class="headerlink" title="用watch监视命令输出"></a>用watch监视命令输出</h2><p>可能需要在在某段时期内以固定的间隔时间不短监视某个命令的输出。可利用<code>watch</code>命令。</p>
<p>watch - execute a program periodically, showing output fullscreen</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#watch命令可以用来在终端以固定的间隔监视命令输出，默认2秒间隔</span></div><div class="line">watch <span class="built_in">command</span></div><div class="line">watch <span class="string">'command'</span></div><div class="line"></div><div class="line">watch ls</div><div class="line">watch <span class="string">'ls -l'</span></div><div class="line"></div><div class="line"><span class="comment">#-n,指定时间间隔</span></div><div class="line">watch -n 5 <span class="string">'yum update -y'</span></div><div class="line"></div><div class="line"><span class="comment">#-d，突出(highlighting)watch输出中的差异</span></div><div class="line">watch -d -n 1<span class="string">'dd if=/dev/zero of=/tmp/zero.test'</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="对文件及目录访问进行记录"><a href="#对文件及目录访问进行记录" class="headerlink" title="对文件及目录访问进行记录"></a>对文件及目录访问进行记录</h2><p>记录重要文件及目录访问，对于追踪文件和目录的变化很有帮助。<br><code>inotifywait</code>命令可以用来收集有关文件访问的信息。<br><code>inotifywait</code>和<code>rsync</code>用户实时同步哦！</p>
<p>inotifywait - wait for changes to files using inotify</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">yum install -y inotify-tools</div><div class="line"></div><div class="line"><span class="comment">#-q,减少冗余信息</span></div><div class="line">inotifywait -m -r -q -e create,move,delete /dir</div><div class="line">inotifywait -m -r -q -e create,move,modify,delete /home/zhang &gt;&gt; inotifywait.log</div><div class="line"></div><div class="line"><span class="comment">#利用inotifywait检测，rsync同步</span></div><div class="line">inotifywait -mrq -e create,move,modify,delete /dir --exclude=<span class="string">"*.swap"</span> | <span class="keyword">while</span> <span class="built_in">read</span> file</div><div class="line"><span class="keyword">do</span></div><div class="line">rsync -av --exclude=<span class="string">"*.swqp"</span> --delete /dir user@host:PATH &gt; /dev/null 2&gt;&amp;1</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用logrotate管理日志文件"><a href="#用logrotate管理日志文件" class="headerlink" title="用logrotate管理日志文件"></a>用logrotate管理日志文件</h2><p>日志文件是Linux系统维护中必不可少的组成部分。日志文件可以帮助跟踪系统中多种服务所发生的事件，这有助于排除系统问题。<br>但随着时间推移，日志文件会变得越来越大。因而必须对日志文件进行管理。</p>
<p>我们可以利用一种称为“轮询(rotation)”的技术来限制日志文件的体积。一旦日志文件超过了限定大小，就要对它的内容进行抽取(strip)，同时将日志文件的旧条目归档到文件中。</p>
<p><code>logratate</code>是每一位Linux系统管理员都应该了解的命令。它能够将日志文件大大小限制在给定的SIZE内。<br>logrotate配置文件位于<code>/etc/logrotate.d</code></p>
<p>logrotate ‐ rotates, compresses, and mails system logs</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vim /etc/logrotated.d/custom</div><div class="line"></div><div class="line">/var/<span class="built_in">log</span>/custom.log &#123;</div><div class="line">	missingok	<span class="comment">#日志文件丢失，则忽略</span></div><div class="line">    notifempty	<span class="comment">#仅当源日志文件非空时才进行轮替</span></div><div class="line">    size 30k	<span class="comment">#限制实施轮替的日志文件大小</span></div><div class="line">    compress	<span class="comment">#压缩旧日志</span></div><div class="line">    weekly	<span class="comment">#轮询时间，daily,weekly,yearly</span></div><div class="line">    rotate 7	<span class="comment">#保留旧日志数量</span></div><div class="line">    create 0600 root root	<span class="comment">#创建的日志文件模式，用户和用户组</span></div><div class="line"><span class="comment">#还有一些其他选项</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用sys记录日志"><a href="#用sys记录日志" class="headerlink" title="用sys记录日志"></a>用sys记录日志</h2><p>在Linux系统中，在/var/log中创建并写入日志信息的是由被称为syslog的协议处理的。它由守护进程syslogd负责执行。<br>每一个标准应用进程都可以用syslog记录日志信息。</p>
<p>syslog处理/var/log下的多个日志文件。但是当logger发送消息时，它用标记字符串来确定应该纪录到哪一个日志文件中。<br>syslogd使用与日志相关联的TAG来决定应该将其记录到哪一个文件中。<br>可以从<code>/etc/rsyslog.d/</code>目录的配置文件中看到与日志文件相关联的标记字符串。</p>
<p>Linux中一些重要日志文件：</p>
<blockquote>
<p>/var/log/boot.log， 系统启动信息；<br>/var/log/message， 内核启动信息；<br>/var/log/auth.log， 用户认证日志；<br>/var/log/dmesg， 系统启动信息；<br>/var/log/mail.log， 邮件服务器日志。</p>
</blockquote>
<p>logger - a shell command interface to the syslog</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#logger命令，默认记录日志信息到/var/log/messages</span></div><div class="line">logger <span class="string">"test log message to messages"</span></div><div class="line">tail -n 1 /var/<span class="built_in">log</span>/message</div><div class="line"></div><div class="line"><span class="comment">#-t，指定特定TAG</span></div><div class="line">logger -t TAG <span class="string">"test log message to messages"</span></div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h1 id="管理重任"><a href="#管理重任" class="headerlink" title="管理重任"></a>管理重任</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><p>GNU/Linux的生态系统是由运行的程序、服务、连接的设备、文件系统、用户等组成。按照我们需要的方式对整个系统有一个微观并对操作系统进行整体上的管理，这就是系统管理的主要目的。</p>
<h2 id="收集进程信息"><a href="#收集进程信息" class="headerlink" title="收集进程信息"></a>收集进程信息</h2><p>进程是程序运行实例(runing instance)。<br>同一程序的多个实例可以同时运行，但他们的进程ID却互不相同。</p>
<p>进程管理相关的重要命令是：</p>
<ul>
<li><code>top</code>, display Linux processes;</li>
<li><code>ps</code>, report a snapshot of the current processes;</li>
<li><code>pgrep</code>, look up or signal processes based on name and other attributes.</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#ps命令</span></div><div class="line"><span class="comment">#-f, 显示更多进程信息</span></div><div class="line">ps -f</div><div class="line"></div><div class="line"><span class="comment">#-e,every; -a,all</span></div><div class="line">ps -ef</div><div class="line">ps -ax</div><div class="line"></div><div class="line"><span class="comment">#-o, 指定想要的列</span></div><div class="line">ps -e -o parameter1,parameter2...</div><div class="line">ps -eo comm,pcpu,pmem</div><div class="line"></div><div class="line"><span class="comment">#pccpu	CPU占用率</span></div><div class="line"><span class="comment">#pid	进程ID</span></div><div class="line"><span class="comment">#ppid	父进程ID</span></div><div class="line"><span class="comment">#pmem	内存使用率</span></div><div class="line"><span class="comment">#comm	命令名</span></div><div class="line"><span class="comment">#cmd	简单命令</span></div><div class="line"><span class="comment">#user	启动进程的用户</span></div><div class="line"><span class="comment">#nice	优先级</span></div><div class="line"><span class="comment">#time	累积的CPU时间</span></div><div class="line"><span class="comment">#etime	进程启动后度过的时间</span></div><div class="line"><span class="comment">#tty	所关联的TTY设备</span></div><div class="line"><span class="comment">#euid	有效用户ID</span></div><div class="line"><span class="comment">#stat	进程状态</span></div><div class="line"></div><div class="line"><span class="comment">#--sort,根据参数对ps输出进行排序</span></div><div class="line"><span class="comment">#+升序，-降序</span></div><div class="line">ps -eo comm,pcpu,pmem --sort -pcpu</div><div class="line">ps -eo comm,pcpu,pmem --sort -pcpu,+pmem</div><div class="line"></div><div class="line"><span class="comment">#-C, 给定命令全名找出PID</span></div><div class="line">ps -C cmd -o comm,pid</div><div class="line"></div><div class="line"><span class="comment">#-u, 指定有效用户列表</span></div><div class="line"><span class="comment">#-U, 指定真实用户列表</span></div><div class="line">ps -u root -U zhang -o user,pcpu</div><div class="line"></div><div class="line"><span class="comment">#-t, 用TTY过滤输出</span></div><div class="line">ps -t TTY1,TTY2...</div><div class="line">ps -t pts/0,pts/1 -ef</div><div class="line"></div><div class="line"><span class="comment">#-L, 显示进程相关信息</span></div><div class="line"><span class="comment">#LWP线程ID， NLWP线程数量</span></div><div class="line">ps -efL</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#pgrep命令, 获得一个特定命令的PID列表</span></div><div class="line"><span class="comment">#它只需要命令的一部分即可</span></div><div class="line">pgrep cmd</div><div class="line">pgre inotif</div><div class="line">pgrep bas</div><div class="line"></div><div class="line"><span class="comment">#-d, 指定定界符</span></div><div class="line">pgrep rsync -d <span class="string">":"</span></div><div class="line"></div><div class="line"><span class="comment">#-u, 指定进程的用户</span></div><div class="line">pgrep -u root,zhang rsync</div><div class="line"></div><div class="line"><span class="comment">#-c, 返回匹配的进程数量</span></div><div class="line">pgrep -c rsync</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#top命令</span></div><div class="line">top</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="杀死进程以及发送响应信息"><a href="#杀死进程以及发送响应信息" class="headerlink" title="杀死进程以及发送响应信息"></a>杀死进程以及发送响应信息</h2><p>在Unix-Like环境中与进程有关的一个重要概念就是信号。<br>信号是一种进程间通信机制，它用来中断运行的进程以执行某些操作。终止程序也是通过使用信号技术来实现的。</p>
<p>像<code>ctrl+C</code>,<code>ctrl+Z</code>这种作业都属于信号。</p>
<ul>
<li><code>kill</code> 命令可用来向进程发送信号;</li>
<li><code>trap</code> 命令用来处理所接收的信号;</li>
<li><code>killall</code> 以名字方式来杀死进程.</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#列出所有可用信号</span></div><div class="line"><span class="built_in">kill</span> -l</div><div class="line"></div><div class="line"><span class="comment">#-s, 发送信号</span></div><div class="line"><span class="comment">#信号名称和信号数都可以</span></div><div class="line"><span class="built_in">kill</span> -信号数 PID</div><div class="line"><span class="built_in">kill</span> -s SIGNAL PID</div><div class="line"></div><div class="line"><span class="comment">#常用信号</span></div><div class="line"><span class="comment">#SIGHUP 1 --对控制进程或终端进行挂起检测(hangup detection);</span></div><div class="line"><span class="comment">#SIGINT 2 --当按下ctrl+c时发送该信号;</span></div><div class="line"><span class="comment">#SIGKILL 9 --强行杀死进程;</span></div><div class="line"><span class="comment">#SIGTERM 15 --终止进程;</span></div><div class="line"><span class="comment">#SIGTSTP 20 --当按下crtl+z时发送该信号.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#killall, 通过命令名终止进程</span></div><div class="line">killall -s SIGNAL PName</div><div class="line">killall -信号数 PName</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#trap, 捕捉并响应信号</span></div><div class="line"><span class="built_in">trap</span> <span class="string">'signal-handler-func'</span> SIGNAL LIST</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="which-whereis-file-whatis与平均负载"><a href="#which-whereis-file-whatis与平均负载" class="headerlink" title="which, whereis, file, whatis与平均负载"></a>which, whereis, file, whatis与平均负载</h2><p><code>which</code> hows the full path of (shell) commands。找出某个命令的位置;<br><code>whereis</code> locate the binary, source, and manual page files for a command。不仅返回命令路径，还能打印命令手册的位置以及命令源代码路径;<br><code>file</code> determine file type。用来确定文件类型;<br><code>whatis</code> display manual page descriptions。输出简短描述信息;<br>平均负载(load average),是系统运行总负载量的一个重要参数。它指明了系统中可运行进程总量的平均值。平均负载由三个值来指定，第一个指明1分钟内的平均值，第二个指明5分钟内的平均值，第三个指明15分钟内的平均值。</p>
<ul>
<li>单核CPU，类似于单车道，负载在 0.00-1.00 之间正常；</li>
<li>多核CPU，类似于多车道，负载在 核数*(0.00-1.00) 之间正常；</li>
<li>安全的系统负载，单核应该在 0.7 以下；</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看平均负载</span></div><div class="line">uptime</div><div class="line">cat /proc/loadavg</div><div class="line"><span class="comment">#0.00 0.01 0.05 1/355 44955</span></div><div class="line"><span class="comment">#分母355表示系统进程总数, 分子表示正在运行的进程数, 最后一个数字表示最近运行进程ID</span></div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="向用户终端发送消息"><a href="#向用户终端发送消息" class="headerlink" title="向用户终端发送消息"></a>向用户终端发送消息</h2><p>系统管理员可能需要向网络中所有主机上的所有用户或特定用户的终端发送消息。<br>`wallrsync -av –exclude=”*.s命令用来向所有当前登录用户的终端写入消息。</p>
<p>在Linux系统中，终端是作为设备存在的。因此那些打开的终端在<code>dev/pts/</code>中都会与对应的设备节点文件。向特定设备写入数据将会在对应的终端显示出消息。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"It's just a test"</span> | wall</div><div class="line"></div><div class="line"><span class="comment">#查看用户对应的/dev/pts/, 并向某一个用户终端发送信息</span></div><div class="line">ll /dev/pts | awk <span class="string">'&#123;print $3,$6&#125;'</span></div><div class="line"><span class="built_in">echo</span><span class="string">"Haha"</span> &gt; /dev/pts/[1,2,3...]</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="收集系统信息"><a href="#收集系统信息" class="headerlink" title="收集系统信息"></a>收集系统信息</h2><p>包括主机名、内核版本、Linux发行版本、CPU信息、内存信息、磁盘分区信息等。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#主机名</span></div><div class="line">hostname</div><div class="line">uname -n</div><div class="line"></div><div class="line"><span class="comment">#内核版本，架构</span></div><div class="line">uname -r</div><div class="line">uname -m</div><div class="line">uname -a</div><div class="line"></div><div class="line"><span class="comment">#Linux发行版本</span></div><div class="line">cat /etc/redhat-release</div><div class="line"></div><div class="line"><span class="comment">#CPU相关信息</span></div><div class="line">lscpu</div><div class="line">cat /proc/cpuinfo</div><div class="line">cat /proc/cpuinfo | grep <span class="string">'model name'</span></div><div class="line"></div><div class="line"><span class="comment">#内存详细信息</span></div><div class="line">free -h</div><div class="line">cat /proc/meminfo</div><div class="line"></div><div class="line"><span class="comment">#分区信息</span></div><div class="line">cat /proc/partitions</div><div class="line">fdisk -l</div><div class="line"></div><div class="line"><span class="comment">#系统详细信息</span></div><div class="line">lshw</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用-proc收集信息"><a href="#用-proc收集信息" class="headerlink" title="用/proc收集信息"></a>用/proc收集信息</h2><p>在GNU/Linux操作系统中，/proc是一个位于内存中的伪文件系统(in-memory pseudo filesystem)。<br>它的引用是为了提供一个可以从用户空间(user space)读取系统参数的接口。</p>
<p>可以对<code>/proc</code>中的文件和子目录进行<code>cat</code>来获取信息，所有内容都是易读的格式化文本。</p>
<blockquote>
<p>/proc/下的数字目录，包含了对应进程的相关信息；<br>/proc/environ，包含于进程相关联的环境变量；<br>/proc/cwd，是一个到进程工作目录的符号链接；<br>/proc/fbcat，包含了由进程所使用的文件描述符。</p>
</blockquote>
<p><br></p>
<h2 id="用cron进行调度"><a href="#用cron进行调度" class="headerlink" title="用cron进行调度"></a>用cron进行调度</h2><p>GNU/Linux系统包含了各种用于调度任务的工具。cron就是其中之一，它通过守护进程crond使得任务能够以固定的时间间隔在系统后台自动运行。<br>cron利用的是一个被称为“cron表(cron table)”的文件，这个文件中存储了需要执行的脚本或命令的调度列表以及执行时间。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">crontab -e</div><div class="line"><span class="comment">#* * * * * cmd</span></div><div class="line"><span class="comment">#分钟(0-59)</span></div><div class="line"><span class="comment">#小时(0-23)</span></div><div class="line"><span class="comment">#天(1-31)</span></div><div class="line"><span class="comment">#月(1-12)</span></div><div class="line"><span class="comment">#工作日(0-7)，0和7都代表周天</span></div><div class="line"><span class="comment">#命令</span></div><div class="line"></div><div class="line"><span class="comment">#*号,所有值</span></div><div class="line"><span class="comment">#,号,范围。1,3,5,7,9</span></div><div class="line"><span class="comment">#-号,连续范文。1-10</span></div><div class="line"><span class="comment">#/号,*/10;0-8/20</span></div><div class="line"></div><div class="line"><span class="comment">#栗子</span></div><div class="line">* 0-6 * * * /home/zhang/test.sh</div><div class="line">1,3,5,7,9 * * * * /home/zhang/test.sh</div><div class="line">*/5 * * * * /home/zhang/test.sh</div><div class="line"></div><div class="line"><span class="comment">#-l,查看cron表</span></div><div class="line">crontab -l</div><div class="line"></div><div class="line"><span class="comment">#-r,移除cron表</span></div><div class="line">crontab -r</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="用户管理常用命令"><a href="#用户管理常用命令" class="headerlink" title="用户管理常用命令"></a>用户管理常用命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#添加用户</span></div><div class="line">userall</div><div class="line"></div><div class="line"><span class="comment">#删除用户</span></div><div class="line">userdel</div><div class="line">--remove-all-file删除与用户相关的所有文件</div><div class="line"></div><div class="line"><span class="comment">#修改shell</span></div><div class="line">chsh</div><div class="line"></div><div class="line"><span class="comment">#修改用户属性</span></div><div class="line">usermod</div><div class="line"></div><div class="line"><span class="comment">#修改密码过期时间</span></div><div class="line">chage</div><div class="line"></div><div class="line"><span class="comment">#修改密码</span></div><div class="line">passwd</div><div class="line"></div><div class="line"><span class="comment">#登录到一个新组</span></div><div class="line">newgrp</div><div class="line"></div><div class="line"><span class="comment">#添加、删除组</span></div><div class="line">groupadd</div><div class="line">groupdel</div><div class="line"></div><div class="line"><span class="comment">#指纹</span></div><div class="line">finger</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小试牛刀&quot;&gt;&lt;a href=&quot;#小试牛刀&quot; class=&quot;headerlink&quot; title=&quot;小试牛刀&quot;&gt;&lt;/a&gt;小试牛刀&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#bash(Bourne Again Shell)，shell环境使得用户能与操作系统的内核进行交互操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#date&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#description&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cmd1; cmd2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cmd3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#sh /path/xx.sh&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Bash还有一个历史记录文件 ~/.bash_history&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://zhang21.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>歌词摘抄</title>
    <link href="https://zhang21.github.io/2017/09/13/song/"/>
    <id>https://zhang21.github.io/2017/09/13/song/</id>
    <published>2017-09-13T07:08:16.000Z</published>
    <updated>2017-09-13T07:13:04.830Z</updated>
    
    <content type="html"><![CDATA[<p>就像蝴蝶飞不过沧海，没有人会忍心责怪<br><br></p>
<p>这个城市一下雨就进入了秋天，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就像蝴蝶飞不过沧海，没有人会忍心责怪&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;这个城市一下雨就进入了秋天，&lt;/p&gt;

    
    </summary>
    
      <category term="Notes" scheme="https://zhang21.github.io/categories/Notes/"/>
    
    
      <category term="Songs" scheme="https://zhang21.github.io/tags/Songs/"/>
    
  </entry>
  
  <entry>
    <title>工作与人生</title>
    <link href="https://zhang21.github.io/2017/09/04/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E4%BA%BA%E7%94%9F/"/>
    <id>https://zhang21.github.io/2017/09/04/工作与人生/</id>
    <published>2017-09-04T05:57:36.000Z</published>
    <updated>2017-11-03T01:54:52.321Z</updated>
    
    <content type="html"><![CDATA[<p>  我现在已经活到了人生的中途，拿一日来比喻人的一生，现在正是中午。人在童年时从朦胧中醒来．需要一些时间来克服清晨的软弱，然后就要投入工作；在正午时分，他的精力最为充沛，但已隐隐感到疲惫；到了黄昏时节，就要总结一日的工作，准备沉入永恒的休息。按我这种说法，工作是人一生的主题。这个想法不是人人都能同意的。我知道在中国，农村的人把生儿育女看作是一生的主题。把儿女养大，自己就死掉，给他们空出地方来——这是很流行的想法。在城市里则另有一种想法，但不知是不是很流行：它把取得社会地位看作一生的主题。站在北京八宝山的骨灰墙前，可以体会到这种想法。我在那里看到一位已故的大叔墓上写着：副系主任、支部副书记、副教授、某某教研室副主任，等等。假如能把这些“副”字去掉个把，对这位大叔当然更好一些，但这些“副”字最能证明有这样一种想法。顺便说一句，我到美国的公墓里看过，发现他们的墓碑上只写两件事：一是生卒年月。二是某年至某年服兵役；这就是说，他们以为人的一生只有这两件事值得记述：这位上帝的子民曾经来到尘世，以及这位公民曾去为国尽忠，写别的都是多余的，我觉得这种想法比较质朴……恐怕在一份青年刊物上写这些墓前的景物是太过伤感，还是及早回到正题上来罢。<br><a id="more"></a></p>
<p>  我想要把自己对人生的看法推荐给青年朋友们：人从工作中可以得到乐趣，这是一种巨大的好处。相比之下，从金钱、权力、生育子女方面可以得到的快乐，总要受到制约。举例来说，现在把生育作为生活的主题，首先是不合时宜；其次，人在生育力方面比兔子大为不如，更不要说和黄花鱼相比较；在这方面很难取得无穷无尽的成就。我对权力没有兴趣，对钱有一些兴趣，但也不愿为它去受罪——做我想做的事(这件事对我来说，就是写小说)，并且把它做好，这就是我的目标。我想，和我志趣相投的人总不会是一个都没有。<br><br><br>  根据我的经验，人在年轻时，最头疼的一件事就是决定自己这一生要做什么。在这方面，我倒没有什么具体的建议：干什么都可以，但最好不要写小说，这是和我抢饭碗。当然，假如你执意要写，我也没理由反对。总而言之，干什么都是好的；但要干出个样子来，这才是人的价值和尊严所在。人在工作时，不单要用到手、腿和腰，还要用脑子和自己的心胸。我总觉得国人对这后一方面不够重视，这样就会把工作看成是受罪。失掉了快乐最主要的源泉，对生活的态度也会因之变得灰暗……<br><br><br>  人活在世上，不但有身体，还有头脑和心胸——对此请勿从解剖学上理解。人脑是怎样的一种东西，科学还不能说清楚。心胸是怎么回事就更难说清。对我自己来说，心胸是我在生活中想要达到的最低目标。某件事有悖于我的心胸，我就认为它不值得一做；某个人有悖于我的心胸，我就觉得他不值得一交；某种生活有悖于我的心胸，我就会以为它不值得一过。罗素先生曾言，对人来说，不加检点的生活，确实不值得一过。我同意他的意见：不加检点的生活，属于不能接受的生活之一种。人必须过他可以接受的生活，这恰恰是他改变一切的动力。人有了心胸，就可以用它来改变自己的生活。<br><br><br>  中国人喜欢接受这样的想法：只要能活着就是好的，活成什么样子无所谓。从一些电影的名字就可以看出来：《活着》、《找乐》……我对这种想法是断然地不赞成。因为抱有这种想法的人就可能活成任何一种糟糕的样子，从而使生活本身失去意义。高尚、清洁、充满乐趣的生活是好的，人们很容易得到共识。卑下、肮脏、贫乏的生活是不好的，这也能得到共识。但只有这两条远远不够。我以写作为生，我知道某种文章好，也知道某种文章坏。仅知道这两条尚不足以开始写作。还有更加重要的一条，那就是：某种样子的文章对我来说不可取，绝不能让它从我笔下写出来，冠以我的名字登在报刊上。以小喻大，这也是我对生活的态度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  我现在已经活到了人生的中途，拿一日来比喻人的一生，现在正是中午。人在童年时从朦胧中醒来．需要一些时间来克服清晨的软弱，然后就要投入工作；在正午时分，他的精力最为充沛，但已隐隐感到疲惫；到了黄昏时节，就要总结一日的工作，准备沉入永恒的休息。按我这种说法，工作是人一生的主题。这个想法不是人人都能同意的。我知道在中国，农村的人把生儿育女看作是一生的主题。把儿女养大，自己就死掉，给他们空出地方来——这是很流行的想法。在城市里则另有一种想法，但不知是不是很流行：它把取得社会地位看作一生的主题。站在北京八宝山的骨灰墙前，可以体会到这种想法。我在那里看到一位已故的大叔墓上写着：副系主任、支部副书记、副教授、某某教研室副主任，等等。假如能把这些“副”字去掉个把，对这位大叔当然更好一些，但这些“副”字最能证明有这样一种想法。顺便说一句，我到美国的公墓里看过，发现他们的墓碑上只写两件事：一是生卒年月。二是某年至某年服兵役；这就是说，他们以为人的一生只有这两件事值得记述：这位上帝的子民曾经来到尘世，以及这位公民曾去为国尽忠，写别的都是多余的，我觉得这种想法比较质朴……恐怕在一份青年刊物上写这些墓前的景物是太过伤感，还是及早回到正题上来罢。&lt;br&gt;
    
    </summary>
    
      <category term="Literature" scheme="https://zhang21.github.io/categories/Literature/"/>
    
    
      <category term="王小波" scheme="https://zhang21.github.io/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>告别信</title>
    <link href="https://zhang21.github.io/2017/09/04/%E5%91%8A%E5%88%AB%E4%BF%A1/"/>
    <id>https://zhang21.github.io/2017/09/04/告别信/</id>
    <published>2017-09-04T03:46:11.000Z</published>
    <updated>2017-09-04T04:07:53.092Z</updated>
    
    <content type="html"><![CDATA[<p>1999年，72岁的马尔克斯患上淋巴癌后，写了一封信向读者告别。<br><img src="/images/farewell.png" alt=""><br><a id="more"></a><br>如果有一刹那，上帝忘记我是一只布偶并赋予我片刻生命，我可能不会说出我心中的一切所想，但我必定会思考我所说的一切。</p>
<p>我会评价事物，按其意义大小而非价值多少。  </p>
<p>我会少睡觉，多思考。因为我知道，每当我们闭上一分钟眼睛，我们也就同时失去了60秒。当他人停滞时我会前行，当他人入梦时我会清醒，当他人讲话时我会倾听，就像享受一支美味的巧克力冰激凌！  </p>
<p>如果上帝赏我一段生命，我会简单装束，伏在阳光下，袒露的不仅是身体，还有我的魂灵。 </p>
<p>上帝呀，如果我有一颗心，我会将仇恨写在冰上，然后期待太阳的升起；我会用凡高的梦在星星上画一首贝内德第的诗，而塞莱特的歌会是将是我献给月亮的小夜曲。我会用泪水浇灌玫瑰，以此体味花刺的痛苦和花瓣的亲吻……  </p>
<p>上帝呀，如果我有一段生命……我不会放过哪怕是一天，而不对我所爱的人说我爱他们。我会使每个男人和女人都了解他们皆我所爱，我要怀着爱而生活。  </p>
<p>对于大人，我会向他们证明，那种认为因衰老而失去爱的想法是多么错误，我们是因为失去爱而衰老而不是与之相反。对于孩子，我会给他们插上翅膀而让他们自己学会飞翔；对于老人，我会教给他们死亡的来临不是因为衰老而是因为遗忘。  </p>
<p>人呀，我从你们身上学会了太多的东西… …我知道，人们都想伫立在颠峰上，殊不知，真正的幸福恰恰就在于攀登险阻的过程。我懂得，当婴儿用小拳头第一次抓住爸爸的手指时，他也就永远地抓住了它。  </p>
<p>我明白，一个人只有在帮助他人站起时才有权利俯视他。我能够从你们身上学到的东西是如此之多，可事实上已经意义寥寥，因为当人们将我敛入棺木时，我正在死去。  </p>
<p>永远说你感到的，做你想到的吧！如果我知道今天是我最后一次看你入睡，我会热烈地拥抱你，祈求上帝守护你的灵魂。如果我知道这是最后一次看你离开家门，我会给你一个拥抱一个吻，然后重新叫住你，再度拥抱亲吻。如果我知道这是最后一次听到你的声音，我会录下你的每个字句，以便可以一遍又一遍永无穷尽地倾听。如果我知道这是看到你的最后几分钟，我会说”我爱你”，而不是傻傻地以为你早已知道。  </p>
<p>永远有一个明天，生活给我们另一个机会将事情做好，可是如果我搞错了，今天就是我们所剩的全部，我会对你说我多么爱你，我永远不会忘记你。  </p>
<p>明天从不向任何人作保证，无论青年或老人，今天可能就是你最后一次看到你所爱的人。因此，别再等待了，今天就开始！因为如果明天永远不来，你也许会遗憾今天没来得及微笑，拥抱，亲吻，会遗憾自己忙碌得只能把它们归为一个最后的愿望。保护周围你爱的人吧，告诉他们你多么需要他们。爱他们，善待他们，用些时间对他们说：”对不起”，”原谅我”，”劳驾”，”谢谢”，以及你知道的所有爱的话语。  </p>
<p>没有人会因为你秘而不宣的思想而记住你。向上帝祈求力量和智慧来表达它们吧，向你的朋友证明，他们对你来说是多么的重要。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1999年，72岁的马尔克斯患上淋巴癌后，写了一封信向读者告别。&lt;br&gt;&lt;img src=&quot;/images/farewell.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Literature" scheme="https://zhang21.github.io/categories/Literature/"/>
    
    
      <category term="马尔克斯" scheme="https://zhang21.github.io/tags/%E9%A9%AC%E5%B0%94%E5%85%8B%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://zhang21.github.io/2017/09/01/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://zhang21.github.io/2017/09/01/Markdown语法/</id>
    <published>2017-09-01T10:16:38.000Z</published>
    <updated>2017-12-11T03:00:37.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h2><p>Markdown 是一种轻量级标记语言。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。</p>
<h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><p><strong><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Markdown-wiki</a></strong><br><strong><a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown官网</a></strong><br><strong><a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="external">Markdown中文文档</a></strong><br><strong><a href="http://itmyhome.com/markdown/article/extension/strikethrougn.html" target="_blank" rel="external">Markdown语法</a></strong></p>
<a id="more"></a>
<p><br></p>
<h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><h3 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#一个空格</div><div class="line">&amp;ensp;</div><div class="line"></div><div class="line">#两个空格</div><div class="line">&amp;emsp;</div><div class="line"></div><div class="line">#不断行空白格</div><div class="line">&amp;nbsp;</div></pre></td></tr></table></figure>
<p><strong>栗子：</strong></p>
<ol>
<li>&ensp;一个空格；</li>
<li>&emsp;两个空格；</li>
<li>&nbsp;不断行空白格；</li>
</ol>
<p><br></p>
<h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><ul>
<li>段落的前后必须是空行<br>空行是指行内什么都没有，或者只有空白符（空格或制表符）<br>相邻两行文本，如果中间没有空行，会显示在一行中（换行符被转换为空格）</li>
<li>如果需要在段内加入换行 <br><br>可以在前一行的末尾加入至少两个空格，然后换行写其它的文字</li>
<li>Markdown中的多数区块都需要在两个空行之间</li>
</ul>
<p><br></p>
<h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*斜体*, _斜体_</div><div class="line">**粗体**</div><div class="line">***粗斜体***</div><div class="line">~~删除线~~</div></pre></td></tr></table></figure></p>
<p>显示效果：</p>
<ul>
<li><em>斜体</em>, <em>斜体</em></li>
<li><strong>粗体</strong></li>
<li><strong><em>粗斜体</em></strong></li>
<li><del>删除线</del></li>
</ul>
<p><br></p>
<h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><h4 id="Setext形式"><a href="#Setext形式" class="headerlink" title="Setext形式"></a>Setext形式</h4><p>大标题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">一级大标题</div><div class="line">========</div><div class="line"></div><div class="line">二级大标题</div><div class="line">--------</div></pre></td></tr></table></figure></p>
<p><br></p>
<h4 id="atx形式"><a href="#atx形式" class="headerlink" title="atx形式"></a>atx形式</h4><p>普通标题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>MarkDown支持两种形式的链接语法：行内式和参考式。</p>
<h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>语法说明：<br>[ ] 里面写链接文字，( ) 里面写链接地址，()中的” “可以指定title属性。</p>
<p>代码：<br><code>欢迎来到 [简书](www.jianshu.com &quot;Jianshu&quot;)</code></p>
<p>效果：<br>欢迎来到 <a href="www.jianshu.com" title="Jianshu">简书</a></p>
<h4 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h4><p>参考式超链接一般用在学术论文上面，或某一个链接在文章中多处使用，那么引用的方式创建链接将非常好，它可以让你对链接进行统一的管理。<br>语法说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">参考式链接分为两部分，文中的写法[链接文字][链接标记]，在文本任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格</div><div class="line">如果链接文字本身可以作为链接标记，也可以写成[链接文字][]</div><div class="line">[链接文字]：链接地址的形式</div></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">简书里面有 [简书早报][1]、[简书晚报][2]以及 [简黛玉][3]</div><div class="line">[简黛玉 美人][3] 是一个[才女][]</div><div class="line">[1]:http://www.jianshu.com &quot;Jianshu&quot;</div><div class="line">[2]:http://www.jianshu.com &quot;EveningPaper&quot;</div><div class="line">[3]:http://www.jianshu.com</div><div class="line">[才女]:http://www.jianshu.com</div></pre></td></tr></table></figure></p>
<p>效果：<br>简书里面有 <a href="http://www.jianshu.com" title="Jianshu" target="_blank" rel="external">简书早报</a>、<a href="http://www.jianshu.com" title="EveningPaper" target="_blank" rel="external">简书晚报</a>以及<a href="http://www.jianshu.com" target="_blank" rel="external">简黛玉</a><br><a href="http://www.jianshu.com" target="_blank" rel="external">简黛玉 美人</a> 是一个<a href="http://www.jianshu.com" target="_blank" rel="external">才女</a><br><br></p>
<h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>MarkDown支持以比较简短的自动链接形式来处理网址和电子邮件，只要用&lt;&gt;包起来，MarkDown就会自动把它转成链接。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;http://example.com&gt;</div><div class="line">&lt;address@example.com&gt;</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>MarkDown Extra只支持在标题后插入锚点，其他地方无效<br>Leanote编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，你发布后的文章是支持的<br>在你准备跳转到的指定标题后插入锚点 { # 标记 }，然后在其他地方写上连接到锚点的链接</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">目录 \&#123; \# index \&#125;</div><div class="line">跳转到 \[ 目录\ ]( \# index)</div></pre></td></tr></table></figure></p>
<p>效果：<br>目录 { #index }<br>跳转到 [目录 ](#index)</p>
<p><br></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用 <code>* ，+ ，-</code> 表示无序列表</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 无序列表1</div><div class="line">- 无序列表2</div><div class="line">- 无序列表3</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<ul>
<li>无序列表1</li>
<li>无序列表2</li>
<li>无序列表3</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表使用数字接着英文点</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 有序列表1</div><div class="line">2. 有序列表2</div><div class="line">3. 有序列表3</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
</ol>
<h4 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h4><p>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法：紧跟一个缩进（Tab）</p>
<h4 id="列表缩进"><a href="#列表缩进" class="headerlink" title="列表缩进"></a>列表缩进</h4><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多3个空格，项目标记后则一定要接着至少一个空格或制表符。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*    轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。</div><div class="line">那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。</div><div class="line">*    那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<ul>
<li>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。</li>
<li>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。</li>
</ul>
<p><br></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用需要在被引用的文本前加上 &gt; 符号</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; 引用1</div><div class="line">&gt; 引用2</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>引用1<br>引用2</p>
</blockquote>
<h4 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h4><p>区块引用可以嵌套（如引用的引用），只要根据层次加上不同数量的 <code>&gt;</code>符号</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 请问MarkDown怎么用？</div><div class="line">&gt;&gt; 自己看教程！</div><div class="line">&gt; 教程在哪里？</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>请问MarkDown怎么用？</p>
<blockquote>
<p>自己看教程！</p>
<blockquote>
<p>教程在哪里？</p>
</blockquote>
</blockquote>
</blockquote>
<p><br></p>
<h3 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h3><p>图片的创建方式与超链接类似。</p>
<p>代码：<br><code>![](http://zhangxx5678.lofter.com/post/39b969_df4f526#)</code></p>
<p><br></p>
<h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容结构目录</p>
<p><br></p>
<h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>在需要添加注脚的文字后加上注脚名字 [^注脚名字]，称为加注。然后在文中的任意位置（一般最后）添加脚注，脚注前必须有对应的脚注名字。<br>注脚与注脚间必须空一行！<br>注脚自动被搬运到最后面，请到文章末尾查看，并且脚注后的链接可以直接跳转会到加注的地方</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">使用 MarkDown[^1]可以提高书写效率，直接转换成 HTML[^2]</div><div class="line">[^1]:MarkDown是一种纯文本标记语言</div><div class="line">[^2]:HTML超文本标记语言</div></pre></td></tr></table></figure></p>
<p>效果：<br> 使用 MarkDown<a href="MarkDown是一种纯文本标记语言">^1</a>可以提高书写效率，直接转换成 HTML<a href="HTML超文本标记语言">^2</a></p>
<p><br></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>可以在一行中用 三个以上的 <code>*</code>,<code>-</code>,<code>_</code> 建立一个分割线，行内不能有其他东西。</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. * * *</div><div class="line">2.</div><div class="line">3. ***</div><div class="line">4.</div><div class="line">5. - - -</div><div class="line">6.</div><div class="line">7. ---</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<hr>
<hr>
<hr>
<hr>
<p><br></p>
<h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><p>Markdown标准 本身所包含的功能有限，所以产生了许多第三方扩展语法，如 <a href="https://help.github.com/categories/writing-on-github/" target="_blank" rel="external">GFW, GitHub Flavored Markdown</a></p>
<h3 id="Tasklist"><a href="#Tasklist" class="headerlink" title="Tasklist"></a>Tasklist</h3><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- [ ] Monday</div><div class="line">- [ ] Tuesday</div><div class="line">- [ ] Wednesday</div><div class="line">- [ ] Tuesday</div><div class="line">- [ ] Friday</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<ul>
<li style="list-style: none"><input type="checkbox"> Monday</li>
<li style="list-style: none"><input type="checkbox"> Tuesday</li>
<li style="list-style: none"><input type="checkbox"> Wednesday</li>
<li style="list-style: none"><input type="checkbox"> Tuesday</li>
<li style="list-style: none"><input type="checkbox"> Friday</li>
</ul>
<p><br></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ol>
<li>不管是哪种方式，第一行为表头，第二行为分割表头和主体部分，第三行开始每一行为一个表格行；</li>
<li>列与列之间用管道符号 | 隔开；</li>
<li>第二行还可以为不同的列指定对其方向，默认左对齐，在 - 右边加上 : 就右对齐</li>
</ol>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">学号 | 姓名 | 分数</div><div class="line">- | - | -</div><div class="line">001 | 张三 | 78</div><div class="line">002 | 李四 | 67</div><div class="line">003 | 王五 | 99</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>分数</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>张三</td>
<td>78</td>
</tr>
<tr>
<td>002</td>
<td>李四</td>
<td>67</td>
</tr>
<tr>
<td>003</td>
<td>王五</td>
<td>99</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="代码块和高亮"><a href="#代码块和高亮" class="headerlink" title="代码块和高亮"></a>代码块和高亮</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>插入代码的方式有两种，一种是利用缩进(Tab)，另一种是利用反引号 `` 和 ```     ```</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Python语言的输出函数 `Print()` 怎么使用？</div></pre></td></tr></table></figure></p>
<p>效果：<br>Python语言的输出函数 <code>Print()</code> 怎么使用？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">from flask import Flask</div><div class="line">app = Flask(app)</div></pre></td></tr></table></figure>
<h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><p>在 ``` 之后添加代码的语言</p>
<p>代码：<br>```python<br>import os<br>from flask import Flask<br>app = Flask(app)<br>```</p>
<p>效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(app)</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><strong> <a href="http://flowchart.js.org/" target="_blank" rel="external">流程图语法参考</a> </strong></p>
<p><br></p>
<h3 id="LaTeX公式"><a href="#LaTeX公式" class="headerlink" title="LaTeX公式"></a>LaTeX公式</h3><p><strong><a href="https://zh.wikipedia.org/wiki/LaTeX" target="_blank" rel="external">关于LaTEX：</a></strong></p>
<blockquote>
<p>是一种跨平台的基于<a href="https://zh.wikipedia.org/wiki/TeX" target="_blank" rel="external">TEX</a>的排版系统，对于生成复杂表格和数学公式，这一点表现得尤为突出。<br>因此它非常适用于生成高印刷质量的科技和数学、化学类文档。</p>
</blockquote>
<p><strong><a href="https://en.wikipedia.org/wiki/MathJax" target="_blank" rel="external">关于MathJax：</a></strong></p>
<blockquote>
<p>MathJax是一种跨浏览器JavaScript库，它使用MathML，LaTeX和ASCIIMathML 标记在Web浏览器中显示数学符号。<br>MathJax作为Apache License下的开源软件。</p>
</blockquote>
<p><strong><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax语法</a></strong></p>
<p><br></p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>$</code>表示行内公式<br>质能守恒公式 <code>$E=mc^2$</code> 方程式</p>
<p>效果：$E=mc^2$</p>
<p><code>$$</code>表示整行公式</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$$\sum_&#123;i=1&#125;^n a_i=0$$</div><div class="line"></div><div class="line">$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</div><div class="line"></div><div class="line">$$\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;$$</div></pre></td></tr></table></figure></p>
<p>效果：<br>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p><br></p>
<h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><p>介绍一些常用的书写、编辑Markdown的工具。</p>
<ul>
<li>MarkdownPad Windows (windows);</li>
<li>Texts (Windows, osX);</li>
<li>MarkPad (Windows);</li>
<li>Haroopad (Windows, osX, Linux);</li>
<li>ReText (Linux);</li>
<li>等等</li>
</ul>
<p><br></p>
<h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><p>Markdown文档可以方便地转换为 HTML, Word, PDF 等文件格式。<br>可以利用 软件 或者 命令 转换文件。</p>
<h3 id="转换为-HTML"><a href="#转换为-HTML" class="headerlink" title="转换为 HTML"></a>转换为 HTML</h3><h3 id="转换为-PDF"><a href="#转换为-PDF" class="headerlink" title="转换为 PDF"></a>转换为 PDF</h3><h3 id="转换为-Word"><a href="#转换为-Word" class="headerlink" title="转换为 Word"></a>转换为 Word</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于Markdown&quot;&gt;&lt;a href=&quot;#关于Markdown&quot; class=&quot;headerlink&quot; title=&quot;关于Markdown&quot;&gt;&lt;/a&gt;关于Markdown&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级标记语言。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。&lt;/p&gt;
&lt;h3 id=&quot;参考文件&quot;&gt;&lt;a href=&quot;#参考文件&quot; class=&quot;headerlink&quot; title=&quot;参考文件&quot;&gt;&lt;/a&gt;参考文件&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown-wiki&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown官网&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;https://markdown-zh.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown中文文档&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;http://itmyhome.com/markdown/article/extension/strikethrougn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown语法&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="https://zhang21.github.io/categories/Network/"/>
    
    
      <category term="Markdown" scheme="https://zhang21.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>关于Nginx</title>
    <link href="https://zhang21.github.io/2017/09/01/%E5%85%B3%E4%BA%8ENginx/"/>
    <id>https://zhang21.github.io/2017/09/01/关于Nginx/</id>
    <published>2017-09-01T08:22:58.000Z</published>
    <updated>2017-12-11T03:01:42.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于Nginx"><a href="#关于Nginx" class="headerlink" title="关于Nginx"></a>关于Nginx</h3><p><strong> <a href="https://nginx.org/" target="_blank" rel="external">Nginx官网</a> </strong><br><strong> <a href="https://zh.wikipedia.org/wiki/Nginx" target="_blank" rel="external">Nginx-Wikipedia</a> </strong></p>
<p>Nginx（发音同engine x）是一个 Web服务器，也可以用作反向代理，负载平衡器和 HTTP缓存。它能反向代理 <code>HTTP, HTTPS, SMTP, POP3, IMAP</code> 的协议连接。<br>基于BSD-like协议发行，支持多种操作系统。<br><a id="more"></a><br>作为HTTP服务软件的后起之秀，Nginx有很多优点：</p>
<ul>
<li>在性能上，Nginx占用的系统资源更少，支持更多的并发连接（特别是小静态文件场景下），达到更高的访问效率；</li>
<li>在功能上，Nginx不仅是一个优秀的<em>Web服务软件</em>，还可以作为<em>反向代理</em> <em>负载均衡</em>及<em>缓存</em>使用。它类似于<em>LVS负载均衡</em>及<em>HAProxy</em>等专业代理软件，又类似于<em>Squid</em>等专业缓存服务软件；</li>
<li>在安装配置上，Nginx方便、简单、灵活。</li>
</ul>
<p>Nginx功能丰富，可作为HTTP服务器、反向代理服务器、邮件服务器。支持<em>FastCGI, SSL, Virtual Host, URL Rewrite, Gzip</em>等功能，并支持很多第三方模块扩展。</p>
<p><br></p>
<h4 id="与PHP的集成"><a href="#与PHP的集成" class="headerlink" title="与PHP的集成"></a>与PHP的集成</h4><p>自PHP-5.3.3起，PHP-FPM加入到了PHP核心，编译时加上–enable-fpm即可提供支持。<br>PHP-FPM以守护进程在后台运行，Nginx响应请求后，自行处理静态请求，PHP请求则经过fastcgi_pass交由PHP-FPM处理，处理完毕后返回。<br>Nginx和PHP-FPM的组合，是一种稳定、高效的PHP运行方式，效率要比传统的Apache和mod_php高出不少。</p>
<p><strong> Nginx的重要特性 </strong></p>
<blockquote>
<p>可针对静态资源高速高并发访问及缓存；<br>可使用反向代理加速，并且可进行数据缓存；<br>具有简单负载均衡、节点健康检查和容错功能；<br>支持远程FastCGI、Uwsgi、SCGI、Memcached Servers的加速和缓存；<br>支持SSL、TLS、SNI；<br>具有模块化的架构：过滤器包括gzip压缩、ranges支持、chunked响应、XSLT、SSI及图像缩放等功能。在SSI过滤器中，一个包含多个SSI的页面，如果FastCGI或反向代理处理，可被并行处理；<br>它具备的其他WWW服务特性：<br>支持基于名字、端口及IP的多虚拟主机站点；<br>支持Keep-alived和pipelined连接；<br>可进行修改Nginx配置，并且在代码上线时，可平滑重启，不中断业务访问；<br>可自定义访问日志格式，临时缓冲些日志操作，快速日志轮询及通过rsyslog处理日志；<br>可利用信号控制Nginx进程；<br>支持 3xx-5xx HTTP状态码重定向；<br>支持rewrite模块，支持URI重写及正则表达式匹配；<br>支持基于客户端IP地址和HTTP基本认证的访问控制；<br>支持PUT、DELETE、MKCOL、COPY及MOVE等较特殊的HTTP请求方法；<br>支持FLV流和MP4流技术产品应用；<br>支持HTTP响应速率限制；<br>支持同一IP地址的并发连接或请求数连接；<br>支持邮件服务器代理；</p>
</blockquote>
<p><br></p>
<h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><ol>
<li><p>添加RPM源安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel    安装依赖</div><div class="line">rpm -ivm http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 安装RPM源</div><div class="line">yum install -y nginx 安装Nginx</div><div class="line">rpm -q nginx 查询安装</div></pre></td></tr></table></figure>
</li>
<li><p>添加Nginx yum repository休息安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum.repos.d/nginx.repo</div><div class="line">[nginx] 唯一</div><div class="line">name=nginx repo</div><div class="line">baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
</li>
<li><p>源码安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src    建议解压于此目录</div><div class="line">wget http://xxx.xx.com/nginx.tar.gz</div><div class="line">tar -zxvf nginx.tar.gz</div><div class="line">cd ./nginx</div><div class="line">./configure --prefix=/usr/local</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于Nginx&quot;&gt;&lt;a href=&quot;#关于Nginx&quot; class=&quot;headerlink&quot; title=&quot;关于Nginx&quot;&gt;&lt;/a&gt;关于Nginx&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;https://nginx.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx官网&lt;/a&gt; &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; &lt;a href=&quot;https://zh.wikipedia.org/wiki/Nginx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx-Wikipedia&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nginx（发音同engine x）是一个 Web服务器，也可以用作反向代理，负载平衡器和 HTTP缓存。它能反向代理 &lt;code&gt;HTTP, HTTPS, SMTP, POP3, IMAP&lt;/code&gt; 的协议连接。&lt;br&gt;基于BSD-like协议发行，支持多种操作系统。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Nginx" scheme="https://zhang21.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Test-My-Site</title>
    <link href="https://zhang21.github.io/2017/08/30/Test-My-Site/"/>
    <id>https://zhang21.github.io/2017/08/30/Test-My-Site/</id>
    <published>2017-08-30T08:02:43.000Z</published>
    <updated>2017-09-05T06:59:02.097Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li style="list-style: none"><input type="checkbox"> Monday</li>
<li style="list-style: none"><input type="checkbox"> Tuesday</li>
<li style="list-style: none"><input type="checkbox"> Wednesday</li>
<li style="list-style: none"><input type="checkbox"> Thursday</li>
<li style="list-style: none"><input type="checkbox"> Friday</li>
<li style="list-style: none"><input type="checkbox"> Saturday</li>
<li style="list-style: none"><input type="checkbox"> Sunday</li>
</ul>
<p><br><br>$$\sideset{^1_2}{^3_4}A$$</p>
<p>$E=mc^2$</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; Monday&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; Tuesday&lt;/li&gt;
&lt;li 
    
    </summary>
    
      <category term="Test" scheme="https://zhang21.github.io/categories/Test/"/>
    
    
      <category term="Testing" scheme="https://zhang21.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhang21.github.io/2017/08/30/hello-world/"/>
    <id>https://zhang21.github.io/2017/08/30/hello-world/</id>
    <published>2017-08-29T16:00:00.000Z</published>
    <updated>2017-09-04T05:55:09.757Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
