<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风继续吹</title>
  
  <subtitle>Yesterday, you said tomorrow!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhang21.github.io/"/>
  <updated>2019-03-01T08:59:50.000Z</updated>
  <id>https://zhang21.github.io/</id>
  
  <author>
    <name>Zhang21</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SonarQube</title>
    <link href="https://zhang21.github.io/2019/02/22/SonarQube/"/>
    <id>https://zhang21.github.io/2019/02/22/SonarQube/</id>
    <published>2019-02-22T07:28:44.000Z</published>
    <updated>2019-03-01T08:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>GitHub: <a href="https://github.com/SonarSource/sonarqube" target="_blank" rel="noopener">https://github.com/SonarSource/sonarqube</a></li><li>Website: <a href="https://www.sonarqube.org/" target="_blank" rel="noopener">https://www.sonarqube.org/</a></li><li>Docs: <a href="https://docs.sonarqube.org" target="_blank" rel="noopener">https://docs.sonarqube.org</a></li></ul><p>环境:</p><ul><li>RHEL7x86_64</li><li>SonarQube v7.6</li></ul><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>SonarQube</strong> 是一个开源的代码质量管理系统。支持超过25中编程语言，不过有些是商业插件。</p><p>SonarQube 是一种自动代码审查(code review)工具，用于检测代码中的<strong>错误(bugs)</strong>，<strong>漏洞(vulnerabilities)</strong>和<strong>代码异味(code smell)</strong>。它可以与您现有的工作流程集成，以便在项目分支和拉取请求之间进行连续的代码检查。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="架构与集成"><a href="#架构与集成" class="headerlink" title="架构与集成"></a>架构与集成</h1><p>Architecture and Integration</p><p><br></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SonarQube平台由4个组件组成:</p><p><img src="/images/SonarQube/architecture-scanning.png" alt=""></p><p><br></p><ul><li><strong>SonarQube Server</strong>启动三个主进程:<ul><li><strong>Web Server</strong>，供开发人员，管理人员浏览质量快照并配置SonarQube实例</li><li><strong>Search Server</strong>，基于ElasticSearch从UI返回搜索</li><li><strong>Compute Engine Server</strong>，负责处理代码分析和上报并将其保存到SonarQube数据库中</li></ul></li><li><strong>SonarQube Database</strong>用于存储<ul><li>SonarQube实例的配置(安全，插件…的设置)</li><li>项目，视图…的质量快照</li></ul></li><li>Server上安装了多个插件，可能包括Language，SCM，Intergration，Authentication，Governance…</li><li>在CI/CD Server上运行一个或多个 <strong>SonarScanner</strong> 来分析项目</li></ul><p><br><br><br><br><br></p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>Integration</p><p>以下模式显示了SonarQube如何与其它ALM工具进行集成，以及在哪里使用SonarQube的各种组件。</p><p><img src="/images/SonarQuebe/architecture-integrate.png" alt=""></p><p><br></p><ol><li>开发者在他们的IDE中集成SonarLint运行本地分析</li><li>开发者推送他们的代码到代码库</li><li>CI Server触发自动构建，以及执行运行SonarQube分析所需的SonarScanner</li><li>分析报告将发送到SonarQube Server进行处理</li><li>SonarQube Server处理分析报告并将结果存储在SonarQuebe数据库中，并在UI中显示结果</li><li>开发者通过SonarQube UI审核，评论，挑战他们的Issues以管理和减少他们的技术债务</li><li>管理者从分析中接收报告，运维使用API自动配置并从SonarQube中提取数据，使用JMX监控SonarQube Server</li></ol><p><br><br><br><br><br></p><h2 id="关于机器和位置"><a href="#关于机器和位置" class="headerlink" title="关于机器和位置"></a>关于机器和位置</h2><p>About Machines and Locations</p><ul><li>SonarQube平台不能够有多个SonarQube Server和SonarQube Database</li><li>为获得最佳性能，每个组件(Server, Database, Scanner)应该安装在单独的机器上，并且此机器应该是专用的</li><li>SonarScanner通过添加机器进行扩展</li><li>所有机器必须时钟同步</li><li>SonarQube Server和SonarQube Database必须位于同一网络下</li><li>SonarScanner不需要与SonarQube Server位于同一网络下</li><li>SonarScanner与SonarQube Database之间没有通信</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p>Requirements</p><p><br></p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>Prerequisites and Overview</p><p>运行SonarQube的唯一先决条件是安装Java(Oracle JRE 8/OpenJDK 8)。</p><p><br></p><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><ul><li>2Cores+</li><li>2GB RAM+</li><li>建议使用高性能I/O的磁盘</li></ul><p><br><br><br></p><h3 id="支持的平台"><a href="#支持的平台" class="headerlink" title="支持的平台"></a>支持的平台</h3><ul><li>Java<ul><li>Oracle JRE 8</li><li>OpenJDK 8</li></ul></li><li>Database<ul><li>PostgreSQL v9.3-v9.6, v10. UTF-8 charset</li><li>SQL Server v2014, v2016. </li><li>Oracle v11, v12, vXE. UTF8-family charset, thin mode</li><li>MySQL v5.6, v5.7. UTF8 charset, InnoDB storage, mysql-connector-java</li></ul></li><li>Web Browser<ul><li>IE 11</li><li>Edge Latest</li><li>FireFox Latest</li><li>Chrome</li><li>Safari</li></ul></li></ul><p><br><br><br></p><h3 id="平台说明"><a href="#平台说明" class="headerlink" title="平台说明"></a>平台说明</h3><p><br></p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>如果在Linux上运行，请确保:</p><ul><li><code>vm.max_map_count</code> 大于或等于 262144</li><li><code>fs.file-max</code> 大于或等于 65535</li><li>运行SonarQube的用户可以打开至少65535个文件描述符</li><li>运行SonarQube的用户可以打开至少2048个线程</li></ul><p>用以下命令查看和配置它们:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sysctl vm.max_map_count</span><br><span class="line">sysctl fs.file-max</span><br><span class="line"><span class="built_in">ulimit</span> -n</span><br><span class="line"><span class="built_in">ulimit</span> -u</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置，但只是临时生效</span></span><br><span class="line"><span class="comment"># root</span></span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line">sysctl -w fs.file-max=65536</span><br><span class="line"><span class="built_in">ulimit</span> -n 65536</span><br><span class="line"><span class="built_in">ulimit</span> -u 2048</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line"><span class="comment"># /etc/sysctl.d/99-sonarqube.conf 或 /etc/sysctl.conf</span></span><br><span class="line"><span class="comment"># user: sonarqube</span></span><br><span class="line">sonarqube   -   nofile   65536</span><br><span class="line">sonarqube   -   nproc    2048</span><br></pre></td></tr></table></figure><p><br></p><p>如果使用<code>systemd</code>来启动SonarQube，你必须在<code>[Service]</code>的单元文件中指定这些限制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">...</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">LimitNPROC=2048</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="seccomp-filter"><a href="#seccomp-filter" class="headerlink" title="seccomp filter"></a>seccomp filter</h4><p>默认情况下，ElasticSearch使用<strong>seccomp filter</strong>。在大多数发行版中，此功能在内核中激活。但在RHL6等发行版上，此功能已停用。如果你的发行版中没有此功能，请无法升级到激活了seccomp filter功能的版本，则必须通过更新<code>$SONARQUBEHOME/conf/sonar.properties_</code>中的<code>sonar.search.javaAdditionalOpts</code>配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false</span><br><span class="line"></span><br><span class="line"># 检查</span><br><span class="line">grep SECCOMP /boot/config-$(uname -r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 如果内核有它，你将看到</span><br><span class="line">CONFIG_HAVE_ARCH_SECCOMP_FILTER=y</span><br><span class="line">CONFIG_SECCOMP_FILTER=y</span><br><span class="line">CONFIG_SECCOMP=y</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h1 id="配置和升级"><a href="#配置和升级" class="headerlink" title="配置和升级"></a>配置和升级</h1><p>Setup and Upgrade</p><p><br></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>Get Started in Two Minutes Guide</p><ul><li>从ZIP文件安装</li><li>使用Docker</li></ul><p><br></p><h3 id="zip文件安装"><a href="#zip文件安装" class="headerlink" title="zip文件安装"></a>zip文件安装</h3><ol><li>现在 SonarQube CE</li><li>解压</li><li>运行</li><li>访问</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 具体位置取决于你的安装位置</span></span><br><span class="line">/opt/sonarqube/bin/[OS]/sonar.sh console</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># localhost:9000（admin/admin）</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>在<a href="https://hub.docker.com/_/sonarqube/" target="_blank" rel="noopener">Docker Hub</a>上下载对应CE的镜像，上面有安装和配置的详细信息。</p><p><br><br><br><br><br></p><h2 id="安装Server"><a href="#安装Server" class="headerlink" title="安装Server"></a>安装Server</h2><p>支持多个数据库引擎，请务必遵守各个数据库引擎的要求。</p><p>创建一个空的schema和一个<code>sonarqube</code>用户。授予此用户<code>create, update, delete</code>此<code>schema</code>对象的权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="string">`sonar`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'sonarqube'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'sonarqube-PW123'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> sonar.* <span class="keyword">TO</span> <span class="string">'sonarqube'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h3><p><br></p><h4 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h4><p>跳过，有需要的请看: <a href="https://docs.sonarqube.org/latest/setup/install-server/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/install-server/</a></p><p><br><br><br></p><h4 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h4><p>跳过！</p><p><br><br><br></p><h4 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4><p>如果你想使用<code>custom schema</code>而不是默认的<code>public schema</code>，则必须设置PostgreSQL的<code>search_path</code>属性:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> mySonarUser <span class="keyword">SET</span> search_path <span class="keyword">to</span> mySonarQubeSchema</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><blockquote><p>注意:<br>Data Center Edition(Enterprise)不支持MySQL!<br>Data Center Edition: Designed for High Availability</p></blockquote><p>可在MySQL中使用两种众所周知的数据库引擎: <strong>MyISAM</strong>和<strong>InnoDB</strong>。MyISAM是最老的，并且正在逐渐被InnoDB替代。随着质量控制项目数量的增加，InnoDB显然更快，并且使用SonarQube可以更好地扩展。<br>如果你是SonarQube的早期使用者，你可能有一系列仍在使用MyISAM引擎的表。你应该将所有表的引擎更改为InnoDB。</p><p>一旦所有SonarQube表都使用InnoDB引擎，首先要做的是使用<code>innodb_buffer_pool_size</code>参数为MySQL实例分配最大的RAM，并为<code>query_cache_size</code>参数提供至少<code>15Mb</code>。</p><p>阅读这篇文档<a href="https://www.percona.com/blog/2007/11/01/innodb-performance-optimization-basics/" target="_blank" rel="noopener">InnoDB Performance Optimization</a>来优化InnoDB。</p><p><br><br><br></p><h3 id="安装Web-Server"><a href="#安装Web-Server" class="headerlink" title="安装Web Server"></a>安装Web Server</h3><p>首先，检查安装要求；<br>下载和解压压缩的发行版(不要解压到以数字开头的目录)；<br>下面变量<code>SONARQUBE-HOME</code>指的是解压的路径。</p><p><br></p><h4 id="设置数据库访问"><a href="#设置数据库访问" class="headerlink" title="设置数据库访问"></a>设置数据库访问</h4><p>编辑<code>$SONARQUBE-HOME/conf/sonar.properties</code>来配置数据库设置。模板可用于每个受支持的数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Example for MySQL</span><br><span class="line">sonar.jdbc.username=sonarqube</span><br><span class="line">sonar.jdbc.password=sonarqube-PW123</span><br><span class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false</span><br></pre></td></tr></table></figure><p><br></p><h4 id="添加JDBC驱动"><a href="#添加JDBC驱动" class="headerlink" title="添加JDBC驱动"></a>添加JDBC驱动</h4><p>已提供受支持数据库(Oracle除外)的驱动程序。不要更换提供的驱动程序，它们是唯一受支持的。</p><p>对于Oracle，将JDBC驱动复制到<code>$SONARQUBE-HOME/extensions/jdbc-driver/oracle</code>。</p><p><br><br><br></p><h4 id="配置ElasticSearch存储路径"><a href="#配置ElasticSearch存储路径" class="headerlink" title="配置ElasticSearch存储路径"></a>配置ElasticSearch存储路径</h4><p>默认情况下，ES数据存储在<code>$SONARQUBE-HOME/data</code>中，但不建议用于生产环境。相反，你应该将数据存储在其它位置，最好是在具有高速I/O的专用卷。除了保持可接受的性能之外，还可简化SonarQube的升级。</p><p>编辑<code>$SONARQUBE-HOME/conf/sonar.properties</code>来配置以下设置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 请记得添加读写权限</span><br><span class="line">sonar.path.data=/var/sonarqube/data</span><br><span class="line">sonar.path.temp=/var/sonarqube/temp</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="启动Web-Server"><a href="#启动Web-Server" class="headerlink" title="启动Web Server"></a>启动Web Server</h4><p>可在<code>$SONARQUBE-HOME/conf/sonar.properties</code>配置监听地址和端口等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sonar.web.host=192.0.0.1</span><br><span class="line">sonar.web.port=80</span><br><span class="line">sonar.web.context=/sonarqube</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">bin/sonar.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认admin/admin</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="调整Web服务器"><a href="#调整Web服务器" class="headerlink" title="调整Web服务器"></a>调整Web服务器</h4><p>默认情况下，SonarQube配置为在任何具有简单Java JRE的计算机上运行。</p><p>为了更好地性能，生产环境实例要做的第一件事是使用Java JDK并通过在<code>sonar.web.javaOpts=-server</code>中设置以下行来激活服务器模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar.web.javaOpts=-server</span><br></pre></td></tr></table></figure><p>要修改SonarQube使用的Java JVM只需编辑<code>$SONARQUBE-HOME/conf/wrapper.conf</code>并更新以下行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapper.java.command=/path/to/my/jdk/bin/java</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h4><p>docs: <a href="https://docs.sonarqube.org/latest/setup/install-server/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/install-server/</a></p><p><br><br><br><br><br></p><h2 id="配置和操作Server"><a href="#配置和操作Server" class="headerlink" title="配置和操作Server"></a>配置和操作Server</h2><p>Configure &amp; Operate the Server</p><p><br></p><h3 id="以SystemD运行"><a href="#以SystemD运行" class="headerlink" title="以SystemD运行"></a>以SystemD运行</h3><p>Running SonarQube as a Service on Linux with SystemD</p><p>假设如下信息:</p><ul><li>sonarqube用户</li><li>sonarqube组</li><li>java virtual machine安装在<code>/opt/java/</code></li><li>sonarqube解压在<code>/opt/sonarqube/</code></li></ul><p><br></p><p>创建<code>sonarqube</code>用户:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin</span><br></pre></td></tr></table></figure><p><br></p><p>创建service文件<code>/etc/systemd/system/sonarqube.service</code>，具体详情请安装自己的实际情况进行修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=SonarQube service</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=sonarqube</span><br><span class="line">Group=sonarqube</span><br><span class="line">PermissionsStartOnly=true</span><br><span class="line">ExecStart=/bin/nohup /opt/java/bin/java -Xms32m -Xmx32m -Djava.net.preferIPv4Stack=true -jar /opt/sonarqube/lib/sonar-application-7.6.jar</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">LimitNPROC=8192</span><br><span class="line">TimeoutStartSec=5</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sonarqube.service</span><br><span class="line">sudo systemctl start sonarqube.service</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="在代理服务器后保护Server"><a href="#在代理服务器后保护Server" class="headerlink" title="在代理服务器后保护Server"></a>在代理服务器后保护Server</h3><p>Securing the Server Behind a Proxy</p><p><br></p><h4 id="Server配置"><a href="#Server配置" class="headerlink" title="Server配置"></a>Server配置</h4><p>要通过HTTPS运行SonarQube Server，必须构建标准的反向代理服务器。<br>必须配置反向代理，在每个HTTP Request Header中设置<code>X_FORWARDED_PROTO: https</code>值。如果没有此属性，SonarQube Server启动的重定向将回退到HTTP。</p><p><br><br><br></p><h4 id="使用Apache代理"><a href="#使用Apache代理" class="headerlink" title="使用Apache代理"></a>使用Apache代理</h4><p>跳过！</p><p><br><br><br></p><h4 id="使用Nginx代理"><a href="#使用Nginx代理" class="headerlink" title="使用Nginx代理"></a>使用Nginx代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># the server directive is nginx&apos;s virtual host directive</span><br><span class="line">server &#123;</span><br><span class="line">  # port to listen on. Can also be set to an IP:PORT</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  # sets the domain[s] that this vhost server requests for</span><br><span class="line">  server_name www.somecompany.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://sonarhost:sonarport;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="使用IIS"><a href="#使用IIS" class="headerlink" title="使用IIS"></a>使用IIS</h4><p>跳过！</p><p><br><br><br><br><br></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在SonarQube中安装插件有两种选择:</p><ul><li><strong>Marketplace</strong>，从SonarQube UI自动地安装插件</li><li><strong>手动安装</strong>， 如果SonarQube实例无法访问Internet，请使用此方法</li></ul><p><br><br><br><br><br></p><h2 id="安装C-C-插件"><a href="#安装C-C-插件" class="headerlink" title="安装C/C++插件"></a>安装C/C++插件</h2><p>由于SonarQube的C, C++是商业版才有的功能，所以我使用的CE版就不支持对这两个语言的静态检查。</p><p>后来看到 <strong>SonarOpenCommunity</strong>: <a href="https://github.com/SonarOpenCommunity" target="_blank" rel="noopener">https://github.com/SonarOpenCommunity</a>，它里面有这个插件，先感谢开发者，然后再使用。</p><p>sonar-cxx: <a href="https://github.com/SonarOpenCommunity/sonar-cxx" target="_blank" rel="noopener">https://github.com/SonarOpenCommunity/sonar-cxx</a>，查看相关说明进行安装和配置。</p><p><br></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>明白哪个插件版本与当前使用的SonarQube版本监控</li><li>下载jar插件，将其放置于<code>$ SONARQUBE_HOME/extensions/plugins</code>目录下<ul><li><code>sonar-cxx-plugin-x.y.z.jar</code>: c++ plug-in</li><li><code>sonar-c-plugin-x.y.z.jar</code>: c plug-in</li></ul></li><li>重启SonarQube Server</li><li>在UI上的Marketplace查看更新</li></ul><p><br><br><br><br><br></p><h2 id="安装PS-SQL插件"><a href="#安装PS-SQL插件" class="headerlink" title="安装PS/SQL插件"></a>安装PS/SQL插件</h2><p>由于SonarQube的PL, SQL是商业版才有的功能，所以我使用的CE版就不支持对这两个语言的静态检查。</p><p>后来看到: sonar-plsql: <a href="https://github.com/felipebz/sonar-plsql" target="_blank" rel="noopener">https://github.com/felipebz/sonar-plsql</a> 社区开源项目，先感谢开发者，再使用。</p><p>安装方法与上面的C/C++一样，下载当前版本支持的插件到对应目录，重启SonarQube Server。</p><p><br><br><br><br><br></p><h2 id="将Server安装为集群"><a href="#将Server安装为集群" class="headerlink" title="将Server安装为集群"></a>将Server安装为集群</h2><p>docs: <a href="https://docs.sonarqube.org/latest/setup/install-cluster/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/install-cluster/</a></p><p>先跳过！</p><p><br><br><br><br><br></p><h2 id="配置和操作集群"><a href="#配置和操作集群" class="headerlink" title="配置和操作集群"></a>配置和操作集群</h2><p>Configure &amp; Operate a Cluster</p><p>docs: <a href="https://docs.sonarqube.org/latest/setup/operate-cluster/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/operate-cluster/</a></p><p>先跳过！</p><p><br><br><br><br><br></p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>Upgrade the Server</p><p>自动处理<code>non-LTS</code>版本的升级。但是，如果在迁移路径中有LTS版本，则必须先迁移LTS，然后再迁移到目标版本。</p><p>例如，<code>v5.1</code> -&gt; <code>v7.0</code>，迁移路径为 <code>v5.1</code> -&gt; <code>5.6.7 LTS</code> -&gt; <code>v6.7.x LTS</code> -&gt; <code>v7.0</code>。</p><p><br></p><h3 id="如何升级"><a href="#如何升级" class="headerlink" title="如何升级"></a>如何升级</h3><p>在开始之前，请备份SnarQube Database。升级问题虽然很少见，但备份确实必须的。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="分析源代码"><a href="#分析源代码" class="headerlink" title="分析源代码"></a>分析源代码</h1><p>Analyzing Source Code</p><p><br></p><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>一旦安装了SonarQube平台，你就可以安装分析器(analyzer)并开始创建项目了。为此，你必须安装和配置适合你需求的扫描器(scanner)。<br>Do you build with:</p><ul><li><strong>Gradle</strong> - <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle" target="_blank" rel="noopener">SonarScanner for Gradle</a></li><li><strong>MSBuild</strong> - <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild" target="_blank" rel="noopener">SonarScanner for MSBuild</a></li><li><strong>Maven</strong> - <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven" target="_blank" rel="noopener">use the SonarScanner for Maven</a></li><li><strong>Jenkins</strong> - <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins" target="_blank" rel="noopener">SonarScanner for Jenkins</a></li><li><strong>Azure DevOps</strong> - <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Extension+for+VSTS-TFS" target="_blank" rel="noopener">SonarQube Extension for Azure DevOps</a></li><li><strong>Ant</strong> - <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Ant" target="_blank" rel="noopener">SonarScanner for Ant</a></li><li><strong>anything else (CLI)</strong> - <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="noopener">SonarScanner</a></li></ul><p><strong>注意</strong>，不建议在运行SonarQube Scanner Analysis的机器上运行反病毒扫描程序，这可能会导致不可预测的行为。</p><p><br></p><h3 id="分析产生了什么"><a href="#分析产生了什么" class="headerlink" title="分析产生了什么"></a>分析产生了什么</h3><p>What does analysis produce?</p><p>SonarQube可以对20多种不同的语言进行分析。该分析的结果是 quality measures 和 issues。但是，分析的结果也会因语言而异:</p><ul><li>在所有语言中，<strong>blame</strong>数据将自动从支持的SCM提供程序导入(自动支持Git和SVN)。其它提供需要额外的插件</li><li>在所有语言中，执行源代码的静态分析</li><li>可对某些语言执行编译代码的静态分析</li><li>可对某些语言执行代码的动态分析</li></ul><p><br><br><br></p><h3 id="是否会分析所有文件"><a href="#是否会分析所有文件" class="headerlink" title="是否会分析所有文件"></a>是否会分析所有文件</h3><p>Will all files be analyzed?</p><p>默认情况下，在分析期间，只有语言分析器(language analyzer)可识别的文件才会加载到项目中。</p><p><br><br><br></p><h3 id="分析期间会发生什么"><a href="#分析期间会发生什么" class="headerlink" title="分析期间会发生什么"></a>分析期间会发生什么</h3><p>What happens during analysis?</p><p>在分析期间，从Server请求数据，分析提供给分析的文件，并以报告的形式将结果返回到Server，然后在Server-Side异步分析。</p><p>分析上报排队并按顺序处理，因此很可能在分析日志显示完成后的短暂时间内，更新的值在SonarQube项目中不可见。但是，你能够分辨出正在发生的事情，因为项目名称右侧的项目主页上会有一个图标。</p><p><img src="/images/SonarQube/backgroundTaskProcessingInProgress.jpeg" alt=""></p><p><img src="/images/SonarQube/backgroundTaskProcessingFailedIcon.jpeg" alt=""></p><p><br><br><br><br><br></p><h2 id="分析参数"><a href="#分析参数" class="headerlink" title="分析参数"></a>分析参数</h2><p>Analysis Parameters</p><p>可以在多个位置设置用于配置项目分析的参数。这是参数的层次结构：</p><ul><li>在UI里定义的<strong>全局分析参数(Global)</strong>，<code>Administration &gt; Configuration &gt; General Settings</code></li><li>在UI里定义的<strong>项目分析参数(Project)</strong>，<code>Project Level &gt; Administration &gt; General Settings</code></li><li>在项目分析配置文件或分析器配置文件中定义的<strong>项目分析参数</strong></li><li><strong>分析/命令行参数</strong>，再启动分析时定义，覆盖项目分析参数</li></ul><p>注意，只有通过UI设置的参数才会存储在数据库中。</p><p><br></p><h3 id="强制参数"><a href="#强制参数" class="headerlink" title="强制参数"></a>强制参数</h3><p>Mandatory Parameters</p><p><br></p><ul><li><strong>Server</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.host.url</code></td><td>the server URL</td><td><code>http://localhost:9000</code></td></tr></tbody></table><p><br></p><ul><li><strong>Project Configuration</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.projectKey</code></td><td>The project’s unique key. Allowed characters are: letters, numbers, - , _ , . and : , with at least one non-digit.</td><td>For Maven projects, this is automatically set to <code>&lt;groupId&gt;:&lt;artifactId&gt;</code></td></tr><tr><td><code>sonar.sources</code></td><td>Comma-separated paths to directories containing source files.</td><td>Read from build system for Maven, Gradle, MSBuild projects</td></tr></tbody></table><p><br><br><br></p><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>Optional Parameters</p><ul><li><strong>Project Identity</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.projectName</code></td><td>显示在Web实例上的项目名称</td><td>Maven项目的<code>&lt;name&gt;</code>，否则为项目密钥。如果DB中已有名称，则不会覆盖该名称</td></tr><tr><td><code>sonar.projectVersion</code></td><td>项目版本</td><td>Maven项目的<code>&lt;version&gt;</code>，否则未提供</td></tr></tbody></table><p><br></p><ul><li><strong>Authentication</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.login</code></td><td>具有项目执行分析权限的SonarQube用户的登录或身份验证Token</td><td>xxx</td></tr><tr><td><code>sonar.password</code></td><td>与<code>sonar.login</code>用户名一起使用的密码。如果正在使用身份验Token，则应将此项留空</td><td>xxx</td></tr></tbody></table><p><br></p><ul><li><strong>Web Services</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.ws.timeout</code></td><td>等待Web服务调用响应的最长时间（秒）。只有在等待服务器响应Web服务调用时在分析期间遇到超时时，才能从默认值修改此值。</td><td>60</td></tr></tbody></table><p><br></p><ul><li><strong>Project Configuration</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.projectDescription</code></td><td>项目描述。与Maven不兼容</td><td><code>&lt;description</code>用于Maven项目</td></tr><tr><td><code>sonar.links.homepage</code></td><td>项目主页，与Maven不兼容</td><td><code>&lt;url&gt;</code>用于Maven项目</td></tr><tr><td><code>sonar.links.ci</code></td><td>CI，与Maven不兼容</td><td><code>&lt;ciManagement&gt;&lt;url&gt;</code>用于Maven项目</td></tr><tr><td><code>sonar.links.issue</code></td><td>Issue tracker，与Maven不兼容</td><td><code>&lt;issueManagement&gt;&lt;url&gt;</code>用于Maven项目</td></tr><tr><td><code>sonar.links.scm</code></td><td>项目原仓库，与Maven不兼容</td><td><code>&lt;scm&gt;&lt;url&gt;</code>用于Maven项目</td></tr><tr><td><code>sonar.links.scm_dev</code></td><td>开发者连接，与Maven不兼容</td><td><code>&lt;scm&gt;&lt;developerConnection&gt;</code>用于Maven项目</td></tr><tr><td><code>sonar.tests</code></td><td>包含测试的目录的逗号分隔路径,与Maven不兼容</td><td>Maven项目的默认测试位置</td></tr><tr><td><code>sonar.sourceEncoding</code></td><td>源文件编码</td><td>系统编码</td></tr><tr><td><code>sonar.externalIssuesReportPaths</code></td><td>以逗号分隔的通用Issue上报路径列表</td></tr><tr><td><code>sonar.projectDate</code></td><td>为分析指定日期(yyyy-MM-dd)</td><td>当前日志</td></tr><tr><td><code>sonar.projectBaseDir</code></td><td>当您需要在除启动它之外的目录中进行分析时，请使用此属性</td><td>xxx</td></tr><tr><td><code>sonar.working.directory</code></td><td>设置使用SonarScanner或SonarScanner for Ant（版本大于2.0）触发的分析的工作目录</td><td><code>.sonar</code></td></tr><tr><td><code>sonar.scm.provider</code></td><td>此属性可用于明确告知SonarQube应使用哪个SCM插件来获取项目上的SCM数据</td><td>xxx</td></tr><tr><td><code>sonar.scm.forceReloadAll</code></td><td>默认情况下，仅检索已更改文件的blame信息。将此属性设置为true可加载所有文件的blame信息</td><td>xxx</td></tr><tr><td><code>sonar.coverage.jacoco.xmlReportPaths</code></td><td>导入以XML文件形式提供的JaCoCo代码覆盖率报告。此属性接受多个逗号分隔的条目。必须在分析之前生成JaCoCo XML报告</td><td><code>target/site/jacoco/jacoco.xml</code> <br> <code>build/reports/jacoco/test/jacocoTestReport.xml</code></td></tr></tbody></table><p><br></p><ul><li><strong>Duplications</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.cpd.exclusions</code></td><td>要从复制检测中排除的以逗号分隔的文件路径模式列表</td><td>xxx</td></tr><tr><td><code>sonar.cpd.${language}.minimumtokens</code></td><td>xxx</td><td>100</td></tr><tr><td><code>sonar.cpd.${language}.minimumLines</code></td><td>如上</td><td>10</td></tr></tbody></table><p><br></p><ul><li><strong>Analysis Logging</strong></li></ul><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>sonar.log.level</code></td><td>控制分析期间生成的日志级别</td><td>INFO</td></tr><tr><td><code>sonar.verbose</code></td><td>向客户端和服务器端分析日志添加更多详细信息</td><td>false</td></tr><tr><td><code>sonar.showProfiling</code></td><td>显示日志以查看分析仪花费时间的位置</td><td>false</td></tr><tr><td><code>sonar.scanner.dumpToFile</code></td><td>将指向文件的完整属性列表输出到扫描程序API，作为调试分析的方法</td><td>xxx</td></tr><tr><td><code>sonar.scanner.metadataFilePath</code></td><td>设置扫描程序写入report-task.txt文件的位置，该文件包含ceTaskId等</td><td><code>sonar.working.directory</code>的值</td></tr></tbody></table><p><br><br><br><br><br></p><h2 id="后台任务"><a href="#后台任务" class="headerlink" title="后台任务"></a>后台任务</h2><p>Background Tasks</p><p>一个后台任务可以是:</p><ul><li>导入一个分析报告</li><li>the computation of a Portfolio</li><li>导入或导出一个项目</li></ul><p><br></p><p>###　扫描程序完成分析后会发生什么</p><p>What happens after the scanner is done analyzing?</p><p>在相关后台任务完成之前，分析尚未完成。即使SonarScanner的日志显示执行完成，在完成后台任务之前，分析结果在SonarQube项目中将不可见。在SonarScanner外出分析代码后，分析结果(Sources, Issues, Metrics) - 分析报告 - 将发送到SonarQube Server，一共计算引擎进行最终处理。分析报告按顺序排队和处理。</p><p>在项目级别，当有待处理的分析报告等待消耗时，标题中的<strong>Pending（待处理）</strong>通知将在最近完成的分析的日期旁。</p><p>全局管理员可在<code>Administration &gt; Projects &gt; Background Tasks</code>查看当前队列；项目管理员可在<code>Administration &gt; Background Tasks</code>查看相关任务。</p><p><br><br><br></p><h3 id="如何知道分析报告处理失败的时间"><a href="#如何知道分析报告处理失败的时间" class="headerlink" title="如何知道分析报告处理失败的时间"></a>如何知道分析报告处理失败的时间</h3><p>How do I know when analysis report processing fails?</p><p>后台任务通常会成功，但有时候异常会导致处理失败。例如:</p><ul><li>处理大项目是内存不足(OOM)</li><li>现有模块或项目的密钥与报告中的密钥冲突</li><li>…</li></ul><p>当发生这种情况时，失败的状态会反映在项目主页上，但这需要有人注意到它。你还可以选择在后台任务失败时通过电子邮件接收通知(Notifications)——无论是逐个还是全局。</p><p><br><br><br></p><h3 id="如何诊断失败的后台任务"><a href="#如何诊断失败的后台任务" class="headerlink" title="如何诊断失败的后台任务"></a>如何诊断失败的后台任务</h3><p>How do I diagnose a failing background task?</p><p>对于没法分析报告，都有一个下拉菜单，允许你访问<strong>扫描程序上下文(Scanner Context)</strong>，显示代码扫描是扫描程序的配置。<br>如果任务处理失败，则可使用其它选项<strong>显示错误详细信息(Show Error Details)</strong>，以获取处理后台任务失败的详情。</p><p><br><br><br></p><h3 id="如何取消待处理的分析报告"><a href="#如何取消待处理的分析报告" class="headerlink" title="如何取消待处理的分析报告"></a>如何取消待处理的分析报告</h3><p>How do I cancel a pending analysis report?</p><p>管理员可通过单击取消处理待处理任务(pending task)，一旦报告开始处理，取消它就为时已晚。</p><p><br><br><br><br><br></p><h2 id="通用问题数据"><a href="#通用问题数据" class="headerlink" title="通用问题数据"></a>通用问题数据</h2><p>Generic Issue Data</p><p>SonarQube支持通用导入格式，用于在代码中引发<em>external</em> issues。它旨在允许你从你喜欢的<em>linter</em>导入issues，即使它不存在插件。</p><p>外部问题受到两个重要限制:</p><ul><li>它们无法在SonarQube内管理</li><li>在SonarQube中无法管理引发这些问题的规则的激活</li></ul><p><br></p><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><p>分析参数<code>sonar.externalIssueReportPaths</code>接受以逗号分隔的报告路径列表。<br>每个报告必须在顶层(top-level)包含一个名为issues对象的问题对象数组。</p><p><strong>Issue字段:</strong></p><ul><li><code>engineId</code> - string</li><li><code>ruleId</code> - string</li><li><code>primaryLocation</code> - Location object</li><li><code>type</code> - string. One of BUG, VULNERABILITY, CODE_SMELL</li><li><code>severity</code> - string. One of BLOCKER, CRITICAL, MAJOR, MINOR, INFO</li><li><code>effortMinutes</code> - integer, optional. Defaults to 0</li><li><code>secondaryLocations</code> - array of Location objects, optional</li></ul><p><br></p><p><strong>Location字段:</strong></p><ul><li><code>message</code> - string</li><li><code>filePath</code> - string</li><li><code>textRange</code> - TextRange object, optional for secondary locations only</li></ul><p><br></p><p><strong>TextRange字段:</strong></p><ul><li><code>startLine</code> - integer. 1-indexed</li><li><code>endLine</code> - integer, optional. 1-indexed</li><li><code>startColumn</code> - integer, optional. 0-indexed</li><li><code>endColumn</code> - integer, optional. 0-indexed</li></ul><p><br><br><br></p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p>以下是预期格式的栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;issues&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;engineId&quot;: &quot;test&quot;,</span><br><span class="line">      &quot;ruleId&quot;: &quot;rule1&quot;,</span><br><span class="line">      &quot;severity&quot;:&quot;BLOCKER&quot;,</span><br><span class="line">      &quot;type&quot;:&quot;CODE_SMELL&quot;,</span><br><span class="line">      &quot;primaryLocation&quot;: &#123;</span><br><span class="line">        &quot;message&quot;: &quot;fully-fleshed issue&quot;,</span><br><span class="line">        &quot;filePath&quot;: &quot;sources/A.java&quot;,</span><br><span class="line">        &quot;textRange&quot;: &#123;</span><br><span class="line">          &quot;startLine&quot;: 30,</span><br><span class="line">          &quot;endLine&quot;: 30,</span><br><span class="line">          &quot;startColumn&quot;: 9,</span><br><span class="line">          &quot;endColumn&quot;: 14</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;effortMinutes&quot;: 90,</span><br><span class="line">      &quot;secondaryLocations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;message&quot;: &quot;cross-file 2ndary location&quot;,</span><br><span class="line">          &quot;filePath&quot;: &quot;sources/B.java&quot;,</span><br><span class="line">          &quot;textRange&quot;: &#123;</span><br><span class="line">            &quot;startLine&quot;: 10,</span><br><span class="line">            &quot;endLine&quot;: 10,</span><br><span class="line">            &quot;startColumn&quot;: 6,</span><br><span class="line">            &quot;endColumn&quot;: 38</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;engineId&quot;: &quot;test&quot;,</span><br><span class="line">      &quot;ruleId&quot;: &quot;rule2&quot;,</span><br><span class="line">      &quot;severity&quot;: &quot;INFO&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;BUG&quot;,</span><br><span class="line">      &quot;primaryLocation&quot;: &#123;</span><br><span class="line">        &quot;message&quot;: &quot;minimal issue raised at file level&quot;,</span><br><span class="line">        &quot;filePath&quot;: &quot;sources/Measure.java&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="通用测试数据"><a href="#通用测试数据" class="headerlink" title="通用测试数据"></a>通用测试数据</h2><p>Generic Test Data</p><p>开箱即用，SonarQube支持用于测试覆盖和测试执行导入的通用格式。如果你的语言不插件不支持你的Coverage引擎的本机输出格式，只需将它们转换为这些格式即可。</p><p><br></p><h3 id="Generic-Coverage"><a href="#Generic-Coverage" class="headerlink" title="Generic Coverage"></a>Generic Coverage</h3><p>报告路径应该以逗号分隔的列表传递给: <code>sonar.coverageReportPaths</code></p><p>支持的格式由<code>sonar-generic-coverage.xsd</code>进行描述:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;xs:schema&gt;</span><br><span class="line">  &lt;xs:element name=&quot;coverage&quot;&gt;</span><br><span class="line">    &lt;xs:complexType&gt;</span><br><span class="line">      &lt;xs:sequence&gt;</span><br><span class="line">        &lt;xs:element name=&quot;file&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;</span><br><span class="line">          &lt;xs:complexType&gt;</span><br><span class="line">            &lt;xs:sequence&gt;</span><br><span class="line">              &lt;xs:element name=&quot;lineToCover&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;</span><br><span class="line">                &lt;xs:complexType&gt;</span><br><span class="line">                  &lt;xs:attribute name=&quot;lineNumber&quot; type=&quot;xs:positiveInteger&quot; use=&quot;required&quot;/&gt;</span><br><span class="line">                  &lt;xs:attribute name=&quot;covered&quot; type=&quot;xs:boolean&quot; use=&quot;required&quot;/&gt;</span><br><span class="line">                  &lt;xs:attribute name=&quot;branchesToCover&quot; type=&quot;xs:nonNegativeInteger&quot;/&gt;</span><br><span class="line">                  &lt;xs:attribute name=&quot;coveredBranches&quot; type=&quot;xs:nonNegativeInteger&quot;/&gt;</span><br><span class="line">                &lt;/xs:complexType&gt;</span><br><span class="line">              &lt;/xs:element&gt;</span><br><span class="line">            &lt;/xs:sequence&gt;</span><br><span class="line">          &lt;xs:attribute name=&quot;path&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt;</span><br><span class="line">          &lt;/xs:complexType&gt;</span><br><span class="line">        &lt;/xs:element&gt;</span><br><span class="line">      &lt;/xs:sequence&gt;</span><br><span class="line">      &lt;xs:attribute name=&quot;version&quot; type=&quot;xs:positiveInteger&quot; use=&quot;required&quot;/&gt;</span><br><span class="line">    &lt;/xs:complexType&gt;</span><br><span class="line">  &lt;/xs:element&gt;</span><br><span class="line">&lt;/xs:schema&gt;</span><br></pre></td></tr></table></figure><p>看起来像这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;coverage version=&quot;1&quot;&gt;</span><br><span class="line">  &lt;file path=&quot;xources/hello/NoConditions.xoo&quot;&gt;</span><br><span class="line">    &lt;lineToCover lineNumber=&quot;6&quot; covered=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;lineToCover lineNumber=&quot;7&quot; covered=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;/file&gt;</span><br><span class="line">  &lt;file path=&quot;xources/hello/WithConditions.xoo&quot;&gt;</span><br><span class="line">    &lt;lineToCover lineNumber=&quot;3&quot; covered=&quot;true&quot; branchesToCover=&quot;2&quot; coveredBranches=&quot;1&quot;/&gt;</span><br><span class="line">  &lt;/file&gt;</span><br><span class="line">&lt;/coverage&gt;</span><br></pre></td></tr></table></figure><p>根节点应该命名为<code>coverage</code>，其<code>version</code>属性应设置为1。</p><p>为每个文件插入一个可由测试覆盖的文件元素。其<code>path</code>属性可以是绝对的，也可是相对的。它具有以下属性:</p><ul><li><code>lineNumber</code>(强制性)</li><li><code>covered</code>(强制性) - 布尔值，指示测试是否实际命中改行</li><li><code>branchesToCover</code>(可选) - 可覆盖的分支数量</li><li><code>coveredBranches</code>(可选) - 实际有测试覆盖的分支数量</li></ul><p><br><br><br></p><h3 id="Generic-Execution"><a href="#Generic-Execution" class="headerlink" title="Generic Execution"></a>Generic Execution</h3><p>报告路径应以逗号分隔的列表传递给: <code>sonar.testExecutionReportPaths</code></p><p>支持的格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;testExecutions version=&quot;1&quot;&gt;</span><br><span class="line">  &lt;file path=&quot;testx/ClassOneTest.xoo&quot;&gt;</span><br><span class="line">    &lt;testCase name=&quot;test1&quot; duration=&quot;5&quot;/&gt;</span><br><span class="line">    &lt;testCase name=&quot;test2&quot; duration=&quot;500&quot;&gt;</span><br><span class="line">      &lt;skipped message=&quot;short message&quot;&gt;other&lt;/skipped&gt;</span><br><span class="line">    &lt;/testCase&gt;</span><br><span class="line">    &lt;testCase name=&quot;test3&quot; duration=&quot;100&quot;&gt;</span><br><span class="line">      &lt;failure message=&quot;short&quot;&gt;stacktrace&lt;/failure&gt;</span><br><span class="line">    &lt;/testCase&gt;</span><br><span class="line">    &lt;testCase name=&quot;test4&quot; duration=&quot;500&quot;&gt;</span><br><span class="line">      &lt;error message=&quot;short&quot;&gt;stacktrace&lt;/error&gt;</span><br><span class="line">    &lt;/testCase&gt;</span><br><span class="line">  &lt;/file&gt;</span><br><span class="line">&lt;/testExecutions&gt;</span><br></pre></td></tr></table></figure><p>根节点应该被命名为<code>testExecutions</code>，它的<code>version</code>属性应该被设置成1。<br>为每个测试文件插入一个文件元素，其<code>path</code>属性可以是绝对的，也可是相对于模块的根。</p><p>注意，与覆盖率报告不同，报告中的文件必须是测试文件名，而不是测试所涵盖的源代码文件。</p><p>在<code>file</code>元素内，通过单元测试为每个测试运行插入一个<code>testCase</code>。它具有以下属性/子项:</p><ul><li><code>testCase</code>（强制性）<ul><li><code>name</code>（强制性）: 测试事例的名称</li><li><code>duration</code>(强制性): long value，ms为单位</li><li><code>failure|error|skipped</code>(可选): 如果测试不正确，请使用消息和长描述报告原因</li><li><code>message</code>(强制): 描述原因的短消息</li><li><code>stacktrace</code>（可选）: 包含有关失败、错误、跳过状态的详细信息</li></ul></li></ul><p><br><br><br><br><br></p><h2 id="PR分析"><a href="#PR分析" class="headerlink" title="PR分析"></a>PR分析</h2><p>Pull Request Analysis</p><p>PR分析是作为Developer Edtion的一部分提供。它允许你:</p><ul><li>在SonarQube UI中查看你的PR分析结果并查看状态以显示存在未解决的问题</li><li>在你的SCM提供商界面中使用SonarQube issue自动装饰你的PR</li></ul><p>从项目的<strong>branch and pull request</strong>的下拉菜单中可以在SonarQube中看到PR。启用PR装饰后，SonarQube会在PR上发布分析状态。</p><p><br><br><br><br><br></p><h2 id="SCM集成"><a href="#SCM集成" class="headerlink" title="SCM集成"></a>SCM集成</h2><p>在代码分期期间收集SCM数据可以解锁许多SonarQube功能:</p><ul><li>自动Issue分配</li><li>代码查看器中查看代码注释</li><li>SCM-driver的新代码检测，没有SCM数据，SonarQube使用分析日期确定新代码</li></ul><p>SCM集成需要你的SCM提供商，默认情况下支持SVN和Git。其它提供商，请参阅Marketplace。<br>如果需要，你可以通过管理设置将其在全局/项目级别将其关闭。</p><p><br></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><br><br><br></p><h3 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h3><p><br><br><br></p><hr><p><br><br><br></p><h1 id="Branches"><a href="#Branches" class="headerlink" title="Branches"></a>Branches</h1><p>分支分析作为Developer Editon的一部分提供。分支分析允许你:</p><ul><li>分析 long-lived branches</li><li>分析 short-lived branches</li><li>在短期分支的状态受到影响时通知外部系统</li></ul><p><br></p><p>由于分支功能是开发版(也就是付费版)功能，因此社区版只能对每个分支创建一个项目。</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">repo: zhang-repo</span><br><span class="line"></span><br><span class="line">branch:</span><br><span class="line">  - master</span><br><span class="line">  - test</span><br><span class="line">  - zhang</span><br><span class="line"></span><br><span class="line">projects:</span><br><span class="line">  - zhang-repo-master</span><br><span class="line">  - zhang-repo-test</span><br><span class="line">  - zhang-repo-zhang</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h1 id="用户指南"><a href="#用户指南" class="headerlink" title="用户指南"></a>用户指南</h1><p>User Guide</p><p><br></p><h2 id="修复漏水"><a href="#修复漏水" class="headerlink" title="修复漏水"></a>修复漏水</h2><p>Fixing the Water Leak</p><p><br></p><h3 id="什么是漏水"><a href="#什么是漏水" class="headerlink" title="什么是漏水"></a>什么是漏水</h3><p>What is the Water Leak</p><p>想象一下，有一天你回到家发现厨房地板上有一滩水，水慢慢变大。<br>你想去拿拖把？还是找到漏水源头并修复它？选择很明显，你得修复它。</p><p>那么为什么与代码质量(code quality)有什么不同呢？当你使用SonarQube分析应用程序并意识到它有很多技术债务(technical debt)，这种下意识的反应通常是开始修复-这样那样，要么整理一个补救计划。这就像每天拖地一次而却忽略了漏水源头一样。</p><p><br></p><p>通常在这种传统方法中，在发布版本之前，定期进行代码质量(code quality)审计结果是开发人员在发布之前应该采取的行动。这种方法可能在短期内有效，特别是在强有力的管理支持下，但在中长期内始终失败，因为:</p><ul><li>代码审查(code review)过程太迟，没有利益相关者热衷于解决问题，每个人都希望新版本发布</li><li>开发者通常会推迟不了解项目上下文的外部团队提出的建议。顺便提一下，正在审查的代码已经过时了</li><li>使用这种方法明显缺乏对代码质量的所有权。谁拥有质量审查权限？没有人</li><li>在整个应用程序投入生产之前，需要检查整个应用程序，显然不可能对所有应用程序使用相同的标准。每个项目都会进行谈判，这将耗尽整个过程的可信度</li></ul><p><br></p><p>相反，为什么不将你在家中使用的相同的简单逻辑应用于管理代码质量的方式？修复泄露(leak)意味着将重点放在<strong>新代码</strong>上，即自上次发布以来添加或更改的代码。然后事情就变得很容易了:</p><ul><li>Quality Gate可以每天运行，并且可通过它。发版时没有任何意外</li><li>开发人员很难回避他们前一天介绍的问题。相反，他们通常很乐意在代码仍然新鲜时修复问题</li><li>代码质量有明确的所有权</li><li>做不做的标准在不同的应用程序中是一致的，并且在团队之间共享</li><li>成本微不足道，因为它是开发过程中的一部分</li></ul><p>最为奖励，变化最大的代码具有最高的可维护性，并且未变更的代码具有最低的维护性，这很有意义。</p><p><br><br><br></p><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>SonarQube提供两种主要工具来帮助你找到泄漏点:</p><ul><li>新代码指标(metrics)显示当前代码与你在其历史记录(<code>previous_version</code>)中选择的特定点之间的度量差异</li><li>新代码主要基于SCM blame 数据监测，从新代码期(泄漏期)的第一次分析开始，需要时使用回退机制</li><li>Quality Gates允许你设置测量代码的布尔阈值。将它们与差异指标一起使用，可确保你的代码质量随着时间的推移在正确的方向上行驶</li></ul><p><br><br><br><br><br></p><h2 id="项目页"><a href="#项目页" class="headerlink" title="项目页"></a>项目页</h2><p>Project Page</p><p>项目主页(Project Homepage)是任何项目的切入点，它显示:</p><ul><li>the releasability status of the project</li><li>the current state of its quality</li><li>the quality of what has been produced since the beginning of its New Code Period</li></ul><p>项目页面回答了两个问题:</p><ul><li>can I release my project today?</li><li>if not, what should I improve to make the project pass the Quality Gate?</li></ul><p><br></p><h3 id="今天能发版吗"><a href="#今天能发版吗" class="headerlink" title="今天能发版吗"></a>今天能发版吗</h3><p>Can I release today?</p><p>由于 Quality Gate 是你执行质量策略的最强大的工具，因此该页面以项目的当前质量门状态开始。如果项目通过，则会显示一个简单的绿色全清除。</p><p>如果没有，可立即获得详细信息和drill-downs，以便快速识别出错的地方，每个错误条件的一个部分显示当前项目值是什么以及它应该是什么。像往常一样，你可以点击当前值来进行深入分析。</p><p><br><br><br></p><h3 id="应该优先解决什么"><a href="#应该优先解决什么" class="headerlink" title="应该优先解决什么"></a>应该优先解决什么</h3><p>What should I fix first?</p><p>因为提高项目质量的最佳方法是在问题变得根深蒂固之前捕获并修复新问题，项目的第一个视图以新代码周期为中心，在项目主页右侧以黄色突出显示。项目空间页面显示关键指标的高级摘要，包括当前值和新代码周期值。</p><p>在Quality Gate信息的下方，可以获得可靠性和安全域中的旧问题和新问题的数量。然后是可维护性域。单击页面上的任何图形将转到“详细信息”页面或“问题”页面中的详细视图。</p><p>开发人员必须做的最重要的事情是确保屏幕黄色部分的新问题得到确认，审核和修复，并确保测试涵盖新代码以防止将来出现回归。无论过去引入了多少问题，或者总体上测试覆盖范围有多少，关注新增问题将确保情况不会降低您之前在生产中发布的版本。</p><p>那么，您应该先找到哪些问题：错误，漏洞或代码异味？这取决于，因为答案取决于您的问题的性质。假设你有一个重复5次的代码块问题，在这个重复的代码块中，你有3个Bug和5个安全问题。最好的方法可能是首先修复重复，然后解决新集中位置的错误和漏洞，而不是修复它们5次。<br>这就是为什么您需要在开始解决之前检查新问题。</p><p><br><br><br><br><br></p><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>Applications are available as part of the Enterprise Edition.</p><p><br><br><br><br><br></p><h2 id="Portfolios"><a href="#Portfolios" class="headerlink" title="Portfolios"></a>Portfolios</h2><p>Portfolios are available as part of the Enterprise Edition.</p><p><br><br><br><br><br></p><h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>在运行分析时，每当一段代码破坏编码规则时，SonarQube就会引发一个issue。编码规则(coding rules)是通过每种语言的相关质量配置文件定义的。</p><p>每个问题有五种严重程度:</p><ul><li><strong>BLOCKER</strong> - 很有可能影响生产中应用程序行为的错误。必须立即修复</li><li><strong>CRITICAL</strong> - 要么是在生产环境中影响应用程序行为可能性很小的bug，要么是代表安全漏洞的问题。必须立即检查代码</li><li><strong>MAJOR</strong> - 可能严重影响开发人员生产力的质量缺陷</li><li><strong>MINOR</strong> - 会轻微影响开发人员生产力产生的质量缺陷</li><li><strong>INFO</strong> - 既不是错误，也不是质量缺陷，只是一个提示</li></ul><p><br></p><h3 id="理解issue上下文"><a href="#理解issue上下文" class="headerlink" title="理解issue上下文"></a>理解issue上下文</h3><p>Understanding issue context</p><p>有时，一旦指出问题，问题就不言而喻了。例如，你的团队已约定了变量命名规则，在某个变量名出线问题时，你不需要理解大量上下文来理解该问题。但在其它情况下，上下文可能对理解为什么会出现这个问题至关重要。这就是为什么SonarQube不仅支持显示问题消息的主要问题位置，还支持次要问题位置。</p><p>但有时候，贡献位置地点并不足以理解问题。例如，当通过代码在某些路径上取消引用空指针时，您真正需要的是问题流。每个流程都是一组辅助位置，用于显示可能发生问题的代码的确切路径。</p><p><br><br><br></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Lifecycle of Code Smell, Bug, and Vulnerability Issues</p><p><br></p><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p>Status</p><p>创建之后，Issue会在生命周期中流动，可能为以下五种状态之一:</p><ul><li><strong>打开(Open)</strong> - 由SonarQube在新问题上设定</li><li><strong>确认(Confirmed)</strong> - 手动确认以指示问题有效</li><li><strong>解决(Resolved)</strong> - 手动设置以指示下一个分析应该关闭改问题</li><li><strong>重开(Reopened)</strong> - 当一个已解决的问题实际上没有得到纠正时，SonarQube会自动设置</li><li><strong>关闭(Closed)</strong> - 有SonarQube自动设置自动创建的问题</li></ul><p><br><br><br></p><h4 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h4><p>Resolutions</p><p>已关闭的问题将有一下两种方式之一:</p><ul><li><strong>已修复(Fixed)</strong> - 当后续分析显示问题已更正或文件不再可用时自动设置</li><li><strong>已移除(Removed)</strong> - 当相关规则不再可用时自动设置。改规则可能无法使用，因为它已从质量配置文件中删除，或者因为已卸载基础插件</li></ul><p>Resolved issues好友两个处理方式:</p><ul><li><strong>误判(False Positive)</strong> - 手动设置</li><li><strong>不会修复(Won’t Fix)</strong> - 不会修复</li></ul><p><br><br><br></p><h4 id="问题工作流程"><a href="#问题工作流程" class="headerlink" title="问题工作流程"></a>问题工作流程</h4><p>Issue Workflow</p><p>在以下情况下，问题会自动关闭(Status: Closed):</p><ul><li>问题以正确修复（Resolution: Fixed）</li><li>问题不再存在，因为相关编码规则已停用或不再可用(Resolution: Removed)</li></ul><p>在以下情况下，问题会自动重新打开(Status: Reopened):</p><ul><li>手动修改解决方式为已修复(但是不是误判)的问题，有后续分析显示仍然存在</li></ul><p><br><br><br></p><h3 id="安全热点问题的生命周期"><a href="#安全热点问题的生命周期" class="headerlink" title="安全热点问题的生命周期"></a>安全热点问题的生命周期</h3><p>Lifecycle of Security Hotspot Issues</p><p>安全热点问题具有专用的生命周期。它们不被视为可操作，必须由具有相关权限的用户进行审核。</p><p>创建之后，安全热点问题将流经专用的生命周期，可能是以下四种状态之一:</p><ul><li><strong>Open</strong> - 由SonarQube在新问题上自动设置</li><li><strong>Resolved</strong>(Won’t Fix) - 当安全审核员接受开发人员针对手动漏洞所做的修复或安全审核员清楚打开的热点或手动漏洞时，SonarQube会自动设置</li><li><strong>To Revied</strong> - 当开发人员请求安全审核员查看他对手动漏洞所做的修复时自动设置</li><li><strong>Reopened</strong> - 当开发人员解除打开的手动漏洞或安全审计员手动重新打开问题以便对已解决的问题运行新审计时设置</li></ul><p>如果删除了包含安全热点的代码，则只会关闭安全热点问题。如果从项目的质量配置文件中删除了标识热点的规则，则安全热点也可能会被删除。</p><p><br><br><br></p><h3 id="理解哪些问题是新的"><a href="#理解哪些问题是新的" class="headerlink" title="理解哪些问题是新的"></a>理解哪些问题是新的</h3><p>Understanding which Issues are “New”</p><p>为了确定问题的创建日期，在每次分析期间执行算法已确定问题是新的还是之前存在的。此算法依赖于报告问题的行的内容的哈希值(不包括空格)。对于多行问题，使用第一行的哈希值。对于每个文件(在检测到文件重命名后)，算法将从先前的分析中获取问题的基本列表，并尝试将这些问题与新分析报告的原始问题列表进行匹配。该算法尝试使用最强的证据进行首次匹配，然后再回到较弱的启发式算法。</p><ul><li>如果问题是在同一规则上，具有相同的行号和相同的行哈希 - 匹配</li><li>检测到块在文件内移动，然后如果问题出在同一行(移动的)和同一条规则上- 匹配</li><li>在相同的规则上，使用相同的消息并使用相同的行哈希 - 匹配</li><li>在相同的规则上，使用相同的消息并使用相同的行号 - 匹配</li><li>在相同的规则上，使用相同的行哈希 - 匹配</li><li>是否有匹配CLOSED的问题 - 匹配和重新打开</li></ul><p><br><br><br></p><h3 id="了解问题回溯"><a href="#了解问题回溯" class="headerlink" title="了解问题回溯"></a>了解问题回溯</h3><p>Understanding Issue Backdating</p><p>一旦问题被确定为新，下一个问题便是提供它的日期。例如，如果它已经在代码中存在了很长时间，但只能在最近的分析中找到，因为新的规则被添加到配置文件中？该问题是否应该在其行的最后一次更改日期或首次提出的分析日期之间给出？那就是它应该回溯吗？</p><p>如果最后一次更改改行的日期可用，那么在某些情况下，该问题将被回溯:</p><ul><li>首先分析项目或分支</li><li>当配置文件中的规则为新时</li><li>当分析程序升级后</li><li>当规则是外部的</li></ul><p>因此，回溯可能会使新提出的问题原理New Code Period。</p><p><br><br><br></p><h3 id="自动问题分配"><a href="#自动问题分配" class="headerlink" title="自动问题分配"></a>自动问题分配</h3><p>Automatic Issue Assignment</p><ul><li>For Bug, Vulnerability and Code Smell</li><li>For Security Hotspot</li><li>User Correlation</li><li>Known Limitation</li></ul><p><br><br><br></p><h3 id="问题编辑"><a href="#问题编辑" class="headerlink" title="问题编辑"></a>问题编辑</h3><p>Issue edits</p><p>SonarQube的问题工作流程可帮助你管理问题。你可对一个Issue做七件不同事情，这些行为可分为三类:</p><ul><li>Technical Review<ul><li>Confirm</li><li>False Positive</li><li>Won’t Fix</li><li>Severity change</li><li>Resolve</li></ul></li><li>Security Hotspots<ul><li>Detect</li><li>Clear</li><li>Request Review</li><li>Reject</li></ul></li><li>Dispositioning</li><li>General<ul><li>Comments</li><li>Tag</li></ul></li><li>Bulk Change</li></ul><p><br><br><br></p><h3 id="清除已解决的问题"><a href="#清除已解决的问题" class="headerlink" title="清除已解决的问题"></a>清除已解决的问题</h3><p>Purging Closed Issues</p><p>默认情况下，已关闭的问题将保留30天。当然，你也可以修改它。</p><p><br><br><br><br><br></p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>SonarSource Rules: <a href="https://rules.sonarsource.com/" target="_blank" rel="noopener">https://rules.sonarsource.com/</a></p><p><br></p><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>在SonarQube中，分析程序提供在源代码上执行的规则来生成问题。有四种类型的规则:</p><ul><li>Code Smell (Maintainability domain)</li><li>Bug (Reliability domain)</li><li>Vulnerability (Security domain)</li><li>Security Hotspot (Security domain)</li></ul><p><br><br><br></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>默认情况下，点击带单栏<strong>Rules</strong>时，你将看到SonarQube实例上安装的分析程序带来的所有可用规则。你可根据以下条件缩小范围:</p><ul><li>Language</li><li>Type</li><li>Tag</li><li>Repository</li><li>Default Severity</li><li>Status</li><li>Available Since</li><li>Template: 显示允许创建自定义规则的规则模板</li><li>Quality Profile</li></ul><p><br><br><br></p><h3 id="规则细节"><a href="#规则细节" class="headerlink" title="规则细节"></a>规则细节</h3><p>要查看规则的详细信息，请点击它。除了基本规则数据之外，您还可以查看其中活动的配置文件（如果有）以及已经引发了多少未解决的问题。<br>只有拥有正确的权限时，才能使用以下两个操作:</p><ul><li>Add/Remove Tags</li><li>Extend Description</li></ul><p><br><br><br></p><h3 id="规则模板和自定义规则"><a href="#规则模板和自定义规则" class="headerlink" title="规则模板和自定义规则"></a>规则模板和自定义规则</h3><p>Rule Templates and Custom Rules</p><p>规则模板(Rule templates)由创建提供，允许用户在SonarQube中定义自己的规则。它位于<code>Rules -&gt; Template</code>。</p><p>要从模板创建自定义规则，你必须填写一下信息:</p><ul><li>Name</li><li>Key (auto-suggested)</li><li>Description (Markdown format is supported)</li><li>Default Severity</li><li>Status</li><li>The parameters specified by the template</li></ul><p><br><br><br></p><h3 id="扩展编码规则"><a href="#扩展编码规则" class="headerlink" title="扩展编码规则"></a>扩展编码规则</h3><p>Extending Coding Rules</p><p>可以添加<a href="https://docs.sonarqube.org/display/DEV/Adding+Coding+Rules" target="_blank" rel="noopener">自定义编码规则</a>。</p><p><br><br><br></p><h3 id="规则类型和严重性"><a href="#规则类型和严重性" class="headerlink" title="规则类型和严重性"></a>规则类型和严重性</h3><p>Rule Types and Severities</p><p>Type:</p><ul><li>Bug</li><li>Vulnerability</li><li>Code Smell</li><li>Security Hotspot</li></ul><p>Severity:</p><ul><li>Blocker</li><li>Critical</li><li>Major</li><li>Minor</li><li>Info</li></ul><p><br><br><br></p><h2 id="安全相关的规则"><a href="#安全相关的规则" class="headerlink" title="安全相关的规则"></a>安全相关的规则</h2><p>Security-related Rules</p><p>SonarQube质量类型有三种不同的规则:</p><ul><li>Reliability (bug)</li><li>Vulnerability (security)</li><li>Maintainability (code smell)</li></ul><p>但另外一种方式，只有两种类型:</p><ul><li>security rule</li><li>其它</li></ul><p>两者之间的区别并不在它们捕获的内容，而在于她们来自何处以及强加于它们的标准。</p><p><br></p><h3 id="从安全相关的规则的期望是什么"><a href="#从安全相关的规则的期望是什么" class="headerlink" title="从安全相关的规则的期望是什么"></a>从安全相关的规则的期望是什么</h3><p>What to expect from security-related rules</p><p>需要明确的是，SonarQube语言插件中实现的大多数规则的标准是非常严格: 没有误报。对于正常规则，你应该能够确信任何报告给你的问题确实是一个问题。</p><p>但对于与安全相关的规则，情况略有不同。例如，许多安全指南讨论了应如何处理<em>敏感数据</em>。但是，由于规则中不可能确定哪些数据是敏感，哪些是不敏感。因此选择变为： 保持无误判标准并且不实施与安全相关的规则，或者实施与安全的规则不同的标准。</p><p>这就是为什么与安全相关的规则很广泛。官方的想法是，该规则将标记任何可疑的内容，并将其留给安全审核人员来剔除误报并发送真正的问题进行补救。</p><p>安全热点是一种特殊类型的问题，用于识别安全审核人员应审核的敏感区域，以确定它们是否真的是漏洞。有关热点和审计过程的详细信息，请参阅安全审核和报告。</p><p><br><br><br></p><h3 id="与安全相关的规则来自何方"><a href="#与安全相关的规则来自何方" class="headerlink" title="与安全相关的规则来自何方"></a>与安全相关的规则来自何方</h3><p>Where security-related rules come from</p><p>绝大多数与安全相关的规则源于既定标准:</p><ul><li><strong>CWE(Common Weakness Enumeration)</strong>：是美国MITRE机构提出的一套语言标准，用于描述软件安全弱点的通用化描述语言。每个CWE条目都包含了CWE标识符/弱点类型名称、类型的描述、弱点的行为、弱点的利用方法、利用弱点的可能性、可能导致的后果、应对措施、代码示例、对应的CVE漏洞数量、参考信息等内容。</li><li><strong>SANS Top 25</strong> - <a href="https://www.sans.org/top25-software-errors/" target="_blank" rel="noopener">CWE/SANS TOP 25 Most Dangerous Software Errors</a></li><li><strong>OWASP Top 10</strong> - <a href="https://www.owasp.org/index.php/Top_10-2017_Top_10" target="_blank" rel="noopener">OWASP Top 10 Application Security Risks</a></li></ul><p>要查找与任何这些标准相关的规则，你可以按标签或文本搜索规则。</p><p><br></p><h4 id="CWE"><a href="#CWE" class="headerlink" title="CWE"></a>CWE</h4><p>CWE标准代表Common Weakness Enumeration:</p><p>Common Weakness Enumeration (CWE™) 是一个常见软件弱点的正式列表或字典，可能出现在软件的体系结构、设计代码或实现中。可能导致可利用的安全漏洞。创建CWE是为了描述软件安全漏洞的通用语言，作为针对这些弱点的软件安全工具的衡量标准；并为弱点识别、缓解和预防工作提供共同的基线标准。<br>CWE是弱化的描述的层次结构。层次结构中的最低级别是弱点基础(Weakness Base)，它描述了细腻度的弱点。</p><p>符合特定要求的工具可以认证为CWE兼容。这些要求是:</p><ul><li>您必须能够使用CWE标识符搜索与CWE相关的规则。要在SonarQube平台中执行此操作，只需将CWE标识符（例如CWE-595）放在规则页面上的搜索文本输入中并运行搜索</li><li>规则必须与其相关的CWE项目准确链接。要查看SonarQube规则的CWE映射，请参阅规则说明底部的规则参见部分</li><li>您必须能够从问题中识别相关的CWE。要在SonarQube平台中执行此操作，请参阅相关规则</li><li>产品文档必须包含CWE和CWE兼容性的说明</li><li>除了通过CWE id搜索规则外，您还可以通过 cwe rule tag 进行搜索</li></ul><p><br><br><br></p><h4 id="SANS-TOP-25"><a href="#SANS-TOP-25" class="headerlink" title="SANS TOP 25"></a>SANS TOP 25</h4><p>SANS Top 25列表是由SANS组织编制的CWE中列出的25个最危险错误的集合。当前的SANS列表分为三类：</p><ul><li>Insecure Interaction Between Components</li><li>Risky Resource Management</li><li>Porous Defenses</li></ul><p>要查找与SANS Top 25相关的规则，您可以对类别或相关CWE项目执行文本搜索，或执行规则标记搜索。</p><p><br><br><br></p><h4 id="OWASP-Top-10"><a href="#OWASP-Top-10" class="headerlink" title="OWASP Top 10"></a>OWASP Top 10</h4><p>OWASP代表Open Web Application Security Project。它是:</p><p><code>501(c)(3)</code>全球非营利慈善组织，致力于提高软件的安全性。我们的使命是使软件安全可见，以便全世界的个人和组织能够就真正的软件安全风险做出明智的决策。</p><p>OWASP Top 10列出了各种各样的弱点，每个弱点都可以映射到许多单独的规则。<br>OWASP TOP 10在SonarQube中也对应相关的tag。</p><p>要查找与OWASP Top 10相关的规则，您可以对类别执行文本搜索，或执行规则标记搜索。</p><p><br><br><br><br><br></p><h2 id="內建规则和标签"><a href="#內建规则和标签" class="headerlink" title="內建规则和标签"></a>內建规则和标签</h2><p>Built-in Rule Tags</p><p>标签(tag) 是一种对问题(issue)和规则(rule)进行分类的方法。问题会继承引发它们的规则上的标记。有些标签适用于特定语言，但是更多的标签出现在各种语言中。用户可以为规则和问题添加标签。但大多数规则都有一些开箱即用的标签。<br>以下是一些非全面的、包含一些內建标签:</p><ul><li><code>brain-overload</code> - 一次有太多的东西要留在脑海里</li><li><code>bad-practice</code> - 代码可能按设计工作，但它的设计方式被广泛认为是一个坏主意</li><li><code>cert</code> - 设计CERT标准中的规则</li><li><code>clumsy</code> - 用于完成可以更清晰和简洁地完成的事情的额外步骤</li><li><code>confusing</code> - 将使维护者更长时间地理解，而不是代码实际所做的事情</li><li><code>convention</code> - 编码约定，如格式化、命名、空格…</li><li><code>cwe</code> - CWE安全规则</li><li><code>design</code> - 代码设计存在一些问题</li><li><code>lock-in</code> - 使用特定于环境的功能</li><li><code>misra</code> - MISRA标准相关的规则</li><li><code>owasp</code> - 与OWASP TOP 10安全标准相关的规则</li><li><code>pitfall</code> - 没有什么不对，但未来可能出现问题;已经为下一个人设置了一个陷阱，他可能会陷入其中并搞砸了代码</li><li><code>sans-top25</code> - 与SANS Top 25 Coding Errors安全相关</li><li><code>suspicious</code> - 它不能保证这是一个bug，但它看起来很可疑。至少，代码应该重新检查并且可能为了清晰而重构</li><li><code>unpredictable</code> - 代码可以在当前条件下正常工作，但如果条件发生变化可能会失败</li><li><code>unused</code> - 未使用的代码</li><li><code>user-experience</code> - 代码在技术上没有任何问题，但它可能会使您的部分或全部用户讨厌您</li></ul><p><br><br><br><br><br></p><h2 id="Quality-Gates"><a href="#Quality-Gates" class="headerlink" title="Quality Gates"></a>Quality Gates</h2><p><br></p><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>质量阈(Quality Gates)是你在组织中实施质量策略的最佳方式。它可以回答一个问题: 我今天可以将项目发上线吗？<br>为了回答这个问题，你可以根据测量项目的度量阈值定义一组布尔条件，例如:</p><ul><li>No new blocker issues</li><li>Code coverage on new code greater than 80%</li><li>…</li></ul><p>理想状况下，所有项目都将通过同一质量阈进行验证。但这并不总是实用的。例如，你可能会发现:</p><ul><li>技术实现因应用程序而异</li><li>您希望确保对某些应用程序有更强的要求</li><li>…</li></ul><p>这就是为什么你可以根据需要自定义质量阈，它就在顶部的菜单栏上。</p><p><br><br><br></p><h3 id="最佳质量阈配置"><a href="#最佳质量阈配置" class="headerlink" title="最佳质量阈配置"></a>最佳质量阈配置</h3><p>Use the Best Quality Gate Configuration</p><p>质量阈默认激活并视为內建和只读的<code>Sonar war</code>方式，由SonarQube提供。它代表了我们对实施修复泄露。根据SonarQube的功能自动调整</p><p>有三个指标允许你强制执行给定的可靠性，安全性和可维护性的评级。不仅仅是整体而且还有新代码。建议使用这些指标，并将其作为默认质量阈的一部分，以便开发人员在项目页面上查看质量阈时更清楚的反馈。</p><p>不要忘记质量阈条件必须使用差值，检查绝对值是没有意义的(如: 代码行数大于1000)。</p><p><br></p><p><strong>推荐的质量阈(Recommended Quality Gate)</strong></p><p>內建的<code>Sonar way</code>质量阈都推荐用于大多数项目。如果专注于保持新代码清洁，而不是花费大量时间来修复旧代码。它开箱即用，已被设置为默认配置文件。</p><p><br><br><br></p><h3 id="质量阈状态"><a href="#质量阈状态" class="headerlink" title="质量阈状态"></a>质量阈状态</h3><p>Quality Gate Status</p><p><img src="/images/SonarQube/quality-gate-status.jpeg" alt=""></p><p><br><br><br></p><h3 id="当质量阈失败时获得通知"><a href="#当质量阈失败时获得通知" class="headerlink" title="当质量阈失败时获得通知"></a>当质量阈失败时获得通知</h3><p>Getting Notified When a Quality Gate Fails</p><p>使用通知机制，在质量阈失败时通知用户。为此，请订阅<strong>New quality gate status</strong>通知。</p><p><br><br><br></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>Security</p><p>任何用户(甚至是匿名用户)都可以访问质量阈。<br>要就行更改(create, edit, delete)，必须授予用户管理质量阈的权限。<br>项目管理员可选择与他们项目相关的质量阈。</p><p><br><br><br></p><h3 id="定义质量阈"><a href="#定义质量阈" class="headerlink" title="定义质量阈"></a>定义质量阈</h3><p>Defining Quality Gates</p><p>要管理质量阈，请转到菜单栏的<strong>Quality Gates</strong>。</p><p>每个质量阈条件都是以下组合:</p><ul><li>测量(measure)</li><li>比较符(comparison operator)</li><li>错误值(error value)</li></ul><p>栗子，条件可能是:</p><ul><li>measure: <code>Blocker issue</code></li><li>comparison operator: <code>&gt;</code></li><li>error value: <code>0</code></li></ul><p><br><br><br><br><br></p><h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>Metric Definitions</p><p>项目有如下指标:</p><ul><li>复杂度(Complexity)</li><li>重复(Duplications)</li><li>问题(Issues)</li><li>可维护性(Maintainability)</li><li>质量阈(Quality Gates)</li><li>可靠性(Reliability)</li><li>安全性(Security)</li><li>大小(Size)</li><li>测试(Tests)</li></ul><p><br></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>应用的控制流是简单还是复杂。</p><p><br></p><h4 id="圈复杂度"><a href="#圈复杂度" class="headerlink" title="圈复杂度"></a>圈复杂度</h4><p>Cyclomatic Complexity</p><p>可以计算出达到全面覆盖需要的最少测试用例。<br>它是基于通过代码的路径数计算的，每当函数的控制流分裂时，复杂度计数器就会增加1。每个函数的最小复杂度为1.此计算因语言而异，因为关键字和功能有所不同。</p><p><br></p><p><strong>特定语言的详细信息:</strong></p><table><thead><tr><th>Language</th><th>Notes</th></tr></thead><tbody><tr><td>ABAP</td><td>这些关键字将使复杂度加一: <code>AND , CATCH , CONTINUE , DO , ELSEIF , IF , LOOP , LOOPAT , OR , PROVIDE , SELECT…ENDSELECT , TRY , WHEN , WHILE</code></td></tr><tr><td>C/C++/Objective-C</td><td>复杂度加一: `function definitions, while , do while , for , throw statements, switch , case , default , &amp;&amp; operator,</td><td></td><td>operator, ? ternary operator, catch , break , continue , goto`</td></tr><tr><td>COBOL</td><td>复杂度加一: <code>ALSO , ALTER , AND , DEPENDING , END_OF_PAGE , ENTRY , EOP , EXCEPTION , EXIT , GOBACK , CONTINUE , IF , INVALID , OR , OVERFLOW , SIZE , STOP , TIMES , UNTIL , USE , VARYING , WHEN , EXEC CICS HANDLE , EXEC CICS LINK , EXEC CICS XCTL , EXEC CICS RETURN</code></td></tr><tr><td>Java</td><td>复杂度加一: `if , for , while , case , catch , throw , &amp;&amp; ,</td><td></td><td>, ?`</td></tr><tr><td>JS, PHP</td><td>复杂度加一: `function, if, &amp;&amp;,</td><td></td><td>, loop, switch case, throw, catch, go to`</td></tr><tr><td>PL/I</td><td>复杂度加一: `PROC , PROCEDURE , GOTO , GO TO , DO , IF , WHEN ,</td><td>, ! ,</td><td>= , != , &amp; , &amp;=`</td></tr><tr><td>PL/SQL</td><td>复杂度加一: create procedure, create trigger, procedure definition, basic loop statement, when clause statement, continue statement,exit statement, for loop statement, forall statement, if statement, elsif clause, raise statement, return statement, while loop statement, and expression, or expression, when clause expression</td></tr><tr><td>VB.NET</td><td>复杂度加一: <code>method or constructor declaration,  AndAlso , Case , Continue , End , Error , Exit , If , Loop , On Error , GoTo , OrElse , Resume , Stop , Throw , Try</code></td></tr></tbody></table><p><br><br><br></p><h4 id="认知复杂度"><a href="#认知复杂度" class="headerlink" title="认知复杂度"></a>认知复杂度</h4><p>Cognitive Complexity</p><p>对应这个应用是否很难被理解，理解代码的控制流程有多难。</p><p><br><br><br></p><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p>有:</p><ul><li>重复的块(Duplicated blocks)</li><li>重复的行(Duplicated lines)</li><li>重读文件(Duplicated files)</li><li>密度/重复行%(Duplicated lines %)</li></ul><p><br></p><h4 id="重复的块"><a href="#重复的块" class="headerlink" title="重复的块"></a>重复的块</h4><p>重复的行的块数。</p><p><br></p><p><strong>特定语言的详细信息</strong></p><p>非Java项目:</p><ul><li>There should be at least 100 successive and duplicated tokens.</li><li>Those tokens should be spread at least on:<ul><li>30 lines of code for COBOL</li><li>20 lines of code for ABAP</li><li>10 lines of code for other languages</li></ul></li></ul><p>Java项目:</p><p>There should be at least 10 successive and duplicated statements whatever the number of tokens and lines.检测重复时忽略缩进和字符串文字的差异。</p><p><br><br><br></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>有:</p><ul><li>新问题(New issues)</li><li>新的严重问题(New xxx issues)</li><li>所有问题(Issues)</li><li>严重问题(xxx issues)</li><li>误判问题(False positive issues)</li><li>开启问题(Open issues)</li><li>确认问题(Confirmed issues)</li><li>重开问题(Reopened issues)</li></ul><p><br><br><br></p><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><p>有:</p><ul><li>异味(Code Smells)</li><li>新异味(New Code Smells)</li><li>维护率(Maintainability Rating)</li><li>技术债务(Technical Debt)</li><li>新代码的技术债务(Technical Debt on New Code)</li><li>技术债务率(Technical Debt Ratio)</li><li>新代码的技术债务率(Technical Debt Ratio on New Code)</li></ul><p><br></p><h4 id="维护率"><a href="#维护率" class="headerlink" title="维护率"></a>维护率</h4><p>使用<strong>SQALE评级</strong>。与您的技术债务比率值相关的项目评级。<br>默认的可维护性评级网格是:</p><ul><li>A=<code>0-0.05 (&lt;5%)</code></li><li>B=<code>0.06-0.1 (6%-10%)</code></li><li>C=<code>0.11-0.20(11%-20%)</code></li><li>D=<code>0.21-0.5(21%-50%)</code></li><li>E=<code>0.51-1(50%-100%)</code></li></ul><p><br><br><br></p><h4 id="技术债务"><a href="#技术债务" class="headerlink" title="技术债务"></a>技术债务</h4><p>努力修复所有异味。以分钟(min)为度量单位存储在数据库中，单位值中的天假设为8小时(h)。</p><p><br><br><br></p><h4 id="技术债务率"><a href="#技术债务率" class="headerlink" title="技术债务率"></a>技术债务率</h4><p>开发成本与修复成本之间的比率。技术债务公式为: <code>Remediation cost / Development cost</code></p><p>开发一行代码的成本价值为<code>0.06 day == 0.06 * 8 * 60 min</code></p><p><br><br><br></p><h3 id="质量阈"><a href="#质量阈" class="headerlink" title="质量阈"></a>质量阈</h3><p>有:</p><ul><li>质量阈状态(Quality Gate Status)</li><li>质量阈详情(Quality Gate Details)</li></ul><p><br><br><br></p><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>有:</p><ul><li>Bugs</li><li>New Bugs</li><li>可靠率(Reliability Rating)</li><li>可靠性的修复工作(Reliability remediation effort)</li><li>新代码可靠性的修复工作(Reliability remediation effort on new code)</li></ul><p><br></p><h4 id="可靠率"><a href="#可靠率" class="headerlink" title="可靠率"></a>可靠率</h4><ul><li>A = 0 Bugs</li><li>B = at least 1 Minor Bug</li><li>C = at least 1 Major Bug</li><li>D = at least 1 Critical Bug</li><li>E = at least 1 Blocker Bug</li></ul><p><br><br><br></p><h4 id="修复工作"><a href="#修复工作" class="headerlink" title="修复工作"></a>修复工作</h4><p>努力解决所有Bugs。以分钟为单位度量值存储在数据库中。如果数值天，则假设一天为8小时。</p><p><br><br><br></p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>有:</p><ul><li>漏洞(Vulnerabilities)</li><li>新漏洞(New Vulnerabilities)</li><li>安全级(Security Rating)</li><li>安全修复工作(Security remediation effort )</li><li>新代码的安全修复工作(Security remedation effort on new code)</li></ul><p><br></p><h4 id="安全评级"><a href="#安全评级" class="headerlink" title="安全评级"></a>安全评级</h4><ul><li>A = 0 Vulnerabilities</li><li>B = at least 1 Minor Vulnerability</li><li>C = at least 1 Major Vulnerability</li><li>D = at least 1 Critical Vulnerability</li><li>E = at least 1 Blocker Vulnerability</li></ul><p><br><br><br></p><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p>有:</p><ul><li>类(Classes)</li><li>注释行(Comment lines)</li><li>注释占比(Comments %) - <code>Comment lines / (Lines of code + Comment lines) * 100</code></li><li>目录(Directories)</li><li>文件(Files)</li><li>行数(Lines)</li><li>代码行数(Lines of code)</li><li>每种语言的代码行数(Lines of code per language)</li><li>函数(Functions)</li></ul><p><br><br><br></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>有:</p><ul><li>条件覆盖(Condition coverage)</li><li>新代码条件覆盖(Condition coverage on new code)</li><li>条件覆盖命中(Condition coverage hits)</li><li>逐行条件(Conditions by line)</li><li>逐行条件覆盖(Covered conditions by line)</li><li>覆盖(Coverage)</li><li>新代码覆盖(Coverage on new code)</li><li>行覆盖(Line coverage)</li><li>新代码行覆盖(Line coverage on new code)</li><li>行覆盖命中(Line coverage hits)</li><li>要覆盖的行(Lines to cover)</li><li>新代码要覆盖的行(Lines to cover on new code)</li><li>跳过单元测试(Skipped unit tests)</li><li>未覆盖条件(Uncovered conditions)</li><li>新代码未覆盖条件(Uncovered conditions on new code)</li><li>未覆盖行(Uncovered lines)</li><li>新代码未覆盖行(Uncovered lines on new code)</li><li>单元测试(Unit tests)</li><li>单元测试持续时间(Unit tests duration)</li><li>单元测试错误(Unit test errors)</li><li>单元测试失败(Unit test failures)</li><li>单元测试成功密度(Unit test success density %) - <code>Test success density = (Unit tests - (Unit test errors + Unit test failures)) / Unit tests * 100</code></li></ul><p><br></p><h4 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h4><p>在包含一些布尔表达式的每行代码中，条件覆盖只是回答了以下问题: <em>每个布尔表达式是否都被评估为 <code>true</code> 和 <code>false</code>?</em>。这是在单元测试执行期间遵循的流控制结构中可能的条件密度。</p><p><code>Condition coverage = (CT + CF) / (2*B)</code>, where:</p><ul><li>CT = conditions that have been evaluated to ‘true’ at least once(已经被评估为<code>true</code>至少一次的条件)</li><li>CF = conditions that have been evaluated to ‘false’ at least once(已经被评估为<code>false</code>至少一次的条件)</li><li>B = 条件总数(total number of conditions)</li></ul><p><br><br><br></p><h4 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h4><p>它是行覆盖和条件覆盖的混合。它的目标是为以下问题提供更准确的答案: <em>单元测试覆盖了多少源代码?</em></p><p><code>Coverage = (CT + CF + LC)/(2*B + EL)</code>, where:</p><ul><li>CT = 已经被评估为<code>true</code>至少一次的条件</li><li>CF = 已经被评估为<code>false</code>至少一次的条件</li><li>LC = 覆盖的行(covered lines)</li><li>B = 条件总数</li><li>EL = 可执行行的总数( total number of executable lines)</li></ul><p><br><br><br></p><h4 id="行覆盖"><a href="#行覆盖" class="headerlink" title="行覆盖"></a>行覆盖</h4><p>在给定的代码行上，行覆盖简单地回答了以下问题: <em>在执行单元测试期间是否执行了这行代码?</em></p><p>它是单元测试的覆盖率密度:</p><p><code>Line coverage = LC / EL</code>, where:</p><ul><li>LC = 覆盖的行(covered lines)</li><li>EL = 可执行行的总数(total number of executable lines)</li></ul><p><br><br><br><br><br></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Concepts</p><p><br><br><br></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>Architecture</p><table><thead><tr><th>概念</th><th>定义</th></tr></thead><tbody><tr><td>Analyzer</td><td>用于分析源代码以计算快照的客户端程序</td></tr><tr><td>Database</td><td>存储配置和快照</td></tr><tr><td>Server</td><td>用于浏览快照数据和进行配置修改的Web界面</td></tr></tbody></table><p><br><br><br></p><h3 id="质量"><a href="#质量" class="headerlink" title="质量"></a>质量</h3><p>Quality</p><table><thead><tr><th>概念</th><th>定义</th></tr></thead><tbody><tr><td>Bug</td><td>表示代码中出错的问题</td></tr><tr><td>Code Smell</td><td>代码中与可维护性相关的问题</td></tr><tr><td>Cost</td><td>花费</td></tr><tr><td>Debt</td><td>解决问题所需的时间</td></tr><tr><td>Issue</td><td>代码不符合规则时，快照上会记录一个问题。有: Bugs , Code Smells and Vulnerabilities</td></tr><tr><td>Measure</td><td>给定时间内给定文件或项目的度量值</td></tr><tr><td>Metric</td><td>一种测量方式。随着时间的推移，度量标准可能具有不同的值或度量</td></tr><tr><td>New Code Period</td><td>需要密切关注代码中引入新问题的时间段</td></tr><tr><td>Quality Profile</td><td>一组规则</td></tr><tr><td>Rule</td><td>应该遵循的编码标准或惯例</td></tr><tr><td>Remediation Cost</td><td>修复漏洞和可靠性问题所需的估计时间</td></tr><tr><td>Snapshot</td><td>在给定时间内针对给定项目的一组度量和问题</td></tr><tr><td>Security Hotspot</td><td>与安全相关的问题，突出显示使用安全敏感API的一段代码</td></tr><tr><td>Technical Debt</td><td>修复问题所需的估计时间</td></tr><tr><td>Vulnerability</td><td>与安全相关的问题，代表攻击者的后门</td></tr></tbody></table><p><br><br><br><br><br></p><h2 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h2><p>Activity and History</p><p>项目活动页面提供项目文件分析的完整列表，以及随着时间推移看到项目措施演变的能力。<br>活动页面上的图标可帮助你了解几种相互选择的度量方法的演变。</p><p><br></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>Events</p><p>有四种类型的事件:</p><ul><li>Quality Gate</li><li>Profile</li><li>Version</li><li>Other</li></ul><p><br><br><br><br><br></p><h2 id="SonarLint"><a href="#SonarLint" class="headerlink" title="SonarLint"></a>SonarLint</h2><p>SonarLint Smart Notifications</p><p>SonarLint Smart Notifications是作为Developer Edtion的一部分来提供。</p><p>智能通知允许使用SonarLint中的连接模式的开发人员以一下情况下从SonarQube接收IDE内的通知:</p><ul><li>the Quality Gate status (failed / success) of a project /solution open in the IDE changes</li><li>a SonarQube analysis raises new issues introduced by this developer in a project /solution open in the IDE</li></ul><p>SonarLint智能通知的激活和取消必须由每个开发人员直接在SonarLint(IDE端)进行单独完成。<br>可以在SonarQube上逐个服务器地在SonarLint端配置接收通知。</p><p><br><br><br><br><br></p><h2 id="Security-Reports"><a href="#Security-Reports" class="headerlink" title="Security Reports"></a>Security Reports</h2><p><br></p><h3 id="安全报告显示了什么"><a href="#安全报告显示了什么" class="headerlink" title="安全报告显示了什么"></a>安全报告显示了什么</h3><p>What do the Security Reports show?</p><p>安全报告旨在快速为您提供有关应用程序安全性的全景图，并详细说明OWASP, SANS, CWE标准的详细信息。安全报告由分析器提供，分析器依赖于质量配置文件中激活的规则来引发安全问题。</p><p><br><br><br></p><h3 id="热点和漏洞有什么区别"><a href="#热点和漏洞有什么区别" class="headerlink" title="热点和漏洞有什么区别"></a>热点和漏洞有什么区别</h3><p>What’s the difference between a Hotspot and a Vulnerability?</p><p>漏洞是代码中可以攻击的点。安全热点是安全敏感的代码段，应由具有安全审计员帽的人仔细审查。<br>安全热点的主要目标是帮助集中手动审查应用程序源代码的安全审核员的工作。第二个目标是教育开发人员并提高他们的安全意识。</p><p><br><br><br></p><h3 id="为什么某些热点和漏洞非常相似"><a href="#为什么某些热点和漏洞非常相似" class="headerlink" title="为什么某些热点和漏洞非常相似"></a>为什么某些热点和漏洞非常相似</h3><p>Why are some Hotspot and Vulnerability rules very similar?</p><p>它们是故意重叠的。热点规则应该包括漏洞规则的所有匹配，以及污点分析引擎无法检测漏洞的情况。</p><p><br><br><br></p><h3 id="为什么我看不到任何热点"><a href="#为什么我看不到任何热点" class="headerlink" title="为什么我看不到任何热点"></a>为什么我看不到任何热点</h3><p>Why are some Hotspot and Vulnerability rules very similar?</p><p>有三个原因:</p><ul><li>可能真的没有它们，因为代码是在没有使用任何安全敏感API的情况下编写的</li><li>热点规则可能可用，但尚未在你的质量配置文件中激活，因此自然不会引发任何问题</li><li>你正在使用的语言分析器可能还没有提供热点规则，所以它不会引发任何热点</li></ul><p><br><br><br></p><h3 id="为什么我看不到任何漏洞"><a href="#为什么我看不到任何漏洞" class="headerlink" title="为什么我看不到任何漏洞"></a>为什么我看不到任何漏洞</h3><p>由于一些热点原因，你可能没有看到任何漏洞的，但你可能会看到项目主页中报告了一些漏洞，而安全报告中没有漏洞。这是因为语言分析器可能尚未提供安全报告中可见问题所需的安全标准的元数据。</p><p><br><br><br></p><h3 id="开发者是否应该关心热点"><a href="#开发者是否应该关心热点" class="headerlink" title="开发者是否应该关心热点"></a>开发者是否应该关心热点</h3><p>可能并不需要。热点并不是真正可行的，它们只是标记潜在的问题，所以在代码上没有立即做任何事情。这就是为什么在引发热点问题时没有收到通知。</p><p><br><br><br></p><h3 id="如果热点确实标记为漏洞怎么办"><a href="#如果热点确实标记为漏洞怎么办" class="headerlink" title="如果热点确实标记为漏洞怎么办"></a>如果热点确实标记为漏洞怎么办</h3><p>如果您查看引发热点的代码并意识到确实存在问题，请单击当前状态以注册您在代码中检测到漏洞。完成后，它将转换为漏洞，最后触摸该行的开发人员将收到新问题通知。</p><p><br><br><br></p><h3 id="热点变为漏洞后会发生什么"><a href="#热点变为漏洞后会发生什么" class="headerlink" title="热点变为漏洞后会发生什么"></a>热点变为漏洞后会发生什么</h3><p>一旦您检测到热点位置确实存在问题，它将被分配给相应的开发人员，他们将进行修复，然后必须通过UI请求审核。</p><p><br><br><br></p><h3 id="热点被标记为不会修复是什么意思"><a href="#热点被标记为不会修复是什么意思" class="headerlink" title="热点被标记为不会修复是什么意思"></a>热点被标记为不会修复是什么意思</h3><p>What does it mean for a Hotspot to be marked “Won’t Fix”?</p><p>不会修复标记用于表示已经审查了热点，并且目前无法利用这段代码创建攻击。</p><p><br><br><br><br><br></p><h2 id="用户账户"><a href="#用户账户" class="headerlink" title="用户账户"></a>用户账户</h2><p>User Account</p><p>SonarQube用户可拥有自己的空间，可查看与自己相关的内容。</p><p><br><br><br><br><br></p><h2 id="User-Token"><a href="#User-Token" class="headerlink" title="User Token"></a>User Token</h2><p>每个用户都可生成令牌，这些令牌可用于运行分析或调用Web服务，而无需用户的实际凭据。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><p>Project Administration</p><p><br></p><h2 id="项目存在"><a href="#项目存在" class="headerlink" title="项目存在"></a>项目存在</h2><p>Project Existence</p><p>通常，项目在第一次分析时创建，不会删除(除非手动删除)。你可以管你你有权限管理的项目。</p><p><br></p><ul><li>在第一次分析之前配置项目</li><li>配置还未分析的项目</li><li>修改项目权限(Private/Public) - 默认情况下，任何新创建的项目都被视为Public。这意味着每个经过认证的用户都能够<strong>Browse</strong>和<strong>See Source Code</strong></li><li>删除项目</li><li>查找不再分析的项目</li></ul><p><br><br><br></p><h2 id="管理项目历史"><a href="#管理项目历史" class="headerlink" title="管理项目历史"></a>管理项目历史</h2><p>Managing Project History</p><p>SonarQube最强大的功能之一是它不仅向你展示了你今天的项目健康状况，还展示了它随时间的变化情况。它通过有选择地保留以前分析的数据来做到这一点。它没有保留所有以前的分析——这会使数据库膨胀。同样，对于它确实存在的分析，SonarQube不会保留所有数据。一旦项目快照(snapshot)从最后分析(Last analysis)移动到项目历史的一部分，项目级别下面的数据就会被清除——再次放置数据库膨胀。</p><p>通常这些都不是你需要考虑的事情。SonarQube只为你专门处理它们。但有时你可能需要从项目的历史记录中删除错误的快照或修改内存处理算法。</p><p><br></p><p>可查看数据库表大小:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sonar</span><br><span class="line"><span class="keyword">USE</span> information_schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESCRIBE</span> <span class="keyword">TABLES</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, TABLE_NAME, TABLE_ROWS, DATA_LENGTH <span class="keyword">FROM</span> <span class="keyword">TABLES</span> <span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'sonar'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> DATA_LENGTH <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><br></p><p>有时你可能需要手动删除项目快照，无论是因为使用了错误的质量配置文件，还是因为分析存在问题…请注意，永远不能删除最新的快照。</p><p>对于每个快照，可以手动:</p><ul><li>Add, rename or remove a version</li><li>Add, rename or remove an event</li><li>Delete the snapshot</li></ul><p><br><br><br></p><h2 id="缩小关注点"><a href="#缩小关注点" class="headerlink" title="缩小关注点"></a>缩小关注点</h2><p>Narrowing the Focus</p><p>如果SonarQube的结果不相关，那么没有人会想要使用它。这就是为什么精确配置每个项目要分析的内容是非常重要的一步。<br>SonarQube为你提供了几种选项，可以准确配置要分析的内容。你可以:</p><ul><li>完全忽略一些文件或目录</li><li>从问题中排除文件或目录，但分析所有其它方面</li><li>从重复性中排除文件或目录，但分析所有其它方面</li><li>从覆盖率中排除文件或目录，但分析其它所有方面</li></ul><p>你可以在全局或项目级别配置它们。</p><p><br></p><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>Ignore Files</p><p>建议你从库中排除生成的代码，源代码等。有四种不同的方法可将分析范围缩小到与开发团队相关的源代码。</p><ul><li>源目录(Source Directories)</li><li>文件后缀(File Suffixes)</li><li>选择文件(Choosing Files)<ul><li>源文件排除(Source File Exclusions)</li><li>测试文件排除(Test File Exclusions)</li><li>源文件包含(Source File Inclusions)</li><li>测试文件包含(Test File Inclusions)</li></ul></li></ul><p><img src="/images/SonarQube/exclusions.jpg" alt=""></p><p><img src="/images/SonarQube/inclusions.jpg" alt=""></p><p><br><br><br></p><h3 id="忽略问题"><a href="#忽略问题" class="headerlink" title="忽略问题"></a>忽略问题</h3><p>Ignore Issues</p><p>可使用SonarQube忽略某些组件和某些编码规则的问题。<code>Administration &gt; General Settings &gt; Analysis Scope &gt; Issues</code>。</p><p>请注意，以下属性只能通过Web界面设置，因为它们是多值的。</p><ul><li>Ignore Issues on Files</li><li>Ignore Issues in Blocks</li><li>Ignore Issues on Multiple Criteria</li><li>Restrict Scope of Coding Rules</li></ul><p><br><br><br></p><h3 id="忽略重复"><a href="#忽略重复" class="headerlink" title="忽略重复"></a>忽略重复</h3><p>Ignore Duplications</p><p>可在SonarQube中阻止检查某些文件的重复性。<code>Administration &gt; General Settings &gt; Analysis Scope &gt; Duplications</code>。</p><p><br><br><br></p><h3 id="忽略代码覆盖率"><a href="#忽略代码覆盖率" class="headerlink" title="忽略代码覆盖率"></a>忽略代码覆盖率</h3><p>Ignore Code Coverage</p><p>可以通过单元测试防止某些文件考虑用于代码覆盖。<code>Administration &gt; General Settings &gt; Analysis Scope &gt; Code Coverage &gt; Coverage Exclusions</code>。</p><p><br><br><br></p><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>Patterns</p><p>SonarQube中可以使用以下通配符:</p><ul><li><code>*</code>    - 零个或多个字符(zero or more characters)</li><li><code>**</code> - 零个或多个目录(zero or more directories)</li><li><code>?</code> - 单个字符(a single character)</li></ul><p><br><br><br><br><br></p><h2 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h2><p>Project Settings</p><p><br></p><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>项目标签(tags) 允许对项目进行分类和分组，以便在项目页面上更容易地选择。可以从项目主页管理项目标签。</p><p><br><br><br></p><h3 id="管理项"><a href="#管理项" class="headerlink" title="管理项"></a>管理项</h3><p>Administration Items:</p><ul><li>Adding a Project</li><li>Analysis Report Processing</li><li>Deleting a Project</li><li>Setting the New Code Period</li><li>Updating Project Key</li><li>Default Issue Assignee</li><li>Setting Quality Gate and Quality Profiles</li><li>Setting Exclusions</li><li>Customizing Links</li></ul><p><br><br><br><br><br></p><h2 id="Webhooks"><a href="#Webhooks" class="headerlink" title="Webhooks"></a>Webhooks</h2><p>网络调用(Webhooks) 在项目完成分析后通知外部服——An HTTP POST request including a JSON payload is sent to each URL。可在项目级别和全局指定URL。项目级别的配置不会取代全局的配置，两个级别的所有Webhooks都被调用。</p><p>HTTP(s) 调用:</p><ul><li>无论后台任务的状态如何</li><li>使用POST方法将JSON文档作为负载</li><li>使用<code>UTF-8</code>编码的内容类型<code>application/json</code></li></ul><p><br></p><h3 id="Delivery-and-Payload"><a href="#Delivery-and-Payload" class="headerlink" title="Delivery and Payload"></a>Delivery and Payload</h3><p>Webhook 管理控制台显示每个Webhook的最新交付的结果和时间戳，其中有效负载可通过列表图标获得。默认保留30天的记录。URL必须在10s响应，否则传递将标记为失败。</p><p>发送带有project key的 HTTP header <code>X-SonarQube-Project</code>，以便快速识别所涉及的项目。</p><p>Payload是一个JSON文档，包括:</p><ul><li>什么时候运行分析(<code>analysedAt</code>)</li><li>分析的项目的标识(<code>project</code>)</li><li>每个质量阈标准和状态(<code>qualityGate</code>)</li><li>每个项目的质量阈状态(<code>qualityGate.status</code>)</li><li>后台任务的状态和标识(<code>status</code>, <code>taskId</code>)</li><li>用于定义的属性(<code>properties</code>)</li></ul><p>栗子:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"analysedAt"</span>: <span class="string">"2016-11-18T10:46:28+0100"</span>,</span><br><span class="line">    <span class="attr">"project"</span>: &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"org.sonarqube:example"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Example"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"qualityGate"</span>: &#123;</span><br><span class="line">        <span class="attr">"conditions"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"errorThreshold"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"metric"</span>: <span class="string">"new_security_rating"</span>,</span><br><span class="line">                <span class="attr">"onLeakPeriod"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"operator"</span>: <span class="string">"GREATER_THAN"</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="string">"OK"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"1"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"errorThreshold"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"metric"</span>: <span class="string">"new_reliability_rating"</span>,</span><br><span class="line">                <span class="attr">"onLeakPeriod"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"operator"</span>: <span class="string">"GREATER_THAN"</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="string">"OK"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"1"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"errorThreshold"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"metric"</span>: <span class="string">"new_maintainability_rating"</span>,</span><br><span class="line">                <span class="attr">"onLeakPeriod"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"operator"</span>: <span class="string">"GREATER_THAN"</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="string">"OK"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"1"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"errorThreshold"</span>: <span class="string">"80"</span>,</span><br><span class="line">                <span class="attr">"metric"</span>: <span class="string">"new_coverage"</span>,</span><br><span class="line">                <span class="attr">"onLeakPeriod"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"operator"</span>: <span class="string">"LESS_THAN"</span>,</span><br><span class="line">                <span class="attr">"status"</span>: <span class="string">"NO_VALUE"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"SonarQube way"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="string">"OK"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"serverUrl"</span>: <span class="string">"http://localhost:9000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"SUCCESS"</span>,</span><br><span class="line">    <span class="attr">"taskId"</span>: <span class="string">"AVh21JS2JepAEhwQ-b3u"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="附加参数"><a href="#附加参数" class="headerlink" title="附加参数"></a>附加参数</h3><p>Additional parameters</p><p>通过在Webhook的URL中提供<code>user/passwd</code>来支持基本的身份认证机制。(如: <code>https://myLogin:myPassword@my_server/foo</code>)</p><p>如果使用了<code>sonar.analysis.*</code>属性为SonarScanner提供其它属性，则这些属性将自动添加到有效负载的<code>properties</code>部分。</p><p>栗子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner -Dsonar.analysis.scmRevision=628f5175ada0d685fd7164baa7c6382c1f25cab4 -Dsonar.analysis.buildNumber=12345</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h1 id="实例管理"><a href="#实例管理" class="headerlink" title="实例管理"></a>实例管理</h1><p>Instance Administration</p><p><br></p><h2 id="质量配置"><a href="#质量配置" class="headerlink" title="质量配置"></a>质量配置</h2><p>Quality Profiles</p><p><br></p><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>质量配置(Quality Profiles)服务是SonarQube的核心，因为它是您通过定义规则集来定义需求的地方。。</p><p>理想情况下，对于任何给定的语言，所有项目都将使用相同的配置文件进行测量，但这并不总是实用的。<br>这就是为什么您可以根据需要定义尽可能多的质量配置文件，即使建议尽可能少的质量配置文件以确保公司项目的一致性。</p><p>每个语言都带有预定义的內建配置文件(通常称为 Sonar way)，因此你可以使用SonarQube分析进行快速开始。这就是为什么只要安装新的语言插件，就可以使用至少一个配置文件。</p><p>默认的Sonar way配置文件，它包含了通常适用于大多数项目的所有规则。但作为最佳实践，你应该创建一个新的配置文件(你可以通过复制Sonar way的内容来填充它)，并使用它。<br>因为默认的Sonar way是不可编辑的，因此你无法根据需要对其进行自定义。此外，这使你可将Sonar way视为一个基线，可在对其进行更改时跟踪自己的配置文件。此外Sonar way通常会随插件的每个新版本更新，已添加规则，有时还会调整规则严重性。任何继承自內建Sonar way的配置文件都将在事实上同时自动更新。</p><p><br><br><br></p><h3 id="我该怎么做"><a href="#我该怎么做" class="headerlink" title="我该怎么做"></a>我该怎么做</h3><p><br></p><p>####　将质量配置管理的权限移交给其他人</p><p>Delegate the management of Quality Profiles to someone else?</p><p>默认情况下，管理员才有此权限。但你可以授予用户/组权限来编辑配置文件。例如将Java配置文件权限分配给Java开发专家，将Python配置文件权限分配给Python专家…</p><p><br><br><br></p><h4 id="将规则从一个配置复制到另一个配置"><a href="#将规则从一个配置复制到另一个配置" class="headerlink" title="将规则从一个配置复制到另一个配置"></a>将规则从一个配置复制到另一个配置</h4><p>Copy the rules from one profile to another?</p><p>许多时候，人们希望使用基于內建的配置文件的配置文件进行工作，而无实际需要使用內建配置文件。</p><p><br><br><br></p><h4 id="了解配置中有什么改变"><a href="#了解配置中有什么改变" class="headerlink" title="了解配置中有什么改变"></a>了解配置中有什么改变</h4><p>Know what’s changed in a profile?</p><p>当SonarQube注意到使用与先前分析不同的配置文件执行分析时，会将质量配置文件事件添加到项目的事件日志中。</p><p><br><br><br></p><h4 id="将配置文件从一个实例复制到另一个实例"><a href="#将配置文件从一个实例复制到另一个实例" class="headerlink" title="将配置文件从一个实例复制到另一个实例"></a>将配置文件从一个实例复制到另一个实例</h4><p>Copy a profile from one SonarQube instance to another?</p><p>使用实例上的备份(Back UP)功能将配置文件导出到XML文件。然后在另一个实例中选择恢复(Restore)。</p><p><br><br><br></p><h4 id="将一组核心规则和附加规则应用于项目"><a href="#将一组核心规则和附加规则应用于项目" class="headerlink" title="将一组核心规则和附加规则应用于项目"></a>将一组核心规则和附加规则应用于项目</h4><p>Apply a core set of rules plus additional rules to a project?</p><p>使用继承，从root继承核心规则集。然后创建一个子配置文件(Sprout)，修改从Root继承，然后添加缺少的规则。</p><p><br><br><br></p><h4 id="确保我的非默认配置文件应用于项目"><a href="#确保我的非默认配置文件应用于项目" class="headerlink" title="确保我的非默认配置文件应用于项目"></a>确保我的非默认配置文件应用于项目</h4><p>Make sure my non-default profile is used on a project?</p><p><br><br><br></p><h4 id="确保我的个人配置中包含所有相关的新规则"><a href="#确保我的个人配置中包含所有相关的新规则" class="headerlink" title="确保我的个人配置中包含所有相关的新规则"></a>确保我的个人配置中包含所有相关的新规则</h4><p>Make sure I’ve got all the relevant new rules in my profile?</p><p><br><br><br></p><h4 id="比较两个规则"><a href="#比较两个规则" class="headerlink" title="比较两个规则"></a>比较两个规则</h4><p>Compare two profiles?</p><p><br><br><br></p><h4 id="确保我的配置中没有任何弃用的规则"><a href="#确保我的配置中没有任何弃用的规则" class="headerlink" title="确保我的配置中没有任何弃用的规则"></a>确保我的配置中没有任何弃用的规则</h4><p>Make sure I don’t have any deprecated rules in my profile?</p><p><br><br><br></p><h4 id="安全-1"><a href="#安全-1" class="headerlink" title="安全"></a>安全</h4><p>Security</p><p>任何用户都可以访问质量配置服务，你可以给他们配置质量配置管理权限，让他们可以创建，删除质量配置。</p><p><br><br><br><br><br></p><h2 id="安全-2"><a href="#安全-2" class="headerlink" title="安全"></a>安全</h2><p><br></p><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>SonarQube具有许多全局安全功能:</p><ul><li>认证和授权机制</li><li>强制身份认证</li><li>委派认证</li></ul><p>除此之外，还可在group/user级别配置:</p><ul><li>查看一个已存在的项目</li><li>访问项目的源代码</li><li>管理一个项目</li><li>管理质量配置，质量阈，实例…</li></ul><p><br><br><br></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>Authentication</p><p>第一个问题: 匿名用户是否可以浏览SonarQube实例？<br>当然不行！那就需要强制用户认证。</p><p><br></p><p><strong>认证机制(Authentication Mechanisms)</strong></p><p>可通过多种方式来管理认证机制:</p><ul><li>通过SonarQube內建的user/group数据库</li><li>通过外部程序(如LDAP)</li><li>通过HTTP headers</li></ul><p><br></p><p><strong>技术用户(Technical Users)</strong></p><p>当你在SonarQube数据库中创建用户时，他将被视为本地用户，并且针对SonarQube自己的user/group数据库进行身份认证，而不是通过任何外部工具。<br>默认情况下，<code>admin</code>是本地账户。</p><p>同样，所有非本地(non-local)账户将仅针对外部工具进行身份认证。</p><p>管理员可以管理所有用户的<strong>Tokens</strong>——创建和删除。一旦创建，Token就是运行分析所需的唯一凭证，作为<code>sonar.login</code>属性的值来传递。</p><p><br></p><p><strong>默认管理员(Default Admin Credentials)</strong></p><p>当安装SonarQube时，会自动创建具有管理系统权限的默认用户:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">passwd:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="重置管理员密码"><a href="#重置管理员密码" class="headerlink" title="重置管理员密码"></a>重置管理员密码</h3><p>Reinstating Admin Access</p><p>如果你修改了管理员密码，但又忘记了:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> sonar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">users</span> <span class="keyword">set</span> crypted_password = <span class="string">'$2a$12$uCkkXmhW5ThVK8mpBvnXOOJRLd64LJeHTeCkSuB3lfaR2N0AYBaSi'</span>, <span class="keyword">salt</span>=<span class="literal">null</span>, hash_method=<span class="string">'BCRYPT'</span> <span class="keyword">where</span> login = <span class="string">'admin'</span></span><br></pre></td></tr></table></figure><p>如果您删除了管理员并随后锁定了具有全局管理权限的其他用户:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> sonar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_roles(user_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> ((<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> login=<span class="string">'mylogin'</span>), <span class="string">'admin'</span>);</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>Authorization</p><p>对不同组、不同用于仅限权限分配，以访问不同的资源。</p><ul><li>user</li><li>group</li><li>Global Permissions<ul><li>Administer System</li><li>Administer Quality Profiles</li><li>Administer Quality Gates</li><li>Execute Analysis</li><li>Create Projects</li><li>Create Applications</li><li>Create Portfolios</li></ul></li><li>Project Permissions<ul><li>Public and Private<ul><li>Administer Issues</li><li>Administer Security Hotspots</li><li>Administer</li><li>Execute Analysis</li></ul></li><li>Private<ul><li>Browse</li><li>See Source Code</li></ul></li></ul></li></ul><p><br><br><br></p><h3 id="默认权限的权限模板"><a href="#默认权限的权限模板" class="headerlink" title="默认权限的权限模板"></a>默认权限的权限模板</h3><p>Permission Templates for Default Permissions</p><p>SonarQube附带默认权限模板，该模板在创建项目，项目组合或应用程序自动授予特定组的特定权限。管理员可以编辑此模板。</p><p><br><br><br></p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>Encryption</p><p>加密主要用于从设置中删除明文密码。实现的解决方案是基于对称密钥算法，关键是密钥存储在磁盘上的安全文件中。此文件必须由运行SonarQube Server的系统账户拥有和读取。<br>该算法是AES 128位。</p><ul><li><strong>Generate the secret key</strong></li><li><strong>Store the secret key on the SonarQube server</strong></li><li><strong>Generate the encrypted values of your settings</strong></li><li><strong>Use the encrypted values in your SonarQube server configuration</strong></li></ul><p>必须在SonarQube基础架构的所有部分之间共享唯一的密钥。在<code>Administration &gt; Configuration &gt; Encryption</code>生成密钥。<br>生成密钥之后，会显示如何使用此密钥。</p><p><img src="/images/SonarQube/secretKey.png" alt=""></p><p>之后便可以为你设置的值进行加密。同样在前面的加密下进行配置。<br>之后在SonarQube Server中使用加密后的值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># conf/sonar.properties</span><br><span class="line"></span><br><span class="line">sonar.jdbc.password=&#123;aes&#125;CCGCFg4Xpm6r+PiJb1Swfg==  # Encrypted DB password</span><br><span class="line">...</span><br><span class="line">sonar.secretKeyPath=C:/path/to/my/secure/location/my_secret_key.txt</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="委托认证"><a href="#委托认证" class="headerlink" title="委托认证"></a>委托认证</h2><p>Delegating Authentication</p><p>docs: <a href="https://docs.sonarqube.org/latest/instance-administration/delegated-auth/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/instance-administration/delegated-auth/</a></p><p>SonarQube认证:</p><ul><li>自带用户数据库认证</li><li>外部<ul><li>HTTP header</li><li>LDAP</li><li>…</li></ul></li></ul><p><br></p><h3 id="HTTP-header认证"><a href="#HTTP-header认证" class="headerlink" title="HTTP header认证"></a>HTTP header认证</h3><p><br><br><br></p><h3 id="LDAP认证"><a href="#LDAP认证" class="headerlink" title="LDAP认证"></a>LDAP认证</h3><p><br><br><br><br><br></p><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>Notifications</p><p>可以通过邮件配置，向用户发送分析的信息的通知。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/SonarSource/sonarqube&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/SonarSource/sonarqube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Website: &lt;a href=&quot;https://www.sonarqube.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sonarqube.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docs: &lt;a href=&quot;https://docs.sonarqube.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.sonarqube.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RHEL7x86_64&lt;/li&gt;
&lt;li&gt;SonarQube v7.6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="SonarQube" scheme="https://zhang21.github.io/tags/SonarQube/"/>
    
      <category term="Static Analysis" scheme="https://zhang21.github.io/tags/Static-Analysis/"/>
    
      <category term="Code Quality" scheme="https://zhang21.github.io/tags/Code-Quality/"/>
    
  </entry>
  
  <entry>
    <title>DevOps</title>
    <link href="https://zhang21.github.io/2019/02/13/DevOps/"/>
    <id>https://zhang21.github.io/2019/02/13/DevOps/</id>
    <published>2019-02-12T21:22:15.000Z</published>
    <updated>2019-03-01T05:51:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>维基百科</li><li>GitLab</li><li>GitHub</li></ul><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>DevOps</strong>（Development和Operations的组合词）是一种重视 <em>软件开发人员（Dev）</em> 和 <em>IT运维技术人员（Ops）</em> 之间沟通合作的文化、运动或惯例。透过自动化 <em>软件交付</em> 和 <em>架构变更</em> 的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p><p><img src="/images/DevOps/DevOps.png" alt=""></p><p><img src="/images/DevOps/devops-loop-and-spans-small.png" alt=""></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="Auto-DevOps"><a href="#Auto-DevOps" class="headerlink" title="Auto DevOps"></a>Auto DevOps</h1><p>GitLab Auto DevOps:</p><ul><li>Auto Build</li><li>Auto Test</li><li>Auto Code Quality</li><li>Auto SAST (Static Application Security Testing)</li><li>Auto Dependency Scanning</li><li>Auto License Management</li><li>Auto Container Scanning</li><li>Auto Review Apps</li><li>Auto DAST (Dynamic Application Security Testing)</li><li>Auto Deploy</li><li>Auto Browser Performance Testing</li><li>Auto Monitoring</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="DevOps工具"><a href="#DevOps工具" class="headerlink" title="DevOps工具"></a>DevOps工具</h1><p>下面介绍一些DevOps需要用到的工具，可能不够详细。</p><p><br></p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>IaaS:</p><ul><li>VMware</li><li>Xen</li><li>KVM</li><li>OpenStack</li><li>云平台</li><li>…</li></ul><p><br><br><br></p><h2 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h2><p>Task:</p><ul><li>RedaMine</li><li>Jira</li><li>禅道</li><li>…</li></ul><p><br><br><br></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Code:</p><ul><li>git</li><li>GitLab</li><li>Gogs</li><li>svn</li><li>云平台</li><li>…</li></ul><p><br><br><br></p><h2 id="持续集成-发布"><a href="#持续集成-发布" class="headerlink" title="持续集成/发布"></a>持续集成/发布</h2><p>CI/CD:</p><ul><li>Jenkins</li><li>Jenkins X</li><li>GitLab CICD</li><li>Bamboo</li><li>Maven</li><li>云平台</li><li>…</li></ul><p><br><br><br></p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Container:</p><ul><li>Docker</li><li>K8s</li><li>CoreOS</li><li>Mesos</li><li>Helm</li><li>云平台</li><li>…</li></ul><p><br><br><br></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>Test:</p><ul><li><strong>Selenium</strong></li><li><strong>Katalon Studio</strong></li><li><strong>Watir</strong></li><li><strong>Jmeter</strong></li><li><strong>Loadrunner</strong></li><li><strong>LOCUST</strong></li></ul><p><br></p><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h3><ul><li>Website: <a href="https://www.seleniumhq.org/" target="_blank" rel="noopener">https://www.seleniumhq.org/</a></li></ul><p>Selenium是一个用于自动化测试Web apps的可移植框架。 Selenium提供了一种用于创作功能测试的回放工具，无需学习测试脚本语言。</p><p><br><br><br></p><h3 id="Katalon-Studio"><a href="#Katalon-Studio" class="headerlink" title="Katalon Studio"></a>Katalon Studio</h3><ul><li>Wetsite: <a href="https://www.katalon.com/" target="_blank" rel="noopener">https://www.katalon.com/</a></li></ul><p>Simplify API, Web, Mobile Automation Tests.</p><p><br><br><br></p><h3 id="Watir"><a href="#Watir" class="headerlink" title="Watir"></a>Watir</h3><ul><li>Website: <a href="http://watir.com/" target="_blank" rel="noopener">http://watir.com/</a></li></ul><p>An open source Ruby library for automating tests.<br>Watir interacts with a browser the same way people do: clicking links, filling out forms and validating text.</p><p><br><br><br></p><h3 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h3><p>Apache JMeter应用程序是开源软件，纯Java应用程序，旨在加载测试功能行为和测量性能。它最初是为测试Web应用程序而设计的，但后来扩展到其他测试功能。</p><p>Apache JMeter可用于测试静态和动态资源，Web动态应用程序的性能。<br>它可用于模拟服务器，服务器组，网络或对象上的重负载，以测试其强度或分析不同负载类型下的整体性能。</p><p><br></p><p>Apache JMeter功能包括:</p><ul><li>Ability to load and performance test many different applications/server/protocol types<ul><li>Web - HTTP, HTTPS (Java, NodeJS, PHP, ASP.NET, …)</li><li>SOAP / REST Webservices</li><li>FTP</li><li>Database via JDBC</li><li>LDAP</li><li>Message-oriented middleware (MOM) via JMS</li><li>Mail - SMTP(S), POP3(S) and IMAP(S)</li><li>Native commands or shell scripts</li><li>TCP</li><li>Java Objects</li></ul></li><li>Full featured Test IDE that allows fast Test Plan recording</li><li>CLI mode to load test from any Java compatible OS</li><li>Highly Extensible core</li><li>…</li></ul><p><br><br><br></p><h3 id="LoadRunner"><a href="#LoadRunner" class="headerlink" title="LoadRunner"></a>LoadRunner</h3><ul><li>Website: <a href="https://www.microfocus.com" target="_blank" rel="noopener">https://www.microfocus.com</a></li></ul><p>LoadRunner is a Load Testing Software</p><p><br><br><br></p><h3 id="LOCUST"><a href="#LOCUST" class="headerlink" title="LOCUST"></a>LOCUST</h3><ul><li>Website: <a href="https://locust.io/" target="_blank" rel="noopener">https://locust.io/</a></li><li>GitHub: <a href="https://github.com/locustio/locust/" target="_blank" rel="noopener">https://github.com/locustio/locust/</a></li></ul><p><br></p><p>An open source load testing tool.</p><p>Define user behaviour with Python code, and swarm your system with millions of simultaneous users.</p><p><br><br><br><br><br></p><h2 id="质量与安全"><a href="#质量与安全" class="headerlink" title="质量与安全"></a>质量与安全</h2><p>Quality and Security:</p><ul><li>infer</li><li>SonarQube</li><li>Cuckoo Sandbox</li><li>OWASP ZAProxy</li><li>Mobile-Security-Framework-MobSF</li><li>Clair</li></ul><p><br></p><h3 id="Infer"><a href="#Infer" class="headerlink" title="Infer"></a>Infer</h3><ul><li>GitHub: <a href="https://github.com/facebook/infer" target="_blank" rel="noopener">https://github.com/facebook/infer</a></li><li>Website: <a href="https://fbinfer.com/" target="_blank" rel="noopener">https://fbinfer.com/</a></li></ul><p><br></p><p><strong>Infer</strong> 是一个 <code>Java</code>，<code>C ++</code>，<code>Objective-C</code> 和 <code>C</code> 的代码静态分析工具。它会产生一个潜在的bug列表。任何人都可以使用Infer在发送给用户之前拦截关键错误，并帮助防止崩溃或性能不佳。</p><p>infer 主要用于 APP 端，也就是 Android/IOS App。</p><p><br><br><br></p><h3 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h3><ul><li>GitHub: <a href="https://github.com/SonarSource/sonarqube" target="_blank" rel="noopener">https://github.com/SonarSource/sonarqube</a></li><li>Website: <a href="https://www.sonarqube.org/" target="_blank" rel="noopener">https://www.sonarqube.org/</a></li></ul><p><br></p><p><strong>SonarQube</strong> 是一个开源平台，通过代码的自动化静态分析不断的检查代码质量。 SonarQube 支持20多种语言的分析，并在各种类型的项目中输出和存储问题。通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。</p><p><br><br><br></p><h3 id="MobSF"><a href="#MobSF" class="headerlink" title="MobSF"></a>MobSF</h3><ul><li>GitHub: <a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF" target="_blank" rel="noopener">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></li></ul><p><br></p><p>Mobile Security Framework is an automated, all-in-one mobile application (Android/iOS/Windows) pen-testing framework capable of performing static analysis, dynamic analysis, malware analysis and web API testing.</p><p><br><br><br></p><h3 id="Clair"><a href="#Clair" class="headerlink" title="Clair"></a>Clair</h3><ul><li>GitHub: <a href="https://github.com/coreos/clair" target="_blank" rel="noopener">https://github.com/coreos/clair</a></li></ul><p>Vulnerability Static Analysis for Containers.<br>Clair is an open source project for the static analysis of vulnerabilities in application containers (currently including appc and docker).</p><p><br><br><br><br><br></p><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>Configuration Management:</p><ul><li>Ansible</li><li>ZooKeeper</li><li>CFEngine</li><li>Chef</li><li>MAAS</li><li>Puppet</li><li>SaltStack</li><li>Vagrant</li><li>Rundeck</li><li>Rudder</li><li>云平台</li><li>…</li></ul><p><br><br><br></p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>Log:</p><ul><li>ElasticStack<ul><li>Elasticsearch</li><li>Logstash</li><li>Beat</li></ul></li><li>Fluentd</li><li>Splunk</li><li>Kafka</li><li>Loggly</li><li>Papertrail</li><li>云平台</li><li>…</li></ul><p><br><br><br></p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>Stream:</p><ul><li>Kafka</li><li>Apex</li><li>Flink</li><li>Heron</li><li>Spark</li><li>Heka</li></ul><p><br><br><br></p><h2 id="Api网关"><a href="#Api网关" class="headerlink" title="Api网关"></a>Api网关</h2><p>Api Gateway:</p><ul><li>Gloo</li><li>Ambassador</li><li>Spring Cloud</li><li>Kong</li><li>Netflix Zuul</li><li>云平台</li><li>…</li></ul><p><br><br><br></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>Performance:</p><ul><li>NetData</li><li>Pinpoint</li><li>Datadog</li><li>AppDynamics</li><li>Apache JMeter</li><li>ab(ApacheBench)</li><li>Gatling</li></ul><p><br><br><br></p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>Monitoring:</p><ul><li>Zabbix</li><li>Nagios</li><li>Prometheus</li><li>Grafana</li><li>Netdata</li><li>Graphite</li><li>Cacti</li><li>Glances</li><li>Collectd</li><li>Ganglia</li><li>Kibana</li><li>Sensu</li></ul><p><br><br><br></p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>Backup:</p><ul><li>全量</li><li>增量</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="自动化运维" scheme="https://zhang21.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
      <category term="运维开发" scheme="https://zhang21.github.io/tags/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
      <category term="Auto DevOps" scheme="https://zhang21.github.io/tags/Auto-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>上仁宗皇帝言事书</title>
    <link href="https://zhang21.github.io/2019/02/10/%E4%B8%8A%E4%BB%81%E5%AE%97%E7%9A%87%E5%B8%9D%E8%A8%80%E4%BA%8B%E4%B9%A6/"/>
    <id>https://zhang21.github.io/2019/02/10/上仁宗皇帝言事书/</id>
    <published>2019-02-10T13:15:11.000Z</published>
    <updated>2019-02-11T01:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>维基百科</li><li>百度百科</li></ul><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>　　王安石（1021年12月19日－1086年5月21日），字介甫，号半山，临川盐阜岭（今江西省抚州市东乡县）人，生于宋真宗天禧五年，卒于宋哲宗元祐元年，由于被封为荆国公，后人常称他为“王荆公”。王安石是北宋著名的政治家、文学家、思想家，实官至司空、尚书左仆射、观文殿大学士、镇南军节度使。他去世后被追赠为太傅，谥曰文，享年66岁。</p><p>　　嘉佑三年（1058年），调为度支判官，王安石进京述职，作长达万言的《上仁宗皇帝言事书》，系统地提出了变法主张。在此次上疏中，王安石总结了自己多年的地方官经历，指出国家积弱积贫的现实：经济困窘、社会风气败坏、国防安全堪忧，认为症结的根源在于为政者不懂得法度，解决的根本途径在于效法古圣先贤之道、改革制度，进而提出了自己的人才政策和方案的基本设想，建议朝廷改革取士、重视人才。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p>　　臣愚不肖，蒙恩备使一路，今又蒙恩召还阙廷，有所任属，而当以使事归报陛下。不自知其无以称职，而敢缘使事之所及，冒言天下之事，伏惟陛下详思而择其中，幸甚。</p><p>　　臣窃观陛下有恭俭之德，有聪明睿智之才，夙兴夜寐，无一日之懈，声色狗马，观游玩好之事，无纤介之蔽，而仁民爱物之意，孚于天下，而又公选天下之所愿以为辅相者，属之以事，而不贰于谗邪倾巧之臣，此虽二帝、三王之用心，不过如此而已，宜其家给人足，天下大治。而效不至于此，顾内则不能无以社稷为忧，外则不能无惧于夷狄，天下之财力日以困穷，而风俗日以衰坏，四方有志之士，諰諰然常恐天下之久不安。此其故何也？患在不知法度故也。</p><p>　　今朝廷法严令具，无所不有，而臣以谓无法度者，何哉？方今之法度，多不合乎先王之政故也。孟子曰：「有仁心仁闻，而泽不加于百姓者，为政不法于先王之道故也。」以孟子之说，观方今之失，正在于此而已。</p><p>　　夫以今之世，去先王之世远，所遭之变，所遇之势不一，而欲一二修先王之政，虽甚愚者，犹知其难也。然臣以谓今之失，患在不法先王之政者，以谓当法其意而已。夫二帝、三王，相去盖千有余载，一治一乱，其盛衰之时具矣。其所遭之变，所遇之势，亦各不同，其施设之方亦皆殊，而其为天下国家之意，本末先后，未尝不同也。臣故曰：当法其意而已。法其意，则吾所改易更革，不至乎倾骇天下之耳目，嚣天下之口，而固已合乎先王之政矣。</p><p>　　虽然，以方今之势揆之，陛下虽欲改易更革天下之事，合于先王之意，其势必不能也。陛下有恭俭之德，有聪明睿智之才，有仁民爱物之意，诚加之意，则何为而不成，何欲而不得？然而臣顾以谓陛下虽欲改易更革天下之事，合于先王之意，其势必不能者，何也？以方今天下之才不足故也。</p><p>　　臣尝试窃观天下在位之人，未有乏于此时者也。夫人才乏于上，则有沉废伏匿在下，而不为当时所知者矣。臣又求之于闾巷草野之间，而亦未见其多焉。岂非陶冶而成之者非其道而然乎？臣以谓方今在位之人才不足者，以臣使事之所及，则可知矣。今以一路数千里之间，能推行朝廷之法令，知其所缓急，而一切能使民以修其职事者甚少，而不才苟简贪鄙之人，至不可胜数。其能讲先王之意以合当时之变者，盖阖郡之间，往往而绝也。朝廷每一令下，其意虽善，在位者犹不能推行，使膏泽加于民，而吏辄缘之为奸，以扰百姓。臣故曰：在位之人才不足，而草野闾巷之间，亦未见其多也。夫人才不足，则陛下虽欲改易更革天下之事，以合先王之意，大臣虽有能当陛下之意而欲领此者，九州之大，四海之远，孰能称陛下之指，以一二推行此，而人人蒙其施者乎？臣故曰：其势必未能也。孟子曰：「徒法不能以自行。」非此之谓乎？然则方今之急，在于人才而已。诚能使天下人才众多，然后在位之才可以择其人而取足焉。在位者得其才矣，然后稍视时势之可否，而因人情之患苦，变更天下之弊法，以趋先王之意，甚易也。今之天下，亦先王之天下，先王之时，人才尝众矣，何至于今而独不足乎？故曰：陶冶而成之者，非其道故也。</p><p>　　商之时，天下尝大乱矣。在位贪毒祸败，皆非其人，及文王之起，而天下之才尝少矣。当是时，文王能陶冶天下之士，而使之皆有士君子之才，然后随其才之所有而官使之。诗曰：「岂弟君子，遐不作人」。此之谓也。及其成也，微贱兔置之人，犹莫不好德，兔置之诗是也。又况于在位之人乎？夫文王惟能如此，故以征则服，以守则治。诗曰：「奉璋峨峨，髦士攸宜。」又曰：「周王于迈，六师及之。」文言王所用，文武各得其才，而无废事也。及至夷、厉之乱，天下之才，又尝少矣。至宣王之起，所与图天下之事者，仲山甫而已。故诗人叹之曰：「德輶如毛，维仲山甫举之，爱莫助之。」盖闵人才之少，而山甫之无助也。宣王能用仲山甫，推其类以新美天下之士，而后人才复众。于是内修政事，外讨不庭，而复有文、武之境土。故诗人美之曰：「薄言采芑，于彼新田，于此葘亩。」言宣王能新美天下之士，使之有可用之才，如农夫新美其田，而使之有可采之芑也。由此观之，人之才，未尝不自人主陶冶而成之者也。</p><p>　　所谓陶冶而成之者何也？亦教之、养之、取之、任之有其道而已。</p><p>　　所谓教之之道何也？古者天子诸侯，自国至于乡党皆有学，博置教道之官而严其选。朝廷礼乐、刑政之事，皆在于学，学士所观而习者，皆先王之法言德行治天下之意，其材亦可以为天下国家之用。苟不可以为天下国家之用，则不教也。苟可以为天下国家之用者，则无法在于学。此教之之道也。</p><p>　　所谓养之之道何也？饶之以财，约之以礼，裁之以法也。何谓饶之以财？人之情，不足于财，则贪鄙苟得，无所不至。先王知其如此，故其制禄，自庶人之在官者，其禄已足以代其耕矣。由此等而上之，每有加焉，使其足以养廉耻，而离于贪鄙之行。犹以为未也，又推其禄以及其子孙，谓之世禄。使其生也，既于父子、兄弟、妻子之养，婚姻、朋友之接，皆无憾矣；其死也，又于子孙无不足之忧焉。何谓约之以礼？人情足于财而无礼以节之，则又放僻邪侈，无所不至。先王知其如此，故为之制度。婚丧、祭养、燕享之事，服食、器用之物，皆以命数为之节，而齐之以律度量衡之法。其命可以为之，而财不足以具，则弗具也；其财可以具，而命不得为之者，不使有铢两分寸之加焉。何谓裁之以法？先王于天下之士，教之以道艺矣，不帅教则待之以屏弃远方终身不齿之法。约之以礼矣，不循礼则待之以流、杀之法。《王制》曰：「变衣服者，其君流」，《酒诰》曰：「厥或诰曰『群饮，汝勿佚。尽拘执以归于周，予其杀！』」夫群饮、变衣服，小罪也；流、杀，大刑也。加小罪以大刑，先王所以忍而不疑者，以为不如是，不足以一天下之俗而成吾治。夫约之以礼，裁之以法，天下所以服从无抵冒者，又非独其禁严而治察之所能致也。盖亦以吾至诚恳恻之心，力行而为之倡。凡在左右通贵之人，皆顺上之欲而服行之，有一不帅者，法之加必自此始。夫上以至诚行之，而贵者知避上之所恶矣，则天下之不罚而止者众矣。故曰：此养之之道也。</p><p>　　所谓取之之道者，何也？先王之取人也，必于乡党，必于痒序，使众人推其所谓贤能，书之以告于上而察之。诚贤能也，然后随其德之大小、才之高下而官使之。所谓察之者，非专用耳目之聪明，而私听于一人之口也。欲审知其德，问以行；欲审知其才，问以言。得其言行，则试之以事。所谓察之者，，试之以事是也。虽尧之用舜，亦不过如此而已，又况其下乎？若夫九州之大，四海之远，万官亿丑之贱，所须士大夫之才则众矣，有天下者，又不可以一二自察之也，又不可以偏属于一人，而使之于一日二日之间考试其行能而进退之也。盖吾已能察其才行之大者，以为大官矣，因使之取其类以持久试之，而考其能者以告于上，而后以爵命、禄秩予之而已。此取之之道也。</p><p>　　所谓任之之道者，何也？人之才德，高下厚薄不同，其所任有宜有不宜。先王知其如此，故知农者以为后稷，知工者以为共工。其德厚而才高者以为之长。德薄而才下者以为之佐属。又以久于其职，则上狃习而知其事，下服驯而安其教，贤者则其功可以至于成，不肖者则其罪可以至于着，故久其任而待之以考绩之法。夫如此，故智能才力之士，则得尽其智以赴功，而不患其事之不终，其功之不就也。偷惰苟且之人，虽欲取容于一时，面顾戮辱在其后，安敢不勉乎！若夫无能之人，固知辞避而去矣。居职任事之日久，不胜任之罪，不可以幸而免故也。彼且不敢冒而知辞避矣，尚何有比周、谗谄、争进之人乎？取之既已详，使之既已当，处之既已久，至其任之也又专焉，而不一二以法束缚之，而使之得行其意，尧、舜之所以理百官而熙众工者，以此而已。书曰：「三载考绩，三考，黜陟幽明。」此之谓也。然尧、舜之时，其所黜者则闻之矣，盖四凶是也。其所陟者，则皋陶、稷、契皆终身一官而不徙。盖其所谓陟者，特加之爵命、禄赐而已耳。此任之之道也。</p><p>　　夫教之、养之、取之、任之之道如此，而当时人君，又能与其大臣，悉其耳目心力，至诚恻怛，思念而行之，此其人臣之所以无疑，而于天下国家之事，无所欲为而不得也。</p><p>　　方今州县虽有学，取墙壁具而已，非有教导之官，长育人才之事也。唯太学有教导之官，而亦未尝严其选。朝廷礼乐刑政之事，未尝在于学。学者亦漠然自以礼乐刑政为有司之事，而非</p><p>　　己所当知也。学者之所教，讲说章句而已。讲说章句，固非古者教人之道也。而近岁乃始教之以课试之文章。夫课试之文章，非博诵强学穷日之力则不能。及其能工也，大则不足以用天下国家，小则不足以为天下国家之用。故虽白首于庠序，穷日之力以帅上之教，及使之从政，则茫然不知其方者，皆是也。盖今之教者，非特不能成人之才而已，又从而困苦毁坏之，使不得成才者，何也？夫人之才，成于专而毁于杂。故先王之处民才，处工于官府，处农于畎亩，处商贾于肆，而处士于庠序，使各专其业而不见异物，惧异物之足以害其业也。所谓士者，又非特使之不得见异物而已，一示之以先王之道，而百家诸子之异说，皆屏之而莫敢习者焉。今士之所宜学者，天下国家之用也。今悉使置之不教，而教之以课试之文章，使其耗精疲神，穷日之力以从事于此。及其任之以官也，则又悉使置之，而责之以天下国家之事。夫古之人，以朝夕专其业于天下国家之事，而犹才有能有不能，今乃移其精神，夺其日力，以朝夕从事于无补之学，及其任之以事，然后卒然责之以为天下国家之用，宜其才之足以有为者少矣。臣故曰：非特不能成人之才，又从而困苦毁坏之，使不得成才也。又有什害者，先王之时，士之所学者，文武之道也。士之才，有可以为公卿大夫，有可以为士。其才之大小、宜不宜则有矣，至于武事，则随其才之大小，未有不学者也。故其大者，居则为六官之卿，出则为六军之将也；其次则比、闾、族、党之师，亦皆卒、两、师、旅之帅也。故边疆、宿卫，皆得士大夫为之，而小人不得奸其任。今之学者，以为文武异事，吾知治文事而已，至于边疆、宿卫之任，则推而属之于卒伍，往往天下奸悍无赖之人。苟其才行足以自托于乡里者，未有肯去亲戚而从召募者也。边疆、宿卫，此乃天下之重任，而人主之所当慎重者也。故古者教士，以射、御为急，其他伎能，则视其人才之所宜，而后教之，其才之所不能，则不强也。至于射，则为男子之事。苟人之生，有疾则已，苟无疾，未有去射而不学者也。在庠序之间，固常从事于射也。有宾客之事则以射，有祭祀之事则以射，别士之行同能偶则以射，于礼乐之事，未尝不寓以射，而 射亦未尝不在于礼乐、祭祀之间也。易曰：「弧矢之利，以威天下。」先王岂以射为可以习揖让之仪而已乎？固以为射者武事之尤大，而威天下、守国家之具也。居则以是习礼乐，出则以是从战伐。士既朝夕从事于此而能者众，则边疆、宿卫之任，皆可以择而取也。夫士尝学先王之道，其行义尝见推于乡党矣，然后因其才而托之以边疆、宿卫之士，此古之人君，所以推干戈以属之人，而无内外之虞也。今乃以夫天下之重任，人主所当至慎之选，推而属之奸悍无赖，才行不足自托于乡里之人，此方今所以諰諰然常抱边疆之忧，而虞宿卫之不足恃以为安也。今孰不知边疆、宿卫之士不足恃以为安哉？顾以为天下学士以执兵为耻，而亦未有能骑射行阵之事者，则非召募之卒伍，孰能任其事者乎？夫不严其教，高其选，则士之以执兵为耻，而未尝有能骑射行阵之事，固其理也。凡此皆教之非其道也。</p><p>　　方今制禄，大抵皆薄。自非朝廷侍从之列，食口稍众，未有不兼农商之利而能充其养者也。其下州县之吏，一月所得，多者钱八九千，少者四五千，以守选、待除、守阙通之，盖六七年而后得三年之禄，计一月所得，乃实不能四五千，少者乃实不能及三四千而已。虽厮养之给，亦窘于此矣，而其养生、丧死、婚姻、葬送之事，皆当出于此。夫出中人之上者，虽穷而失为君子；出中人以下者，虽泰而不失为小人。唯中人不然，穷则为小人，泰则为君子。计天下之士，出中人之上下者，千百而无十一，穷而为小人，泰而为君子者，则天下皆是也。先王以为众不可以力胜也，故制行不以己，而以中人为制，所以因其欲而利道之，以为中人之所能守，则其志可以行乎天下，而推之后世。以今之制禄，而欲士之无毁廉耻，盖中人之所不能也。故今官大者，往往交赂遗、营赀产，以负贪污之毁；官小者，贩鬻、乞丐、无所不为。夫士已尝毁廉耻以负累于世矣，则其偷堕取容之意起，而矜奋自强之小息，则职业安得而不弛，治道何从而兴乎？又况委法受赂，侵牟百姓者，往往而是也。此所谓不能饶之以财也。</p><p>　　婚丧、奉养、服食、器用之物，皆无制度以为之节，而天下以奢为荣，以俭为耻。苟其财之可以具，则无所为而不得，有司既不禁，而人又以此为荣。苟其财不足，而不能自称于流俗，则其婚丧之际，往往得罪于族人婚姻，而人以为耻矣。故富者贪而不知止，贫者则强勉其不足以追之。此士之所以重困，而廉耻之心毁也。凡此所谓不能约之以礼也。</p><p>　　方今陛下躬行俭约，以率天下，此左右通贵之臣所亲见。然而其闺门之内，奢靡无节，犯上之所恶，以伤天下之教者，有已甚者矣。未闻朝廷有所放绌，以示天下。昔周之人，拘群饮而被之以杀刑者，以为酒之末流生害，有至于死者众矣，故重禁其祸之所自生。重禁祸之所自生，故其施刑极省，而人之抵于祸败者少矣。今朝廷之法所尤重者，独贪吏耳。重禁贪吏，而轻奢靡之法，此所谓禁其末而弛其本。然而世之识者，以为方今官冗，而县官财用已不足以供之，其亦蔽于理矣。今之入官诚冗矣，然而前世置员盖其少，而赋禄又如此之薄，则财用之所不足，盖亦有说矣。吏禄岂足计哉？臣于财利，固未尝学，然窃观前世治财之大略矣。盖因天下之力，以生天下之财，取天下之财，以供天下之费。自古治世，未尝以不足为天下之公患也。患在治财无其道耳。今天下不见兵革之具，而元元安土乐业，人致其力，以生天下之财，然而公私尝以困穷为患者，殆亦理财未得其道，而有司不能度世之宜而通其变耳。诚能理财以其道，而通其变，臣虽愚，固知增吏禄不足以伤经费也。方今法严令具，所以罗天下之士，可主谓密矣。然而亦尝教之以道艺，而有不帅教之刑以待之乎？亦尝约之以制度，而有不循理之刑以待之乎？亦尝任之以职事，而有不任事之刑以待之乎？夫不先教之以道艺，诚不可以诛其不帅教；不先约之以制度，诚不可以诛其不循理；不先任之以职事，诚不可以诛其不任事。此三者，先王之法所先急也，今皆不可得诛，而薄物细故，非害治之急者，为之法禁，月异而岁不同，为束者至于不可胜记，又况能一二避之而无犯者乎？此法令所以滋而不行，小人有幸而免者，君子有不幸而及者焉。此所谓不能裁之以刑也。凡此皆治之非其道也。</p><p>　　方今取士，强记博诵而略通于文辞，谓之茂才异等、贤良方正。茂才异等、贤良方正者，公卿之选也。记不必强，诵不必博，略通于文辞，而又尝学诗赋，则谓之进士。进士之高者，亦公卿之选也。夫此二科所得之技能，不足以为公卿，不待论而后可知。而世之议者，乃以为吾常以此取天下之士，而才之可以为公卿者，常出于此，不必法古之取人然后得士也。其亦蔽于理矣。先王之时，尽所以取人之道，犹惧贤者之难进，而不肖者之杂于其间也。今悉废先王所以取士之道，而驱天下之才士，悉使为贤良、进士，则士之才可以为公卿者，固宜为贤良、进士，而贤良、进士亦固宜有时而得才之可以为公卿者也。然而不肖者，苟能雕虫篆刻之学，以此进至乎公卿，才之可以为公卿者，困于无补之学，而以此绌死于岩野，盖十八九矣。夫古之人有天下者，其所慎择者，公卿而已。公卿既得其人，因使推其类以聚于朝迁，则百司庶府，无不得其人也。今使不肖之人，幸而至乎公卿，因得推其类聚之朝廷，此朝廷所以多不肖之人，而虽有贤智，往往困于无助，不得行其意也。且公卿之不肖，既推其类以聚于朝廷，朝廷之不肖，又推其类以备四方之任使；四方之任使者，又各推其不肖以布于州郡。则虽有同罪举官之科，岂足恃哉？适足以为不肖者之资而已。其次九经、五经、学究、明法之科，朝廷固已尝患其无用于世，而稍责之以大义矣。然大义之所得，未有以贤于故也。今朝廷又开明经之选，以进经术之士。然明经之所取，亦记诵而略通于文辞者，则得之矣。彼通先王之意，而可以施于天下国家之用者，顾未必得与于此选也。其次则恩泽子弟，庠序不教之以道艺，官司不考问其才能，父兄不保任其行义，而朝廷辄以官予之，而任之以事。武王数纣之罪，则曰：「官人以世。」夫官人以世，而不计其才行，此乃纣之所以乱亡之道，而治世之所无也。又其次曰流外。朝廷固已挤之于廉耻之外，而限其进之路矣，顾属之以州县之事，使之临士民之上。岂所谓以贤治不肖者乎？以臣使事之所及，一路数千里之间，州县之吏，出于流外者，往往而有，可属任以事者，殆无二三，而当防闲其奸者，皆是也。盖古者有贤不肖之分，而无流品之别。故孔子之圣，而尝为季氏吏，盖虽为吏，而亦不害其为公卿。及后世有流品之别，则凡在流外者，其所成立，固尝自置于廉耻之外，而无高人之意矣。夫以近世风俗之流靡，自虽士大夫之才，势足以进取，而朝廷尝奖之以礼义者，晚节末路，往往怵而为奸，况又其素所成立，无高人之意，而朝廷固已挤之于廉耻之外，限其进取者乎？其临人亲职，放僻邪侈，固其理也。至于边疆、宿卫之选，则臣固已言其失矣。凡此皆取之非其道也。</p><p>　　方今取之既不以其道，至于任人，又不问其德之所宜，而问其出身之后先，不论其才之称否，而论其历任之多少。以文学进者，且使之治财。已使之治财矣，又转而使之典狱。已使之典狱矣，又转而使之治礼。是则一人之身，而责之以百官之所能备，宜其人才之难为也。夫责人以其所难为，则人之能为者少矣。人之能为者少，则相率而不为。故使之典礼，未尝以不知礼为忧，以今之典礼者未尝学礼故也。使之典狱，未尝以不知狱为耻，以今之典狱者，未尝学狱故也。天下之人，亦已渐渍于失教，被服于成俗，见朝廷有所任使，非其资序，则相议而讪之，至于任使之不当其才，未尝有非之者也。且在位者数徙，则不得久于其官，故上不能狃习而知其事，下不肯服驯而安其教，贤者则其功不可以及于成，不肖者则其罪不可以至于着。若夫迎新将故之劳，缘绝簿书之弊，固其害之小者，不足悉数也。设官大抵皆当久于其任，而至于所部者远，所任者重，则尤宜久于其官，而后可以责其有为。而方今尤不得久于其官，往往数日辄迁之矣。</p><p>　　取之既已不祥，使之既已不当，处之既已不久，至于任之则又不专，而又一二以法束缚之，使不得行其意，臣固知当今在位多非其人，稍假借之权，而不一二以法束缚之，则放恣而无不为。虽然，在位非其人，而恃法以为治，自古及今，未有能治者也。即使在位皆得其人矣，而一二以法束缚之，不使之得行其意，亦自古及今，未有能治者也。夫取之既已不详，使之既已不当，处之既已不久，任之又不专，而一二以法束缚之，故虽贤者在位，能者在职，与不肖而无能者，殆无以异。夫如此，故朝廷明知其贤能足以任事，苟非其资序，则不以任事而辄进之，虽进之，士犹不服也。明知其无能而不肖，苟非有罪，为在事者所劾，不敢以其不胜任而辄退之，虽退之，士犹不服也。彼诚不肖而无能，然而士不服者何也？以所谓贤能者任其事，与不肖而无能者，亦无以异故也。臣前以谓不能任人以职事，而无不任事之刑以待之者，盖谓此也。</p><p>　　夫教之、养之、取之、任之，有一非其道，则足以败乱天下之人才，又况兼此四者而有之？则在位不才、苟简、贪鄙之人，至于不可胜数，而草野闾巷之间，亦少可任之才，固不足怪。诗曰：「国虽靡止，或圣或否。民虽靡膴，或哲或谋，或肃或艾。如彼泉流，无沦胥以败。」此之谓也。</p><p>　　夫在位之人才不足矣，而闾巷草野之间，亦少可用之才，则岂特行先王之政而不得也，社稷之托，封疆之守，陛下其能久以天幸为常，而无一旦之忧乎？盖汉之张角，三十六万同日而起，而所在郡国，莫能发其谋；唐之黄巢，横行天下，而所至将吏，无敢与之抗者。汉、唐之所以亡，祸自此始。唐既亡矣，陵夷以至五代，而武夫用事，贤者伏匿消沮而不见，在位无复有知君臣之义、上下之礼者也。当是之时，变置社稷，盖甚于弈棋之易，而元元肝脑涂地，幸而不转死于沟壑者无几耳！夫人才不足，患盖如此，而方今公卿大夫，莫肯为陛下长虑后顾，为宗庙万世计，臣切惑之。昔晋武帝趣过目前，而不为子孙长远之谋，当时在位，亦皆偷合苟容，而风俗荡然，弃礼义，捐法制，上下同失，莫以为非，有识固知其将必乱矣。而其后果海内大扰，中国列于夷狄者，二百余年。伏惟三庙祖宗神灵所以付属陛下，固将为万世血食，而大庇元元于无穷也。臣愿陛下鉴汉、唐、五代之所以乱亡，惩晋武苟且因循之祸，明诏大臣，思所以陶成天下之才，虑之以谋，计之以数，为之以渐，期为合于当世之变，而无负于先王之意，则天下之人才不胜用矣。人才不胜用，则陛下何求而不得，何欲而不成哉？夫虑之以谋，计之以数，为之以渐，则成天下之才甚易也。</p><p>　　臣始读孟子，见孟子言王政之易行，心则以为诚然。及见与慎子论齐、鲁之地，以为先王之制国，大抵不过百里者，以为今有王者起，则凡诸侯之地，或千里，或五百里，皆将损之至于数十百里而后止。于是疑孟子虽贤，其仁智足以一天下，亦安能毋劫之以兵革，而使数百千里之强国，一旦肯损其地之十八九，而比于先王之诸侯？至其后，观汉武帝用主父偃之策，令诸侯王地悉得推恩分其子弟，而汉亲临定其号名，辄别属汉。于是诸侯王之子弟，各有分土，而势强地大者，卒以分析弱小。然后知虑之以谋，计之以数，为之以渐，则大者固可使小，强者固可使弱，而不至乎倾骇变乱败伤之衅。孟子之言不为过。又况今欲改易更革，其势非若孟子所为之难也。臣故曰：虑之以谋，计之以数，为之以渐，则其为什易也。</p><p>　　然先王之为天下，不患人之不为，而患人之不能，不患人之不能，而患己之不勉。何谓不患人之不为，而患人之不能？人之情所愿得者，善行、美名、尊爵、厚利也，而先王能操之以临天下之士。天下之士，有能遵之以治者，则悉以其所愿得者以与之。士不能则已矣，苟能，则孰肯舍其所愿得，而不自勉以为才？故曰：不患人之不为，患人之不能。何谓不患人之不能，而患己之不勉？先王之法，所以待人者尽矣，自非下愚不可移之才，未有不能赴者也。然而不谋之以至诚恻怛之心，亦未有能力行而应之者。故曰：不患人之不能，而患己之不勉。陛下诚有意乎成天下之才，则臣愿陛下勉之而已。</p><p>　　臣又观朝廷异时欲有所施为变革，其始计利害未尝熟也，顾一有流俗侥幸之人不悦而非之，则遂止而不敢为。夫法度立，则人无独蒙其幸者，故先王之政，虽足以利天下，而当其承弊坏之后，侥幸之时，其创法立制，未尝不艰难也。以其创法立制，而天下侥幸之人亦顺悦以趋之，无有龃龉，则先王之法，至今存而不废矣。惟其创法立制之艰难，而侥幸之人不肯顺悦而趋之，故古之人欲有所为，未尝不先之以征诛，而后得其意。诗曰：「是伐是肆，是绝是忽，四方以无拂。」此言文王先征诛而后得意于天下也。夫先王欲立法度，以变衰坏之俗而成人之才，虽有征诛之难，犹忍而为之，以为不若是，不可以有为也。及至孔子，以匹夫游诸侯，所至则使其君臣捐所习，逆所顺，强所劣，憧憧如也，卒困于排逐。然孔子亦终不为之变，以为不如是，不可以有为。此其所守，盖与文王同意。夫在上之圣人，莫如文王，在下之圣人，莫如孔子，而欲有所施为变革，则其事盖如此矣。今有天下之势，居先王之位，创立法制，非有征诛之难也。虽有侥幸之人不悦而非之，固不胜天下顺悦之人众也。然而一有流俗侥幸不悦之言，则遂止而不敢为者，惑也。陛下诚有意乎成天下之才，则臣又愿断之而已。</p><p>　　夫虑之以谋，计之以数，为之以渐，而又勉之以成，断之以果，然而犹不能成天下之才，则以臣所闻，盖未有也。</p><p>　　然臣之所称，流俗之所不讲，而今之议者以谓迂阔而熟烂者也。窃观近世士大夫所欲悉心力耳目以补助朝廷者有矣。彼其意，非一切利害，则以为当世所不能行。士大夫既以此希世，而朝廷所取于天下之士，亦不过如此。至于大伦大法，礼义之际，先王之所力学而守者，盖不及也。一有及此，则群聚而笑之，以为迂阔。今朝廷悉心于一切之利害，有司法令于刀笔之间，非一日也。然其效可观矣。则夫所谓迂阔而熟烂者，惟陛下亦可以少留神而察之矣。昔唐太宗贞观之初，人人异论，如封德彝之徒，皆以为非杂用秦、汉之政，不足以为天下。能思先王之事，开太宗者，魏郑公一人尔。其所施设，虽未能尽当先王之意，抑其大略，可谓合矣。故能以数年之间，而天下几致刑措，中国安宁，夷蛮顺服，自三王以来，未有如此盛时也。唐太宗之初，天下之俗，犹今之世也，魏郑公之言，固当时所谓迂阔而熟烂者也，然其效如此。贾谊曰：「今或言德教之不如法令，胡不引商、周、秦、汉以观之？」然则唐太宗事亦足以观矣。</p><p>　　臣幸以职事归报陛下，不自知其驽下无以称职，而敢及国家之大体者，诚以臣蒙陛下任使，而当归报。窃谓在位之人才不足，而无以称朝廷任使之意，而朝廷所以任使天下之士者，或非其理，而士不得尽其才，此亦臣使事之所及，而陛下之所宜先闻者也。释此一言，而毛举利害之一二，以污陛下之聪明，而终无补于世，则非臣所以事陛下惓惓之义也。伏惟陛下详思而择其中，天下幸甚！</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;li&gt;百度百科&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Literature" scheme="https://zhang21.github.io/categories/Literature/"/>
    
    
      <category term="古文" scheme="https://zhang21.github.io/tags/%E5%8F%A4%E6%96%87/"/>
    
      <category term="政论文" scheme="https://zhang21.github.io/tags/%E6%94%BF%E8%AE%BA%E6%96%87/"/>
    
      <category term="王安石" scheme="https://zhang21.github.io/tags/%E7%8E%8B%E5%AE%89%E7%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>治安疏</title>
    <link href="https://zhang21.github.io/2019/02/10/%E6%B2%BB%E5%AE%89%E7%96%8F/"/>
    <id>https://zhang21.github.io/2019/02/10/治安疏/</id>
    <published>2019-02-10T12:51:11.000Z</published>
    <updated>2019-02-11T01:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>维基百科</li><li>百度百科</li></ul><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>　　海瑞（1514－1587），字汝贤，号刚峰，海南海口人，明代著名的政治家，以刚直不阿，清正廉明著称于世，被世人誉为“海青天”。</p><p>　　《治安疏》是明代名臣海瑞写给明世宗朱厚熜的一篇奏疏。在这篇著名的奏疏中，海瑞大胆直言当时官场的弊端和统治阶级的罪责，同时劝谏统治者改正过失，实行改革，达到“天下大治”的目的。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p>　　户部云南清吏司主事臣海瑞谨奏：为直言天下第一事，以正君道、明臣职，求万世治安事。</p><p>　　君者，天下臣民万物之主也。惟其为天下臣民万物之主，责任至重，凡民生利瘼一有所不闻，将一有所不得知而行，其任为不称。是故养君之道，宜无不备，而以其责寄臣工，使尽言焉。臣工尽言而君道斯称矣。昔之务为容悦、谀顺曲从，致使实祸蔽塞，主不上闻焉，无足言矣。过为计者，则又曰：“君子危明主，忧治世。” 夫世则治矣，以不治忧之；主则明矣，以不明危之。毋乃使之反求眩瞀，失趋舍矣乎？非通论也。</p><p>　　臣受国恩厚矣，请执有犯无隐之义。美曰美，不一毫虚美; 过曰过，不一毫讳过。不容悦，不过计，披肝胆为陛下言之。汉贾谊陈政事于文帝曰：“进言者皆曰天下已安已治矣，臣独以为未也。曰安且治者，非愚则谀。”夫文帝、汉贤君也，贾谊非苛责备也。文帝性仁类柔，慈恕恭俭，虽有近民之美；优游退逊，尚多怠废之政。不究其弊所不免，概以安且治当之，愚也；不究其才所不能，概以致安治颂之，谀也。陛下自视于汉文帝何如？陛下天质英断，睿识绝人，可为尧、舜，可为禹、汤、文、武，下之如汉宣帝之励精，光武之大度，唐太宗之英武无敌，宪宗之专志平僭乱，宋仁宗之仁恕，举一节可取者，陛下优为之。即位初年，刬除积弊，焕然与天下更始。举其略，如箴敬一以养心，定冠履以辨分，除圣贤土木之像，夺宦官内外之权，元世祖毁不与祀，祀孔子推及所生，天下忻忻然以大有作为仰之。识者谓辅相得人，太平指日可期也。非虚语也，高汉文帝远甚。然文帝能充其仁顺之性，节用爱人，吕祖谦称其能尽人之才力，诚是也。一时天下虽未可尽以治安予之，而贯朽粟陈，民少康阜，三代下称贤君焉。陛下则锐精未久，妄念牵之而去矣，反刚明而错用之，谓遥兴可得而一意修玄。富有四海，不曰民之膏脂在是也，而侈兴土木。二十余年不视朝，纲纪弛矣；数行推广事例，名爵滥矣。二王不相见，人以为薄于父子；以猜疑诽谤戮辱臣下，人以为薄于君臣，乐西苑而不返宫，人以为薄于夫妇。天下吏贪将弱，民不聊生，水旱靡时，盗贼滋炽，自陛下登极初年，亦有之而未什也。今赋役增常，万方则效，陛下破产礼佛日甚，室如悬磬，十余年来极矣。天下因即陛下改元之号，而臆之曰：“嘉靖者，言家家皆净而无财用也。”迩者，严嵩罢黜，世蕃极刑，差快人意，一时称清时焉。然严嵩罢相之后，犹之严嵩未相之先而已，非大清明世界也，不及汉文远甚。天下之人不直陛下久矣！内外臣工之所知也。知之不可谓愚，诗云：“衮职有阙，惟仲山甫补之。”今日所赖以弼棐匡救，格非而归之正，诸臣责也，岂以圣人而绝无过举哉？古昔设官，亮采惠畴足矣，不必责之以谏。保氏掌谏王恶，不必设也。木绳金砺，圣贤不必言之也。今乃建醮修斋，相率进香，天桃天药，相率表贺。建 宫筑室，工部极力经营；取香觅宝，户部差求四出。陛下误举，诸臣误顺，无一人为陛下一正言焉。都俞吁咈之风，陈善闭邪之义，邈无闻矣，谀之什也。然愧心馁气，退有后言，以从陛下；昧没本心，以歌颂陛下；欺君之罪何如！夫天下者，陛下之家也，人未有不顾其家者。内外臣工，其官守，其言责，皆所以奠陛下之家而磐石之也。一意玄修，是陛下心之惑也；过于苛断，是陛下情之偏也。而谓陛下不顾其家，人情乎？诸臣顾身念重，得一官多以欺败、脏败、不事事败，有不足以当陛下之心者。其不然者，君心臣心偶不相值也，遂谓陛下为贱薄臣工。诸臣正心之学微，所言或不免已私，或失详审，诚如胡寅挠乱政事之说，有不足以当陛下之心者。其不然者，君意臣言偶不相值也。遂谓陛下为是已拒谏。执陛下一二事不当之形迹，臆陛下千百事之尽然，陷陛下误终不复，诸臣欺君之罪大矣。《记》曰：“上人疑则百姓惑，下难知则君长劳。”今日之谓也。为身家心与惧心合，臣职不明，臣一二事形迹说既为诸臣解之矣。求长生心与惑心合，有辞于臣，君道不正，臣请再为陛下开之。陛下之误多矣，大端在修醮，修醮所以求长生也。自古圣贤止说修身立命，止说顺受其正，盖天地赋予于人而为性命者，此尽之矣。尧、舜、禹、汤、文、武之君，圣之盛也，未能久世不终。下之亦未见方外士汉、唐、宋存至今日，使陛下得以访其术者。陶仲文，陛下以师呼之，仲文则既死矣。仲文不能长生，而陛下独何求之？至谓天赐仙桃药丸，怪妄尤甚。昔伏羲氏王天下，龙马出河，因则其文以画八卦；禹治水时，神龟负文而列于背，因而第之以成九畴。《河图》、《洛书》，实有此瑞物。泄此万古不传之秘，天不爱道而显之圣人，借圣人以开示天下，犹之日月星辰之布列而历数成焉，非虚妄事也。宋真宗获天书于干佑山，孙奭进曰：“天何言哉！岂有书也？”桃必采而得，药必工捣合而成者也。无因而至，桃、药有足行耶？天赐之者，有手执而付之耶？陛下玄修多年矣，一无所得。至今日左右奸人，逆揣陛下悬思妄念，区区桃、药导之长生，理之所无，而玄修之无益可知矣。陛下又将谓悬刑赏以督率臣下，分理有人，天下无可不治，而玄修无害矣乎？夫人幼而学，无致君泽民异事之学；壮而行，亦无致君泽民殊用之心。太甲曰：“有言逆于汝心，必求诸道；有言逊于汝志，必求诸非道。”言顺者之未必为道也。即近事观，严嵩有一不顺陛下者乎？昔为贪窃，今为逆本。梁材守官守道，陛下以为逆者也。历任有声，官户部者，至今首称之。虽近日严嵩抄没，百官有惕心焉。无用于积贿求迁，稍自洗涤。然严嵩罢相之后，犹严嵩未相之先而已。诸臣为严嵩之顺，不为梁材之执。今甚者贪求，未甚者挨日。见称于人者，亦廊庙山林，交战热中，鹘突依违，苟举故事。洁已格物，任天下重，使社稷灵长终必赖之者，未见其人焉。得非有所牵掣其心，未能纯然精白使然乎？陛下欲诸臣惟予行而莫逆也，而责之效忠，付之以翼为明听也，又欲其顺吾玄修土木之误，是股肱耳目，不为腹心卫也，而自为视听持行之用。有臣如仪衍焉，可以成得志与民由之之业，无是理也。陛下诚知玄修无益，臣之改行，民之效尤，天下之不安不治由之，翻然悔悟，日视正朝，与宰辅、九卿、侍从、言官讲求天下利害，洗数十年君道之误，置其身于尧、舜、禹、汤、文、武之上；使其臣亦得洗数十年阿君之耻，置身与皋、夔、伊、傅相后先，明良喜起，都俞吁咈。内之宦官宫妾，外之光禄寺厨役、锦衣卫恩荫、诸衙门带俸，举凡无事而官多矣。上之内仓内库，下之户工部光禄寺诸厂藏段绢、粮料、珠宝、器用、木材诸物，多而积于无用，用之非所宜用亦多矣，诸臣必有为陛下言者。诸臣言之，陛下行之，此则在陛下一节省间而已。京师之一金，田野之百金也。一节省而国有余用，民有盖藏，不知其几也，而陛下何不为之？官有职掌，先年职守之正、职守之全，而未之行；今日职守之废、职守之苟且因循、不认真、不尽法，而自以为是。敦本行而端士习，止上纳以清仕途，久任吏将以责成功，练选军士以免召募，驱缁黄游食使归四民，责府州县兼举富教，使成礼俗。复屯盐本色以裕边储，均田赋丁差以苏困敝，举天下官之侵渔、将之怯懦、吏之为奸，刑之无少姑息焉。必世之仁，博厚高明悠远之业，诸臣必有为陛下言者。诸臣言之，陛下行之，此则在陛下一振作间而已。一振作而百 废具举，百弊刬绝，唐虞三代之治，粲然复兴矣。而陛下何不为之？节省之，振作之，又非有所劳于陛下也。九卿总其纲，百职分其绪，抚按科道纠率肃清于其间，陛下持大纲、稽治要而责成焉。劳于求贤，逸于任用，如天运于上而四时六气各得其序，恭已无为之道也。天地万物为一体，固有之性也。民物熙浃，薰为太和，而陛下性分中有真乐矣。可以赞天地之化育，则可以与天地参。道与天通，命由我立，而陛下性分中有真寿矣。此理之所有，可旋至而立有效者也。若夫服食不终之药，遥兴轻举，理所无者也。理之所无而切切然散爵禄、竦精神，玄修求之，悬思凿想，系风捕影，终其身如斯而已矣。求之其可得乎！</p><p>　　君道不下在、臣职不明，此天下第一事也。于此不言，更复何言？大臣持禄而外为谀，小臣畏罪而面为顺，陛下诚有不得知而改之行之者，臣每恨焉。是以昧死竭惓惓为陛下一言之。一反情易向之间，而天下之治与不治，民物之安与不安，于焉决焉。伏惟陛下留神，宗社幸甚，天下幸甚。臣不胜战栗恐惧之至，为此具本亲赍，谨具奏闻。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p>　　户部云南清吏司主事海瑞在这里上奏：为了匡正君道，明确臣下的职责，求得万世治安，我要直陈天下第一事。</p><p>　　国君是天下臣民万物的主人，正是因为是天下臣民万物之主，所以责任重大。如果民生措置失当，就是君主没有负起责任。所以臣子就应当尽量为君主服务，忠于职守，畅所欲言。臣子尽到了自己的责任，君主的责任也才算尽到了。以前那种专图讨好，曲意逢迎，不让君主听到实际情况的人，现在用不着说他们了。</p><p>　　危言耸听的人或许会说：君子总是想法多，即使遇到贤明的君主，政治清明的时代，也常常居安思危，忧虑重重，只怕反而让人思维混乱，搞不清方向。这种说法不符合现在的情况！</p><p>　　臣蒙受国恩，宁可直言得罪也不想说假话，好的就是好的，坏的就是坏的，一丝一毫都不敢隐瞒。我不为讨上面的欢心，也不计较得失，今天披沥肝胆，掏出真心，对陛下您说几句实话。</p><p>　　汉代名臣贾谊曾和文帝这样说：“下面进言的人总是说：天下已经大治，臣独以为还没有。那些说天下已安已治的人，不是愚昧无知就是阿谀逢迎。”文帝算是汉代的贤君了，贾谊也不是对文帝要求过高。汉文帝的品质作风是好的，他有爱民的美德，为人也慈和俭朴，从容谦逊，但缺点在于游于玄老，不专事于政务，有许多政事都被耽误了，没有办好。假使臣下看不到这些弊病，一味认为天下已安已治，这就是愚昧无知。假使臣下看不到文帝的才能毕竟有限，一味用已安已治的话来歌颂他，这就是阿谀奉承。<br>　　陛下自视和汉文帝比较起来怎么样呢？陛下天资英断，睿识绝人，具有成为尧、舜、禹、汤、文、武这样的君王的潜力，陛下象汉宣帝一样做事努力认真，象光武帝一样为人大度，象唐太宗一样英武无敌，象唐宪宗一样能够消平各地藩镇叛乱，陛下还有宋仁宗的仁恕之德，总之象这些可取的优点，无论哪一项，您都是具有的。您即位初年，铲除积弊，明白宣示，同全国老百姓一道革新政事。举其大概吧：您作过一篇《敬一箴》，提倡规戒；改定了一些冠服制度，下令废除孔子庙里的塑像，只用木主；削弱了宦官的内外之权；将元世祖从历代帝王庙所祭牌位中剔除；在孔子庙兼祭孔子的父母。那时候天下人都很期待，认为您一定大有作为。有见识的人都认为：只要有好的臣子帮助，不需多久，天下就可太平，您一定比汉文帝要强得多。然而文帝能发扬仁恕之性，节约恭俭，体恤爱民，宋朝的吕祖谦说他善于用人，能尽人之才力。一时天下虽说不上已经大治，但国库充盈，连串钱的绳子都朽烂了，百姓安乐，财物丰足。大家公认他是夏、商、周三代以后的一位贤君。</p><p>　　陛下您立志要有作为，可是没过多久，就被杂乱的念头导引到别的地方去了。您把自己的刚强英明用到错误的地方，以为人真的能够长生不老，而一味的玄修。陛下富有四海，却不念及那都是民之脂膏，常常大兴土木，大修宫殿庙宇。陛下二十余年不上朝处理政务，导致纲纪松懈败坏。朝廷卖官买官，援用这种章程越来越滥，美其名曰推广事例，导致豪强四起，名爵泛滥。您专门和方士在一起炼丹，不与自己的儿子们相见，人们都以为您缺少父子之情。您常以猜疑诽谤戮辱臣下，人们都以为缺少君臣之礼。您整天待在西苑不回宫，人们都以为缺少夫妇之情。天下官吏贪污成风，军队弱小，水灾旱灾无时不有，民不聊生，导致流民暴乱象火烧一样，越来越盛。自陛下登基以来，前几年就这样，但还不严重，但是如今赋税徭役越来越重，各级官吏都效法朝廷，盘剥百姓无度。陛下花很多钱崇奉道教，十余年来已经做到极致了。因此，陛下改元号之时，天下人都猜想：这意思就是说“嘉靖者言家家皆净而无财用也”。</p><p>　　近来，严嵩罢相，严世蕃被处以极刑，勉强可以令人满意，一时人称天下清明。然而严嵩罢相以后的政事，不过和他作宰相以前差不多，也并不见得清明多少。陛下比汉文帝差远了。天下之人对您不满已经很久了，这内外臣工都知道。《诗经》上说：“衰职有阙，惟仲山甫补之”，意思是说宣王不能完全尽职，仲山甫能从旁补救。今日以辅助、匡正来补救、纠正错误并使一切走入正轨，正是诸位臣下的职责所在。圣人也不能不犯错误，否则古代设官，只要他做官办事就够了，不必要求他们进言劝谏，也不必设谏官，更不必说木绳金砺这类的话了。陛下修宫殿，设坛祈祷，就让群臣竞相进献香物和仙桃仙药，叫臣子进表管贺。陛下要兴建宫室，工部就极力经营；陛下要取香觅宝，户部就派人到处索取。陛下举动有误，诸臣顺从得也没道理，竟没有一个人为陛下正言。那种公开讨论对错、贡献良言，防止邪恶的做法，长久没有听到了，献媚的风气太甚。然而人们不敢直言，内心却不能不惭愧，气也不壮了，当面不敢说，却在背后议论是非，人们表面上顺从陛下，却把真心藏起来，这样为陛下歌功颂德，是多么大的欺君之罪？</p><p>　　天下者，陛下之家也，哪有不顾自己家的人呢？内外臣工都有行政职务和进言的责任，这些都是能够奠定您的家业，使它象磐石一样的稳固的基础。一意玄修，是陛下的心被妄念迷惑。过分苛刻武断，也不是您生性如此。不能就这样便断定陛下不顾其家，不合乎人情。臣子们往往为了顾及自己的身家性命，为了保住自己的乌纱帽，欺诈、贪赃、旷废职务而导致犯罪，这些人不合您的心意，是很自然的。假如不是为了上述的原因也不合您的心意，那就是您的心与臣子的心偶然不相投合啊，但也有人疑心是您看轻臣子，侮辱臣子。另外有一种人，自己的心思不正，或是为了个人的利益，或是说得不够详明正确，就象胡寅扰乱政事的奏疏那样：这些人不合您的意旨，也是很自然的。如果都不是以上的情况，君意臣意还不相符合，那就要让人疑心是不是因为陛下自以为是，不愿接受劝谏的缘故。抓住一二件这样的事，就推测您向来如此，害得您一直被人误解。《礼记》上说：“君主多疑于上，百姓就无所适从；臣子不忠于下，君主就劳苦不堪了。”说的就是今天这种情况。</p><p>　　臣子保身家的私心和怕触怒君主的心相结合，因而模糊了自己的职责，我已经举出一二件事例替他们作过分析了。君主求长生的妄念和迷惑不明相结合，就使臣子们心怀不满；陛下有失为君之道，请允许我再加以分析。 陛下的失误很多，大部分是因为修醮。修醮是为了求长生不老。古来的圣贤只不过讲求涵养道德，保养生命，顺应自然法则。天地赋予人生命，不过如此罢了。尧、舜、禹、汤、文、武都是圣人，也没有谁能长生不死。他们之后，也没有见到所谓僧道术士之人从汉、唐、宋活到今天。传给您长生法术的陶仲文，您称他为师傅，可是他自己就已经死了。仲文尚不能长生不死，陛下为什么还要求长生？至于那所谓的仙桃药丸，怪妄尤甚。伏羲氏做了天下的王，有龙马出河，于是便依据龙马的花纹画了八卦。夏禹治水时，出现神龟，就把神龟背上罗列的各种纹路排列起来，成为有关天道人事的九种法则。这些 “神物”透露了万古不传的秘密。天将天道显之于圣人，借圣人来明示天下，就像日月星辰的排列，并不虚妄。但宋真宗赵恒为了粉饰太平，听从王钦若等人的话，伪造天书，声称从天而降，他的大臣孙奭就谏言道：“上天哪里会说什么？怎么还能写书？”仙桃是从树上采摘下来的，仙药由人工捣制而成。你说它们能有什么天意？能起什么作用？天赐之物，难道能让人手里拿着给您？陛下玄修多年，一无所得。到今日，左右奸人迎合陛下玄修妄念，以为区区桃药就能让人长生不老，世上哪有这样的道理？玄修之无益可知矣。</p><p>　　陛下您莫非认为只要抓住刑和赏的权柄，就不怕无人办事，天下就可以治好，修道便没有什么害处了吗？那些阿谀逢迎的臣子，年轻时候就没有学到“致君泽民” （把君主辅佐好，使百姓得到好处）的特别本领和修养，壮年做官也没有“致君泽民”的特殊抱负和愿望。〈尚书·太甲〉曰：“有言逆于汝志，必求诸道，有言逊于汝志，必求诸非道。意思是说：遇有不合自己意旨的话，要看看是否合于道理；遇有顺从自己意旨的话，要看看是否不合道理。顺从旨意的未必就是有道理的。从近些年来看：严嵩哪有一处不是顺着陛下您的意思？然而严党过去是贪权窃利的祸害，今天是忤逆乱政的根源。象梁材这样的人谨守职责，历来做官有声誉有操守，以正直不阿著称，却被陛下认为大逆不道。虽然从严嵩抄家以后，百官有所畏惧，知道不能再以贿赂谋求升迁，稍改以前的恶习。然而严嵩罢相之后的局面也和严嵩做丞相之前没什么两样。百官仍然只情愿学严嵩的顺从，不肯学梁材的正直不阿。现在坏人还是贪求无厌，一般人也只是得过且过，混混日子。即使是好人，也不过是在做官和退隐之间犹豫不决，含糊敷衍，奉行做事罢了。而那种洁身自爱、探研真理，对天下负有责任，能够肩负国运，维护长治久安的人，却一个也没有发现。不就是因为好人受到牵制，不能尽忠做事，才弄到今天这个地步吗？您既要人顺从圣意，又要人尽忠；既要人充当助手和耳目，又要人顺从您做那些修道和兴修宫殿庙宇的错误事情：这就象不用四肢耳目去保卫心腹，而由心腹自己去执行看、听、拿东西和走路的任务一样。照此下去，您即便有了象张仪和公孙衍那样能干的臣子，要想成就与百姓同享太平的事业，那也是办不到的。</p><p>　　如果您承认修道有害无益，那么臣子的转变，百姓的祸福，天下的安危都将由此而不同，所以您应当立即悔悟，每日上朝理政，与宰辅、九卿、侍从、言官一起言说天下利害，洗刷数十年君道之误，那样就能置身于尧、舜、禹、汤、文、武这样的明君之中，也使得臣下能够洗刷数十年谄媚君主之耻，让他们置身于皋陶、伊、傅这样的贤臣之列，君臣便可互相勉励、互相敬重。内廷中的宦官宫女，外廷中光禄寺厨房的仆役，锦衣卫中那些受惠于祖先恩荫的人，以及各个衙门里那些额外的冗员，无事可干而为官的人太多了。皇家的仓库里，户部、工部以及光禄寺等衙门里，缎、绢、粮料、珠宝、器物、木材等东西很多，堆积在那里也无用，用了也用的不是地方，白白浪费了很可惜。臣子们进谏，您采纳实行，对您说来只不过动一动节省的念头罢了。京师里的一块金子，到了田野百姓那里抵得上一百块金子用。您稍稍节省一点，国库便有余用，老百姓则有了储蓄，好处真不知有多少啊，而陛下为何不这样做呢？</p><p>　　今天官吏设置不全，办事因循苟且，敷衍塞责，不守法纪，却还自以为不错。应该督促遵守基本的道德来端正官员们的行为，停止用钱买官那一套来理清仕途；让文武官员安于其位，责成他们做出成绩来；平常就练选军士以免打仗了临时召募百姓；让那些吃白食的和尚道士回家，回到士、农、工、商的行业里；府州县地方官要生计和教化并重，树立好的礼俗规范；屯田、运盐应该恢复征收实物，来充实边防军队的储备；按地亩交粮，按人口应役，以便恢复老百姓的元气；检举天下官员的贪污勒索行为，让那些贪赃枉法的人心生怯懦，按照刑律处罚他们，毫不宽容。如此以来，便是仁政，几十年之后才能收效，与天地并存的伟大功业便可成就了。这样的事由诸臣提议，陛下执行，也就在陛下一振作间而已。一振作而诸废具举，百弊铲绝，象唐、虞三代那样光明灿烂的大治便可复兴矣，而陛下为什么不实行呢？</p><p>　　陛下只要稍事节省和振作就行了，又不是要您多么劳心劳神。九卿掌握大政方针，百官承担具体的职责，巡抚、巡按、六科给事中等纠举肃清，维护风气，陛下考核政纲的实施情况，督促他们做出成绩来。努力去找贤才，任用他们办事，自己就省力了。就像天运于上，四时六气各得其序，君主只要自己有德，感化臣民，不必亲自动手管理一切。天地万物为一体，自有它的道理。百姓安居乐业，形成一片祥和气氛，而陛下自然能够感到真正的快乐和价值。天地是化生万物的，人也有帮助天地化生的能力，可以与天地并列而为“三才”。道与天通，命运可以由我们自己掌握，而陛下自然能够享受真寿。这是真正的道理，转身就能做到，立刻就能见效。要是依旧去服食什么长生不死之药，巴望着能成仙升天，不是道理所在。那么做只能匆忙的散爵禄，让精神徒然的紧张，玄修求长生，是捕风捉影的空想，陛下一辈子求之，究竟得到没得到呢？</p><p>　　君道不正，臣职不明，是天下第一大事。于此不言，更复何言？大臣为保乌纱帽而阿谀奉承，小臣害怕获罪表面顺从，陛下有错误却不知道，不能改正不能执行，臣每想到这里便痛心疾首。所以今天便冒死竭忠，诚恳的向陛下进言。望陛下能够改变心思，转换方向，而天下之治与不治，民物之安与不安都取决于您，若陛下真能采纳，是我宗庙、社稷、国家的幸运，是天下黎民百姓的幸运！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;li&gt;百度百科&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Literature" scheme="https://zhang21.github.io/categories/Literature/"/>
    
    
      <category term="古文" scheme="https://zhang21.github.io/tags/%E5%8F%A4%E6%96%87/"/>
    
      <category term="政论文" scheme="https://zhang21.github.io/tags/%E6%94%BF%E8%AE%BA%E6%96%87/"/>
    
      <category term="海瑞" scheme="https://zhang21.github.io/tags/%E6%B5%B7%E7%91%9E/"/>
    
  </entry>
  
  <entry>
    <title>治安策</title>
    <link href="https://zhang21.github.io/2019/02/10/%E6%B2%BB%E5%AE%89%E7%AD%96/"/>
    <id>https://zhang21.github.io/2019/02/10/治安策/</id>
    <published>2019-02-10T12:27:11.000Z</published>
    <updated>2019-02-11T01:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>维基百科</li></ul><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>　　贾谊（前200—前168年），汉族，洛阳（今河南洛阳东）人，西汉初年著名政论家、文学家，世称贾生。贾谊少有才名，十八岁时，以善文为郡人所称。文帝时任博士，迁太中大夫，受大臣周勃、灌婴排挤，谪为长沙王太傅，故后世亦称贾长沙、贾太傅。三年后被召回长安，为梁怀王太傅。梁怀王坠马而死，贾谊深自歉疚，抑郁而亡，时仅33岁。司马迁对屈原、贾谊都寄予同情，为二人合传，后世因而往往把贾谊与屈原并称为“屈贾”。贾谊著作主要有散文和辞赋两类，散文的主要文学成就是政论文，评论时政，风格朴实峻拔，议论酣畅，鲁迅称之为“西汉鸿文”，代表作有《过秦论》《论积贮疏》《陈政事疏》等。其辞赋皆为骚体，形式趋于散体化，是汉赋发展的先声，以《吊屈原赋》《鵩鸟赋》最为著名。</p><p>　　《治安策》是西汉文学家贾谊创作的一篇政论文。这篇论文论及了文帝时潜在或明显的多种社会危机，包括“可为痛哭者一，可为流涕者二，可为长叹息者六”等众多严重问题，涉及中央与地方诸侯之间、汉庭与北方异族之间，以及社会各阶层之间的种种矛盾，针对这令人忧心的一切，贾谊富有针对性地一一指明相应对策和补救措施。这篇论文势忽峻忽缓、首尾相衔，大量采用夹叙夹议，还在议论说理的同时，不失时机地运用文学笔法。</p><p>　　西汉前期社会存在着三大矛盾：其一是匈奴为代表的边境少数民族与汉王朝之间的矛盾；其二是地方诸侯王的割据势力与中央政府之间的矛盾；其三是广大农民和地主、大工商业者的矛盾。汉文帝时期，天下大势已定，这些社会矛盾虽然尚未激化到即将公开破裂的程度，但却在酝酿并渐趋于激化的过程之中。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p>　　臣窃惟事势，可为痛哭者一，可为流涕者二，可为长太息者六，若其它背理而伤道者，难遍以疏举。进言者皆曰天下已安已治矣，臣独以为未也。曰安且治者，非愚则谀，皆非事实知治乱之体者也。夫抱火厝之积薪之下而寝其上，火未及燃，因谓之安，方今之势，何以异此！本末舛逆，首尾衡决，国制抢攘，非甚有纪，胡可谓治！陛下何不壹令臣得孰数之于前，因陈治安之策，试详择焉！</p><p>　　夫射猎之娱，与安危之机孰急？使为治，劳智虑，苦身体，乏钟鼓之乐，勿为可也。乐与今同，而加之诸侯轨道，兵革不动，民保首领，匈奴宾服，四荒乡风，百姓素朴，狱讼衰息，大数既得，则天下顺治，海内之气清和咸理，生为明帝，没为明神，名誉之美，垂于无穷。礼祖有功而宗有德，使顾成之庙称为太宗，上配太祖，与汉亡极。建久安之势，成长治之业，以承祖庙，以奉六亲，至孝也；以幸天下，以育群生，至仁也；立经陈纪，轻重同得，后可以为万世法程，虽有愚幼不肖之嗣，犹得蒙业而安，至明也。以陛下之明达，因使少知治体者得佐下风，致此非难也。其具可素陈于前，愿幸无忽。臣谨稽之天地，验之往古，按之当今之务，日夜念此至孰也，虽使禹舜复生，为陛下计，亡以易此。</p><p>　　夫树国固必相疑之势，下数被其殃，上数爽其忧，甚非所以安上而全下也。今或亲弟谋为东帝，亲兄之子西乡而击，今吴又见告矣。天子春秋鼎盛，行义未过，德泽有加焉，犹尚如是，况莫大诸侯，权力且十此者虖！</p><p>　　然而天下少安，何也？大国之王幼弱未壮，汉之所置傅相方握其事。数年之后，诸侯之王大抵皆冠，血气方刚，汉之傅相称病而赐罢，彼自丞尉以上偏置私人，如此，有异淮南、济北之为邪！此时而欲为治安，虽尧舜不治。</p><p>　　黄帝曰：「日中必熭，操刀必割。」今令此道顺而全安，甚易，不肯早为，已乃堕骨肉之属而抗刭之，岂有异秦之季世虖！夫以天子之位，乘今之时，因天之助，尚惮以危为安，以乱为治，假设陛下居齐桓之处，将不合诸侯而匡天下乎？臣又以知陛下有所必不能矣。假设天下如曩时，淮阴侯尚王楚，黥布王淮南，彭越王梁，韩信王韩，张敖王赵，贯高为相，卢绾王燕，陈豨在代，令此六七公者皆亡恙，当是时而陛下即天子位，能自安乎？臣有以知陛下之不能也。天下淆乱，高皇帝与诸公并起，非有仄室之势以豫席之也。诸公幸者，乃为中涓，其次廑得舍人，材之不逮至远也。高皇帝以明圣威武即天子位，割膏腴之地以王诸公，多者百余城，少者乃三四十县，德至渥也，然其后十年之间，反者九起。陛下之与诸公，非亲角材而臣之也，又非身封王之也，自高皇帝不能以是一岁为安，故臣知陛下之不能也。然尚有可诿者，曰疏，臣请试言其亲者。假令悼惠王王齐，元王王楚，中子王赵，幽王王淮阳，共王王梁，灵王王燕，厉王王淮南，六七贵人皆亡恙，当是时陛下即位，能为治虖？臣又知陛下之不能也。若此诸王，虽名为臣，实皆有布衣昆弟之心，虑亡不帝制而天子自为者。擅爵人，赦死罪，甚者或戴黄屋，汉法令非行也。虽行不轨如厉王者，令之不肯听，召之安可致乎！幸而来至，法安可得加！动一亲戚，天下圜视而起，陛下之臣虽有悍如冯敬者，适启其口，匕首已陷其匈矣。陛下虽贤，谁与领此？故疏者必危，亲者必乱，已然之效也。其异姓负强而动者，汉已幸胜之矣，又不易其所以然。同姓袭是迹而动，既有征矣，其势尽又复然。殃旤之变，未知所移，明帝处之尚不能以安，后世将如之何！</p><p>　　屠牛坦一朝解十二牛，而芒刃不顿者，所排击剥割，皆众理解也。至于髋髀之所，非斤则斧。夫仁义恩厚，人主之芒刃也；权势法制，人主之斤斧也。今诸侯王皆众髋髀也，释斤斧之用，而欲婴以芒刃，臣以为不缺则折。胡不用之淮南、济北？势不可也。</p><p>　　臣窃迹前事，大抵强者先反。淮阴王楚最强，则最先反；韩信倚胡，则又反；贯高因赵资，则又反；陈豨兵精，则又反；彭越用梁，则又反；黥布用淮南，则又反；卢绾最弱，最后反。长沙乃在二万五千户耳，功少而最完，势疏而最忠，非独性异人也，亦形势然也。曩令樊、郦、绛、灌据数十城而王，今虽以残亡可也；令信、越之伦列为彻侯而居，虽至今存可也。然则天下之大计可知已。欲诸王之皆忠附，则莫若令如长沙王；欲臣子之勿菹醢，则莫若令如樊、郦等；欲天下之治安，莫若众建诸侯而少其力。力少则易使以义，国小则亡邪心。令海内之势如身之使臂，臂之使指，莫不制从，诸侯之君不敢有异心，辐凑并进而归命天子，虽在细民，且知其安，故天下咸知陛下之明。割地定制，令齐、赵、楚各为若干国，使悼惠王、幽王、元王之子孙毕以次各受祖之分地，地尽而止，及燕、梁它国皆然。其分地众而子孙少者，建以为国，空而置之，须其子孙生者，举使君之。诸侯之地其削颇入汉者，为徙其侯国及封其子孙也，所以数偿之：一寸之地，一人之众，天子亡所利焉，诚以定治而已，故天下咸知陛下之廉。地制壹定，宗室子孙莫虑不王，下无倍畔之心，上无诛伐之志，故天下咸知陛下之仁。法立而不犯，令行而不逆，贯高、利几之谋不生，柴奇、开章之计不萌，细民乡善，大臣致顺，故天下咸知陛下之义。卧赤子天下之上而安，植遗腹，朝委裘，而天下不乱，当时大治，后世诵圣。壹动而五业附，陛下谁惮而久不为此？</p><p>　　天下之势方病大瘇。一胫之大几如要，一指之大几如股，平居不可屈信，一二指搐，身虑亡聊。失今不治，必为锢疾，后虽有扁鹊，不能为已。病非徒瘇也，又苦𨂂盭。元王之子，帝之从弟也；今之王者，从弟之子也。惠王［之子］，亲兄子也；今之王者，兄子之子也。亲者或亡分地以安天下，疏者或制大权以逼天子，臣故曰非徒病瘇也，又苦𨂂盭。可痛哭者，此病是也。</p><p>　　天下之势方倒县。凡天子者，天下之首，何也？上也。蛮夷者，天下之足，何也？下也。今匈奴嫚娒侵掠，至不敬也，为天下患，至亡已也，而汉岁致金絮采缯以奉之。夷狄征令，是主上之操也；天子共贡，是臣下之礼也。足反居上，首顾居下，倒县如此，莫之能解，犹为国有人乎？非亶倒县而已，又类辟，且病痱。夫辟者一面病，痱者一方痛。今西边北边之郡，虽有长爵不轻得复，五尺以上不轻得息，斥候望烽燧不得卧，将吏被介胄而睡，臣故曰一方病矣。医能治之，而上不使，可为流涕者此也。</p><p>　　陛下何忍以帝皇之号为戎人诸侯，势既卑辱，而旤不息，长此安穷！进谋者率以为是，固不可解也，亡具甚矣。臣窃料匈奴之众不过汉一大县，以天下之大困于一县之众，甚为执事者羞之。陛下何不试以臣为属国之官以主匈奴？行臣之计，请必系单于之颈而制其命，伏中行说而笞其背，举匈奴之众唯上之令。今不猎猛敌而猎田彘，不搏反寇而搏畜菟，翫细娱而不图大患，非所以为安也。德可远施，威可远加，而直数百里外威令不信，可为流涕者此也。</p><p>　　今民卖童者，为之绣衣丝履偏诸缘，内之闲中，是古天子后服，所以庙而不晏者也，而庶人得以衣婢妾。白縠之表，薄纨之里，緁以偏诸，美者黼绣，是古天子之服，今富人大贾嘉会召客者以被墙。古者以奉一帝一后而节适，今庶人屋壁得为帝服，倡优下贱得为后饰，然而天下不屈者，殆未有也。且帝之身自衣皂绨，而富民墙屋被文绣；天子之后以缘其领，庶人㜸妾缘其履：此臣所谓舛也。夫百人作之不能衣一人，欲天下亡寒，胡可得也？一人耕之，十人聚而食之，欲天下亡饥，不可得也。饥寒切于民之肌肤，欲其亡为奸邪，不可得也。国已屈矣，盗贼直须时耳，然而献计者曰「毋动」，为大耳。夫俗至大不敬也，至亡等也，至冒上也，进计者犹曰「毋为」，可为长太息者此也。</p><p>　　商君遗礼义，弃仁恩，并心于进取，行之二岁，秦俗日败。故秦人家富子壮则出分，家贫子壮则出赘。借父耰鉏，虑有德色；母取箕箒，立而谇语。抱哺其子，与公并倨；妇姑不相说，则反唇而相稽。其慈子耆利，不同禽兽者亡几耳。然并心而赴时，犹曰蹷六国，兼天下。功成求得矣，终不知反廉愧之节，仁义之厚。信并兼之法，遂进取之业，天下大败；众掩寡，智欺愚，勇威怯，壮陵衰，其乱至矣。是以大贤起之，威震海内，德从天下。曩之为秦者，今转而为汉矣。然其遗风余俗，犹尚未改。今世以侈靡相竞，而上亡制度，弃礼谊，捐廉耻，日甚，可谓月异而岁不同矣。逐利不耳，虑非顾行也，今其甚者杀父兄矣。盗者剟寝户之帘，搴两庙之器，白昼大都之中剽吏而夺之金。矫伪者出几十万石粟，赋六百余万钱，乘传而行郡国，此其亡行义之（先）〔尤〕至者也。而大臣特以簿书不报，期会之间，以为大故。至于俗流失，世坏败，因恬而不知怪，虑不动于耳目，以为是适然耳。夫移风易俗，使天下回心而乡道，类非俗吏之所能为也。俗吏之所务，在于刀笔筐箧，而不知大（礼）〔体〕。陛下又不自忧，窃为陛下惜之。</p><p>　　夫立君臣，等上下，使父子有礼，六亲有纪，此非天之所为，人之所设也。夫人之所设，不为不立，不植则僵，不修则坏。管子曰：「礼义廉耻，是谓四维；四维不张，国乃灭亡。」使管子愚人也则可，管子而少知治体，则是岂可不为寒心哉！秦灭四维而不张，故君臣乖乱，六亲殃戮，奸人并起，万民离叛，凡十三岁，〔而〕社稷为虚。今四维犹未备也，故奸人几幸，而众心疑惑。岂如今定经制，令君君臣臣，上下有差，父子六亲各得其宜，奸人亡所几幸，而群臣众信，上不疑惑！此业壹定，世世常安，而后有所持循矣。若夫经制不定，是犹度江河亡维楫，中流而遇风波，舩必覆矣。可为长太息者此也。</p><p>　　夏为天子，十有余世，而殷受之。殷为天子，二十余世，而周受之。周为天子，三十余世，而秦受之。秦为天子，二世而亡。人性不甚相远也，何三代之君有道之长，而秦无道之暴也？其故可知也。古之王者，太子乃生，固举以礼，使士负之，有司齐肃端冕，见之南郊，见于天也。过阙则下，过庙则趋，孝子之道也。故自为赤子而教固已行矣。昔者成王幼在襁抱之中，召公为太保，周公为太傅，太公为太师。保，保其身体；傅，傅之德（意）〔义〕；师，道之教训：此三公之职也。于是为置三少，皆上大夫也，曰少保、少傅、少师，是与太子宴者也。故乃孩提有识，三公、三少固明孝仁礼义以道习之，逐去邪人，不使见恶行。于是皆选天下之端士孝悌博闻有道术者以卫翼之，使与太子居处出入。故太子乃生而见正事，闻正言，行正道，左右前后皆正人也。夫习与正人居之，不能毋正，犹生长于齐不能不齐言也；习与不正人居之，不能毋不正，犹生长于楚之地不能不楚言也。故择其所耆，必先受业，乃得尝之；择其所乐，必先有习，乃得为之。孔子曰：「少成若天性，习贯如自然。」及太子少长，知妃色，则入于学。学者，所学之官也。学礼曰：「帝入东学，上亲而贵仁，则亲疏有序而恩相及矣；帝入南学，上齿而贵信，则长幼有差而民不诬矣；帝入西学，上贤而贵德，则圣智在位而功不遗矣；帝入北学，上贵而尊爵，则贵贱有等而下不隃矣；帝入太学，承师问道，退习而考于太傅，太傅罚其不则而匡其不及，则德智长而治道得矣。此五学者既成于上，则百姓黎民化辑于下矣。」及太子既冠成人，免于保傅之严，则有记过之史，彻膳之宰，进善之旌，诽谤之木，敢谏之鼓。瞽史诵诗，工诵箴谏，大夫进谋，士传民语。习与智长，故切而不愧；化与心成，故中道若性。三代之礼：春朝朝日，秋暮夕月，所以明有敬也；春秋入学，坐国老，执酱而亲馈之，所以明有孝也；行以鸾和，步中采齐，趣中肆夏，所以明有度也；其于禽兽，见其生不食其死，闻其声不食其肉，故远庖厨，所以长恩，且明有仁也。</p><p>　　夫三代之所以长久者，以其辅翼太子有此具也。及秦而不然。其俗固非贵辞让也，所上者告讦也；固非贵礼义也，所上者刑罚也。使赵高傅胡亥而教之狱，所习者非斩劓人，则夷人之三族也。故胡亥今日即位而明日射人，忠谏者谓之诽谤，深计者谓之妖言，其视杀人若艾草菅然。岂惟胡亥之性恶哉？彼其所以道之者非其理故也。</p><p>　　鄙谚曰：「不习为吏，视已成事。」又曰：「前车覆，后车诫。」夫三代之所以长久者，其已事可知也；然而不能从者，是不法圣智也。秦世之所以亟绝者，其辙迹可见也；然而不避，是后车又将覆也。夫存亡之变，治乱之机，其要在是矣。天下之命，县于太子；太子之善，在于早谕教与选左右。夫心未滥而先谕教，则化易成也；开于道术智谊之指，则教之力也。若其服习积贯，则左右而已。夫胡、粤之人，生而同声，耆欲不异，及其长而成俗，累数译而不能相通，行者〔有〕虽死而不相为者，则教习然也。臣故曰选左右早谕教最急。夫教得而左右正，则太子正矣，太子正而天下定矣。书曰：「一人有庆，兆民赖之。」此时务也。</p><p>　　凡人之智，能见已然，不能见将然。夫礼者禁于将然之前，而法者禁于已然之后，是故法之所用易见，而礼之所为生难知也。若夫庆赏以劝善，刑罚以惩恶，先王执此之政，坚如金石，行此之令，信如四时，据此之公，无私如天地耳，岂顾不用哉？然而曰礼云礼云者，贵绝恶于未萌，而起教于微眇，使民日迁善远辠而不自知也。孔子曰：「听讼，吾犹人也，必也使毋讼乎！」为人主计者，莫如先审取舍；取舍之极定于内，而安危之萌应于外矣。安者非一日而安也，危者非一日而危也，皆以积渐然，不可不察也。人主之所积，在其取舍。以礼义治之者，积礼义；以刑罚治之者，积刑罚。刑罚积而民怨背，礼义积而民和亲。故世主欲民之善同，而所以使民善者或异。或道之以德教，或殴之以法令。道之以德教者，德教洽而民气乐；殴之以法令者，法令极而民风哀。哀乐之感，祸福之应也。秦王之欲尊宗庙而安子孙，与汤武同，然而汤武广大其德行，六七百岁而弗失，秦王治天下，十余岁则大败。此亡它故矣，汤武之定取舍审而秦王之定取舍不审矣。夫天下，大器也。今人之置器，置诸安处则安，置诸危处则危。天下之情与器亡以异，在天子之所置之。汤武置天下于仁义礼乐，而德泽洽，禽兽草木广裕，德被蛮貊四夷，累子孙数十世，此天下所共闻也。秦王置天下于法令刑罚，德泽亡一有，而怨毒盈于世，下憎恶之如仇仇，旤几及身，子孙诛绝，此天下之所共见也。是非其明效大验邪！人之言曰：「听言之道，必以其事观之，则言者莫敢妄言。」今或言礼谊之不如法令，教化之不如刑罚，人主胡不引殷、周、秦事以观之也？</p><p>　　人主之尊譬如堂，群臣如陛，众庶如地。故陛九级上，廉远地，则堂高；陛亡级，廉近地，则堂卑。高者难攀，卑者易陵，理势然也。故古者圣王制为等列，内有公卿大夫士，外有公侯伯子男，然后有官师小吏，延及庶人，等级分明，而天子加焉，故其尊不可及也。里谚曰：「欲投鼠而忌器。」此善谕也。鼠近于器，尚惮不投，恐伤其器，况于贵臣之近主乎！廉耻节礼以治君子，故有赐死而亡戮辱。是以黥劓之辠不及大夫，以其离主上不远也。礼不敢齿君之路马，蹴其刍者有罚；见君之几杖则起，遭君之乘车则下，入正门则趋；君之宠臣虽或有过，刑戮之辠不加其身者，尊君之故也。此所以为主上豫远不敬也，所以体貌大臣而厉其节也。今自王侯三公之贵，皆天子之所改容而礼之也，古天子之所谓伯父、伯舅也，而令与众庶同黥劓髠刖笞傌弃巿之法，然则堂不亡陛虖？被戮辱者不泰迫虖？廉耻不行，大臣无乃握重权，大官而有徒隶亡耻之心虖？夫望夷之事，二世见当以重法者，投鼠而不忌器之习也。</p><p>　　臣闻之，履虽鲜不加于枕，冠虽敝不以苴履。夫尝已在贵宠之位，天子改容而体貌之矣，吏民尝俯伏以敬畏之矣，今而有过，帝令废之可也，退之可也，赐之死可也，灭之可也；若夫束缚之，系緤之，输之司寇，编之徒官，司寇小吏詈骂而榜笞之，殆非所以令众庶见也。夫卑贱者习知尊贵者之一旦吾亦乃可以加此也，非所以习天下也，非尊尊贵贵之化也。夫天子之所尝敬，众庶之所尝宠，死而死耳，贱人安宜得如此而顿辱之哉！</p><p>　　豫让事中行之君，智伯伐而灭之，移事智伯。及赵灭智伯，豫让衅面吞炭，必报襄子，五起而不中。人问豫子，豫子曰：「中行众人畜我，我故众人事之；智伯国士遇我，我故国士报之。」故此一豫让也，反君事仇，行若狗彘，已而抗节致忠，行出虖列士，人主使然也。故主上遇其大臣如遇犬马，彼将犬马自为也；如遇官徒，彼将官徒自为也。顽顿亡耻奊诟亡节，廉耻不立，且不自好，苟若而可，故见利则逝，见便则夺。主上有败，则因而挻之矣；主上有患，则吾苟免而已，立而观之耳；有便吾身者，则欺卖而利之耳。人主将何便于此？群下至众，而主上至少也，所托财器职业者粹于群下也。俱亡耻，俱苟妄，则主上最病。故古者礼不及庶人，刑不至大夫，所以厉宠臣之节也。古者大臣有坐不廉而废者，不谓不廉，曰「簠簋不饰」；坐污秽淫乱男女亡别者，不曰污秽，曰「帷薄不修」；坐罢软不胜任者，不谓罢软，曰「下官不职」。故贵大臣定有其辠矣，犹未斥然正以謼之也，尚迁就而为之讳也。故其在大谴大何之域者，闻谴何则白冠牦缨，盘水加剑，造请室而请辠耳，上不执缚系引而行也。其有中罪者，闻命而自弛，上不使人颈盭而加也。其有大辠者，闻命则北面再拜，跪而自裁，上不使捽抑而刑之也，曰：「子大夫自有过耳！吾遇子有礼矣。」遇之有礼，故群臣自憙；婴以廉耻，故人矜节行。上设廉耻礼义以遇其臣，而臣不以节行报其上者，则非人类也。故化成俗定，则为人臣者主耳忘身，国耳忘家，公耳忘私，利不苟就，害不苟去，唯义所在。上之化也，故父兄之臣诚死宗庙，法度之臣诚死社稷，辅翼之臣诚死君上，守圄捍敌之臣诚死城郭封疆。故曰圣人有金城者，比物此志也。彼且为我死，故吾得与之俱生；彼且为我亡，故吾得与之俱存；夫将为我危，故吾得与之皆安。顾行而忘利，守节而仗义，故可以托不御之权，可以寄六尺之孤。此厉廉耻行礼谊之所致也，主上何丧焉！此之不为，而顾彼之久行，故曰可为长太息者此也。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p>　　我私下考虑如今的局势，可为之痛哭的有一项，可为之流泪的有两项，应为之大声叹息的有六项，至于其他违背情理而伤害大道的事，很难一一列举。向陛下进言的人都说天下已经安定，治理得很好了，我却认为不是那么回事。说天下已经安定已经大治的人，不是愚昧无知，就是阿谀奉承，都不是真正了解治乱大体的人。有人抱着火种放在堆积的木柴之下，自己睡在木柴上，火没燃烧起来的时候，他便认为这是安宁的地方，如今国家的局势，与此有什么不同！本末颠倒，首尾冲突，国制混乱，不合理的现象严重，怎么能够说是大治！陛下为什么不让我对您详细地说明这一切，提出使国家真正大治大安的方策，以供陛下仔细斟酌选用呢？</p><p>　　射箭打猎之类的娱乐与国家安危的关键相比，哪一样更急迫？假若所提的治世方法，耗费心血，摧残身体，影响享受钟鼓所奏音乐，可以不采纳；我的治国方策，能保证使陛下所享受的乐趣不受影响，却可以带来封国诸侯各遵法规，战争不起，平民拥护首领，匈奴归顺，纯朴之风响彻边陲，百姓温良朴素，官司之类的事情停止不发。大势已定，那么，全国便会顺从而大治，四海之内，一派升平，万物都符合事理，陛下生时被称为明帝，死后成为明神，美名佳誉永垂青史。《礼》书上说宗庙有功德，使您的顾成庙被尊称为大宗，得以与太祖共享盛名，与大汉天下共存亡。创建长久安定的形势，造成永久太平的业绩，以此来承奉祖庙和六亲，这是最大的孝顺；以此来使老百姓得到幸福，使芸芸众生得到养育，这是最大的仁；创设准则，标立纪纲，使大小事物各得其所，为万世子孙树立楷模，即使是后世出现了愚鲁、幼稚、不肖的继承人，由于他继承了您的鸿业和福荫，还可以安享太平，这是最明智的办法。凭陛下的精明练达，再有稍微懂得治国之道的人辅佐，要达到这一境界并不困难。其内容全都可以向陛下陈述，希望陛下不要忽视。我谨慎地用它来考察过天地的变化，应验过往，核对当今，日夜思考而详细地知道了它的内容，即使是禹舜再生，也不能加以改变。</p><p>　　建立诸侯国过于强大，必然会造成天子与诸侯互相对立，臣下屡遭祸害，皇上也多次忧伤，这实在不是使皇上放心、使臣下保全的办法。如今亲兄弟图谋在东方称帝，亲侄子也向西袭击朝廷，吴王的谋反活动又被人告发。当今天子年富力强，品行道义上没有过错，对他们施加功德恩泽，而他们尚且如此，何况最大的诸侯，权力比他们还要大十倍呢！</p><p>　　虽然如此，但是天下还比较安定，这是什么原因呢？因为大诸侯国王年纪还小，汉朝安置在那的太傅、丞相还掌握着政事。几年以后，诸侯王大都加冠成人，血气方刚，而汉朝委派的太傅、丞相都要称病还乡，诸侯王会遍插亲信，如果这样的话，他们的行为同淮南王、济北王有什么区别呢？到了那时，想求得天下安定，即使是尧舜在世也办不到。</p><p>　　黄帝说：“到了中午要抓紧曝晒，拿着刀子要赶紧宰割。”如今要使安治之道顺利而稳妥地推行，是十分容易的。假使不肯及早行动，到头来就要毁掉亲骨肉，这同秦朝末年的局势还有什么区别吗？凭着天子的权位，趁着当今的有利时机，靠着上天的帮助，尚且对转危为安、改乱为治的措施有所顾虑，假设陛下处在齐桓公的境地，大概不会去联合诸侯匡正天下吧？我知道陛下一定不能那样做的。假如国家的局势还像从前那样，淮阴侯韩信还统治着楚，黥布统治着淮南，彭越统治着梁，韩王信统治着韩，张敖统治着赵，贯高做赵国的相，卢绾统治着燕，陈还在代国，假令这六七个王公都还健在，在这时陛下继位做天子，自己能感到安全吗？我判断陛下是不会感到安全的。在天下混乱的年代，高祖和这些王公们共同起事，并没有子侄亲属的势力做为依靠。这些王公走运的就成了亲近的侍从，差一点的仅当个管理宫中事务的官员，他们的才能远不及高祖。高祖凭着他的明智威武，即位做了天子，割出肥沃的土地，使这些王公成为诸侯王，多的有一百多个城，少的也有三四十个县，恩德是优厚的了，然而在以后的十年当中，反叛汉朝的事发生了九次。陛下跟这些王公，并没有亲自较量过才能而使他们甘心为臣的，也不是亲自封他们当诸侯王的。即使高祖也不能因此而得到一年的安宁，所以我知道陛下更不能得到安宁的。</p><p>　　不过，上面这些情况，还有可以推托的理由，说是“关系疏远”。那就请允许我试着谈谈那些亲属诸侯王吧。假如让齐悼惠王统治着齐，楚元王统治着楚，赵王统治着赵，幽王统治着淮阳，恭王统治着梁，灵王统治着燕，厉王统治着淮南，假如这六七位贵人都还健在，在这时陛下即皇帝位，能使天下太平吗？我又知陛下是不能的。像这些诸侯王，虽然名义上是臣子，实际上他们都怀有老百姓那种兄弟关系的想法，大概没有不想采用天子的制度，而把自己当做天子的。他们擅自把爵位赏给别人，赦免死罪，甚至有人乘坐天子的黄屋车。他们不执行汉朝的法令。即使执行了，像厉王那样的不守法的人，命令他都不肯听从，又怎么能招他来呢！幸而召来了，法律怎么能施加到他身上呢！动了一个近亲，天下诸王都环视着惊动起来。陛下的臣子当中即使有冯敬那样勇敢的人，但是他刚开口揭发诸侯王的不法行为，刺客的匕首已经刺进他的胸膛了。陛下虽然贤明，谁能和您一起来治理这些人呢？</p><p>　　所以说，关系疏远的诸侯王必定危险，关系亲近的诸侯王也一定作乱，这是事实所证明了的。那些自负强大而发动叛乱的异姓诸侯王，汉朝已经侥幸地战胜他们了，可是却没有改变酿成叛乱的制度。同姓诸侯王也袭用了这种做法，发动叛乱，如今已有征兆了，形势又完全恢复到以前那种状态！灾祸的变化，还不知道要转移到何处，英明的皇帝处在这种情况下，尚且不能使国家安宁，后代又将怎么办呢！</p><p>　　屠牛坦一早晨宰割了十二头牛，而屠刀的锋刃并不变钝，这是因为他所刮剔割剥的，都是顺着肉的肌理下刀。等碰到胯骨、大腿骨的地方，那就不是用砍刀就是用斧头去砍了。仁义恩厚好比是君王的刀刃，权势、法制好比是君王的砍刀、斧头。如今的诸侯王好比是胯骨、大腿骨，如果放弃砍刀、斧头不用，而要用刀刃去碰，我认为刀子不是出缺口就是被折断。为什么仁义恩厚不能用在淮南王、济北王的身上呢？因为形势不容许啊！</p><p>　　我私下里考察从前的事件，大体上是势力强大的先反：淮阴侯韩信统治着楚，势力最强，就最先反叛；韩王信依靠了匈奴的力量，就又反叛了；贯高借助了赵国的条件，就又反叛了；陈狶部队精锐，也反叛了；彭越凭借梁国，也反叛了；黥布凭借淮南，也反叛了；卢绾势力最弱，最后反叛。长沙王吴芮才有二万五千封户，功劳很少，却保全了下来，权势最小而对汉朝最忠顺；这不只是由于性情和别人不同，也是由于形势使他这样。倘若从前让樊哙、郦商、周勃、灌婴占据几十个城为王，那如今他们由于作恶而亡国，也是可能的。假使让韩信、彭越之流，只居于彻侯的地位，即便今天也还能保全，也是可能的。</p><p>　　既然如此，那么天下大计就可以知道了。要想使天下诸侯王都忠心归附汉朝，那最好让他们都像长沙王一样；要想让臣下不至于像韩信那样被杀掉，那最好让他们像樊哙、郦商那徉；要想使天下安定，最好多多建立诸侯国而使他们的势力减小。力量弱小就容易用道义来指使他们，国土小就不会有反叛的邪念。这样就使全国的形势，如同身体使唤手臂，手臂使唤手指似的，没有不听从指挥的。诸侯王不敢有反叛的想法，如同辐条聚向车轮一样，都归顺天子，即使是老百姓，也会知道他们都很安稳。这样，天下就都知道陛下的英明。分割土地，定出制度：把齐、赵、楚三个王国分成若干侯国，让齐王、赵王、楚王的子孙，全都依次受封先人的那份封地，一直到分尽为止。对燕、梁等其他王国也是这样。有些封地大而子孙少的，也都分成若干侯国，暂时空着搁置起来，等着他们的子孙出生以后，再封他当候。诸侯王的封地，有不少已被削除收归汉朝所有的，那就替他们调整侯国所在的地区，等到要封他的子孙到别的地方去的时候，按候国的应有户数，给以补偿。一寸土、一口人，皇帝也不沾他们的，确实只是为了安定太平罢了。这样，天下就都知道陛下的廉洁。分封土地的制度一旦确定，宗室子孙没有不考虑保住自己的统治的。臣子没有背叛的念头，皇帝没有讨伐的想法。所以天下就都知道陛下的仁德。法令制定了，没有人触犯；政令推行了，没有人抵触。贯高、利几一类的阴谋不会出现，柴奇、开章那样的诡计不会萌生。老百姓都向往良善，大臣都向皇上表示恭顺。所以天下就都知道陛下的道义。这样，即使让幼儿当皇帝，天下也很安定；即使立一个遗腹子作天子，让臣子朝拜老皇帝遗留下来的皇袍，天下也不致于混乱。这样，就可以使天下安定无事，后代也称颂陛下的圣明。只要采取这样的措施，上述五个方面的业绩也就随之而来了，而陛下又怕什么而久久不这样办呢？</p><p>　　当今，天下的形势像得了严重的浮肿病：小腿粗得差不多像腰围，脚指粗得差不多像大腿。平时都不能伸屈自如，一两个指头抽搐，浑身就觉得无所依赖。丧失了今天的机会而不医治，一定要成为难治的顽症。以后即使有扁鹊那样神医，也都无能为力。这个病还不只是浮肿，还苦于脚掌扭折不能走动。楚元王的儿子，是陛下的叔伯兄弟，当今的楚王，是叔伯兄弟的儿子，齐悼惠王的儿子，是陛下亲哥哥的儿子，当今的齐王是陛下哥哥的孙子。陛下自己的子孙，有的还没有分封土地，以便安定天下，旁支的子孙，倒有人掌握大权来威胁皇帝。所以，我说：不仅是害了浮肿病，还苦于脚掌扭折了不能走动。令人痛哭的就是这样一种病啊！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Literature" scheme="https://zhang21.github.io/categories/Literature/"/>
    
    
      <category term="古文" scheme="https://zhang21.github.io/tags/%E5%8F%A4%E6%96%87/"/>
    
      <category term="政论文" scheme="https://zhang21.github.io/tags/%E6%94%BF%E8%AE%BA%E6%96%87/"/>
    
      <category term="贾谊" scheme="https://zhang21.github.io/tags/%E8%B4%BE%E8%B0%8A/"/>
    
  </entry>
  
  <entry>
    <title>封建论</title>
    <link href="https://zhang21.github.io/2019/02/10/%E5%B0%81%E5%BB%BA%E8%AE%BA/"/>
    <id>https://zhang21.github.io/2019/02/10/封建论/</id>
    <published>2019-02-10T12:13:11.000Z</published>
    <updated>2019-02-11T01:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>维基百科</li></ul><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>　　柳宗元（773年－819年11月28日），字子厚，河东（今山西运城）人，唐代著名文学家、思想家，唐宋八大家之一。参加永贞革新失败，被贬为永州司马。为当道者嫉恨，除短暂奉召入京外，终生未再北还。</p><p>　　《封建论》是柳宗元的政论文章，该文详尽分析了唐代以前中国历代政治得失，认为中国封建制度是百害而无一利，并阐发郡县制的优越性。<br>柳宗元被贬柳州（今广西柳州市）之时，引史为证，做“封建论”，结构严谨，文笔犀利而流畅。《封建论》说“彼封建者，更古圣王尧、舜、禹、汤、文、武而莫能去之。盖非不欲去之也，势不可也。……封建，非圣人意也”。</p><p>　　中唐时期，藩镇割据的情况愈演愈烈，当时各地藩镇极力鼓吹要恢复周以前的封建制度，反对中央集权的郡县制度，目的是为自己的割据制造舆论。和这种政治局面相适应，分封制的论调又开始抬头。针对这种情况，作者在永贞革新失败、被贬永州后，写下了这篇议论文。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p>　　天地果无初乎？吾不得而知之也。生人果有初乎？吾不得而知之也。然则孰为近？曰有初为近。孰明之？由封建而明之也。彼封建者，更古圣王尧舜、禹汤、文武而莫能去之。盖非不欲去之也，势不可也。势之来（则），其生人之初乎？不初，无以有封建。封建，非圣人意也。</p><p>　　彼其初与万物皆生，草木榛榛，鹿豕狉狉，人不能搏噬，而且无毛羽，莫克自奉自卫。荀卿有言：必将假物以为用者也。夫假物者必争，争而不已，必就其能断曲直者而听命焉。其智而明者，所伏必众；告之以直而不改，必痛之而后畏；由是君长刑政生焉。故近者聚而为群。群之分，其争必大，大而后有兵有德。又有大者，众群之长又就而听命焉，以安其属，于是有诸侯之列。则其争又有大者焉。德又大者，诸侯之列又就而听命焉，以安其封，于是有方伯、连帅之类。则其争又有大者焉。德又大者，方伯、连帅之类又就而听命焉，以安其人，然后天下会于一。是故有里胥而后有县大夫，有县大夫而后有诸侯，有诸侯而后有方伯、连帅，有方伯、连帅而后有天子。自天子至于里胥，其德在人者，死必求其嗣而奉之。故封建非圣人意也，势也。</p><p>　　夫尧舜禹汤之事远矣，及有周而甚详。周有天下，裂土田而瓜分之，设五等，邦群后，布星罗，四周子天下，轮运而辐集。合为朝觐会同，离为守臣捍城。然而降于夷王，害礼伤尊，下堂而迎觐者，历于宣王，挟中兴复古之德，雄南征北伐之威，卒不能定鲁侯之嗣。陵夷迄于幽厉，王室东徙，而目列为诸侯。厥后，问鼎之轻重者有之，射三中肩者有之，代凡伯、诛苌宏者有之，天下乖盭，无君之心。予以为周之丧久矣，徒建空名于公侯之上耳！得非诸侯之盛强，末大不掉之咎欤？遂判为十二，合为七国，威分于陪臣之邦，国殄于后封之秦。则周之败端，其在乎此矣。</p><p>　　秦有天下，裂都会而为之郡邑，废侯卫而为之守宰，据天下之雄图，都六合之上游，摄制四海，运于掌握之内，此其所以为得也。不数载而天下大坏，其有由矣。亟役万人，暴其威刑，竭其货贿。负锄梃谪戍之徒，加圜视而合从，大呼而成群。时则有叛人而无叛吏，人怨于下，而吏畏于上，天下相合，杀守劫令而并起。咎在人怨，非郡邑之制失也。</p><p>　　汉有天下，矫秦之枉，徇周之制，剖海内而立宗子，封功臣。数年之间，奔命扶伤而不暇。困平城，病流矢，陵迟不救者三代。后乃谋臣献画，而离削自守矣。然而封建之始，郡国居半，时则有叛国而无叛郡。秦制之得，亦以明矣。继汉而帝者，虽百代可知也。</p><p>　　唐兴，制州邑，立守宰，此其所以为宜也。然犹桀猾时起，虐害方域者，失不在于州而在于兵，时则有叛将而无叛州。州县之设，固不可革也。</p><p>　　或者曰：「封建者，必私其土，子其人，适其俗，修其理，施化易也。守宰者，苟其心，思迁其秩而已，何能理乎？」予又非之。周之事迹，断可见矣。列侯骄盈，黩货事戎。大凡乱国多，理国寡。侯伯不得变其政，天子不得变其君。私土于人者，百不有一。失在于制，不在于政，周事然也。秦之事迹，亦断可见矣。有理人之制，而不委郡邑是矣；有理人之臣，而不使守宰是矣。郡邑不得正其制，守宰不得行其理，酷刑苦役，而万人侧目。失在于政，不在于制。秦事然也。汉兴，天子之政行于郡，不行于国；制其守宰，不制其侯王。侯王虽乱，不可变也；国人虽病，不可除也。及夫大逆不道，然后掩捕而迁之，勒兵而夷之耳。大逆未彰，奸利浚财，怙势作威，大刻于民者，无如之何。及夫郡邑，可谓理且安矣。何以言之？且汉知孟舒于田叔，得魏尚于冯唐，闻黄霸之明审，睹汲黯之简靖，拜之可也，复其位可也，卧而委之以辑一方可也。有罪得以黜，有能得以奖。朝拜而不道，夕斥之矣；夕受而不法，朝斥之矣。设使汉室尽城邑而侯王之，纵令其乱人，戚之而已。孟舒、魏尚之术，莫得而施；黄霸、汲黯之化，莫得而行。明谴而导之，拜受而退已违矣。下令而削之，缔交合从之谋，周于同列，则相顾裂眦，勃然而起。幸而不起，则削其半。削其半，民犹瘁矣，曷若举而移之，以全其人平？汉事然也。今国家尽制郡邑，连置守宰，其不可变也固矣。善制兵，谨择守，则理平矣。</p><p>　　或者又曰：「夏、商、周、汉封建而延，秦郡邑而促。」尤非所谓知理者也。魏之承汉也，封爵犹建。晋之承魏也，因循不革。而二姓陵替，不闻延祚。今矫而变之，垂二百祀，大业弥固，何系于诸侯哉？</p><p>　　或者又以为：「殷周圣王也，而不革其制，固不当复议也。」是大不然。夫殷周之不革者，是不得已也。盖以诸侯归殷者三千焉，资以黜夏，汤不得而废；归周老八百焉，资以胜殷，武王不得而易。徇之以为安，仍之以为俗，汤、武之所不得已也。夫不得已，非公之大者也，私其力于己也，私其卫于子孙也。秦之所以革之者，其为制，公之大者也；其情，私也，私其一己之威也，私其尽臣畜于我也。然而公天下之端自秦始。</p><p>　　夫天下之道，理安，斯得人者也。使贤者居上，不肖者居下，而后可以理安。今夫封建者，继世而理。继世而理者，上果贤乎？下果不肖乎？则生人之理乱，未可知也。将欲利其社稷，以一其人之视听，则又有世大夫世食禄邑，以尽其封略。圣贤生于其时，（亦）无以立于天下，封建者为之也。岂圣人之制使至于是乎？吾固曰：「非圣人之意也，势也。」</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p>　　自然界果真没有原始阶段吗？我没法知道。人类果真有原始阶段吗？我也没法知道。那么，（有或没有原始阶段）哪种说法比较接近事实呢？我认为：有原始阶段这种说法比较接近事实。怎么知道这一点呢？从“封国土、建诸侯”的封建制就可以明白。那种封建制，经历了古代贤明的帝王唐尧、虞舜、夏禹、商汤、周文王和周武王，没有谁能把它废除掉。不是不想把它废除掉，而是事物发展的趋势不允许，这种形势的产生，大概是在人类的原始阶段吧？不是原始阶段的那种形势，就没有可能产生封建制。实行封建制，并不是古代圣人的本意。</p><p>　　人类在他的原始阶段跟万物一起生存，那时野草树木杂乱丛生，野兽成群四处奔走，人不能像禽兽那样抓扑啃咬，而且身上也没有毛羽来抵御严寒，不能够光靠自身来供养自己、保卫自己。荀卿说过：“人类一定要借用外物作为自己求生的工具。”借用外物来求生的必然会相争，争个不停，一定会去找那能判断是非的人而听从他的命令。那又有智慧又明白事理的人，服从他的人一定很多；他把正确的道理告诉那些相争的人，不肯改悔的，必然要惩罚他，使他受痛苦之后感到惧怕，于是君长、刑法、政令就产生了。这样附近的人就聚结成群，分成许多群以后，相互间争斗的规模一定会大，相争的规模大了就会产生军队和威望。这样，又出现了更有威德的人，各个群的首领又去听从他的命令，来安定自己的部属。于是产生了一大批诸侯，他们相争的规模就更大了。又有比诸侯威德更大的人，许多诸侯又去听从他的命令，来安定自己的封国。于是又产生了方伯、连帅一类诸侯领袖，他们相争的规模还要大。这就又出现了比方伯，连帅威德更大的人，方伯、连帅们又去听从他的命令，来安定自己的老百姓，这以后天下便统一于天子一人了。因此先有乡里的长官而后有县的长官，有了县的长官而后有诸侯，有了诸侯而后有方伯、连帅，有了方伯、连帅而后才有天子。从最高的天子到乡里的长官，那些对人民有恩德的人死了，人们一定会尊奉他们的子孙为首领。所以说封建制的产生不是圣人的本意，而是形势发展的必然结果。</p><p>　　尧、舜、禹、汤的事离我们很远了，到了周代记载就很详备了。周朝占有天下，把土地像剖瓜一样分割开来，设立了公、侯、伯、子、男五等爵位，分封了许多诸侯。诸侯国像繁星似地罗列，四面遍布在大地上，集结在周天子的周围，就像车轮围绕着中心运转，就像辐条集中于车毂；诸侯聚合起来就去朝见天子，分散开来就是守卫疆土的臣子、朝廷的捍卫者。但是往下传到周夷王的时候，破坏了礼法，损害了尊严，天子只得亲自下堂去迎接朝见的诸侯。传到周宣王的时候，他虽然倚仗着复兴周王朝的功德，显示出南征北伐的威风，终究还是无力决定鲁君的继承人。这样日渐衰败下去，直到周幽王、周厉王，后来周平王把国都向东迁移到洛邑，把自己排列在诸侯同等地位上去了。从那以后，问周天子传国九鼎的轻重的事情出现了，用箭射伤天子肩膀的事情出现了，讨伐天子大臣凡伯、逼迫天子杀死大夫苌弘这样的事情也出现了，天下大乱，再没有把天子看作天子的了。我认为周王朝丧失统治力量已经很久了，只不过还在公侯之上保存着一个空名罢了！这岂不是诸侯势力太强大而指挥不动，就像尾巴太大以至摇摆不动所造成的过失吗？于是周王朝的统治权分散到十二个诸侯国，后来又合并为七个强国，王朝的权力分散到陪臣掌政的国家，最后被很晚才封为诸侯的秦国灭掉。周朝败亡的原因，大概就在这里了。<br>秦朝统一了全国后，不分诸侯国而设置郡县，废除诸侯而委派郡县长官。秦占据了天下的险要地势，建都于全国的上游，控制着全国，把局势掌握在手里，这是它做得对的地方。但没过几年便天下大乱，那是有原因的。它多次征发数以万计的百姓服役，使刑法越来越残酷，耗尽了财力。于是那些扛着锄木棍被责罚防守边境的人们，彼此递个眼色就联合起来，怒吼着汇合成群，奋起反秦。那时有造反的老百姓而没有反叛的官吏，老百姓在下怨恨秦王朝；官吏在上惧怕朝廷。全国四面八方互相配合，杀郡守劫县令的事情在各地同时发生。错误在于激起了人民的怨恨，并不是郡县制的过失。</p><p>　　汉朝统一了全国之后，纠正秦朝的错误，沿袭周朝的封建制，分割天下，分封自己的子弟和功臣为诸侯王。但没有几年，为了平息诸侯国的叛乱便闻命奔赴镇压，以至连救死扶伤都来不及，汉高祖刘邦被围困在平城，被飞箭射伤，如此衰落不振达三代之久。后来由于谋臣献策，才分散削弱诸侯王的势力并由朝廷命官管理诸侯国。但是汉朝开始恢复封建制的时候，诸侯国和郡县各占一半疆域，那时只有反叛的诸侯国而没有反叛的郡县，秦朝郡县制的正确性也已经明白清楚了。继汉朝而称帝的，就是再过一百代，郡县制比封建制优越，也是可以知道的。</p><p>　　唐朝建立以后，设置州县，任命州县的长官，这是它做得正确的地方。但还是有凶暴狡猾的人不时起来叛乱、侵州夺县的情况出现，过失不在于设置州县而在于藩镇拥有重兵，那时有反叛的藩镇将领而没有反叛的州县长官。郡县制的建立，确实是不能改变的。</p><p>　　有的人说：“封建制的世袭君长，一定会把他管辖的地区当作自己的土地尽心治理，把他管辖的老百姓当作自己的儿女悉心爱护，使那里的风俗变好，把那里的政治治理好，这样施行教化就比较容易。郡县制的州县地方官，抱着得过且过的心理，一心只想升官罢了，怎么能把地方治理好呢？”我认为这种说法也是不对的。</p><p>　　周朝的情况，毫无疑问地可以看清楚了：诸侯骄横，贪财好战，大致是政治混乱的国家多，治理得好的国家少。诸侯的霸主不能改变乱国的政治措施，天子无法撤换不称职的诸侯国的君主，真正爱惜土地爱护人民的诸侯，一百个中间也没有一个。造成这种弊病的原因在于封建制，不在于政治方面。周朝的情况就是如此。</p><p>　　秦朝的情况，也完全可以看清楚了：朝廷有治理百姓的制度，而不让郡县专权，这是正确的；中央有管理政务的大臣，不让地方官自行其是，这也是正确的。但是郡县不能正确发挥郡县制的作用，郡守、县令不能很好地治理人民。残酷的刑罚、繁重的劳役，使万民怨恨。这种过失在于政治方面，不在于郡县制本身。秦朝的情况便是这样。</p><p>　　汉朝建立的时候，天子的政令只能在郡县推行，不能在诸侯国推行；天子只能控制郡县长官，不能控制诸侯王。诸侯王尽管胡作非为，天子也不能撤换他们；侯王国的百姓尽管深受祸害，朝廷却无法解除他们的痛苦。只是等到诸侯王叛乱造反，才把他们逮捕、流放或率兵讨伐、以至灭掉他们。当他们的罪恶尚未充分暴露的时候，尽管他们非法牟利搜刮钱财，依仗权势作威作福，给百姓造成严重的伤害，朝廷也不能对他们怎么样。至于郡县，可以说是政治清明、社会安定了。根据什么这样讲呢？汉文帝从田叔那里了解到孟舒，从冯唐那里了解到魏尚，汉宣帝听说黄霸执法明察审慎，汉武帝看到汲黯为政简约清静，那么就可以任命黄霸做官，可以恢复孟舒、魏尚原来的官职，甚至可以让汲黯躺着任职，委任他只凭威望去安抚一个地区。官吏犯了罪可以罢免，有才干可以奖赏。早上任命的官吏，如果发现他不行正道，晚上就可以撤了他；晚上接受任命的官吏，如果发现他违法乱纪，第二天早上就可以罢免他。假使汉王朝把城邑全部都分割给侯王，即使他们危害人民，也只好对它发愁罢了。孟舒、魏尚的治理方法不能施行，黄霸、汲黯的教化无法推行。如果公开谴责并劝导这些侯王，他们当面接受，但转过身去就违反了；如果下令削减他们的封地，互相串通联合行动的阴谋就会遍及侯王各国之间，那么大家都怒眼圆睁，气势汹汹地反叛朝廷。万一他们不起来闹事，就削减他们的一半封地，即使削减一半，百姓还是受害了，何不把诸侯王完全废除掉来保全那里的人民呢？汉朝的情况就是这样。</p><p>　　今天国家完全实行郡县制，不断地任命郡县长官，这种情况是肯定不能改变了。只要好好地控制军队，慎重地选择地方官吏，那么政局就会安定了。</p><p>　　有人又说：“夏、商、周、汉四代实行封建制，他们统治的时间都很长久，而秦朝实行郡县制，统治的时间却很短。”这更是不懂得治理国家的人说的话。</p><p>　　魏继承汉朝，分封贵族的爵位仍然实行封建制；西晋继承魏，因袭旧制不加改变，但魏和晋都很快就衰亡了，没听说有国运长久的。唐朝纠正魏晋的过失改变了制度，享国已近二百年，国家基业更加巩固，这与分封诸侯又有什么关系呢？</p><p>　　有人又认为：“治理商、周二代的是圣明的君王啊，他们都没有改变封建制，那么，本来就不应当再议论这件事了。”这种说法大大的不对。</p><p>　　商、周二代没有废除封建制，是不得已的。因为当时归附商朝的诸侯有三千个，商朝靠了他们的力量才灭掉了夏，所以商汤就不能废除他们；归附周朝的诸侯有八百个，周朝凭借他们的力量才战胜了商朝，所以周武王也不能废弃他们。沿用它来求得安定，因袭它来作为习俗，这就是商汤、周武王不得不这样做的原因。他们是不得已的，并不是什么大公无私的美德，而是有私心，是要使诸侯为自己出力，并保卫自己的子孙。秦朝用废除分封诸侯的办法来作为制度，是最大的公；它的动机是为私的，是皇帝想要巩固个人的权威，使天下的人都臣服于自己。但是废除分封，以天下为公，却是从秦朝开始的。</p><p>　　至于天下的常理，是治理得好、政局安定，这才能得到人民的拥护。使贤明的人居上位，不肖的人居下位，然后才会清明安定。封建制的君长，是一代继承一代地统治下去的。这种世袭的统治者，居上位的果真贤明吗？居下位的真的不肖吗？这样，人民究竟是得到太平还是遭遇祸乱，就无法知道了。如果想要对国家有利而统一人民的思想，而同时又有世袭大夫世世代代统治他们的封地，占尽了诸侯国的全部国土，即使有圣人贤人生在那个时代，也会没有立足之地，这种后果就是封建制造成的。难道是圣人的制度要使事情坏到这种地步吗？所以我说：“这不是圣人的本意，而是形势发展的结果。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Literature" scheme="https://zhang21.github.io/categories/Literature/"/>
    
    
      <category term="柳宗元" scheme="https://zhang21.github.io/tags/%E6%9F%B3%E5%AE%97%E5%85%83/"/>
    
      <category term="古文" scheme="https://zhang21.github.io/tags/%E5%8F%A4%E6%96%87/"/>
    
      <category term="政论文" scheme="https://zhang21.github.io/tags/%E6%94%BF%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>2019小计划</title>
    <link href="https://zhang21.github.io/2019/02/10/2019%E5%B0%8F%E8%AE%A1%E5%88%92/"/>
    <id>https://zhang21.github.io/2019/02/10/2019小计划/</id>
    <published>2019-02-10T11:52:49.000Z</published>
    <updated>2019-02-18T00:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><ul><li style="list-style: none"><input type="checkbox"> 《MySQL文档》</li><li style="list-style: none"><input type="checkbox"> 《SaltStack文档》</li><li style="list-style: none"><input type="checkbox"> 《TCP/IP》</li><li style="list-style: none"><input type="checkbox"> 《Netdata文档》</li><li style="list-style: none"><input type="checkbox"> 《Pinpoint文档》</li><li style="list-style: none"><input type="checkbox"> 《Prometheus文档》</li><li style="list-style: none"><input type="checkbox"> 《Grafana文档》</li><li style="list-style: none"><input type="checkbox" checked> 《GitLab文档》</li><li style="list-style: none"><input type="checkbox"> 《Django文档》</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h1><ul><li style="list-style: none"><input type="checkbox"> 《资本论》</li><li style="list-style: none"><input type="checkbox"> 《灵飞经小楷》</li><li style="list-style: none"><input type="checkbox"> 《经济学原理》</li><li style="list-style: none"><input type="checkbox"> 省考: 2-4月</li><li style="list-style: none"><input type="checkbox"> 《论美国的民主》</li><li style="list-style: none"><input type="checkbox"> 《论法的精神》</li><li style="list-style: none"><input type="checkbox"> 《社会契约论》</li><li style="list-style: none"><input type="checkbox"> 《新概念英语》</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><ul><li style="list-style: none"><input type="checkbox"> 书法学习</li><li style="list-style: none"><input type="checkbox"> 修身养性</li><li style="list-style: none"><input type="checkbox"> 找寻另一半</li><li style="list-style: none"><input type="checkbox"> 是否入手Nokia 9</li><li style="list-style: none"><input type="checkbox"> 是否换台笔记本电脑</li><li style="list-style: none"><input type="checkbox"> 是否入手罗技G29+ARTG29桌子+GTSport</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Zhang" scheme="https://zhang21.github.io/categories/Zhang/"/>
    
    
      <category term="2019" scheme="https://zhang21.github.io/tags/2019/"/>
    
  </entry>
  
  <entry>
    <title>Netdata</title>
    <link href="https://zhang21.github.io/2019/02/02/Netdata/"/>
    <id>https://zhang21.github.io/2019/02/02/Netdata/</id>
    <published>2019-02-02T08:09:49.000Z</published>
    <updated>2019-02-03T03:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>GitHub: <a href="https://github.com/netdata/netdata" target="_blank" rel="noopener">https://github.com/netdata/netdata</a></li><li>Netdata: <a href="https://my-netdata.io/" target="_blank" rel="noopener">https://my-netdata.io/</a></li><li>Docs: <a href="https://docs.netdata.cloud/" target="_blank" rel="noopener">https://docs.netdata.cloud/</a></li></ul><p>环境:</p><ul><li>EL7x86_64</li><li>Netdata v1.12</li></ul><p><br><br><br></p><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Netdata</strong> 是可用于系统和应用程序的 分布式(distributed)、实时(real-time)、性能(performance)、健康监控(health monitoring) 的高度优化的监控代理开源程序，用于解决性能问题。</p><p>Netdata使用高度交互的Web仪表板，实时提供其运行的系统（包括Web服务器，数据库，应用程序）上发生的所有事情的无与伦比的见解(unparalleled insights)。<br>它可以自动运行，无需任何第三方组件，也可以集成到现有的监控工具链中(Prometheus, Graphite, OpenTSDB, Kafka, Grafana…)</p><p><br></p><h2 id="Why-Netdata"><a href="#Why-Netdata" class="headerlink" title="Why Netdata"></a>Why Netdata</h2><p>Netdata采用完全不同的监控方法。<br>Netdata 是一个位于你安装系统上的 monitoring agent。它是:</p><ul><li>a <strong>metrics collector</strong>: 收集系统和应用指标</li><li>a <strong>time-series database</strong>: 全部存储在内存中，在运行时不会触及磁盘</li><li>a <strong>metrics visualizer</strong>: 超快速、交互式、现代化，针对异常检测进行了优化</li><li>a <strong>alarms notification engine</strong>: 用于检测性能和可用性问题的高级监控程序</li></ul><p><br><br><br><br><br></p><h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h2><p>Netdata 是一个高效，高度模块化的度量管理引擎。其无锁设计使其成为指标并发操作的理想选择。</p><p><img src="/images/Netdata/it_works.png" alt=""></p><p><br><br><br><br><br></p><h2 id="资料图"><a href="#资料图" class="headerlink" title="资料图"></a>资料图</h2><p>详情: <a href="https://my-netdata.io/infographic.html" target="_blank" rel="noopener">https://my-netdata.io/infographic.html</a></p><p>Netdata 功能特色和体系架构的高级预览。</p><p><img src="/images/Netdata/infoGraphic.png" alt=""></p><p><br><br><br><br><br></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>一般来说:</p><ul><li><strong>1s granularity</strong>: 所有指标的最高分辨率</li><li><strong>Unlimited metrics</strong>: 收集所有可用的指标，越多越好</li><li><strong>1% CPU utilization of a single core</strong>: 超级快，优化好</li><li><strong>A few MB of RAM</strong>: 默认使用25MB</li><li><strong>Zero disk I/O</strong>: 运行时，不会加载和保存任何东西，日志除外</li><li><strong>Zero configuration</strong>: 自动检测所有内容</li><li><strong>Zero maintenance</strong>: 你只需运行它，它完成剩余的事情</li><li><strong>Zero dependencies</strong>: 零依赖，自身便包含了Web服务器</li><li><strong>Scales to infinity</strong>: 你可在servers, containers, VMs and IoTs 上安装它。默认情况下，度量标准不是集中式的，因此没有限制</li><li><strong>Several operating modes</strong>: 自主主机监控（默认），无头数据收集器，转发代理，存储和转发代理，中央多主机监控</li></ul><p><br></p><p>健康检查和告警:</p><ul><li><strong>Sophisticated alerting</strong>: 自带上百个告警，开箱即用。支持动态阈值，滞后，警报模板，多种基于角色的通知方法</li><li><strong>Notifications</strong>: 支持多种通知方式</li></ul><p><br></p><p>集成:</p><ul><li><strong>time-series dbs</strong>: 可将其指标以相同或更低的方案存档到 <code>graphite</code>, <code>opentsdb</code>, <code>prometheus</code>, <code>json</code>, <code>document DB</code></li></ul><p><br><br><br></p><h2 id="监控什么"><a href="#监控什么" class="headerlink" title="监控什么"></a>监控什么</h2><p>Netdata 数据收集是可扩展的，您可以监控任何可以获得指标的内容。它的 <code>Plugin API</code> 支持所有的编程语言。</p><ul><li>为了获得更好的性能，大多数与系统相关的插件都是用C语言编写 (cpu, mem, disk, fs, network…)</li><li>为了更快的开发和更轻松的贡献，大多数与应用程序相关的插件都是用python编写 (database, web server…)</li></ul><p><br></p><p><strong>APM (Application Performance Monitoring):</strong></p><ul><li><strong>statsd</strong>: Netdata是一个功能齐全的statsd server</li><li><strong>Go expvar</strong>: 使用expvar包收集由Go语言编写的应用程序公开的度量标准</li><li><strong>Spring Boot</strong>: 运行Java Spring Boot，这些应用程序使用Spring Boot库中包含的Spring Boot Actuator来公开其指标</li><li><strong>uWSGI</strong>: 从uWSGI应用程序收集性能指标</li></ul><p><br></p><p><strong>System Resources:</strong></p><ul><li><strong>CPU Utilization</strong>: 总核心和每核心 的CPU使用率</li><li><strong>Interrupts</strong>: 总核心和每核心 的CPU中断</li><li><strong>SoftIRQs</strong>: 总核心和每核心 的SoftIRQs</li><li><strong>SoftNet</strong>: 与网络活动相关的总核心和每核心 的SoftIRQ</li><li><strong>CPU Throttling</strong>: 收集每个CPU的CPU限制</li><li><strong>CPU Frequency</strong>: 收集当前的CPU频率</li><li><strong>CPU Idle</strong>: 收集每个处理器状态所花费的时间</li><li><strong>IdleJitter</strong>: 测量CPU延迟</li><li><strong>Entropy</strong>: 随机数池，在密码学中使用</li><li><strong>Interprocess Communication(IPC)</strong></li></ul><p><br></p><p><strong>Memory:</strong></p><ul><li><strong>ram</strong>: 收集有关RAM使用情况</li><li><strong>swap</strong>: 收集有关SWAP使用情况</li><li><strong>available memory</strong>: 收集可用于用户空间进程的RAM量</li><li><strong>committed memory </strong>: 收集提交给用户空间进程的RAM量</li><li><strong>Page Faults</strong>: 收集系统页面错误</li><li><strong>writeback memory</strong>: 收集系统脏内存和回写活动</li><li><strong>huge pages</strong>: 收集用于大页面的RAM量</li><li><strong>KSM</strong>: 收集有关内核相同合并的信息</li><li><strong>Numa</strong>: 在支持它的系统上收集Numa信息</li><li><strong>slab</strong>: 收集有关Linux内核内存使用情况</li></ul><p><br></p><p><strong>Disks:</strong></p><ul><li><strong>block devices</strong>: 每个磁盘：I/O, 操作, 积压, 利用率, 空间…</li><li><strong>BCACHE</strong>: SSD缓存设备的详细性能</li><li><strong>DiskSpace</strong>: 监视磁盘空间使用情况</li><li><strong>mdstat</strong>: 软件RAID</li><li><strong>hddtemp</strong>: 磁盘温度</li><li><strong>smartd</strong>: 磁盘  S.M.A.R.T 值</li><li><strong>device mapper</strong>: 命名磁盘</li><li><strong>Veritas Volume Manager</strong>: 命名磁盘</li><li><strong>egacli</strong>: 适配器，物理驱动器和电池统计信息</li><li><strong>adaptec_raid</strong>: 逻辑和物理设备健康指标</li></ul><p><br></p><p><strong>Filesystems:</strong></p><ul><li><strong>BTRFS</strong>: 详细的磁盘空间分配和使用</li><li><strong>Ceph</strong>: OSD使用，池使用，对象数…</li><li><strong>NFS file servers and clients</strong>: NFS I/O, cache, read ahead, RPC调用</li><li><strong>Samba </strong>: SAMBA文件共享的性能指标</li><li><strong>ZFS</strong>: 详细的性能和资源使用情况</li></ul><p><br></p><p><strong>Networking:</strong></p><ul><li><strong>Network Stack</strong>: 关于网络堆栈(IPv4和IPv6的所有协议)和所有网络接口(每个接口: 带宽，数据包，错误，丢弃)的一切</li><li><strong>Netfilter</strong>: 关于Netfilter连接跟踪器的一切</li><li><strong>SynProxy</strong>: 收集有关linux SYNPROXY(DDoS)的性能数据</li><li><strong>NFacct</strong>: 从iptables收集统计的数据</li><li><strong>Network QoS</strong>: 实时显示网络tc类的工具</li><li><strong>FPing</strong>: 测量任意数量的主机之间的延迟和数据包丢失</li><li><strong>ISC dhcpd</strong>: 池利用…</li><li><strong>AP</strong>: 收集Linux访问点性能数据(<code>hostapd</code>)</li><li><strong>SNMP</strong>: 监视SNMP设备</li><li><strong>port_check</strong>: 检查TCP端口的可用性和响应时间</li></ul><p><br></p><p><strong>Virtual Private Networks:</strong></p><ul><li><strong>OpenVPN</strong>: 收集每个隧道的状态</li><li><strong>LibreSwan</strong>: 收集每个IPSEC隧道的指标</li><li><strong>Tor</strong>: 收集Tor流量统计信息</li></ul><p><br></p><p><strong>Processes:</strong></p><ul><li><strong>System Processes</strong>: running, blocked, forks, active</li><li><strong>Applications</strong>: 分析每个进程组的资源情况</li><li><strong>systemd</strong>: 使用CGROUPS监视systemd服务</li></ul><p><br></p><p><strong>Users:</strong></p><ul><li><strong>Users and User Groups resource usage</strong>: 总结每个用户和用户组资源使用情况</li><li><strong>logind</strong>: 收集会话，用户和连接</li></ul><p><br></p><p><strong>Containers and VMs:</strong></p><ul><li><strong>Containers</strong>: 使用CGROUPS收集各种容器的资源使用情况</li><li><strong>libvirt VMs</strong>: 使用CGROUPS收集各种VM的资源使用情况</li><li><strong>dockerd</strong>: 收集docker健康指标</li></ul><p><br></p><p><strong>Web Servers:</strong></p><ul><li><strong>Apache and lighttpd</strong>: <code>mod-status</code>和日志统计信息</li><li><strong>IPFS</strong>: 带宽，对等连接</li><li><strong>LiteSpeed</strong>: 读取litespeed rtreport文件以收集指标</li><li><strong>Nginx</strong>: <code>stub-status</code></li><li><strong>Nginx+</strong>: 连接到多个nginx_plus服务器以收集实时性能指标</li><li><strong>PHP-FPM</strong>: 多个实例，每个实例报告连接、请求、性能…</li><li><strong>Tomcat</strong>: 访问、线程、空闲内存、卷…</li><li><strong>web server <code>access.log</code> files</strong>: 实时提取，Web服务器和代理性能指标，并应用多个运行状况检查…</li><li><strong>HTTP check</strong>: 检查一个或多个Web服务器以获取HTTP状态代码和返回的内容</li></ul><p><br></p><p><strong>Proxies, Balancers, Accelerators:</strong></p><ul><li><strong>HAproxy</strong>: 带宽，会话，后端…</li><li><strong>Squid</strong>: 每个服务器显示，客户端带宽和请求、服务器带宽和请求</li><li><strong>Traefik</strong>: 连接到多个traefik实例以收集API指标</li><li><strong>Varnish</strong>: 线程，会话，命中，对象，后端…</li><li><strong>IPVS</strong>: 从Linux IPVS负载均衡器收集指标</li></ul><p><br></p><p><strong>Database Servers:</strong></p><ul><li><strong>CouchDB</strong>: I/O，请求方法，状态代码，任务，副本，每个数据库…</li><li><strong>MemCached</strong>: 带宽，连接，项目…</li><li><strong>MongoDB</strong>: 操作，客户端，事务，游标，连接，断言，锁…</li><li><strong>MySQL and mariadb</strong>: 带宽，查询率，锁，问题，tmp操作，连接，binlog指标，线程，innodb指标…</li><li><strong>PostgreSQL</strong>: 连接，元组读取/写入/返回，事务，锁定，后端进程，索引，表，预写，后台编写器…</li><li><strong>Proxy SQL</strong>: 收集后端和前端性能指标</li><li><strong>Redis</strong>: 操作，命中率，内存，键，客户端，从库</li><li><strong>RethinkDB</strong>: 连接到多个rethinkdb服务器以收集实时指标</li></ul><p><br></p><p><strong>Message Brokers:</strong></p><ul><li><strong>beanstalkd</strong>: 全局/每个 tube 监控</li><li><strong>RabbitMQ</strong>: 性能和健康指标</li></ul><p><br></p><p><strong>Search and Indexing:</strong></p><ul><li><strong>ElasticSearch</strong>: 搜索和索引的性能、延迟、计时、集群统计、线程统计…</li></ul><p><br></p><p><strong>DNS Servers:</strong></p><ul><li><strong>bind_rndc</strong>: 解析 <code>named.stats</code> 转储文件以收集实时性能指标</li><li><strong>dnsdist</strong>: 性能和健康指标</li><li><strong>ISC Bind (named)</strong>: 客户端，请求，查询，更新，失败和每个视图指标</li><li><strong>NSD</strong>: 查询，区域，协议，查询类型，传输…</li><li><strong>PowerDNS</strong>: 查询，回答，缓存，延迟…</li><li><strong>unbound</strong>: 性能和资源使用指标</li><li><strong>dns_query_time</strong>: DNS查询时间统计信息</li></ul><p><br></p><p><strong>Time Servers:</strong></p><ul><li><strong>chrony</strong>: 频率，最后偏移，RMS偏移，残余频率，根延迟，根分散，偏斜，系统时间</li><li><strong>ntpd</strong>: 收集统计信息</li></ul><p><br></p><p><strong>Mail Servers:</strong></p><ul><li><strong>Dovecot</strong>: POP3/IMAP 服务器</li><li><strong>Exim</strong>: 消息队列(电子邮件排队)</li><li><strong>Postfix</strong>: 消息队列(条目，大小)</li></ul><p><br></p><p><strong>Hardware Sensors:</strong></p><ul><li><strong>IPMI</strong>: 企业硬件传感器和事件</li><li><strong>lm-sensors</strong>: 温度，电压，风扇，功率，湿度…</li><li><strong>Nvidia</strong>: 收集Nvidia GPU的信息</li><li><strong>RPi</strong>: Raspberry Pi温度传感器</li><li><strong>w1sensor</strong>: 从连接的1-Wire传感器收集数据</li></ul><p><br></p><p><strong>UPSes:</strong></p><ul><li><strong>apcupsd</strong>: 负载，充电，电池电压，温度，效用指标，输出指标</li><li><strong>NUT</strong>: 负载，充电，电池电压，温度，效用指标，输出指标</li><li><strong>Linux Power Supply</strong>: 收集Linux上电源驱动程序报告的指标</li></ul><p><br></p><p><strong>Social Sharing Servers:</strong></p><ul><li><strong>RetroShare</strong>: 连接到多个retroshare服务器以收集实时性能指标</li></ul><p><br></p><p><strong>Security:</strong></p><ul><li><strong>Fail2Ban</strong>: 监视fail2ban日志文件以检查所有活动jail的所有禁令</li></ul><p><br></p><p><strong>Authentication, Authorization, Accounting (AAA, RADIUS, LDAP) Servers:</strong></p><ul><li><strong>FreeRadius</strong>: 使用radclient命令提供freeradius统计信息（身份验证，账户统计，代理身份验证，代理统计）</li></ul><p><br></p><p><strong>Telephony Servers:</strong></p><ul><li><strong>opensips</strong>: 连接到opensips服务器（仅限localhost）以收集实时性能指标</li></ul><p><br></p><p><strong>Household Appliances:</strong></p><ul><li><strong>SMA webbox</strong>: 连接到多个远程SMA网箱，以收集光伏（太阳能）发电的实时性能指标</li><li><strong>Fronius</strong>: 连接到多个远程Fronius Symo服务器，以收集光伏（太阳能）发电的实时性能指标</li><li><strong>StiebelEltron</strong>: 使用他们的互联网服务网关（ISG网站）从Stiebel Eltron加热系统收集温度和其他指标</li></ul><p><br></p><p><strong>Game Servers:</strong></p><ul><li><strong>SpigotMC</strong>: 使用Minecraft远程控制台监控Spigot Minecraft服务器每秒的滴答数和在线玩家数量</li></ul><p><br></p><p><strong>Distributed Computing:</strong></p><ul><li><strong>BOINC</strong>: 使用远程GUI RPC接口监视本地和远程BOINC客户端软件的任务状态。还为少数错误情况提供警报</li></ul><p><br></p><p><strong>Media Streaming Servers:</strong></p><ul><li><strong>IceCast</strong>: 收集活动源的侦听器数量</li></ul><p><br></p><p><strong>Monitoring Systems:</strong></p><ul><li><strong>Monit</strong>: 收集有关监控目标（文件系统，应用程序，网络）的指标</li></ul><p><br><br><br><br><br></p><h2 id="安全设计"><a href="#安全设计" class="headerlink" title="安全设计"></a>安全设计</h2><p><br><br><br><br><br></p><h2 id="匿名统计"><a href="#匿名统计" class="headerlink" title="匿名统计"></a>匿名统计</h2><p><br><br><br></p><hr><p><br><br><br></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/netdata/netdata&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/netdata/netdata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Netdata: &lt;a href=&quot;https://my-netdata.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://my-netdata.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docs: &lt;a href=&quot;https://docs.netdata.cloud/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.netdata.cloud/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EL7x86_64&lt;/li&gt;
&lt;li&gt;Netdata v1.12&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Monitoring" scheme="https://zhang21.github.io/tags/Monitoring/"/>
    
      <category term="Performance" scheme="https://zhang21.github.io/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>OpenLDAP</title>
    <link href="https://zhang21.github.io/2019/01/18/OpenLDAP/"/>
    <id>https://zhang21.github.io/2019/01/18/OpenLDAP/</id>
    <published>2019-01-17T17:18:29.000Z</published>
    <updated>2019-01-18T08:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>LDAP维基百科: <a href="https://zh.wikipedia.org/wiki/LDAP" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/LDAP</a></li><li>OpenLDAP维基百科: <a href="https://zh.wikipedia.org/wiki/OpenLDAP" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/OpenLDAP</a></li><li><code>x.500</code>维基百科: <a href="https://zh.wikipedia.org/wiki/X.500" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/X.500</a></li><li>OpenLDAP文档: <a href="http://www.openldap.org/doc/" target="_blank" rel="noopener">http://www.openldap.org/doc/</a></li></ul><p>环境:</p><ul><li>RHEL7.x86_64</li><li>LDAP v2.4.44</li></ul><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><br></p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p><strong>LDAP</strong>(轻型目录访问协议, Lightweight Directory Access Protocol）是一个开放的、中立的、工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。<br>LDAP基于<code>X.500</code>标准的子集。因为这个关系，LDAP有时被称为<code>X.500-lite</code>。<br>LDAP在TCP/IP之上定义了一个相对简单的升级和搜索目录的协议。</p><p>LDAP目录与普通数据库的主要不同之处在于数据的组织方式，它是一种有层次的、树形结构。所有条目的属性的定义是对象类<code>object class</code>的组成部分，并组成在一起构成<code>schema</code>；那些在组织内代表个人的<code>schema</code>被命名为<code>white pages schema</code>。数据库内的每个条目都与若干对象类联系，而这些对象类决定了一个属性是否为可选和它保存哪些类型的信息。</p><p>LDAP目录的<strong>条目</strong>（entry）由<strong>属性</strong>（attribute）的一个聚集组成，并由一个唯一性的名字引用，即<strong>专有名称</strong>（distinguished name，DN）。</p><ul><li><strong>DN</strong>: Distinguished Name</li><li><strong>CN</strong>: Common Name</li><li><strong>OU</strong>: Domain Component</li></ul><p><br></p><p>LDAP组织数据方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        dc=org</span><br><span class="line"></span><br><span class="line">     |dc=wikipedia</span><br><span class="line">      /          \</span><br><span class="line">ou=people     ou=groups</span><br></pre></td></tr></table></figure><p><img src="/images/OpenLDAP/LDAP_Structure.png" alt=""></p><p><br></p><p>LDAP主要的应用场景是查询多而修改极少，那就充分发挥LDAP的优势了。因为没有事务处理，那数据库的速度可是比不上。 还有LDAP能存储海量的数据，还可以轻松地在各个系统之间复制，可用性超高。</p><p>目录是一个为查询、浏览和搜索而优化的专业分布式数据库，它呈树状结构组织数据，就好象Linux/Unix系统中的文件目录一样。目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好象它的名字一样。</p><p><br><br><br><br><br></p><h2 id="OpenLDAP"><a href="#OpenLDAP" class="headerlink" title="OpenLDAP"></a>OpenLDAP</h2><p><strong>OpenLDAP</strong>是轻型目录访问协议（Lightweight Directory Access Protocol，LDAP）的<strong>自由和开源</strong>的实现，在其OpenLDAP许可证下发行，并已经被包含在众多流行的Linux发行版中。</p><p>OpenLDAP主要包括下述4个部分：</p><ul><li><code>slapd</code>: 独立LDAP守护服务</li><li><code>slurpd</code>: 独立的LDAP更新复制守护服务</li><li>实现LDAP协议的库</li><li>工具软件和示例客户端</li></ul><p><br><br><br><br><br></p><h2 id="Why-OpenLDAP"><a href="#Why-OpenLDAP" class="headerlink" title="Why OpenLDAP"></a>Why OpenLDAP</h2><p>账号是登录系统的唯一入口。要登录系统，首先系统要存在登录所使用的账号（/etc/passwd）及密码信息（/etc/shadow），然后经过系统查找顺序（/etc/nsswith.conf）及认证模块（/etc/pam.d/*）验证，得到授权后方可登录系统。如果多个用户登录系统，就需要在每个系统上创建用户名和密码；否则，就无法登录系统。</p><p>对于账号管理人员而言，维护10 台、100 台机器的账号，或许勉强可以维护、管理。如果机器数量达到1000 以上时，对于账号的创建、回收、权限的分配、密码策略、账号安全审计等一系列操作，账号管理人员就心有余而力不足了。此时OpenLDAP 账号集中管理软件就应用而生，它可以实现账号集中维护、管理，只需要将被管理的机器加入到服务器端即可，此后所有与账号相关的策略均在服务端实现，从而解决了运维案例所产生的众多管理问题。</p><p>关于账号的添加、删除、修改、权限的赋予等一系列操作只需要在服务端操作即可，无须在客户端机器进行单独操作。客户端账号及密码均通过OpenLDAP 服务器进行验证，从而实现账号集中认证管理，此时账号管理员只须维护OpenLDAP 服务器条目即可。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="OpenLDAP目录服务"><a href="#OpenLDAP目录服务" class="headerlink" title="OpenLDAP目录服务"></a>OpenLDAP目录服务</h1><p>Introduction to OpenLDAP Directory Services</p><p>本节介绍如何构建，配置和操作OpenLDAP软件以提供目录服务。这包括有关如何配置和运行standalone LDAP daemon——<code>slapd</code>的详细信息。它适用于系统管理员。本节提供目录服务的基本介绍，特别是<strong>slapd</strong>提供的目录服务。<br>本简介提供足够的信息，以便您可以开始学习<strong>LDAP</strong>，<strong>X.500</strong>和<strong>目录服务</strong>。</p><p><br></p><h2 id="目录服务是什么"><a href="#目录服务是什么" class="headerlink" title="目录服务是什么"></a>目录服务是什么</h2><p>目录是专门用于<strong>搜索</strong>(search)和<strong>浏览</strong>(browse)的专用数据库，另外还支持基本<strong>查找</strong>(lookup)和<strong>更新</strong>(update)功能。</p><p>目录往往包含描述性的，基于属性的信息，并支持复杂的过滤功能。目录通常不支持在为处理大量复杂更新而设计的数据库管理系统中发现的复杂事务或回滚方案。如果允许，目录更新通常是简单的全有或全无更改。目录通常用于快速响应高容量查找或搜索操作。他们可能具有广泛复制信息的能力，以提高可用性和可靠性，同时缩短响应时间。复制目录信息时，只要及时解决不一致问题，副本之间的临时不一致就可以了。</p><p>有许多不同的方法来提供目录服务。不同的方法允许将不同类型的信息存储在目录中，对如何引用，查询和更新信息。一些目录服务是本地的，向受限制的上下文提供服务；其它服务是全球性的，为更广泛的环境提供服务。全局服务通常是分布式的，这意味着它们包含的数据分布在许多机器上，所有机器都协作提供目录服务。通常，全局服务定义统一命名空间(namespace)，无论您在何处与数据本身相关，都可以提供相同的数据视图。</p><p><br><br><br><br><br></p><h2 id="LDAP是什么"><a href="#LDAP是什么" class="headerlink" title="LDAP是什么"></a>LDAP是什么</h2><p>LDAP(Lightweight Directory Access Protocol, 轻型目录访问协议)，顾名思义，它是一种用于访问目录服务的轻量级协议，特别是基于<code>X.500</code>的目录服务。LDAP通过TCP / IP或其他面向连接的传输服务运行。</p><p>哪些种类的信息可以存储在目录中？DAP信息模型基于<strong>条目</strong>(entry)。条目是具有全局唯一<strong>可分辨名称</strong>（DN）的<strong>属性</strong>(attributes)集合。DN用于明确指代Entry，每个条目的属性都有一个<strong>类型</strong>(type)和一个或多个<strong>值</strong>(value)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#这些类型通常是助记符字符串</span><br><span class="line">cn</span><br><span class="line">mail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#值的语法取决于属性类型</span><br><span class="line">cn: ldap-test</span><br><span class="line">mail: example@test.com</span><br></pre></td></tr></table></figure><p><br></p><p>信息是如何安排的？在LDAP中，目录条目以分层树状结构(tree-like structure)排列。<br>传统上，这种结构反映了地理/组织边界。表示国家/地区的条目显示在树的顶部。下面是代表各州和国家组织的条目。再下面可能是表示组织单位，人员，打印机，文档或您可以想到的任何其他内容的条目。</p><p>传统命名:</p><p><img src="/images/OpenLDAP/intro_tree.png" alt=""></p><p><br></p><p>还可以基于因特网域名来安排树。这种命名方法正变得越来越流行，因为它允许使用DNS定位目录服务。</p><p>基于域名命名:</p><p><img src="/images/OpenLDAP/intro_dctree.png" alt=""></p><p><br></p><p>此外，LDAP允许您通过使用名为<strong>对象类</strong>(objectClass)的特殊属性来控制条目中所需和允许的属性。它的值确定条目必须遵守的模式规则。</p><p><br></p><p>如何引用信息？条目由其可分辨名称(DN)引用，该名称通过获取条目本身的名称来构造(称为Relative Distinguished Name, RDN)，并连接其祖先条目的名称。</p><p><br></p><p>如何保护信息免受未经授权的访问？某些目录服务不提供保护，允许任何人查看信息。LDAP为客户端提供了一种机制，用于对目录服务器进行身份验证或证明其身份。LDAP还支持数据安全性（完整性和机密性）服务。</p><p><br><br><br><br><br></p><h2 id="什么时候应该使用LDAP"><a href="#什么时候应该使用LDAP" class="headerlink" title="什么时候应该使用LDAP"></a>什么时候应该使用LDAP</h2><p>通常，当您需要通过基于标准的方法集中管理、存储、访问数据时，应使用目录服务器。<br>总是有新的方法来使用目录并应用LDAP原则来解决某些问题，因此这个问题没有简单的答案。</p><p>一些常见的栗子：</p><ul><li>机器认证: Machine Authentication</li><li>用户认证: User Authentication</li><li>用户/系统组: User/System Groups</li><li>地址簿: Address book</li><li>组织代表: Organization Representation</li><li>资产追踪: Asset Tracking</li><li>电话信息存储: Telephony Information Store</li><li>用户资源管理: User resource management</li><li>电子邮件查找: E-mail address lookups</li><li>应用配置存储: Application Configuration store</li><li>PBX Configuration store</li><li>…</li></ul><p><br><br><br><br><br></p><h2 id="LDAP如何工作"><a href="#LDAP如何工作" class="headerlink" title="LDAP如何工作"></a>LDAP如何工作</h2><p>LDAP使用C-S模式。一个或多个LDAP服务器包含组成目录信息树（DIT，directory information tree）的数据。客户端连接到服务器并发出请求。服务端响应客户端的请求。无论客户端连接到哪个LDAP服务器，它都会看到相同的目录视图，这是全局目录服务的一个重要特性。</p><p><br><br><br><br><br></p><h2 id="关于x-500"><a href="#关于x-500" class="headerlink" title="关于x.500"></a>关于<code>x.500</code></h2><p><code>X.500</code>是计算机目录服务的标准系列。<code>X.500</code>协议包括:</p><ul><li>DAP (Directory Access Protocol)</li><li>DSP (Directory System Protocol)</li><li>DISP (Directory Information Shadowing Protocol)</li><li>DOP (Directory Operational Bindings Management Protocol)</li><li>LDAP (Lightweight Directory Access Protocol)</li></ul><p><br></p><p>从技术上讲，LDAP是<code>X.500</code>目录服务的目录访问协议。DAP是一种重量级协议，可在完整的OSI协议栈上运行，并且需要大量的计算资源。LDAP旨在通过<code>TCP/IP</code>进行操作，并以更低的成本提供DAP的大部分功能。</p><p>虽然LDAP仍然用于通过网关访问X.500目录服务，但现在更常见的是在X.500服务器中直接实现LDAP。</p><p>可以将 standalone LDAP daemon(slapd) 视为轻量级X.500目录服务器。也就是说，它没有实现X.500的DAP，也不支持完整的X.500模型。</p><p><br><br><br><br><br></p><h2 id="LDAP与RDBMS"><a href="#LDAP与RDBMS" class="headerlink" title="LDAP与RDBMS"></a>LDAP与RDBMS</h2><p>最常见的问题是——为什么OpenLDAP不使用 RDBMS(关系数据库管理系统) 而是使用像 LMDB 那样的嵌入式键/值存储？总的来说，期望商业级 RDBMS 实现的复杂算法可以使 OpenLDAP更 快或更好，并且同时允许与其他应用程序共享数据。</p><p>简而言之，使用嵌入式数据库和自定义索引系统，OpenLDAP可以在不损失可靠性的情况下提供更高的性能和可扩展性。所以OpenLDAP使用 LMDB 并发/事务 数据库软件。</p><p><br></p><p>下面是一个详细而冗长的答案: &lt;&gt;</p><p>很有可能认为在目录中使用RDBMS后端可以解决所有问题。但是，它是一头猪。这是因为数据模型非常不同。使用关系数据库表示目录数据将需要将数据拆分为多个表。<br>现在最大的问题是从一个条目访问数据需要在不同的磁盘区域上进行搜索。在某些应用程序中，这可能没问题但在许多应用程序中性能会受到影响。</p><p><br><br><br><br><br></p><h2 id="slapd"><a href="#slapd" class="headerlink" title="slapd"></a>slapd</h2><p>slapd是OpenLDAP的守护进程， 在许多不同平台上运行的LDAP目录服务器。</p><p>slapd有一些有趣的功能和特性:</p><ul><li><strong>LDAPv3</strong>: slapd实现轻量级目录访问协议的第3版，slapd支持IPv4和IPv6以及Unix IPC上的LDAP。</li><li><strong>Simple Authentication and Security Layer</strong>: slapd通过使用SASL支持强身份验证和数据安全性（完整性和机密性）服务</li><li><strong>Transport Layer Security</strong>: slapd通过使用 TLS/SSL 持基于证书的身份验证和数据安全性（完整性和机密性）服务</li><li><strong>Topology control</strong>: slapd可以配置为根据网络拓扑信息限制 socket 层的访问，基于 TCP wrapper</li><li><strong>Access control</strong>: slapd提供了丰富而强大的访问控制功能，允许您控制对数据库中信息的访问</li><li><strong>Internationalization</strong>: slapd支持Unicode 和 Language tag</li><li><strong>Choice of database backends</strong>: slapd附带了各种不同的数据库后端，您可以从中选择</li><li><strong>Multiple database instances</strong>: slapd可以配置为同时为多个数据库提供服务。这意味着单个slapd服务器可以使用相同或不同的数据库后端响应LDAP树的许多逻辑上不同部分的请求</li><li><strong>Generic modules API</strong>: 如果您需要更多自定义，slapd可让您轻松编写自己的模块</li><li><strong>Threads</strong>: slapd具有高性能的线程</li><li><strong>Replication</strong>: slapd可以配置为维护目录信息的集群副本</li><li><strong>Proxy Cache</strong>: slapd可以配置为缓存LDAP代理服务</li><li><strong>Configuration</strong>: slapd可通过单个配置文件进行高度配置，允许您更改您想要更改的所有内容</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>A Quick-Start Guide</p><blockquote><p>注意：本快速入门指南不使用强身份验证，也不使用任何完整性或机密保护服务。这些服务在OpenLDAP的其它章节中进行了描述。</p></blockquote><p>以下包括OpenLDAP v2.4软件的快速入门指南。</p><p><br></p><ul><li>获取软件</li><li>打开发行包</li><li>审阅文档</li><li>运行<code>configure</code></li><li>构建软件</li><li>测试构建</li><li>安装软件</li><li>编辑配置文件</li><li>导入配置数据库</li><li>启动SLAPD</li><li>添加初始化条目到目录</li><li>查看是否正常运行</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="配置选择"><a href="#配置选择" class="headerlink" title="配置选择"></a>配置选择</h1><p>The Big Picture - Configuration Choices</p><p>本节简要概述了各种LDAP目录配置。</p><p><br></p><h2 id="本地目录服务"><a href="#本地目录服务" class="headerlink" title="本地目录服务"></a>本地目录服务</h2><p>Local Directory Service</p><p>在此配置中，您运行 slapd 实例，该实例仅为您的本地域提供目录服务。它不以任何方式与其他目录服务器进行交互。</p><p><img src="/images/OpenLDAp/config_local.png" alt=""></p><p><br><br><br><br><br></p><h2 id="带推荐的本地目录服务"><a href="#带推荐的本地目录服务" class="headerlink" title="带推荐的本地目录服务"></a>带推荐的本地目录服务</h2><p>Local Directory Service with Referrals</p><p>在此配置中，运行 slapd 实例，该实例为本地域提供目录服务，并将其配置为将引用返回到能够处理请求的其它服务器。</p><p>如果要提供本地服务并参与全局目录，或者要将下级条目的责任委派给其他服务器，请使用此配置。</p><p><img src="/images/OpenLDAP/config_ref.png" alt=""></p><p><br><br><br><br><br></p><h2 id="副本目录服务"><a href="#副本目录服务" class="headerlink" title="副本目录服务"></a>副本目录服务</h2><p>Replicated Directory Service</p><p>slapd 包括对基于LDAP Sync 的复制的支持，称为syncrepl。可用于在多个目录服务器上维护目录信息的副本。在其最基本的配置中，master 是 syncrepl provider，slavee 是 syncrepl consumer。<br>集群和提供了可靠性和可用性。</p><p><img src="/images/OpenLDAP/config_repl.png" alt=""></p><p><br><br><br><br><br></p><h2 id="分布式目录服务"><a href="#分布式目录服务" class="headerlink" title="分布式目录服务"></a>分布式目录服务</h2><p>Distributed Local Directory Service</p><p>在此配置中，本地服务被划分为较小的服务，每个服务都可以被复制，并与上级和下级引用粘合在一起。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Building and Installing OpenLDAP Software</p><p>本章详细介绍了如何构建和安装OpenLDAP软件包。</p><p><br></p><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p>官方文档中是使用源码进行构建和安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提取软件</span></span><br><span class="line">gunzip -c openldap-VERSION.tgz | tar xf -</span><br><span class="line"><span class="built_in">cd</span> openldap-VERSION</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#依赖软件</span></span><br><span class="line"><span class="comment">#请参考REAME，安装它所需的依赖软件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Transport Layer Security</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Simple Authentication and Security Layer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Kerberos Authentication Service</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Database Software</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Threads</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TCP Wrappers</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#configure</span></span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">./configure --<span class="built_in">enable</span>-wrappers \</span><br><span class="line">                CPPFLAGS=<span class="string">"-I/usr/local/include"</span> \</span><br><span class="line">                LDFLAGS=<span class="string">"-L/usr/local/lib -Wl,-rpath,/usr/local/lib"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建软件</span></span><br><span class="line">make depend</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">make <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line"><span class="comment">#如果未指定安装位置，默认安装到 /usr/local</span></span><br><span class="line"><span class="comment">#通常，安装需要超级用户权限</span></span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件</span></span><br><span class="line">/usr/<span class="built_in">local</span>/etc/openldap</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="包安装"><a href="#包安装" class="headerlink" title="包安装"></a>包安装</h2><p>因为在base源里面可直接搜索到<code>openldap</code>软件包，所以就是用软件包进行安装。</p><p><br></p><p>RPM包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#查看</span><br><span class="line">yum search openldap</span><br><span class="line"></span><br><span class="line">openldap.x86_64 : LDAP support libraries</span><br><span class="line">openldap-devel.x86_64 : LDAP development libraries and header files</span><br><span class="line">openldap-servers.x86_64 : LDAP server</span><br><span class="line">openldap-clients.x86_64 : LDAP client utilities</span><br><span class="line">openldap-servers-sql.x86_64 : SQL support module for OpenLDAP server</span><br><span class="line">compat-openldap.x86_64 : OpenLDAP compatibility shared libraries</span><br><span class="line">collectd-openldap.x86_64 : OpenLDAP plugin for collectd</span><br><span class="line">nss-pam-ldapd.x86_64 : An nsswitch module which uses directory servers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#安装</span><br><span class="line">yum install -y openldap.x86_64 openldap-servers.x86_64 openldap-clients.x86_64</span><br><span class="line">#yum install -y collectd-openldap.x86_64 openldap-servers-sql.x86_64 compat-openldap.x86_64 openldap-devel.x86_64 nss-pam-ldapd.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#验证</span><br><span class="line">rpm -qa | grep openldap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置文件</span><br><span class="line">/etc/openldap</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Configuring slapd</p><p>安装完毕后，你就可以配置并使用它。</p><p>本章介绍 <code>slapd-config</code> 配置系统的一般格式。<br>OpenLDAP v2.3及更高版本已转换为使用动态运行配置引擎<code>slapd-config</code>:</p><ul><li>完全启用LDAP</li><li>使用标准LDAP操作进行管理</li><li>将其配置数据存储在LDIF数据库中(openldap/slap.d/)</li><li>允许所有slapd的配置选项在运行中进行更改，通常无需重新启动服务器即可使更改生效</li></ul><p><br></p><blockquote><p><strong>注意</strong>：<br>虽然 <code>slapd-config</code> 统将其配置存储为（基于文本的）LDIF文件，但您不应直接编辑任何LDIF文件。配置更改应通过LDAP操作执行，如 <code>ldapadd</code>, <code>ldapdelete</code>, <code>ldapmodify</code></p></blockquote><p><br><br><br></p><h2 id="配置的布局"><a href="#配置的布局" class="headerlink" title="配置的布局"></a>配置的布局</h2><p>Configuration Layout</p><p>slapd配置存储为具有预定义模式和DIT的特殊LDAP目录。有特定的<code>objectClasses</code>用于承载全局配置选项，模式定义，后端和数据库定义以及各种其它项。</p><p>栗子配置树:</p><p><img src="/images/OpenLDAP/config_dit.png" alt=""></p><p><br></p><p><code>slapd-config</code> 配置树具有非常特定的结构。树的根名为 <code>cn=config</code> 并包含全局配置设置。其他设置包含在单独的子条目中：</p><ul><li>Dynamically loaded modules</li><li>Schema definitions</li><li>Backend-specific configuration</li><li>Database-specific configuration</li></ul><p><br></p><p>LDIF文件的常用规则适用于配置信息:</p><ul><li><code>#</code>表示注释</li><li>如果一行以单个空格开头，则将其视为前一行的延续（即使前一行是注释），并删除单个前导空格。条目由空行分隔</li></ul><p><br></p><p>配置LDIF的一般布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#globalconfigurationsettings</span><br><span class="line">dn:cn=config</span><br><span class="line">objectClass:olcGlobal</span><br><span class="line">cn:config</span><br><span class="line">&lt;globalconfigsettings&gt;</span><br><span class="line"></span><br><span class="line">#schemadefinitions</span><br><span class="line">dn:cn=schema,cn=config</span><br><span class="line">objectClass:olcSchemaConfig</span><br><span class="line">cn:schema</span><br><span class="line">&lt;systemschema&gt;</span><br><span class="line"></span><br><span class="line">dn:cn=&#123;X&#125;core,cn=schema,cn=config</span><br><span class="line">objectClass:olcSchemaConfig</span><br><span class="line">cn:&#123;X&#125;core</span><br><span class="line">&lt;coreschema&gt;</span><br><span class="line"></span><br><span class="line">#additionaluser-specifiedschema</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#backenddefinitions</span><br><span class="line">dn:olcBackend=&lt;typeA&gt;,cn=config</span><br><span class="line">objectClass:olcBackendConfig</span><br><span class="line">olcBackend:&lt;typeA&gt;</span><br><span class="line">&lt;backend-specificsettings&gt;</span><br><span class="line"></span><br><span class="line">#databasedefinitions</span><br><span class="line">dn:olcDatabase=&#123;X&#125;&lt;typeA&gt;,cn=config</span><br><span class="line">objectClass:olcDatabaseConfig</span><br><span class="line">olcDatabase:&#123;X&#125;&lt;typeA&gt;</span><br><span class="line">&lt;database-specificsettings&gt;</span><br><span class="line"></span><br><span class="line">#subsequentdefinitionsandsettings</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="配置指令"><a href="#配置指令" class="headerlink" title="配置指令"></a>配置指令</h2><p>Configuration Directives</p><p>本节详细介绍了常用的配置指令</p><p><br></p><h3 id="cn-config"><a href="#cn-config" class="headerlink" title="cn=config"></a>cn=config</h3><p>本条目中包含的指令通常适用于整个服务器。其中大多数是系统或面向连接，而不是数据库相关。条目必须具有 <code>olcGlobal</code> 对象类(objectClass)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#指定强制关闭空闲客户端连接之前等待的秒数</span><br><span class="line">#默认值为0，表示禁用此功能</span><br><span class="line">olcIdleTimeout: &lt;integer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#该指令指定syslog（当前记录到syslogd）的调试语句和操作统计信息的级别。您必须已配置OpenLDAP --enable-debug（默认值）才能使用</span><br><span class="line">olcLogLevel: &lt;level&gt;</span><br><span class="line"></span><br><span class="line">#Debugging Levels</span><br><span class="line">LevelKeywordDescription</span><br><span class="line">-1anyenable all debugging</span><br><span class="line">0 no debugging</span><br><span class="line">1(0x1 trace)trace function calls</span><br><span class="line">2(0x2 packets)debug packet handling</span><br><span class="line">4(0x4 args)heavy trace debugging</span><br><span class="line">8(0x8 conns)connection management</span><br><span class="line">16(0x10 BER)print out packets sent and received</span><br><span class="line">32(0x20 filter)search filter processing</span><br><span class="line">64(0x40 config)configuration processing</span><br><span class="line">128(0x80 ACL)access control list processing</span><br><span class="line">256(0x100 stats)stats log connections/operations/results</span><br><span class="line">512(0x200 stats2)stats log entries sent</span><br><span class="line">1024(0x400 shell)print communication with shell backends</span><br><span class="line">2048(0x800 parse)print entry parsing debugging</span><br><span class="line">16384(0x4000 sync)syncrepl consumer processing</span><br><span class="line">32768(0x8000 none)only messages that get logged whatever log level is set</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定当slapd无法找到本地数据库来处理请求时要传回的引用</span><br><span class="line">olcReferral &lt;URI&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子条目</span><br><span class="line">dn: cn=config</span><br><span class="line">objectClass: olcGlobal</span><br><span class="line">cn: config</span><br><span class="line">olcIdleTimeout: 30</span><br><span class="line">olcLogLevel: Stats</span><br><span class="line">olcReferral: ldap://root.openldap.org</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="cn-module"><a href="#cn-module" class="headerlink" title="cn=module"></a>cn=module</h3><p>如果在配置slapd时启用了对动态加载模块的支持，则可以使用 <code>cn=module</code> 条目来指定要加载的模块集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#指定要加载的可动态加载模块的名称</span><br><span class="line">olcModuleLoad: &lt;filename&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定要搜索可加载模块的目录列表</span><br><span class="line">olcModulePath: &lt;pathspec&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">cn: module&#123;0&#125;</span><br><span class="line">olcModuleLoad: /usr/local/lib/smbk5pwd.la</span><br><span class="line"></span><br><span class="line">dn: cn=module&#123;1&#125;,cn=config</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">cn: module&#123;1&#125;</span><br><span class="line">olcModulePath: /usr/local/lib:/usr/local/lib/slapd</span><br><span class="line">olcModuleLoad: accesslog.la</span><br><span class="line">olcModuleLoad: pcache.la</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="cn-schema"><a href="#cn-schema" class="headerlink" title="cn=schema"></a>cn=schema</h3><p>此条目包含在 slapd 中硬编码的所有模式定义。因此，此条目中的值由slapd生成，因此配置文件中不需要提供 schema value。仍必须定义该条目，以作为用户定义的模式添加到下面的基础。schema entry 必须具有 <code>olcSchemaConfig</code> 的对象类 (objectClass)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#定义了一个属性类型</span><br><span class="line">olcAttributeTypes: &lt;RFC4512 Attribute Type Description&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#定义一个对象类</span><br><span class="line">olcObjectClasses: &lt;RFC4512 Object Class Description&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子条目</span><br><span class="line">dn: cn=schema,cn=config</span><br><span class="line">objectClass: olcSchemaConfig</span><br><span class="line">cn: schema</span><br><span class="line"></span><br><span class="line">dn: cn=test,cn=schema,cn=config</span><br><span class="line">objectClass: olcSchemaConfig</span><br><span class="line">cn: test</span><br><span class="line">olcAttributeTypes: ( 1.1.1</span><br><span class="line">  NAME &apos;testAttr&apos;</span><br><span class="line">  EQUALITY integerMatch</span><br><span class="line">  SYNTAX 1.3.6.1.4.1.1466.115.121.1.27 )</span><br><span class="line">olcAttributeTypes: ( 1.1.2 NAME &apos;testTwo&apos; EQUALITY caseIgnoreMatch</span><br><span class="line">  SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.44 )</span><br><span class="line">olcObjectClasses: ( 1.1.3 NAME &apos;testObject&apos;</span><br><span class="line">  MAY ( testAttr $ testTwo ) AUXILIARY )</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Backend-specific-Directives"><a href="#Backend-specific-Directives" class="headerlink" title="Backend-specific Directives"></a>Backend-specific Directives</h3><p>后端指令适用于所有相同类型的数据库实例，并且可能会被数据库指令覆盖，具体取决于指令。后端条目必须具有 <code>olcBackendConfig</code> 的对象类 (objectClass)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#命名特定于后端的配置条目</span><br><span class="line">olcBackend: &lt;type&gt;</span><br><span class="line"></span><br><span class="line">#Database Backends</span><br><span class="line">TypesDescription</span><br><span class="line">bdb    Berkeley DB transactional backend (deprecated)</span><br><span class="line">configSlapd configuration backend</span><br><span class="line">dnssrvDNS SRV backend</span><br><span class="line">hdb    Hierarchical variant of bdb backend (deprecated)</span><br><span class="line">ldapLightweight Directory Access Protocol (Proxy) backend</span><br><span class="line">ldifLightweight Data Interchange Format backend</span><br><span class="line">mdb    Memory-Mapped DB backend</span><br><span class="line">metaMeta Directory backend</span><br><span class="line">monitorMonitor backend</span><br><span class="line">passwdProvides read-only access to passwd(5)</span><br><span class="line">perlPerl Programmable backend</span><br><span class="line">shellShell (extern program) backend</span><br><span class="line">sql    SQL Programmable backend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">dn: olcBackend=bdb,cn=config</span><br><span class="line">objectClass: olcBackendConfig</span><br><span class="line">olcBackend: bdb</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Database-specific-Directives"><a href="#Database-specific-Directives" class="headerlink" title="Database-specific Directives"></a>Database-specific Directives</h3><p>每种类型的数据库都支持本节中的指令。数据库条目必须含有 <code>olcDatabaseConfig</code> 对象类 (objectClass)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#命名特定的数据库实例</span><br><span class="line">#可以提供数字&#123;&lt;index&gt;&#125;以区分相同类型的多个数据库</span><br><span class="line">olcDatabase: [&#123;&lt;index&gt;&#125;]&lt;type&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#权限指令</span><br><span class="line">#如果未指定，默认使用 to * by * read</span><br><span class="line">olcAccess: to &lt;what&gt; [ by &lt;who&gt; [&lt;accesslevel&gt;] [&lt;control&gt;] ]+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#将数据库置于“只读”模式</span><br><span class="line">olcReadonly &#123; TRUE | FALSE &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定不受此访问控制的DN或对此数据库的操作的管理限制</span><br><span class="line">#DN不需要引用此数据库中的条目，甚至不需要引用目录中的条目。</span><br><span class="line">olcRootDN: &lt;DN&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#用于为root dn 指定DN的密码</span><br><span class="line">olcRootPW: &lt;password&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定从搜索操作返回的最大条目数</span><br><span class="line">olcSizeLimit: &lt;integer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#定将传递给此后端数据库的查询的DN后缀</span><br><span class="line">olcSuffix: &lt;dn suffix&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#将当前 slapd 建立为运行 syncrepl 复制引擎的复制使用者站点，将当前数据库指定为主内容的副本</span><br><span class="line">olcSyncrepl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定slapd将用于回答搜索请求的最大秒数</span><br><span class="line">olcTimeLimit: &lt;integer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#该指令仅适用于slave slapd</span><br><span class="line">olcUpdateref: &lt;URL&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子条目</span><br><span class="line">dn: olcDatabase=frontend,cn=config</span><br><span class="line">objectClass: olcDatabaseConfig</span><br><span class="line">objectClass: olcFrontendConfig</span><br><span class="line">olcDatabase: frontend</span><br><span class="line">olcReadOnly: FALSE</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=config,cn=config</span><br><span class="line">objectClass: olcDatabaseConfig</span><br><span class="line">olcDatabase: config</span><br><span class="line">olcRootDN: cn=Manager,dc=example,dc=com</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="BDB-and-HDB-Database-Directives"><a href="#BDB-and-HDB-Database-Directives" class="headerlink" title="BDB and HDB Database Directives"></a>BDB and HDB Database Directives</h3><p>此类别中的指令适用于BDB和HDB数据库。除了上面定义的通用数据库指令之外，它们还用在 olcDatabase 条目中。除了<code>olcDatabaseConfig</code> 对象类之外，BDB和HDB数据库条目还必须分别具有 <code>olcBdbConfig</code> 和 <code>olcHdbConfig</code> 对象类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#指定包含数据库和相关索引的BDB文件所在的目录</span><br><span class="line">olcDbDirectory: &lt;directory&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定BDB后端数据库实例维护的内存高速缓存条目的大小</span><br><span class="line">olcDbCachesize: &lt;integer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定检查BDB事务日志的频率，检查点操作将数据库缓冲区刷新到磁盘，并在日志中写入检查点记录</span><br><span class="line">olcDbCheckpoint: &lt;kbyte&gt; &lt;min&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定要放置在数据库目录的DB_CONFIG文件中的配置指令</span><br><span class="line">olcDbConfig: &lt;DB_CONFIG setting&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#此选项会导致磁盘上的数据库内容在更改时不会立即与内存更改同步</span><br><span class="line">olcDbNosync: &#123; TRUE | FALSE &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在索引槽中指定内存中索引缓存的大小。默认值为零</span><br><span class="line">olcDbIDLcacheSize: &lt;integer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定要为给定属性维护的索引</span><br><span class="line">olcDbIndex: &#123;&lt;attrlist&gt; | default&#125; [pres,eq,approx,sub,none]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#如果此设置为TRUE，则slapindex将一次索引一个属性。默认设置为FALSE，在这种情况下，条目的所有索引属性将同时处理</span><br><span class="line">olcDbLinearIndex: &#123; TRUE | FALSE &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定新创建的数据库索引文件应具有的文件保护模式</span><br><span class="line">olcDbMode: &#123; &lt;octal&gt; | &lt;symbolic&gt; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定用于搜索过滤器评估的堆栈深度</span><br><span class="line">olcDbSearchStack: &lt;integer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#为共享内存BDB环境指定 key 。默认情况下，BDB环境使用内存映射文件。如果指定了非零值，则它将用作标识将容纳环境的共享内存区域的键</span><br><span class="line">olcDbShmKey: &lt;integer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子条目</span><br><span class="line">dn: olcDatabase=hdb,cn=config</span><br><span class="line">objectClass: olcDatabaseConfig</span><br><span class="line">objectClass: olcHdbConfig</span><br><span class="line">olcDatabase: hdb</span><br><span class="line">olcSuffix: &quot;dc=example,dc=com&quot;</span><br><span class="line">olcDbDirectory: /usr/local/var/openldap-data</span><br><span class="line">olcDbCacheSize: 1000</span><br><span class="line">olcDbCheckpoint: 1024 10</span><br><span class="line">olcDbConfig: set_cachesize 0 10485760 0</span><br><span class="line">olcDbConfig: set_lg_bsize 2097152</span><br><span class="line">olcDbConfig: set_lg_dir /var/tmp/bdb-log</span><br><span class="line">olcDbConfig: set_flags DB_LOG_AUTOREMOVE</span><br><span class="line">olcDbIDLcacheSize: 3000</span><br><span class="line">olcDbIndex: objectClass eq</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h1 id="slapd配置文件"><a href="#slapd配置文件" class="headerlink" title="slapd配置文件"></a>slapd配置文件</h1><p>The slapd Configuration File</p><p>本章介绍如何通过 <code>slapd.conf</code> 配置文件来配置 <code>slapd</code>。 <code>slapd.conf</code> 已被弃用，建议使用前面介绍的 <code>slapd-config</code>进行配置。</p><p><br></p><p>由于已经被弃用，所以此处我跳过。</p><p>文档: <a href="http://www.openldap.org/doc/admin24/slapdconfig.html" target="_blank" rel="noopener">http://www.openldap.org/doc/admin24/slapdconfig.html</a></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="运行slapd"><a href="#运行slapd" class="headerlink" title="运行slapd"></a>运行slapd</h1><p><code>slapd</code> 旨在作为独立服务运行。这允许服务器利用缓存，管理底层数据库的并发问题，并节省系统资源。</p><p>由于我使用RPM包进行安装，所以可利用 <code>systemd</code> 进行OpenLDAP的管理。</p><p><br></p><p>ldap默认监听地址:</p><table><thead><tr><th>URL</th><th>Protocol</th><th>Transport</th></tr></thead><tbody><tr><td><code>ldap:///</code></td><td>LDAP</td><td>TCP port 389</td></tr><tr><td><code>ldaps:///</code></td><td>LDAP over SSL</td><td>TCP port 636</td></tr><tr><td><code>ldapi:///</code></td><td>LDAP</td><td>IPC (Unix-domain socket)</td></tr></tbody></table><p><br></p><h2 id="slapd方式"><a href="#slapd方式" class="headerlink" title="slapd方式"></a>slapd方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#查看帮助</span><br><span class="line">#man slapd</span><br><span class="line">slapd --help</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">slapd --option</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#停止</span><br><span class="line">kill -INT `cat /usr/local/var/slapd.pid`</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="systemd方式"><a href="#systemd方式" class="headerlink" title="systemd方式"></a>systemd方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">systemctl status slapd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start slapd</span><br><span class="line"></span><br><span class="line">#ps -ef | grep slapd</span><br><span class="line">#/usr/sbin/slapd -u ldap -h ldapi:/// ldap:///</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl stop slapd</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LDAP维基百科: &lt;a href=&quot;https://zh.wikipedia.org/wiki/LDAP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zh.wikipedia.org/wiki/LDAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenLDAP维基百科: &lt;a href=&quot;https://zh.wikipedia.org/wiki/OpenLDAP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zh.wikipedia.org/wiki/OpenLDAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.500&lt;/code&gt;维基百科: &lt;a href=&quot;https://zh.wikipedia.org/wiki/X.500&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zh.wikipedia.org/wiki/X.500&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenLDAP文档: &lt;a href=&quot;http://www.openldap.org/doc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.openldap.org/doc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RHEL7.x86_64&lt;/li&gt;
&lt;li&gt;LDAP v2.4.44&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="LDAP" scheme="https://zhang21.github.io/tags/LDAP/"/>
    
      <category term="Permission" scheme="https://zhang21.github.io/tags/Permission/"/>
    
      <category term="权限管理" scheme="https://zhang21.github.io/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN</title>
    <link href="https://zhang21.github.io/2019/01/16/OpenVPN/"/>
    <id>https://zhang21.github.io/2019/01/16/OpenVPN/</id>
    <published>2019-01-16T00:46:34.000Z</published>
    <updated>2019-01-17T01:07:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>OpenVPN: <a href="https://github.com/OpenVPN/openvpn" target="_blank" rel="noopener">https://github.com/OpenVPN/openvpn</a></li><li>easy-rsa: <a href="https://github.com/OpenVPN/easy-rsa" target="_blank" rel="noopener">https://github.com/OpenVPN/easy-rsa</a></li></ul><p><br></p><p>环境:</p><ul><li>RHEL7</li><li>OpenVPN v2.4.6</li><li>easy-rsa v3.0.3</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>通过在云端VPC， k8s集群内运行OpenVPN Server，让本地可以通过连接OpenVPN进行访问云资源，而不需要将云资源开放公网访问。</p><p>我是将OpenVPN运行在k8s 集群了，对它提供ELB进行公网连接。在S端配置文件中推送对应的路由信息——如集群内节点CIDR， 服务CIDR, VPC CIDR…</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><p><br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要安装:</p><ul><li>EPEL</li><li>openvpn</li><li>easy-rsa: 用于制作CA证书，S端证书，C端证书</li></ul><p>安装了EPEL源之后就可以直接安装<code>openvpn</code>和<code>easy-rsa</code>，当然也可以从GitHub上拉取。</p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line"></span><br><span class="line">yum install -y openvpn easy-rsa</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="制作证书"><a href="#制作证书" class="headerlink" title="制作证书"></a>制作证书</h2><p><br></p><h3 id="编辑vars文件"><a href="#编辑vars文件" class="headerlink" title="编辑vars文件"></a>编辑vars文件</h3><p>此处需注意，通过yum安装可能会没有<code>example.vars</code>这个栗子文件。没关系，请在<a href="https://github.com/OpenVPN/easy-rsa/tree/v3.0.6/easyrsa3" target="_blank" rel="noopener">easy-rsa GitHub</a>去下载一份过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/openvpn/easy-rsa/server</span><br><span class="line">mkdir -p /etc/openvpn/easy-rsa/client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#拷贝easy-rsa文件，用于制作证书</span><br><span class="line">cp -r /usr/share/easy-rsa/3.0.3/  /etc/openvpn/easy-rsa/server/</span><br><span class="line">cp -r /usr/share/easy-rsa/3.0.3/  /etc/openvpn/easy-rsa/client/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#先制作CA和S端证书</span><br><span class="line">cd /etc/openvpn/easy-rsa/server/</span><br><span class="line">cp vars.example vars</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改几个配置</span><br><span class="line">vim vars</span><br><span class="line"></span><br><span class="line">#根据自己的情况进行修改</span><br><span class="line">set_var EASYRSA_REQ_COUNTRY “CN” #国家</span><br><span class="line">set_var EASYRSA_REQ_PROVINCE “Sichuan” #省份</span><br><span class="line">set_var EASYRSA_REQ_CITY “ChengDu” #城市</span><br><span class="line">set_var EASYRSA_REQ_ORG “TianFu” #非盈利组织，此处可填公司之类</span><br><span class="line">set_var EASYRSA_REQ_EMAIL “abc@xyz.com” #邮箱地址</span><br><span class="line">set_var EASYRSA_REQ_OU “My OpenVPN” #组织单元</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="创建证书和秘钥"><a href="#创建证书和秘钥" class="headerlink" title="创建证书和秘钥"></a>创建证书和秘钥</h3><ul><li><strong>CA证书和S端证书</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/server</span><br><span class="line">./easyrsa -h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化，会读取vars文件</span></span><br><span class="line">./easyrsa init-pki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建根证书</span></span><br><span class="line"><span class="comment">#这里会要求输入PEM pass，这个请记住，后面签名需要此密码</span></span><br><span class="line">./easyrsa build-ca</span><br><span class="line"><span class="comment">#这里生成CA证书</span></span><br><span class="line"><span class="comment">#pki/ca.crt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建S端证书</span></span><br><span class="line"><span class="comment">#nopass选项表示不加密</span></span><br><span class="line">./easyrsa gen-req server nopass</span><br><span class="line"><span class="comment">#这里生成两个文件</span></span><br><span class="line"><span class="comment">#pki/reqs/server.req</span></span><br><span class="line"><span class="comment">#pki/private/server.key</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#签约S端证书</span></span><br><span class="line"><span class="comment">#第一个server表示S端，后面是取的名字</span></span><br><span class="line">./easyrsa sign server server</span><br><span class="line"><span class="comment">#这里需要输入CA证书的PEM pass</span></span><br><span class="line"><span class="comment">#之后会生成S端证书</span></span><br><span class="line"><span class="comment">#pki/issued/server.crt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Diffie-Hellman</span></span><br><span class="line">./easyrsa gen-dh</span><br><span class="line"><span class="comment">#生成dh.pem文件</span></span><br><span class="line"><span class="comment">#pki/dh.pem</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>C端证书</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/client/</span><br><span class="line"><span class="comment">#./easyrsa -h</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">./easyrsa init-pki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建C端证书</span></span><br><span class="line">./easyrsa gen-req client nopass</span><br><span class="line"><span class="comment">#这里生成两个文件</span></span><br><span class="line"><span class="comment">#pki/reqs/client.req</span></span><br><span class="line"><span class="comment">#pki/private/client.key</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在CA端导入C端证书</span></span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/server</span><br><span class="line">./easy-rsa import-req /etc/openvpn/easy-rsa/client/reqs/client.req client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#签约C端证书</span></span><br><span class="line"><span class="comment">#第一个client表示C端，第二个为定义的名字</span></span><br><span class="line">./easyrsa sign client client</span><br><span class="line"><span class="comment">#这里需要输入CA证书的PEM pass</span></span><br><span class="line"><span class="comment">#之后会生成C端证书</span></span><br><span class="line"><span class="comment">#/etc/openvpn/easy-rsa/server/pki/issued/client.crt</span></span><br><span class="line"><span class="comment">#注意生成的位置，不要搞错了</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>梳理上面生成的文件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server/pki/ca.crt</span><br><span class="line">server/pki/dh.pem</span><br><span class="line"></span><br><span class="line">server/pki/reqs/server.req</span><br><span class="line">server/pki/reqs/client.req</span><br><span class="line"></span><br><span class="line">server/pki/private/ca.key</span><br><span class="line">server/pki/private/server.key</span><br><span class="line"></span><br><span class="line">server/pki/issued/server.crt</span><br><span class="line">server/pki/issued/client.crt</span><br><span class="line"></span><br><span class="line">#client/pki/reqs/client.req</span><br><span class="line">client/pki/private/client.key</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="拷贝相应证书到openvpn目录下"><a href="#拷贝相应证书到openvpn目录下" class="headerlink" title="拷贝相应证书到openvpn目录下"></a>拷贝相应证书到openvpn目录下</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#S端</span></span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn/server</span><br><span class="line"></span><br><span class="line">cp /etc/openvpn/easy-rsa/server/pki/ca.crt .</span><br><span class="line">cp /etc/openvpn/easy-rsa/server/pki/private/server.key .</span><br><span class="line">cp /etc/openvpn/easy-rsa/server/pki/issued/server.crt .</span><br><span class="line">cp /etc/openvpn/easy-rsa/server/pki/dh.pem .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#C端</span></span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn/client</span><br><span class="line">cp /etc/openvpn/easy-rsa/server/pki/ca.crt .</span><br><span class="line">cp /etc/openvpn/easy-rsa/client/pki/private/client.key .</span><br><span class="line">cp /etc/openvpn/easy-rsa/server/pki/issued/client.crt .</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在<a href="https://github.com/OpenVPN/openvpn/tree/master/sample" target="_blank" rel="noopener">openvpn GitHub</a>去下载对应配置文件，做相应的修改。</p><p><br></p><h3 id="S端配置文件"><a href="#S端配置文件" class="headerlink" title="S端配置文件"></a>S端配置文件</h3><p>一下只是我的栗子，详细信息请参考自己的项目。具体的每个选项描述，栗子文件里面有解释。</p><p><code>vim server.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">port 1194</span><br><span class="line">proto udp</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line">ca /etc/openvpn/server/ca.crt</span><br><span class="line">cert /etc/openvpn/server/server.crt</span><br><span class="line">key /etc/openvpn/server/server.key</span><br><span class="line">dh /etc/openvpn/server/dh.pem</span><br><span class="line"></span><br><span class="line">#VPN CIDR</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"></span><br><span class="line">#推送的S端的CIDR给C端路由</span><br><span class="line">push &quot;route 10.0.0.0 255.255.224.0&quot;</span><br><span class="line"></span><br><span class="line">#推送S端DNS</span><br><span class="line">push &quot;dhcp-option DNS 10.247.3.10&quot;</span><br><span class="line">push &quot;dhcp-option DNS 114.114.114.114&quot;</span><br><span class="line"></span><br><span class="line">client-to-client</span><br><span class="line">keepalive 20 120</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">log         /dev/stdout</span><br><span class="line">log-append  /dev/stdout</span><br><span class="line"></span><br><span class="line">verb 3</span><br><span class="line">explicit-exit-notify 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启用用户/密码进行登录需要添加的选项</span><br><span class="line">#栗子文件里面没有这些信息</span><br><span class="line">script-security 3</span><br><span class="line">auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env</span><br><span class="line">#http://openvpn.se/files/other/checkpsw.sh</span><br><span class="line">#去下载这个脚本</span><br><span class="line">#client-cert-not-required</span><br><span class="line">#此选项只使用用户密码，不使用证书</span><br><span class="line">#注释它，使用证书和用户密码双重登录</span><br><span class="line">username-as-common-name</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="C端配置文件"><a href="#C端配置文件" class="headerlink" title="C端配置文件"></a>C端配置文件</h3><p><code>vim client.ovpn</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line">proto udp</span><br><span class="line">remote addr port</span><br><span class="line"></span><br><span class="line">resolv-retry infinite</span><br><span class="line"></span><br><span class="line">nobind</span><br><span class="line"></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#此处我将CA证书和C端证书信息写入配置文件</span><br><span class="line">#当然，也可下载证书在指定，但这麻烦了</span><br><span class="line">&lt;ca&gt;</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">xxxxxxxxxxx</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">&lt;/ca&gt;</span><br><span class="line"></span><br><span class="line">&lt;cert&gt;</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">xxxxxxxxxxxxxxxxx</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">&lt;/cert&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">xxxxxxxxxxxxxxxx</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line">&lt;/key&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remote-cert-tls server</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line">#用户认证</span><br><span class="line">script-security 3</span><br><span class="line">auth-user-pass</span><br><span class="line">#可将用户信息写入文件，用户密码各一行</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="另外几个配置"><a href="#另外几个配置" class="headerlink" title="另外几个配置"></a>另外几个配置</h3><p><code>vi checksw.sh</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="comment"># checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script will authenticate OpenVPN users against</span></span><br><span class="line"><span class="comment"># a plain text file. The passfile should simply contain</span></span><br><span class="line"><span class="comment"># one row per user with the username first followed by</span></span><br><span class="line"><span class="comment"># one or more space(s) or tab(s) and then the password.</span></span><br><span class="line">  </span><br><span class="line">PASSFILE=<span class="string">"/etc/openvpn/psw-file"</span></span><br><span class="line">LOG_FILE=<span class="string">"/etc/openvpn/openvpn-password.log"</span></span><br><span class="line">TIME_STAMP=`date <span class="string">"+%Y-%m-%d %T"</span>`</span><br><span class="line">  </span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ ! -r <span class="string">"<span class="variable">$&#123;PASSFILE&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Could not open password file \"<span class="variable">$&#123;PASSFILE&#125;</span>\" for reading."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line">CORRECT_PASSWORD=`awk <span class="string">'!/^;/&amp;&amp;!/^#/&amp;&amp;$1=="'</span><span class="variable">$&#123;username&#125;</span><span class="string">'"&#123;print $2;exit&#125;'</span> <span class="variable">$&#123;PASSFILE&#125;</span>`</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>"</span> = <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: User does not exist: username=\"<span class="variable">$&#123;username&#125;</span>\", password=\"<span class="variable">$&#123;password&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;password&#125;</span>"</span> = <span class="string">"<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Successful authentication: username=\"<span class="variable">$&#123;username&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Incorrect password: username=\"<span class="variable">$&#123;username&#125;</span>\", password=\"<span class="variable">$&#123;password&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p><br></p><p><code>vi psw-file</code>: 这为可登录的用户密码</p><p>直接往这个文件写入用户和密码即可，并不需要重启openvpn服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user1    pass-user1</span><br><span class="line"></span><br><span class="line">#comment</span><br><span class="line">user2   pass-user2</span><br></pre></td></tr></table></figure><p><br></p><p><code>vi start_openvpn.sh</code>: 启动脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mkdir -p /dev/net</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -c /dev/net/tun ]; <span class="keyword">then</span></span><br><span class="line">    mknod /dev/net/tun c 10 200</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'net.ipv4.ip_forward=1'</span> &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处一定要记得写iptables，否则后面连上了VPN也无法正常访问</span></span><br><span class="line"><span class="comment">#我也是找了好久才找到这个问题</span></span><br><span class="line"><span class="comment">#这个网段为openvpn里面定义的网段</span></span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.8.0.0/24  -j MASQUERADE</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn</span><br><span class="line"></span><br><span class="line"><span class="comment">#--daemon，放入后台</span></span><br><span class="line">/sbin/openvpn --config /etc/openvpn/server/server.conf</span><br></pre></td></tr></table></figure><p><br></p><p>由于我是运行在k8s集群容器内，所有还有几个文件:</p><ul><li><code>Dockerfile</code></li><li><code>.dockerignore</code></li><li><code>k8s.yaml</code>: 由于它需要创建和使用系统资源，所以请使用特权容器运行</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ul><li>启动S端</li><li>客户端连接<ul><li>Windows客户端</li><li>Linux客户端</li><li>Mac客户端</li></ul></li></ul><p>启动之后应该就能正常访问了，如果不能正常访问，请查看你推送的CIDR和DNS，还有ipv4转发和iptables等。</p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#S端</span><br><span class="line">#由于需要使用和创建系统资源，所以请用特权容器进行运行，不然会提示没有权限</span><br><span class="line">/sbin/openvpn --config /etc/openvpn/server/server.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#C端</span><br><span class="line"></span><br><span class="line">#Windows下载Openvpn GUI，制定客户端配置文件进行连接，之后输入用户名和面膜</span><br><span class="line"></span><br><span class="line">#Linux下</span><br><span class="line">#/sbin/openvpn --config /etc/openvpn/client/client.ovpn</span><br><span class="line"></span><br><span class="line">#Mac下，下载对应Openvpn软件，指定配置文件进行连接</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenVPN: &lt;a href=&quot;https://github.com/OpenVPN/openvpn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/OpenVPN/openvpn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;easy-rsa: &lt;a href=&quot;https://github.com/OpenVPN/easy-rsa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/OpenVPN/easy-rsa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RHEL7&lt;/li&gt;
&lt;li&gt;OpenVPN v2.4.6&lt;/li&gt;
&lt;li&gt;easy-rsa v3.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="OpenVPN" scheme="https://zhang21.github.io/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>Apollo</title>
    <link href="https://zhang21.github.io/2019/01/09/Apollo/"/>
    <id>https://zhang21.github.io/2019/01/09/Apollo/</id>
    <published>2019-01-09T11:11:22.000Z</published>
    <updated>2019-02-28T01:47:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>Apollo官方文档: <a href="https://github.com/ctripcorp/apollo/wiki" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/wiki</a></li></ul><p><br></p><p>环境:</p><ul><li>Apollo v1.2</li><li>Docker v1.18</li><li>K8s v1.11</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>基本上按照官方文档都没什么问题，说几点我在配置过程中容易出错的地方。</p><p>总的来说就是一个<code>portal</code>，多个<code>config+admin</code>，而<code>Eruea</code>注册的<code>Meta Server</code>是和<code>config</code>在一起的，每个环境的<code>admin</code>注册到对应环境的<code>Meta Server(config)</code>。</p><p>我是将其放入k8s集群中运行，所以针对官方给出的<code>Dockerfile</code>和<code>k8s.yaml</code>文件做了对应的修改。</p><p><br></p><p>看一下我画的架构图和官方架构图:</p><p><img src="/images/Apollo/Apollo.png" alt=""></p><p><br></p><p><img src="/images/Apollo/apollo-deployment.png" alt=""></p><p><br></p><p><strong>我自己画的一个Apollo项目架构图：</strong></p><p><img src="/images/Apollo/apollo_arch.jpg" alt=""></p><p><br><br><br><br><br></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>为不同环境创建不同数据库</li></ul><p>官方已经给出了创建数据库的sql语句，一个<code>portadb</code>, 多个<code>configdb-project-env</code>。我们需要修改数据库名，为不同的环境建立不同的数据库，所以需要在使用官方sql的时候把数据库名修改为自定义的即可，这样创建的各个环境数据库的表结构都是一样的。</p><p><br></p><ul><li>配置了一个环境变量，它也就是部署服务的集群内访问地址(不在同一VPC可能需要外部访问地址)</li></ul><p>官方是写入了Dockerfile里面作为环境变量，我是将其写入k8s yaml中的环境变量。当然，也可以写入启动脚本中。<br>以下配置，随便用哪一个。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Dockerfile中</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">APOLLO_CONFIG_SERVICE_NAME="&#123;service-name&#125;.&#123;namespace&#125;.svc.cluster.local"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#k8s yaml container中</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">APOLLO_CONFIG_SERVICE_NAME</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">&#123;service_name&#125;.&#123;namespace&#125;.svc.cluster.local</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动脚本</span></span><br><span class="line"><span class="comment">#scripts/startup-kubernetes.sh</span></span><br><span class="line"><span class="comment">#SERVER_URL="http://$&#123;APOLLO_ADMIN_SERVICE_NAME&#125;:$&#123;SERVER_PORT&#125;"</span></span><br><span class="line"><span class="string">SERVER_URL="http://&#123;service_name&#125;.&#123;namespace&#125;.svc.cluster.local:$&#123;SERVER_PORT&#125;"</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li>将数据库和注册地址写入<code>config/application-github.properties</code>配置文件</li></ul><p>官方是写入<code>Dockerfile</code>中作为环境变量，然后通过<code>entrypoint.sh</code>进行相应的替换。我直接将其写入此配置文件，并删除<code>entrypoint.sh</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.url</span> <span class="string">=</span> <span class="attr">jdbc:mysql://&#123;mysql-ip&#125;:&#123;mysql-port&#125;/&#123;mysql-db&#125;?characterEncoding=utf8</span></span><br><span class="line"><span class="string">spring.datasource.username</span> <span class="string">=</span> <span class="string">user</span></span><br><span class="line"><span class="string">spring.datasource.password</span> <span class="string">=</span> <span class="string">passwd</span></span><br><span class="line"><span class="string">eureka.service.url</span> <span class="string">=</span> <span class="attr">http://&#123;service-name&#125;.&#123;namespace&#125;.svc.cluster.local:8080/eureka/</span></span><br><span class="line"><span class="comment"># 如果环境跨VPC，还需要指定公网地址的 HomePageUrl</span></span><br><span class="line"><span class="comment"># eureka.instance.homePageUrl = http://ELB:PORT</span></span><br><span class="line"><span class="comment"># 或 在启动命名指定: -Dapollo.configService=http://config-service的公网IP:端口来跳过meta service的服务发现</span></span><br><span class="line"><span class="comment"># 如果不指定的话，则默认使用获取的内部地址，这无法正常访问</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li>portal服务的默认环境是DEV，请注意</li></ul><p>如果配置的第一个环境并不是DEV，请记得先修改数据库中的这个值，不然portal读取config, admin会失败。<br><code>portaldb.serverconfig</code>的<code>apollo.portal.envs</code>这个key，多个环境使用<code>,</code>分割，后面可以在UI上配置。其它环境请修改为其它环境名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> serverconfig <span class="keyword">SET</span> <span class="keyword">Value</span>=<span class="string">'uat'</span> <span class="keyword">WHERE</span> <span class="keyword">Key</span>=<span class="string">'apollo.portal.envs'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">config/apollo-env.properties</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dev.meta=http://DEV_META_SERVICE_NAME:8080</span></span><br><span class="line"><span class="comment">#fat.meta=http://TEST_ALPHA_META_SERVICE_NAME:8080</span></span><br><span class="line"><span class="comment">#uat.meta=http://TEST_BETA_META_SERVICE_NAME:8080</span></span><br><span class="line"><span class="comment">#pro.meta=http://PROD_META_SERVICE_NAME:8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#某个环境的config</span></span><br><span class="line"><span class="string">uat.meta=http://&#123;service-name&#125;.&#123;namespace&#125;.svc.cluster.local:8080</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li>将日志输出到标准输出<code>/dev/stdout</code></li></ul><p>由于我是运行在容器中，所以需要将日志输出到标准输出。</p><p><br></p><ul><li>登录Web UI后可修改配置</li></ul><p>如组织里面的部门名，管理员等等参数，在系统参数里面更新<code>Key</code>对应的<code>Value</code>。<br>具体这个Key可参考文档 —— <a href="https://github.com/ctripcorp/apollo/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97#213-%E8%B0%83%E6%95%B4%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">调整服务端配置</a></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><p>具体信息可以查看官方文档，然后根据官方文档给出的栗子做一些修改。</p><p><br></p><h2 id="apollo-config"><a href="#apollo-config" class="headerlink" title="apollo-config"></a>apollo-config</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line">apollo-configservice.conf</span><br><span class="line">apollo-configservice.jar</span><br><span class="line">config/</span><br><span class="line">Dockerfile</span><br><span class="line">k8s-apollo-config-web-test.yaml</span><br><span class="line">README.md</span><br><span class="line">scripts/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ls config/</span><br><span class="line">application-github.properties</span><br><span class="line">app.properties</span><br><span class="line"></span><br><span class="line">ls scripts/</span><br><span class="line">startup-kubernetes.sh</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Dockerfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jre-alpine3.8</span><br><span class="line"></span><br><span class="line">RUN \</span><br><span class="line">    echo &quot;http://mirrors.aliyun.com/alpine/v3.8/main&quot; &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo &quot;http://mirrors.aliyun.com/alpine/v3.8/community&quot; &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk update upgrade &amp;&amp; \</span><br><span class="line">    apk add --no-cache procps curl bash tzdata &amp;&amp; \</span><br><span class="line">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span><br><span class="line">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    mkdir -p /apollo-config-server</span><br><span class="line"></span><br><span class="line">COPY . /apollo-config-server/</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD [&quot;/apollo-config-server/scripts/startup-kubernetes.sh&quot;]</span><br></pre></td></tr></table></figure><p><br></p><p><strong>config/</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># app.properties不用修改</span><br><span class="line">#  application-github.properties</span><br><span class="line"># DataSource</span><br><span class="line">spring.datasource.url = jdbc:mysql://host:port/configdbwebtest?characterEncoding=utf8</span><br><span class="line">spring.datasource.username = user</span><br><span class="line">spring.datasource.password = passwd</span><br><span class="line">eureka.service.url = http://xxx.svc.cluster.local:8080/eureka/</span><br><span class="line"># 扩公网的话请修改 HomePageUrl</span><br><span class="line"># config-web-test service homepage ELB</span><br><span class="line"># eureka.instance.homePageUrl = http://ELB:PORT</span><br></pre></td></tr></table></figure><p><br></p><p><strong>scripts/</strong></p><p><code>startup-kubernetes.sh</code> 这个文件，文件名你也可以随便修改。<br>有些值既可以写在这里面，也可以配置成环境变量(Dockerfile， 或k8s yaml)<br>这里把 <code>APOLLO_CONFIG_SERVICE_NAME</code> 配置成 k8s yaml 里的环境变量 <code>xxx.apollo-test.svc.cluster.local</code>（即 k8s service）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">SERVICE_NAME=apollo-configservice</span><br><span class="line"><span class="comment">## Adjust log dir if necessary</span></span><br><span class="line">LOG_DIR=/opt/logs/apollo-config-server</span><br><span class="line"><span class="comment">## Adjust server port if necessary</span></span><br><span class="line">SERVER_PORT=8080</span><br><span class="line"></span><br><span class="line">SERVER_URL=<span class="string">"http://<span class="variable">$&#123;APOLLO_CONFIG_SERVICE_NAME&#125;</span>:<span class="variable">$&#123;SERVER_PORT&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Adjust memory settings if necessary</span></span><br><span class="line"><span class="comment">#export JAVA_OPTS="-Xms6144m -Xmx6144m -Xss256k -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=384m -XX:NewSize=4096m -XX:MaxNewSize=4096m -XX:SurvivorRatio=8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Only uncomment the following when you are using server jvm</span></span><br><span class="line"><span class="comment">#export JAVA_OPTS="$JAVA_OPTS -server -XX:-ReduceInitialCardMarks"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########### The following is the same for configservice, adminservice, portal ###########</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">"<span class="variable">$JAVA_OPTS</span> -XX:+UseParNewGC -XX:ParallelGCThreads=4 -XX:MaxTenuringThreshold=9 -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:+UseCMSInitiatingOccupancyOnly -XX:+ScavengeBeforeFullGC -XX:+UseCMSCompactAtFullCollection -XX:+CMSParallelRemarkEnabled -XX:CMSFullGCsBeforeCompaction=9 -XX:CMSInitiatingOccupancyFraction=60 -XX:+CMSClassUnloadingEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSPermGenSweepingEnabled -XX:CMSInitiatingPermOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrent -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationConcurrentTime -XX:+PrintHeapAtGC -XX:+UseGCLogFileRotation -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -Duser.timezone=Asia/Shanghai -Dclient.encoding.override=UTF-8 -Dfile.encoding=UTF-8 -Djava.security.egd=file:/dev/./urandom"</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">"<span class="variable">$JAVA_OPTS</span> -Dserver.port=<span class="variable">$SERVER_PORT</span> -Dlogging.file=<span class="variable">$LOG_DIR</span>/<span class="variable">$SERVICE_NAME</span>.log -Xloggc:<span class="variable">$LOG_DIR</span>/gc.log -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=5M -XX:HeapDumpPath=<span class="variable">$LOG_DIR</span>/HeapDumpOnOutOfMemoryError/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#logs to /std/out</span></span><br><span class="line"><span class="comment">#export JAVA_OPTS="$JAVA_OPTS -Dserver.port=$SERVER_PORT"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"<span class="variable">$(date)</span> ==== Starting ==== \n"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> `dirname <span class="variable">$0</span>`/..</span><br><span class="line">chmod 755 <span class="variable">$SERVICE_NAME</span><span class="string">".jar"</span></span><br><span class="line">./<span class="variable">$SERVICE_NAME</span><span class="string">".jar"</span> start</span><br><span class="line"></span><br><span class="line">rc=$?;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$rc</span> != 0 ]];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$(date)</span> Failed to start <span class="variable">$SERVICE_NAME</span>.jar, return code: <span class="variable">$rc</span>"</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="variable">$rc</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">tail -f /dev/null</span><br></pre></td></tr></table></figure><p><br></p><p><strong>apollo-configservice.conf</strong></p><p>这个也不需要做什么修改，看个人情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MODE=service</span><br><span class="line">PID_FOLDER=.</span><br><span class="line">LOG_FOLDER=/opt/logs/apollo-config-server</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="apollo-admin"><a href="#apollo-admin" class="headerlink" title="apollo-admin"></a>apollo-admin</h2><p>这个其实和 <code>apollo-config</code> 差不多配置，只是修改一些配置项。</p><p><br><br><br><br><br></p><h2 id="apollo-portal"><a href="#apollo-portal" class="headerlink" title="apollo-portal"></a>apollo-portal</h2><p>这个也和上面差不多，只是修改一些配置项。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apollo官方文档: &lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ctripcorp/apollo/wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apollo v1.2&lt;/li&gt;
&lt;li&gt;Docker v1.18&lt;/li&gt;
&lt;li&gt;K8s v1.11&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Apollo" scheme="https://zhang21.github.io/tags/Apollo/"/>
    
      <category term="分布式" scheme="https://zhang21.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="配置中心" scheme="https://zhang21.github.io/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>税收与债务</title>
    <link href="https://zhang21.github.io/2019/01/01/%E6%94%BF%E5%BA%9C%E6%94%B6%E5%85%A5%E4%B8%8E%E5%80%BA%E5%8A%A1/"/>
    <id>https://zhang21.github.io/2019/01/01/政府收入与债务/</id>
    <published>2019-01-01T05:09:38.000Z</published>
    <updated>2019-01-01T06:45:39.769Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li><a href="http://www.mof.gov.cn/zhuantihuigu/zhongguocaizhengjibenqingkuang/caizhengshouru/200905/t20090505_139500.html" target="_blank" rel="noopener">财政部</a></li><li><a href="http://www.stats.gov.cn/tjsj/zbjs/201310/t20131029_449523.html" target="_blank" rel="noopener">国家统计局</a></li></ul><p><br></p><a id="more"></a><hr><p><br><br><br></p><p>最近观《雍正王朝》、《李卫当官》，对政府收入和政务债务想做一个了解，故此收集整理相关资料。</p><p><br><br><br></p><h1 id="财政"><a href="#财政" class="headerlink" title="财政"></a>财政</h1><ul><li>财政收入<ul><li>中央政府财政收入</li><li>地方政府财政收入</li></ul></li><li>财政支出<ul><li>中央政府财政支出</li><li>地方政府财政支出</li></ul></li><li>外债<ul><li>外债负载率</li><li>外债债务率</li><li>外债偿债率</li></ul></li></ul><p><br></p><h2 id="财政收入"><a href="#财政收入" class="headerlink" title="财政收入"></a>财政收入</h2><p>指国家财政参与社会产品分配所取得的收入，是实现国家职能的财力保证。<br>主要包括：</p><ul><li>税收收入： 下设增值税等21款。包括国内增值税、国内消费税、进口货物增值税和消费税、出口货物退增值税和消费税、营业税、企业所得税、个人所得税、资源税、城市维护建设税、房产税、印花税、城镇土地使用税、土地增值税、车船税、船舶吨税、车辆购置税、关税、耕地占用税、契税、烟叶税等。</li><li>社会保险基金收入： 下设基本养老保险基金收入等6款。</li><li>非税收入：下设政府性基金收入等7款。包括专项收入、行政事业性收费、罚没收入和其他收入。</li><li>贷款转贷回收本金收入： 下设国内贷款回收本金收入等4款。</li><li>债务收入： 分设国内债务收入、国外债务收入2款。</li><li>转移性收入： 分设返还性收入等10款。</li><li>国资收入</li></ul><p>财政收入按现行分税制财政体制划分为中央本级收入和地方本级收入。</p><p><br></p><h3 id="中央财政收入"><a href="#中央财政收入" class="headerlink" title="中央财政收入"></a>中央财政收入</h3><p>属于中央财政的收入包括关税，进口货物增值税和消费税，出口货物退增值税和消费税，消费税，铁道部门、各银行总行、各保险公司总公司等集中交纳的营业税和城市维护建设税，增值税75%部分，纳入共享范围的企业所得税60%部分，未纳入共享范围的中央企业所得税、中央企业上交的利润，个人所得税60%部分，车辆购置税，船舶吨税，证券交易印花税97%部分，海洋石油资源税，中央非税收入等。</p><p><br><br><br></p><h3 id="地方财政收入"><a href="#地方财政收入" class="headerlink" title="地方财政收入"></a>地方财政收入</h3><p>属于地方财政的收入包括营业税（不含铁道部门、各银行总行、各保险公司总公司集中交纳的营业税），地方企业上交利润，城市维护建设税（不含铁道部门、各银行总行、各保险公司总公司集中交纳的部分），房产税，城镇土地使用税，土地增值税，车船税，耕地占用税，契税，烟叶税，印花税，增值税25%部分，纳入共享范围的企业所得税40%部分，个人所得税40%部分，证券交易印花税3%部分，海洋石油资源税以外的其他资源税，地方非税收入等。</p><p><br><br><br><br><br></p><h2 id="财政支出"><a href="#财政支出" class="headerlink" title="财政支出"></a>财政支出</h2><p>指国家财政将筹集起来的资金进行分配使用，以满足经济建设和各项事业的需要。</p><p>主要包括：一般公共服务、外交、国防、公共安全、教育、科学技术、文化体育与传媒、社会保障和就业、医疗卫生、环境保护、城乡社区事务、农林水事务、交通运输、资源勘探电力信息等事务、商业服务等事务、金融监管支出、国土气象等事务、住房保障支出、粮油物资储备管理等事务、国债付息支出等方面的支出。</p><p>财政支出根据政府在经济和社会活动中的不同职权，划分为中央财政支出和地方财政支出。</p><p><br></p><h3 id="中央财政支出"><a href="#中央财政支出" class="headerlink" title="中央财政支出"></a>中央财政支出</h3><p>中央财政支出包括一般公共服务，外交支出，国防支出，公共安全支出，以及中央政府调整国民经济结构、协调地区发展、实施宏观调控的支出等。</p><p><br><br><br></p><h3 id="地方财政支出"><a href="#地方财政支出" class="headerlink" title="地方财政支出"></a>地方财政支出</h3><p>地方财政支出包括一般公共服务，公共安全支出，地方统筹的各项社会事业支出等。</p><p><br><br><br><br><br></p><h2 id="外债"><a href="#外债" class="headerlink" title="外债"></a>外债</h2><p>外债（或对外债务）（英语：external debt或foreign debt）是一个国家所拥有的、债权人为外国的债务。债务人可以是政府、企业或私人。债权人可以是私人商业银行、其他政府或国际金融机构。</p><p><br></p><h3 id="外债负债率"><a href="#外债负债率" class="headerlink" title="外债负债率"></a>外债负债率</h3><p>指外债余额与当年国内生产总值之比。</p><p><br><br><br></p><h3 id="外债债务率"><a href="#外债债务率" class="headerlink" title="外债债务率"></a>外债债务率</h3><p>指外债余额</p><p><br><br><br></p><h3 id="外债偿债率"><a href="#外债偿债率" class="headerlink" title="外债偿债率"></a>外债偿债率</h3><p>指偿还外债本息与当年贸易和非贸易外汇收入（国际收支口径）之比。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="债务"><a href="#债务" class="headerlink" title="债务"></a>债务</h1><p>政府债务（亦称公债）是指政府在国内外发行的债券或向外国政府和银行借款所形成的政府债务。具体是指政府凭借其信誉，政府作为债务人与债权人之间按照有偿原则发生信用关系来筹集财政资金的一种信用方式，也是政府调度社会资金，弥补财政赤字，并借以调控经济运行的一种特殊分配方式。政府债务是整个社会债务的重要组成部分。</p><p>政府债务（Government debt）分为中央政府债务和地方政府债务。中央政府债务即国债，是中央政府为筹集财政资金而举借的一种债务。除中央政府举债之外，不少国家有财政收入的地方政府及地方公共机构也举借债务，即地方政府债务。由于中国地方政府尚不能举债，因此中国的政府债务即为国债。</p><p><br></p><p>按偿还期限划分： 可分为短期、中期和长期公债。<br>按发行地域划分： 可分为内债和外债。<br>按发行的方式： 可分为强制公债和自愿公债。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mof.gov.cn/zhuantihuigu/zhongguocaizhengjibenqingkuang/caizhengshouru/200905/t20090505_139500.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;财政部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stats.gov.cn/tjsj/zbjs/201310/t20131029_449523.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;国家统计局&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Economics" scheme="https://zhang21.github.io/categories/Economics/"/>
    
    
      <category term="经济" scheme="https://zhang21.github.io/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="财政" scheme="https://zhang21.github.io/tags/%E8%B4%A2%E6%94%BF/"/>
    
      <category term="税收" scheme="https://zhang21.github.io/tags/%E7%A8%8E%E6%94%B6/"/>
    
      <category term="债务" scheme="https://zhang21.github.io/tags/%E5%80%BA%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Helm</title>
    <link href="https://zhang21.github.io/2018/12/25/Helm/"/>
    <id>https://zhang21.github.io/2018/12/25/Helm/</id>
    <published>2018-12-25T01:11:22.000Z</published>
    <updated>2018-12-25T01:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境：</p><ul><li>EL7x86_64</li></ul><p>参考：</p><ul><li>HELM文档: <a href="https://docs.helm.sh/" target="_blank" rel="noopener">https://docs.helm.sh/</a></li></ul><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>Helm</strong>是Kubernetes生态系统中的一个软件包管理工具，主要用来管理<strong>Charts</strong>，有点类似于Ubuntu中的<code>apt</code>或CentOS中的<code>yum</code>。由go编写，是Deis公司发起的一个开源工具，有助于简化部署和管理Kubernetes应用。<br>在Kubernetes中，应用管理是需求最多、挑战最大的领域。Helm项目提供了一个统一软件打包方式，支持版本控制，可以大大简化Kubernetes应用分发与部署中的复杂性。</p><p>Helm Chart是用来封装 Kubernetes 原生应用程序的一系列 YAML 文件。可以在你部署应用的时候自定义应用程序的一些 Metadata，以便于应用程序的分发。<br>对于应用发布者而言，可以通过 Helm 打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。<br>对于使用者而言，使用 Helm 后不用需要编写复杂的应用部署文件，可以以简单的方式在 Kubernetes 上查找、安装、升级、回滚、卸载应用程序。</p><p><br></p><p><img src="/images/Helm/Helm_Logo.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EL7x86_64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HELM文档: &lt;a href=&quot;https://docs.helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.helm.sh/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Helm" scheme="https://zhang21.github.io/tags/Helm/"/>
    
      <category term="K8s" scheme="https://zhang21.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>存储方案</title>
    <link href="https://zhang21.github.io/2018/12/10/%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/"/>
    <id>https://zhang21.github.io/2018/12/10/存储方案/</id>
    <published>2018-12-10T07:11:12.000Z</published>
    <updated>2018-12-10T06:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>维基百科</li><li>Google</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><p>存储方案分类：</p><ul><li>DAS(Direct-Attached Storage)，直连式存储</li><li>NAS(Network Attached Storage)，网络附加存储</li><li>SAN(Storage Area Network)，存储区域网络</li></ul><p>NAS和SAN既竞争又合作，很多高端NAS的后端存储就是SAN。NAS和SAN的整合也是存储设备的发展趋势。SAN提供的存储单位是LUN，属于block级别的。经过NAS创建成文件系统后，就变成文件级别的了。</p><p><br></p><p><img src="/images/Storage/Das_Nas_San.png" alt=""></p><p><br></p><p>NAS和SAN最本质的区别就是文件管理系统在哪里。</p><p><img src="/images/Storage/Das_Nas_San.jpg" alt=""></p><p><br><br><br></p><h1 id="DAS"><a href="#DAS" class="headerlink" title="DAS"></a>DAS</h1><p><strong>直连式存储</strong>是指直接和计算机相连接的数据储存方式。<br>像固态硬盘、机械硬盘、光盘驱动器与计算机直接相连的设备都是属于直连式存储设备。实际上，直连式存储的名称是后来为了区别于存储区域网络（SAN）和网络附加储存（NAS）而添加的。</p><p><br></p><p>缺点：</p><ul><li>服务器本身容易成为系统瓶颈;</li><li>服务器发生故障，数据不可访问;</li><li>对于存在多个服务器的系统来说，设备分散，不便管理。同时多台服务器使用DAS时，存储空间不能在服务器之间动态分配，可能造成相当的资源浪费;</li><li>数据备份操作复杂。</li></ul><p><br><br><br></p><h1 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h1><p><strong>网络附加存储</strong>是一种专门的数据存储技术的名称，它可以直接连接在计算机网络上面，对异质网络用户提供了集中式数据访问服务。实际上就是网络文件服务器。<br>NAS设备也提供了不止一种文件传输协议。NAS系统通常有一个以上的硬盘，而且和传统的文件服务器一样，通常会把它们组成RAID来提供服务。<br>NAS设备直接连接到TCP/IP网络上，网络服务器通过TCP/IP网络存取管理数据。有了NAS以后，网络上的其他服务器就可以不必再兼任文件服务器的功能。</p><p>NAS是以文件为单位的通信协议，例如像是NFS（在UNIX系统上很常见）或是SMB（常用于Windows系统）。</p><p><br></p><p>缺点：</p><ul><li>由于存储数据通过普通数据网络传输，因此易受网络上其它流量的影响。当网络上有其它大数据流量时会严重影响系统性能;</li><li>由于存储数据通过普通数据网络传输，因此容易产生数据泄漏等安全问题;</li><li>存储只能以文件方式访问，而不能像普通文件系统一样直接访问物理数据块，因此会在某些情况下严重影响系统效率，比如大型数据库就不能使用NAS.</li></ul><p><br><br><br></p><h1 id="SAN"><a href="#SAN" class="headerlink" title="SAN"></a>SAN</h1><p><strong>存储区域网络</strong>是一种连接外接存储设备和服务器的架构。人们采用包括光纤通道技术(FC)、磁盘阵列(RAID)、磁带柜、光盘柜的各种技术进行实现。<br>该架构的特点是，连接到服务器的存储设备，将被操作系统视为直接连接的存储设备。<br>SAN实际是一种专门为存储建立的独立于TCP/IP网络之外的专用网络。<br>SAN由于其基础是一个专用网络，因此扩展性很强，不管是在一个SAN系统中增加一定的存储空间还是增加几台使用存储空间的服务器都非常方便。</p><p>SAN是以区块为单位的通信协议，通常是透过SCSI再转为光纤通道或是iSCSI。还有其他各种不同的SAN通信协议。</p><p><br></p><p>缺点：</p><ul><li>价格昂贵。不论是SAN阵列柜还是SAN必须的光纤通道交换机价格都是十分昂贵的，就连服务器上使用的光通道卡的价格也是不容易被小型商业企业所接受的;</li><li>需要单独建立光纤网络，异地扩展比较困难。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="数据" scheme="https://zhang21.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
      <category term="存储" scheme="https://zhang21.github.io/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>云计算</title>
    <link href="https://zhang21.github.io/2018/12/07/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    <id>https://zhang21.github.io/2018/12/07/云计算/</id>
    <published>2018-12-07T09:11:12.000Z</published>
    <updated>2018-12-07T09:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>维基百科</li></ul><p><br><br><br></p><a id="more"></a><p><br><br><br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>云计算（cloud computing），是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备。</p><p>用户不再需要了解“云”中基础设施的细节，不必具有相应的专业知识，也无需直接进行控制云计算描述了一种基于互联网的新的IT服务增加、使用和交付模式，通常涉及通过互联网来提供动态易扩展而且经常是虚拟化的资源。</p><p><img src="/images/CC/Cloud_computing.svg.png" alt="云计算"></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h1><p>美国国家标准和技术研究院的云计算定义中明确了三种服务模式：</p><ul><li><p><strong>基础环境即服务(IaaS, Infrastructure as a Service)</strong><br>消费者使用“基础计算资源”，如处理能力、存储空间、网络组件或中间件。消费者能掌控操作系统、存储空间、已部署的应用程序及网络组件（如防火墙、负载平衡器等），但并不掌控云基础架构。例如：Amazon AWS、Rackspace。</p></li><li><p><strong>平台即服务(PaaS, Platform as a Service)</strong><br>消费者使用主机操作应用程序。消费者掌控运作应用程序的环境（也拥有主机部分掌控权），但并不掌控操作系统、硬件或运作的网络基础架构。平台通常是应用程序基础架构。例如：Google App Engine。</p></li><li><p><strong>软件即服务(SaaS, Software as a Service)</strong><br>消费者使用应用程序，但并不掌控操作系统、硬件或运作的网络基础架构。是一种服务观念的基础，软件服务供应商，以租赁的概念提供客户服务，而非购买，比较常见的模式是提供一组账号密码。例如：Microsoft CRM与Salesforce.com。</p></li></ul><p><img src="/images/CC/CC_IPS.png" alt=""></p><p><img src="/images/CC/CC_IPS01.png" alt=""></p><p><img src="/images/CC/CC_IPS02.jpg" alt=""></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="部署模型"><a href="#部署模型" class="headerlink" title="部署模型"></a>部署模型</h1><p>美国国家标准和技术研究院的云计算定义中也涉及了关于云计算的部署模型:</p><ul><li><p>公有云（Public Cloud）<br>简而言之，公用云服务可透过网络及第三方服务供应者，开放给客户使用，“公用”一词并不一定代表“免费”，但也可能代表免费或相当廉价，公用云并不表示用户数据可供任何人查看，公用云供应者通常会对用户实施使用访问控制机制，公用云作为解决方案，既有弹性，又具备成本效益。</p></li><li><p>私有云（Private Cloud）<br>私有云具备许多公用云环境的优点，例如弹性、适合提供服务，两者差别在于私有云服务中，数据与程序皆在组织内管理，且与公用云服务不同，不会受到网络带宽、安全疑虑、法规限制影响；此外，私有云服务让供应者及用户更能掌控云基础架构、改善安全与弹性，因为用户与网络都受到特殊限制。</p></li><li><p>社群云（Community Cloud）<br>社群云由众多利益相仿的组织掌控及使用，例如特定安全要求、共同宗旨等。社群成员共同使用云数据及应用程序。</p></li><li><p>混合云（Hybrid Cloud）<br>混合云结合公用云及私有云，这个模式中，用户通常将非企业关键信息外包，并在公用云上处理，但同时掌控企业关键服务及数据。</p></li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="云技术"><a href="#云技术" class="headerlink" title="云技术"></a>云技术</h1><ul><li>KVM</li><li>XEN</li><li>VMWare</li><li>OpenStack(IaaS, 私有云)</li><li>OpenShift(Paas)</li><li>Docker</li><li>Kubernetes</li><li>Ansible</li><li>Chef</li><li>Puppet</li><li>Salt</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="云计算" scheme="https://zhang21.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="云服务" scheme="https://zhang21.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>GitLab</title>
    <link href="https://zhang21.github.io/2018/12/06/GitLab/"/>
    <id>https://zhang21.github.io/2018/12/06/GitLab/</id>
    <published>2018-12-06T05:11:22.000Z</published>
    <updated>2019-02-01T06:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考:</p><ul><li>维基百科</li><li>GitLab文档: <a href="https://docs.gitlab.com/" target="_blank" rel="noopener">https://docs.gitlab.com/</a></li></ul><p><br></p><p>版本:</p><ul><li>GitLib-CE: <code>v11.6.0</code></li><li>GitLab-Runner: <code>v11.6.0</code></li></ul><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><p>GitLab是由GitLab Inc.开发，使用MIT许可证的基于网络的Git仓库管理工具。包括Git仓库管理、代码审查、问题跟踪、动态订阅、wiki等功能.以及GitLab内部集成的GitLab CI 更是一个持续集成和交付的好工具。</p><p>它有两个版本：</p><ul><li>CE</li><li>EE</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="User"><a href="#User" class="headerlink" title="User"></a>User</h1><p>User docs</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h1><p>Administrator documentation</p><p><br></p><h2 id="安装和维护"><a href="#安装和维护" class="headerlink" title="安装和维护"></a>安装和维护</h2><p>Installing and maintaining GitLab</p><p><br></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Installation</p><p>GitLab有多种方式进行安装。</p><p><br></p><p><strong>依赖(requirements)</strong></p><p>在安装之前，请先查看相关依赖文档。</p><p>依赖: <a href="https://docs.gitlab.com/ce/install/requirements.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/install/requirements.html</a></p><ul><li><p>操作系统</p></li><li><p>Ruby版本</p></li><li><p>硬件</p><ul><li>CPU</li><li>Memory</li><li>Storage</li></ul></li><li><p>数据库</p></li><li><p>Unicorn Workers<br>Unicorn是多进程的Server容器。<br>可以增加unicorn worker的数量，这通常有助于减少应用程序的响应时间并提高处理并行请求的能力。<br>对于大多数情况，我们建议使用:<code>CPU cores + 1 = unicorn workers</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#CPU Cores=2</span></span><br><span class="line">unicorn[<span class="string">'worker_processes'</span>] = 3</span><br><span class="line">unicorn[<span class="string">'worker_timeout'</span>] = 60</span><br></pre></td></tr></table></figure><ul><li><p>Redis and Sidekiq<br>Redis存储所有用户会话和后台任务队列。Redis的存储要求很低，每个用户约25kB。<br>Sidekiq是多线程的异步处理程序，使用多线程进程处理后台作业。 此过程从整个Rails Stack(<code>200MB+</code>)开始，如果存在内存泄漏，它可能会随着时间的推移而增长。 在非常活跃的服务器上（10,000+活动用户），Sidekiq进程可能使用<code>1GB +</code>内存。</p></li><li><p>GitLab Runner<br>我们强烈不要在计划安装GitLab的同一台机器上安装GitLab Runner。根据您决定配置GitLab Runner的方式以及用于在CI环境中运行应用程序的工具，GitLab Runner可能会占用大量可用内存。<br>如果您决定在同一台机器上运行GitLab Runner和GitLab Rails应用程序，则上面提供的内存消耗计算将无效。<br>由于安全原因，将所有内容安装在一台计算机上也是不安全的——特别是当您计划将shell执行程序与GitLab Runner一起使用时。<br>如果您打算使用CI功能，我们建议为每个GitLab Runner使用单独的计算机。</p></li></ul><ul><li><p>Prometheus and its exporters<br>从Omnibus GitLab 9.0开始，Prometheus及其相关的exporter默认启用，一遍轻松、深入地监控GitLab。这些进程大概消耗200MB内存。</p></li><li><p>支持的浏览器</p></li></ul><p><br></p><p><strong>安装方式(Installation methods)</strong></p><ul><li>Omnibus包: <a href="https://about.gitlab.com/install/" target="_blank" rel="noopener">https://about.gitlab.com/install/</a></li><li>源码</li><li>Docker</li></ul><p><br></p><p><strong>数据库(Database)</strong></p><ul><li>PostgreSQL (highly recommended)</li><li>MySQL/MariaDB (strongly discouraged, not all GitLab features are supported, no support for MySQL/MariaDB GTID)</li></ul><p>As of GitLab 10.0, PostgreSQL 9.6 or newer is required, and earlier versions are not supported.</p><p>Users using PostgreSQL must ensure the <code>pg_trgm</code> extension is loaded into every GitLab database. This extension can be enabled (using a PostgreSQL super user) by running the following query for every database:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION pg_trgm;</span><br></pre></td></tr></table></figure><p>在其它系统上，你可能需要安装附加包(e.g. postgresql-contrib)才能使得扩展可用。</p><p>如果你需要使用<strong>GitLab Geo</strong>，则需要<code>postgres_fdw</code>扩展：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION postgres_fdw;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="包安装"><a href="#包安装" class="headerlink" title="包安装"></a>包安装</h4><p><strong>Centos7为栗子</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装依赖Ruby</span></span><br><span class="line"><span class="comment">#因为需要v2.3版本，而yum查找出来的为v2.0，所以不使用yum安装</span></span><br><span class="line"><span class="comment">#yum info ruby.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里使用Ruby管理工具RVM（“Ruby Version Manager”）进行安装</span></span><br><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#开发版</span></span><br><span class="line">\curl -sSL https://get.rvm.io | bash</span><br><span class="line"><span class="comment">#安装稳定版</span></span><br><span class="line">\curl -sSL https://get.rvm.io | bash -s stable --ruby</span><br><span class="line"></span><br><span class="line"><span class="comment">#To start using RVM you need to run source ~/.rvm/scripts/rvm</span></span><br><span class="line"><span class="built_in">source</span> ~/.rvm/scripts/rvm</span><br><span class="line"><span class="comment">#可把它写入profile</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">source</span> ~/.rvm/scripts/rvm</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">rvm list known</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装ruby2.3</span></span><br><span class="line">rvm install 2.3</span><br><span class="line">ruby --version</span><br><span class="line">ruby 2.3.7p456 (2018-03-28 revision 63024) [x86_64-linux]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用2.3</span></span><br><span class="line">rvm use 2.3</span><br><span class="line"></span><br><span class="line"><span class="comment">#设为默认</span></span><br><span class="line">rvm use 2.3 --default</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Install and configure the necessary dependencies</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#install Postfix to send notification emails</span></span><br><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Add the GitLab package repository and install the package</span></span><br><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br><span class="line">sudo EXTERNAL_URL=<span class="string">"http://gitlab.example.com"</span> yum install -y gitlab-ce</span><br><span class="line"><span class="comment">#镜像如无法下载，可使用国内清华，阿里镜像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重配置GitLab</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"><span class="comment">#这里GitLab会安装许多软件，如Nginx，Prometheus，Redis...</span></span><br><span class="line"><span class="comment">#首次启动会有很多信息，请稍等</span></span><br><span class="line"><span class="comment">#首次访问GitLab,系统会让你重新设置管理员的密码,设置成功后会返回登录界面.默认的管理员账号是root</span></span><br><span class="line"><span class="comment">#在Web界面修改密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Browse to the hostname and login</span></span><br><span class="line"><span class="comment">#浏览器访问前面定义的URL</span></span><br><span class="line"><span class="comment">##在Web界面修改密码，并登陆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Set up your communication preferences</span></span><br></pre></td></tr></table></figure><p><img src="/images/GitLab/GitLab_login.jpg" alt="GitLab"></p><p><br><br><br></p><h4 id="配置域名或URL"><a href="#配置域名或URL" class="headerlink" title="配置域名或URL"></a>配置域名或URL</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Configuring the external URL for GitLab</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line">external_url <span class="string">"http://gitlab.example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载配置</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Configuring a relative URL for Gitlab</span></span><br><span class="line"><span class="comment">#从v8.17以后便不需要再重新编译</span></span><br><span class="line"><span class="comment">#要求：4GB RAM, and 4 or 8 CPU cores</span></span><br><span class="line"><span class="comment">#栗子: https://example.com/gitlab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Enable relative URL in GitLab</span></span><br><span class="line"><span class="comment">#如果资源不够，可临时关闭 Unicorn and Sidekiq以节省资源</span></span><br><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line">external_url <span class="string">"https://example.com/gitlab"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载配置</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新启动服务，以便Unicorn和Sidekiq获取更改</span></span><br><span class="line">sudo gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Disable relative URL in GitLab</span></span><br><span class="line">external_url后面不包含相对路劲即可</span><br><span class="line"><span class="comment">#之后重载配置</span></span><br><span class="line">sudo gitlab-ctl restart unicorn</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="从non-root用户载入配置"><a href="#从non-root用户载入配置" class="headerlink" title="从non-root用户载入配置"></a>从non-root用户载入配置</h4><p>Loading external configuration file from non-root user</p><p>Omnibus-gitlab package 从 <code>/etc/gitlab/gitlab.rb file</code>载入所有配置。它属于root用户，有严格的权限配置。它通过root用户由ruby代码执行<code>gitlab-ctl reconfigure</code>。</p><p>指定其它配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">from_file <span class="string">"/home/admin/external_gitlab.rb"</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="将Git数据存储在备用目录中"><a href="#将Git数据存储在备用目录中" class="headerlink" title="将Git数据存储在备用目录中"></a>将Git数据存储在备用目录中</h4><p>Storing Git data in an alternative directory</p><p>默认情况下，<code>omnibus-gitlab</code>将repository数据存放于<code>/var/opt/gitlab/git-data</code>目录下。repository存储在此目录下的repositories子目录中。<br>可在<code>/etc/gitlab/gitlab.rb</code>中修改<code>git-data</code>来添加备用数据目录。<br>请注意，目录和子目录的路径必须不是链接。</p><p>如果还运行了Gitaly，请为每个git数据目录包含<code>gitaly_address</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">git_data_dirs(&#123; <span class="string">"default"</span> =&gt; &#123; <span class="string">"path"</span> =&gt; <span class="string">"/mnt/nas/git-data"</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#你可以添加不止一个数据目录</span></span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">  <span class="string">"default"</span> =&gt; &#123; <span class="string">"path"</span> =&gt; <span class="string">"/var/opt/gitlab/git-data"</span> &#125;,</span><br><span class="line">  <span class="string">"alternative"</span> =&gt; &#123; <span class="string">"path"</span> =&gt; <span class="string">"/mnt/nas/git-data"</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载配置，使得更改生效</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">sudo ls /var/opt/gitlab/git-data</span><br><span class="line">repositories</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果你的/var/opt/gitlab/git-data已有Git repositories，则</span></span><br><span class="line"><span class="comment"># Prevent users from writing to the repositories while you move them.</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note there is _no_ slash behind 'repositories', but there _is_ a</span></span><br><span class="line"><span class="comment"># slash behind 'git-data'.</span></span><br><span class="line">sudo rsync -av /var/opt/gitlab/git-data/repositories /mnt/nas/git-data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the necessary processes and run reconfigure to fix permissions</span></span><br><span class="line"><span class="comment"># if necessary</span></span><br><span class="line">sudo gitlab-ctl upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># Double-check directory layout in /mnt/nas/git-data. Expected output:</span></span><br><span class="line"><span class="comment"># repositories</span></span><br><span class="line">sudo ls /mnt/nas/git-data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Done! Start GitLab and verify that you can browse through the repositories in</span></span><br><span class="line"><span class="comment"># the web interface.</span></span><br><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure><p><br><br><br></p><p>####　修改Git用户/组</p><p>Changing the name of the Git user / group</p><p>默认情况下，<code>omnibus-gitLab</code>使用<code>git</code>用户登录<code>gitlab-shell</code>和远程Web接口。不推荐改变已安装的User/Group。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户名/组名</span></span><br><span class="line">user[<span class="string">'username'</span>] = <span class="string">"git"</span></span><br><span class="line">user[<span class="string">'group'</span>] = <span class="string">"git"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##! The shell for the git user</span></span><br><span class="line"><span class="comment"># user['shell'] = "/bin/sh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##! The home directory for the git user</span></span><br><span class="line"><span class="comment"># user['home'] = "/var/opt/gitlab"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#uid/gid</span></span><br><span class="line"><span class="comment">#omnibus-gitlab creates users for GitLab, PostgreSQL, Redis and NGINX.你可以指定他们的ID</span></span><br><span class="line">user[<span class="string">'uid'</span>] = 1234</span><br><span class="line">user[<span class="string">'gid'</span>] = 1234</span><br><span class="line">postgresql[<span class="string">'uid'</span>] = 1235</span><br><span class="line">postgresql[<span class="string">'gid'</span>] = 1235</span><br><span class="line">redis[<span class="string">'uid'</span>] = 1236</span><br><span class="line">redis[<span class="string">'gid'</span>] = 1236</span><br><span class="line">web_server[<span class="string">'uid'</span>] = 1237</span><br><span class="line">web_server[<span class="string">'gid'</span>] = 1237</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="禁用用户和组的账号管理"><a href="#禁用用户和组的账号管理" class="headerlink" title="禁用用户和组的账号管理"></a>禁用用户和组的账号管理</h4><p>Disable user and group account management</p><p>默认情况下，omnibus-gitlab会创建系统用户/组账户，这些系统账户运行包的各种组件。大多数用户都不需要去改变这些行为。然而，如果你的系统账户由其它软件管理，你或许需要禁用此功能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">manage_accounts[<span class="string">'enable'</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#omnibus-gitlab依然保留之前创建的账户</span></span><br><span class="line"><span class="comment">#默认创建以下用户</span></span><br><span class="line"><span class="comment"># GitLab user (required)</span></span><br><span class="line">git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Web server user (required)</span></span><br><span class="line">gitlab-www</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis user for GitLab (only when using packaged Redis)</span></span><br><span class="line">gitlab-redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># Postgresql user (only when using packaged Postgresql)</span></span><br><span class="line">gitlab-psql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prometheus user for prometheus monitoring and various exporters</span></span><br><span class="line">gitlab-prometheus</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitLab Mattermost user (only when using GitLab Mattermost)</span></span><br><span class="line">mattermost</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitLab Registry user (only when using GitLab Registry)</span></span><br><span class="line">registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitLab Consul user (only when using GitLab Consul)</span></span><br><span class="line">gitlab-consul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看用户</span></span><br><span class="line">sudo awk -F<span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p><br></p><p>你也可以在GitLab配置文件里面更改:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not manage user/group accounts</span></span><br><span class="line">manage_accounts[<span class="string">'enable'</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitLab</span></span><br><span class="line">user[<span class="string">'username'</span>] = <span class="string">"custom-gitlab"</span></span><br><span class="line">user[<span class="string">'group'</span>] = <span class="string">"custom-gitlab"</span></span><br><span class="line">user[<span class="string">'shell'</span>] = <span class="string">"/bin/sh"</span></span><br><span class="line">user[<span class="string">'home'</span>] = <span class="string">"/var/opt/custom-gitlab"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Web server</span></span><br><span class="line">web_server[<span class="string">'username'</span>] = <span class="string">'webserver-gitlab'</span></span><br><span class="line">web_server[<span class="string">'group'</span>] = <span class="string">'webserver-gitlab'</span></span><br><span class="line">web_server[<span class="string">'shell'</span>] = <span class="string">'/bin/false'</span></span><br><span class="line">web_server[<span class="string">'home'</span>] = <span class="string">'/var/opt/gitlab/webserver'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Postgresql (not needed when using external Postgresql)</span></span><br><span class="line">postgresql[<span class="string">'username'</span>] = <span class="string">"postgres-gitlab"</span></span><br><span class="line">postgresql[<span class="string">'group'</span>] = <span class="string">"postgres-gitlab"</span></span><br><span class="line">postgresql[<span class="string">'shell'</span>] = <span class="string">"/bin/sh"</span></span><br><span class="line">postgresql[<span class="string">'home'</span>] = <span class="string">"/var/opt/postgres-gitlab"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis (not needed when using external Redis)</span></span><br><span class="line">redis[<span class="string">'username'</span>] = <span class="string">"redis-gitlab"</span></span><br><span class="line">redis[<span class="string">'group'</span>] = <span class="string">"redis-gitlab"</span></span><br><span class="line">redis[<span class="string">'shell'</span>] = <span class="string">"/bin/false"</span></span><br><span class="line">redis[<span class="string">'home'</span>] = <span class="string">"/var/opt/redis-gitlab"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And so on for users/groups for GitLab Mattermost1</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="禁用存储目录管理"><a href="#禁用存储目录管理" class="headerlink" title="禁用存储目录管理"></a>禁用存储目录管理</h4><p>Disable storage directories management</p><p>omnibus-gitlab负责使用正确的所有权与权限创建所必须的目录，并保持更新。一种一些目录在配置时可能会包含大量数据，也可能会挂载到NFS。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果已挂在/etc/gitlab，则可关闭此目录的管理</span></span><br><span class="line">manage_storage_directories[<span class="string">'manage_etc'</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果要挂载GitLab的所有存储目录，并且每个目录都是单独地挂载，则应完全禁用存储目录的管理</span></span><br><span class="line">manage_storage_directories[<span class="string">'enable'</span>] = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>GitLab所有数据目录：</strong></p><table><thead><tr><th>Default location</th><th>Permissions</th><th>Ownership</th><th>Purpose</th></tr></thead><tbody><tr><td>/var/opt/gitlab/git-data</td><td>0700</td><td>git:root</td><td>Holds repositories directory</td></tr><tr><td>/var/opt/gitlab/git-data/repositories</td><td>2770</td><td>git:git</td><td>Holds git repositories</td></tr><tr><td>/var/opt/gitlab/gitlab-rails/shared</td><td>0751</td><td>git:gitlab-www</td><td>Holds large object directories</td></tr><tr><td>/var/opt/gitlab/gitlab-rails/shared/artifacts</td><td>0700</td><td>git:root</td><td>Holds CI artifacts</td></tr><tr><td>/var/opt/gitlab/gitlab-rails/shared/lfs-objects</td><td>0700</td><td>git:root</td><td>Holds LFS objects</td></tr><tr><td>/var/opt/gitlab/gitlab-rails/uploads</td><td>0700</td><td>git:root</td><td>Holds user attachments</td></tr><tr><td>/var/opt/gitlab/gitlab-rails/shared/pages</td><td>0750</td><td>git:gitlab-www</td><td>Holds user pages</td></tr><tr><td>/var/opt/gitlab/gitlab-ci/builds</td><td>0700</td><td>git:root</td><td>Holds CI build logs</td></tr><tr><td>/var/opt/gitlab/.ssh</td><td>0700</td><td>git:git</td><td>Holds authorized keys</td></tr></tbody></table><p><br><br><br></p><h4 id="仅在挂载给定文件系统后启动Omnibus-GitLab服务"><a href="#仅在挂载给定文件系统后启动Omnibus-GitLab服务" class="headerlink" title="仅在挂载给定文件系统后启动Omnibus-GitLab服务"></a>仅在挂载给定文件系统后启动Omnibus-GitLab服务</h4><p>Only start Omnibus-GitLab services after a given filesystem is mounted</p><p>如果你想防止Omnibus-GitLab服务(Nginx，Redis，Unicorn…)在挂载给定文件系统之前启动，则:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># wait for /var/opt/gitlab to be mounted</span></span><br><span class="line">high_availability[<span class="string">'mountpoint'</span>] = <span class="string">'/var/opt/gitlab'</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="配置运行时目录"><a href="#配置运行时目录" class="headerlink" title="配置运行时目录"></a>配置运行时目录</h4><p>Configuring runtime directory</p><p>启用Prometheus监控后，GitLab-monitor将对每个Unicorn进程(Rails metrics)进行监控。每个Unicorn进行都需要将度量文件(metrics file)写入每个控制器临时的位置，然后，Prometheus收集这些文件并处理他们的值。</p><p>为了避免创建磁盘I/O，Omnibus-GitLab包将会使用一个运行时目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#During reconfigure, package will check if `/run` is a `tmpfs` mount. If it is not, warning will be printed, and Rails metrics will be disabled.</span></span><br><span class="line">Runtime directory <span class="string">'/run'</span> is not a tmpfs mount.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#To enable Rails metrics again, create a tmpfs mount and specify it</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># runtime_dir '/run'</span></span><br><span class="line">runtime_dir <span class="string">'/path/to/tmpfs'</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="在安装期间禁用自动缓存清理"><a href="#在安装期间禁用自动缓存清理" class="headerlink" title="在安装期间禁用自动缓存清理"></a>在安装期间禁用自动缓存清理</h4><p>Disabling automatic cache cleaning during installation</p><p>如果安装了大型的GitLab，则你可能不希望运行<code>rake cache:clean</code>，因为它将会耗费很长时间。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is advanced feature used by large gitlab deployments where loading</span></span><br><span class="line"><span class="comment"># whole RAILS env takes a lot of time.</span></span><br><span class="line">gitlab_rails[<span class="string">'rake_cache_clear'</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Enabling/Disabling Rack Attack and setting up basic auth throttling</span></span><br><span class="line">gitlab_rails[<span class="string">'rack_attack_git_basic_auth'</span>] = &#123;</span><br><span class="line">  <span class="string">'enabled'</span> =&gt; <span class="literal">true</span>, <span class="comment"># Enable/Disable Rack Attack</span></span><br><span class="line">  <span class="string">'ip_whitelist'</span> =&gt; [<span class="string">"127.0.0.1"</span>], <span class="comment"># Whitelisted urls</span></span><br><span class="line">  <span class="string">'maxretry'</span> =&gt; 10, <span class="comment"># Limit the number of Git HTTP authentication attempts per IP</span></span><br><span class="line">  <span class="string">'findtime'</span> =&gt; 60, <span class="comment"># Reset the auth attempt counter per IP after 60 seconds</span></span><br><span class="line">  <span class="string">'bantime'</span> =&gt; 3600 <span class="comment"># Ban an IP for one hour (3600s) after too many auth attempts</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Setting up paths to be protected by Rack Attack</span></span><br><span class="line"><span class="comment">#如果你想改变默认保护路径</span></span><br><span class="line"><span class="comment">#警告：此动作将会被Omnibus-GitLab提供的列表所覆盖</span></span><br><span class="line">gitlab_rails[<span class="string">'rack_attack_protected_paths'</span>] = [</span><br><span class="line">  <span class="string">'/users/password'</span>,</span><br><span class="line">  <span class="string">'/users/sign_in'</span>,</span><br><span class="line">  <span class="string">'/api/#&#123;API::API.version&#125;/session.json'</span>,</span><br><span class="line">  <span class="string">'/api/#&#123;API::API.version&#125;/session'</span>,</span><br><span class="line">  <span class="string">'/users'</span>,</span><br><span class="line">  <span class="string">'/users/confirmation'</span>,</span><br><span class="line">  <span class="string">'/unsubscribes/'</span>,</span><br><span class="line">  <span class="string">'/import/github/personal_access_token'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Setting up throttling for ‘paths to be protected’</span></span><br><span class="line">gitlab_rails[<span class="string">'rate_limit_requests_per_period'</span>] = 10</span><br><span class="line">gitlab_rails[<span class="string">'rate_limit_period'</span>] = 60</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li>Nginx</li><li>HTTPS</li><li>Database</li><li>Redis</li><li>SMTP</li><li>…</li></ul><p>具体参考官方文档。</p><p><br><br><br><br><br></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>Update</p><p>更新方式取决你你使用的安装方法。</p><p><br></p><p><strong>不停机升级(Upgrading without downtime)</strong></p><p>从GitLab 9.1.0开始便可以非脱机更新，但要遵循一下依赖：</p><ul><li>You can only upgrade 1 minor release at a time. So from 9.1 to 9.2, not to 9.3.</li><li>You have to use <a href="https://docs.gitlab.com/ce/development/post_deployment_migrations.html" target="_blank" rel="noopener">post-deployment migrations</a></li><li>You are using PostgreSQL. If you are using MySQL please look at the release post to see if downtime is required.</li></ul><p><br></p><p><strong>更新版本(Upgrading between editions)</strong></p><ul><li>CE-&gt;EE</li><li>EE-&gt;CE</li></ul><p><br></p><p><strong>杂项(Miscellaneous)</strong></p><ul><li><a href="https://docs.gitlab.com/ce/update/mysql_to_postgresql.html" target="_blank" rel="noopener">MySQL to PostgreSQL</a></li><li><a href="https://docs.gitlab.com/ce/update/restore_after_failure.html" target="_blank" rel="noopener">Restoring from backup after a failed upgrade</a></li><li><a href="https://docs.gitlab.com/ce/update/upgrading_postgresql_using_slony.html" target="_blank" rel="noopener">Upgrading PostgreSQL Using Slony</a></li></ul><p><br><br><br><br><br></p><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p><strong>High Availability</strong>: Configure multiple servers for scaling or high availability.</p><p>GitLab支持多种不同类型的集群和高可用。方案取决于你所依赖的伸缩和可用的级别。最简单的方式是可伸缩，但并不一定是高可用的。<br>由于Git的分布式特性，即使GitLab不可用，开发人员仍然可以在本地提交代码。 但是，当GitLab关闭时，某些GitLab功能（如issue tracker and Continuous Integration…）不可用。</p><p>请记住，所有高可用性解决方案都需要在成本/复杂性和正常运行时间之间进行权衡。想要正常运行的时间越久，则解决方案就越复杂，则设置和维护它的工作就越多。高可用不是免费的，每个高可用方案都应该考虑成本和收益。</p><p><br><br><br></p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p>Architecture</p><p>有两种配置：</p><ul><li>active/active</li><li>active/passive</li></ul><p><br></p><p><strong>Active/Active</strong></p><p>此体系结构可轻松扩展，因为所有应用程序Server可同时处理用户请求。Database、Redis、GitLab都部署在不同的Server上，如果他们配置也是如此，则高度可用。</p><p>配置<code>active/active</code>所遵循的步骤：</p><ul><li><a href="https://docs.gitlab.com/ce/administration/high_availability/database.html" target="_blank" rel="noopener">配置Database</a></li><li><a href="https://docs.gitlab.com/ce/administration/high_availability/redis.html" target="_blank" rel="noopener">配置Redis</a></li><li><a href="https://docs.gitlab.com/ce/administration/high_availability/nfs.html" target="_blank" rel="noopener">配置NFS</a></li><li><a href="https://docs.gitlab.com/ce/administration/high_availability/gitlab.html" target="_blank" rel="noopener">配置GitLab</a></li><li><a href="https://docs.gitlab.com/ce/administration/high_availability/load_balancer.html" target="_blank" rel="noopener">配置LoadBlancer</a></li></ul><p><img src="/images/GitLab/active-active-diagram.png" alt=""></p><p><br></p><p><strong>Active/Passive</strong></p><p>对于没有扩展的高可用/故障转移，你可使用Active/Passive。这利用DRBD（Distributed Replicated Block Device）来保持所有数据同步。DRBD要求低延迟链接保持同步。 不建议尝试在数据中心之间或不同的云可用区域中运行DRBD。</p><p>至少需要两台机器(one active/one passive)。</p><p><img src="/images/GitLab/active-passive-diagram.png" alt=""></p><p><br><br><br><br><br></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Configuring GitLab</p><p><br></p><h4 id="配置时区"><a href="#配置时区" class="headerlink" title="配置时区"></a>配置时区</h4><p>Adjust your instance’s timezone: Customize the default time zone of GitLab.</p><p>GitLab默认时区为<code>UTC</code>，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab_rails['time_zone'] = 'UTC'</span></span><br><span class="line">gitlab_rails[<span class="string">'time_zone'</span>] = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载重启</span></span><br><span class="line">gitlab-ctl reconfigure gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看时区</span></span><br><span class="line">gitlab-rake time:zones:all</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="系统钩子"><a href="#系统钩子" class="headerlink" title="系统钩子"></a>系统钩子</h4><p>System hook，Notifications when users, projects and keys are changed.</p><p>GitLab实例可对以下事件执行HTTP POST请求：</p><ul><li>project_create</li><li>project_destroy</li><li>project_rename</li><li>project_transfer</li><li>project_update</li><li>user_add_to_team</li><li>user_remove_from_team</li><li>user_create</li><li>user_destroy</li><li>user_failed_login</li><li>user_rename</li><li>key_create</li><li>key_destroy</li><li>group_create</li><li>group_destroy</li><li>group_rename</li><li>user_add_to_group</li><li>user_remove_from_group</li></ul><p>可以使用系统钩子，如用于记录或更改 LDAP Server 中的信息。</p><blockquote><p>注意：<br>我们遵循<code>Webhook</code>中对Push和Tag事件的相同结构，但不会显示commit的信息。Webhook的相同弃用在此有效。</p></blockquote><p><br><br><br></p><h5 id="Hook请求"><a href="#Hook请求" class="headerlink" title="Hook请求"></a>Hook请求</h5><p>Request Header:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Gitlab-Event: System Hook</span><br></pre></td></tr></table></figure></p><p>项目创建栗子，还有删除、重名、更新、用户、组等其它事件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          <span class="attr">"created_at"</span>: <span class="string">"2012-07-21T07:30:54Z"</span>,</span><br><span class="line">          <span class="attr">"updated_at"</span>: <span class="string">"2012-07-21T07:38:22Z"</span>,</span><br><span class="line">          <span class="attr">"event_name"</span>: <span class="string">"project_create"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"StoreCloud"</span>,</span><br><span class="line">         <span class="attr">"owner_email"</span>: <span class="string">"johnsmith@gmail.com"</span>,</span><br><span class="line">          <span class="attr">"owner_name"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"storecloud"</span>,</span><br><span class="line"> <span class="attr">"path_with_namespace"</span>: <span class="string">"jsmith/storecloud"</span>,</span><br><span class="line">          <span class="attr">"project_id"</span>: <span class="number">74</span>,</span><br><span class="line">  <span class="attr">"project_visibility"</span>: <span class="string">"private"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="Tag事件"><a href="#Tag事件" class="headerlink" title="Tag事件"></a>Tag事件</h5><p>当向仓库(Repository)创建或删除标记(tag)时触发，它为每个修改过的标记生成一个事件。。</p><p>Request header:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Gitlab-Event: System Hook</span><br></pre></td></tr></table></figure><p>Request body:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"event_name"</span>: <span class="string">"tag_push"</span>,</span><br><span class="line">  <span class="attr">"before"</span>: <span class="string">"0000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"after"</span>: <span class="string">"82b3d5ae55f7080f1e6022629cdb57bfae7cccc7"</span>,</span><br><span class="line">  <span class="attr">"ref"</span>: <span class="string">"refs/tags/v1.0.0"</span>,</span><br><span class="line">  <span class="attr">"checkout_sha"</span>: <span class="string">"5937ac0a7beb003549fc5fd26fc247adbce4a52e"</span>,</span><br><span class="line">  <span class="attr">"user_id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"user_name"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">  <span class="attr">"user_avatar"</span>: <span class="string">"https://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=8://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=80"</span>,</span><br><span class="line">  <span class="attr">"project_id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"project"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Example"</span>,</span><br><span class="line">    <span class="attr">"description"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="attr">"web_url"</span>:<span class="string">"http://example.com/jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"avatar_url"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"git_ssh_url"</span>:<span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"git_http_url"</span>:<span class="string">"http://example.com/jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"namespace"</span>:<span class="string">"Jsmith"</span>,</span><br><span class="line">    <span class="attr">"visibility_level"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"path_with_namespace"</span>:<span class="string">"jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"default_branch"</span>:<span class="string">"master"</span>,</span><br><span class="line">    <span class="attr">"homepage"</span>:<span class="string">"http://example.com/jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"url"</span>:<span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"ssh_url"</span>:<span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"http_url"</span>:<span class="string">"http://example.com/jsmith/example.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Example"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"ssh://git@example.com/jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"homepage"</span>: <span class="string">"http://example.com/jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"git_http_url"</span>:<span class="string">"http://example.com/jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"git_ssh_url"</span>:<span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"visibility_level"</span>:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"commits"</span>: [],</span><br><span class="line">  <span class="attr">"total_commits_count"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="Merge请求事件"><a href="#Merge请求事件" class="headerlink" title="Merge请求事件"></a>Merge请求事件</h5><p>在创建一个新的合并(merge)请求时触发，更新、合并、关闭现有合并请求，或在源分支中添加commit。</p><p>Request Header:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Gitlab-Event: System Hook</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"object_kind"</span>: <span class="string">"merge_request"</span>,</span><br><span class="line">  <span class="attr">"user"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Administrator"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="attr">"avatar_url"</span>: <span class="string">"http://www.gravatar.com/avatar/e64c7d89f26bd1972efa854d13d7dd61?s=80&amp;d=identicon"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"project"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Example"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"web_url"</span>: <span class="string">"http://example.com/jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"avatar_url"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"git_ssh_url"</span>: <span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"git_http_url"</span>: <span class="string">"http://example.com/jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"namespace"</span>: <span class="string">"Jsmith"</span>,</span><br><span class="line">    <span class="attr">"visibility_level"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"path_with_namespace"</span>: <span class="string">"jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"default_branch"</span>: <span class="string">"master"</span>,</span><br><span class="line">    <span class="attr">"ci_config_path"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"homepage"</span>: <span class="string">"http://example.com/jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"ssh_url"</span>: <span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"http_url"</span>: <span class="string">"http://example.com/jsmith/example.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"object_attributes"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="attr">"target_branch"</span>: <span class="string">"master"</span>,</span><br><span class="line">    <span class="attr">"source_branch"</span>: <span class="string">"ms-viewport"</span>,</span><br><span class="line">    <span class="attr">"source_project_id"</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="attr">"author_id"</span>: <span class="number">51</span>,</span><br><span class="line">    <span class="attr">"assignee_id"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"MS-Viewport"</span>,</span><br><span class="line">    <span class="attr">"created_at"</span>: <span class="string">"2017-09-20T08:31:45.944Z"</span>,</span><br><span class="line">    <span class="attr">"updated_at"</span>: <span class="string">"2017-09-28T12:23:42.365Z"</span>,</span><br><span class="line">    <span class="attr">"milestone_id"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"opened"</span>,</span><br><span class="line">    <span class="attr">"merge_status"</span>: <span class="string">"unchecked"</span>,</span><br><span class="line">    <span class="attr">"target_project_id"</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="attr">"iid"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"updated_by_id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"merge_error"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"merge_params"</span>: &#123;</span><br><span class="line">      <span class="attr">"force_remove_source_branch"</span>: <span class="string">"0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"merge_when_pipeline_succeeds"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"merge_user_id"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"merge_commit_sha"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"deleted_at"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"in_progress_merge_commit_sha"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"lock_version"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"time_estimate"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"last_edited_at"</span>: <span class="string">"2017-09-27T12:43:37.558Z"</span>,</span><br><span class="line">    <span class="attr">"last_edited_by_id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"head_pipeline_id"</span>: <span class="number">61</span>,</span><br><span class="line">    <span class="attr">"ref_fetched"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"merge_jid"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"source"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Awesome Project"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"web_url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project"</span>,</span><br><span class="line">      <span class="attr">"avatar_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"git_ssh_url"</span>: <span class="string">"git@example.com:awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"git_http_url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"namespace"</span>: <span class="string">"root"</span>,</span><br><span class="line">      <span class="attr">"visibility_level"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"path_with_namespace"</span>: <span class="string">"awesome_space/awesome_project"</span>,</span><br><span class="line">      <span class="attr">"default_branch"</span>: <span class="string">"master"</span>,</span><br><span class="line">      <span class="attr">"ci_config_path"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"homepage"</span>: <span class="string">"http://example.com/awesome_space/awesome_project"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"ssh_url"</span>: <span class="string">"git@example.com:awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"http_url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project.git"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"target"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Awesome Project"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Aut reprehenderit ut est."</span>,</span><br><span class="line">      <span class="attr">"web_url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project"</span>,</span><br><span class="line">      <span class="attr">"avatar_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"git_ssh_url"</span>: <span class="string">"git@example.com:awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"git_http_url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"namespace"</span>: <span class="string">"Awesome Space"</span>,</span><br><span class="line">      <span class="attr">"visibility_level"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"path_with_namespace"</span>: <span class="string">"awesome_space/awesome_project"</span>,</span><br><span class="line">      <span class="attr">"default_branch"</span>: <span class="string">"master"</span>,</span><br><span class="line">      <span class="attr">"ci_config_path"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"homepage"</span>: <span class="string">"http://example.com/awesome_space/awesome_project"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"ssh_url"</span>: <span class="string">"git@example.com:awesome_space/awesome_project.git"</span>,</span><br><span class="line">      <span class="attr">"http_url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project.git"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"last_commit"</span>: &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"ba3e0d8ff79c80d5b0bbb4f3e2e343e0aaa662b7"</span>,</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"fixed readme"</span>,</span><br><span class="line">      <span class="attr">"timestamp"</span>: <span class="string">"2017-09-26T16:12:57Z"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://example.com/awesome_space/awesome_project/commits/da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">      <span class="attr">"author"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"GitLab dev user"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"gitlabdev@dv6700.(none)"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"work_in_progress"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"total_time_spent"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"human_total_time_spent"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"human_time_estimate"</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"labels"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"git-gpg-test"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git@example.com:awesome_space/awesome_project.git"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"homepage"</span>: <span class="string">"http://example.com/awesome_space/awesome_project"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="库更新事件"><a href="#库更新事件" class="headerlink" title="库更新事件"></a>库更新事件</h5><p>Repository Update events</p><p>当你push到Repository(包括tag)的时候仅触发一次。</p><p>Request Header：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Gitlab-Event: System Hook</span><br></pre></td></tr></table></figure><p>Request body:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"event_name"</span>: <span class="string">"repository_update"</span>,</span><br><span class="line">  <span class="attr">"user_id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"user_name"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">  <span class="attr">"user_email"</span>: <span class="string">"admin@example.com"</span>,</span><br><span class="line">  <span class="attr">"user_avatar"</span>: <span class="string">"https://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=8://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=80"</span>,</span><br><span class="line">  <span class="attr">"project_id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"project"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Example"</span>,</span><br><span class="line">    <span class="attr">"description"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="attr">"web_url"</span>:<span class="string">"http://example.com/jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"avatar_url"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"git_ssh_url"</span>:<span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"git_http_url"</span>:<span class="string">"http://example.com/jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"namespace"</span>:<span class="string">"Jsmith"</span>,</span><br><span class="line">    <span class="attr">"visibility_level"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"path_with_namespace"</span>:<span class="string">"jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"default_branch"</span>:<span class="string">"master"</span>,</span><br><span class="line">    <span class="attr">"homepage"</span>:<span class="string">"http://example.com/jsmith/example"</span>,</span><br><span class="line">    <span class="attr">"url"</span>:<span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"ssh_url"</span>:<span class="string">"git@example.com:jsmith/example.git"</span>,</span><br><span class="line">    <span class="attr">"http_url"</span>:<span class="string">"http://example.com/jsmith/example.git"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"changes"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"before"</span>:<span class="string">"8205ea8d81ce0c6b90fbe8280d118cc9fdad6130"</span>,</span><br><span class="line">      <span class="attr">"after"</span>:<span class="string">"4045ea7a3df38697b3730a20fb73c8bed8a3e69e"</span>,</span><br><span class="line">      <span class="attr">"ref"</span>:<span class="string">"refs/heads/master"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"refs"</span>:[<span class="string">"refs/heads/master"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p>Security: Learn what you can do to further secure your GitLab instance.</p><p><br></p><h5 id="密码长度"><a href="#密码长度" class="headerlink" title="密码长度"></a>密码长度</h5><p>Password length limits</p><p>如果要强制使用更长的用户密码，可使用<code>Devise initializer</code>来设置。</p><p>如果未使用<code>devise_password_length.rb</code>初始化程序，则在<code>config/initializers/devise.rb</code>中设置密码长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git/gitlab</span><br><span class="line">sudo -u git -H cp config/initializers/devise_password_length.rb.example config/initializers/devise_password_length.rb</span><br><span class="line">sudo -u git -H editor config/initializers/devise_password_length.rb   # inspect and edit the new password length limits</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="限制SSH秘钥和长度"><a href="#限制SSH秘钥和长度" class="headerlink" title="限制SSH秘钥和长度"></a>限制SSH秘钥和长度</h5><p>Restrict SSH key technologies and minimum length</p><p><code>ssh-keygen</code>允许用户创建少至768位的RSA密钥，这远低于某些标准组的建议。</p><p>这个功能在Web界面的设置里去设置。</p><p><br><br><br></p><h5 id="机架攻击"><a href="#机架攻击" class="headerlink" title="机架攻击"></a>机架攻击</h5><p>Rack attack</p><p><code>Rack Attack</code>, 也称为<code>Rack::Attack</code>.旨在通过自定义限制和阻止用户IP来保护GitLab。从<code>v 11.2</code>开始，默认禁用此功能。<br>您可以通过限制来自发出大量请求的IP地址的请求来防止暴力密码攻击，抓取程序或任何其他违规者。 如果您发现限制不足以保护您免受滥用客户端的攻击，Rack Attack提供IP白名单，黑名单，Fail2ban样式过滤和跟踪。<br>如果你的实例并未对外有任何传入连接，则建议你禁用此功能。</p><p><br></p><h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启用</span></span><br><span class="line">gitlab_rails[<span class="string">'rack_attack_git_basic_auth'</span>] = &#123;</span><br><span class="line">  <span class="string">'enabled'</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  <span class="string">'ip_whitelist'</span> =&gt; [<span class="string">"127.0.0.1"</span>],</span><br><span class="line">  <span class="string">'maxretry'</span> =&gt; 10, <span class="comment"># Limit the number of Git HTTP authentication attempts per IP</span></span><br><span class="line">  <span class="string">'findtime'</span> =&gt; 60, <span class="comment"># Reset the auth attempt counter per IP after 60 seconds</span></span><br><span class="line">  <span class="string">'bantime'</span> =&gt; 3600 <span class="comment"># Ban an IP for one hour (3600s) after too many auth attempts</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="通过Redis冲机架攻击中移除阻止的IP"><a href="#通过Redis冲机架攻击中移除阻止的IP" class="headerlink" title="通过Redis冲机架攻击中移除阻止的IP"></a>通过Redis冲机架攻击中移除阻止的IP</h5><p>Remove blocked IPs from Rack Attack via Redis</p><p>如果想移除阻止的IPs，参考下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#在日志中找出被阻止的IPs</span><br><span class="line">grep &quot;Rack_Attack&quot; /var/log/gitlab/gitlab-rails/production.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#由于黑名单存在Redis中，所以需要连接Redis</span><br><span class="line">/opt/gitlab/embedded/bin/redis-cli -s /var/opt/gitlab/redis/redis.socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除此IP</span><br><span class="line">DEL cache:gitlab:rack::attack:allow2ban:ban:&lt;ip&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">KEYS *rack::attack*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#或者，将其加入白名单</span><br></pre></td></tr></table></figure><p><br></p><p>如果所有流量来自于负载均衡器，请记得把负载均衡器加入白名单。</p><p><br><br><br></p><h5 id="Webhooks和不安全的内部Web服务"><a href="#Webhooks和不安全的内部Web服务" class="headerlink" title="Webhooks和不安全的内部Web服务"></a>Webhooks和不安全的内部Web服务</h5><p>Webhooks and insecure internal web services</p><p>如果您的GitLab Server或其本地网络中运行non-GitLab Web服务，则这些服务可能很容易被Webhooks利用。<br>使用Webhook，你便可以设置项目在发生特定事件时触发的URL。通常，这些请求被发送到专门为此目的设置的外部Web服务，以适当的方式处理请求及其附加数据。</p><p>然而，当Webhook设置的URL不是指向外部服务而是指向内部服务时，可能会在触发webhook并发送POST请求时完全无意中执行操作。<br>因为Webhook请求是由GitLab Server本身发出的，所以它们可以完全访问服务器上运行的所有内容或服务器的本地网络，即使这些服务受到其他方面的保护，无法与外界联系。</p><p>如果一个Web服务不需要身份认证，Webhooks可以通过让GitLab Server向端点(endpoint)发出POST请求来触发破坏性命令，例如<code>http://localhost:123/some-resource/delete</code></p><p>为了防止这种类型的利用，从GitLab v10.6开始，默认禁止对当前GitLab Instance Server Address或private network的所有Webhook请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#这意味着这些地址都被禁止</span><br><span class="line">127.0.0.1</span><br><span class="line">::1</span><br><span class="line">0.0.0.0</span><br><span class="line">10.0.0.0/8</span><br><span class="line">172.16.0.0/12</span><br><span class="line">173.192.168.0.0/16</span><br></pre></td></tr></table></figure><p>可在Web界面的设置里面的<strong>Outbound requests</strong>里启用<strong>Allow requests to the local network from hooks and services</strong>.</p><p><br><br><br></p><h5 id="信息独占性"><a href="#信息独占性" class="headerlink" title="信息独占性"></a>信息独占性</h5><p>Information exclusivity</p><p>Git是一个分布式版本控制系统，这意味着使用源代码的每一个人都拥有完整Repository的本地副本。GitLab有Guest、 Reporter、Developer、Maintainer这些项目用户权限。在获取此Repository后，用户可在任何位置上传此Repository。<br>您无法构建访问控制来阻止有权访问源代码的用户有意共享源代码。这是DVCS的固有特性，所有git管理系统都有此限制。显然你可以采取措施防止无意的共享和信息破坏，这就是为什么只有一些人被允许邀请其他人，没有人可以强制推动受保护的分支。</p><p><br><br><br></p><h5 id="重置root密码"><a href="#重置root密码" class="headerlink" title="重置root密码"></a>重置root密码</h5><p>reset your root password</p><p>使用root权限登录Ruby Rail控制台:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台</span></span><br><span class="line">gitlab-rails console production</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#等待终端的载入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找用户</span></span><br><span class="line">user = User.where(id: 1).first</span><br><span class="line"></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">user = User.find_by(email: <span class="string">'admin@local.host'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改密码</span></span><br><span class="line">user.password = <span class="string">'secret_pass'</span></span><br><span class="line">user.password_confirmation = <span class="string">'secret_pass'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存更改和退出</span></span><br><span class="line">user.save!</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="解锁锁定的用户"><a href="#解锁锁定的用户" class="headerlink" title="解锁锁定的用户"></a>解锁锁定的用户</h5><p>How to unlock a locked user</p><p>使用root权限登录Server，启动Ruby Rail Console:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br><span class="line"></span><br><span class="line">gitlab-rails console production</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = User.where(id: 1).first</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">user = User.find_by(email: <span class="string">'admin@local.host'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解锁</span></span><br><span class="line">user.unlock_access!</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="用户文件上传"><a href="#用户文件上传" class="headerlink" title="用户文件上传"></a>用户文件上传</h5><p>User File Uploads</p><p>如果有人知道直接URL，则附加图像到问题，合并请求或评论不需要查看身份验证。此直接URL包含一个随机的32个字符的ID，可防止未经授权的人员将URL猜到包含敏感信息的图像。我们不启用身份验证，因为这些图像需要在通知电子邮件正文中可见，通常从未通过GitLab验证的电子邮件客户端读取，例如Outlook、Gmail..</p><p>请注意，非图像附件确实需要查看身份验证。</p><p><br><br><br></p><h5 id="管理CRIME漏洞"><a href="#管理CRIME漏洞" class="headerlink" title="管理CRIME漏洞"></a>管理CRIME漏洞</h5><p>How we manage the CRIME vulnerability</p><blockquote><p>CRIME(“Compression Ratio Info-leak Made Easy”)是一种针对使用HTTPS和SPDY协议进行连接的秘密Web cookie的安全漏洞，这些协议也使用数据压缩。当用于恢复秘密身份验证cookie的内容时，它允许攻击者在经过身份验证的Web会话上执行会话劫持，从而允许发起进一步的攻击。</p></blockquote><p>TLS协议CRIME漏洞影响HTTPS上的压缩，因此它警告不要使用SSL压缩（例如gzip）或SPDY，它也可以选择使用压缩。<br>虽然在Omnibus安装中启用了SPDY，但CRIME依赖于压缩（’C’），并且NGINX的SPDY模块中的默认压缩级别为0（无压缩）。</p><p>GitLab支持gzip和SPDY，并在启用HTTPS时通过停用gzip来缓解CRIME漏洞。<br>你可以看到问题的来源：</p><ul><li>Source installation NGINX file</li><li>Omnibus installation NGINX file</li></ul><p><br><br><br></p><h5 id="强制双重认证"><a href="#强制双重认证" class="headerlink" title="强制双重认证"></a>强制双重认证</h5><p>Enforce Two-factor Authentication (2FA)</p><p>双因素身份验证（2FA）为GitLab帐户提供了额外的安全级别。启用后，除了提供用户名和密码登录外，还要求在输入应用程序生成的代码。</p><p><br></p><p><strong>为所有账户启用两步认证：</strong></p><p>有两种方式：</p><ul><li>Enforce on next login.</li><li>Suggest on next login, but allow a grace period before enforcing.</li></ul><p>在Web界面里Admin区域里的设置里面的“Sign-in Restrictions”选项。</p><p><br></p><p><strong>为组中的所有用户启用：</strong></p><p>如果你只想对某些特定组启用两步认证，则你需要则群组设置中启用它。</p><p><br></p><p><strong>为所有用户禁用：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Omnibus installations</span></span><br><span class="line">sudo gitlab-rake gitlab:two_factor:disable_for_all_users</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Installations from source</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:two_factor:disable_for_all_users RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="注册时用户邮件确认"><a href="#注册时用户邮件确认" class="headerlink" title="注册时用户邮件确认"></a>注册时用户邮件确认</h5><p>User email confirmation at sign-up</p><p>如果您想在所有用户电子邮件登录之前确认，GitLab管理员可以在注册时启用电子邮件确认。</p><p>在Web界面的Admin区域的设置的“ Sign-up Restrictions”里启用“Send confirmation email on sign-up”。</p><p><br><br><br><br><br></p><h4 id="统计、检查和ping"><a href="#统计、检查和ping" class="headerlink" title="统计、检查和ping"></a>统计、检查和ping</h4><p>Usage statistics, version check, and usage ping: Enable or disable information about your instance to be sent to GitLab, Inc.</p><p>GitLab定期从实例收集各种信息。你可在<code>Admin area &gt; Settings</code>去设置他们。</p><p><br></p><p><strong>停止使用ping：</strong></p><p>在设置面板里面取消，并修改配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#omnibus</span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">gitlab_rails[&apos;usage_ping_enabled&apos;] = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#source</span><br><span class="line">vi ./gitlab.yml</span><br><span class="line"></span><br><span class="line">production: &amp;base</span><br><span class="line">  # ...</span><br><span class="line">  gitlab:</span><br><span class="line">    # ...</span><br><span class="line">    usage_ping_enabled: false</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h4 id="轮询配置"><a href="#轮询配置" class="headerlink" title="轮询配置"></a>轮询配置</h4><p>Polling: Configure how often the GitLab UI polls for updates.</p><p>GitLab UI按照适合资源的计划轮询不同资源的更新(issue notes, issue titles, pipeline statuses, etc.)<br>在Web UI的应用程序使用功能中设置它：</p><ul><li>1(默认值，推荐用于大多数安装)（Issue notes poll every 2 seconds, and issue titles poll every 5 seconds.)</li><li>0(禁用UI轮询)</li><li>大于1(将减慢轮询速度)</li><li>0-1之间(轮询更频繁，不推荐)</li></ul><p><br><br><br><br><br></p><h4 id="GitLab-Page"><a href="#GitLab-Page" class="headerlink" title="GitLab Page"></a>GitLab Page</h4><p>GitLab Pages configuration: Enable and configure GitLab Pages.</p><p>GitLab Pages使用GitLab Pages Daemon，这是一个用Go编写的简单HTTP Server，可以侦听外部IP地址并提供对自定义域和自定义证书的支持。它通过SNI支持动态证书，默认情况下使用HTTP2公开页面。</p><p>对于自定义域（但不是通配符域），Pages Daemon需要侦听端口80/443。因此，您可以灵活设置它：</p><ul><li>在与GitLab相同的Server中运行Pages Daemon，监听 Secondary IP</li><li>在与GitLab相同的Server上运行Pages Daemon，监听同一IP的不同Port</li><li>在单独的Server中运行Pages Daemon</li></ul><p><br><br><br></p><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p>在配置Pages之前，你需要：</p><ul><li>拥有用于提供GitLab Pages的独占根域。请注意，您不能使用GitLab实例域的子域。</li><li>配置wildcard DNS record.</li><li>HTTPS(可选)</li><li>启用shared runner(可选，但推荐)</li></ul><p><br></p><p><strong>将域添加到公共后缀列表</strong><br>Add the domain to the Public Suffix List</p><p><br></p><p><strong>DNS配置</strong></p><p>您需要添加指向GitLab运行的主机的通配符DNS A记录。</p><p><br><br><br></p><p>#####　配置</p><p>根据您的需要，您可以通过4种不同的方式设置GitLab页面。</p><ul><li>Wildcard domains</li><li>Wildcard domains with TLS support</li><li>Custom domains</li><li>Custom domains with TLS support</li><li>Custom domain verification</li><li>Access control</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gitlab_pages</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br></p><p><strong>其它一些配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#日志记录</span><br><span class="line">gitlab_pages[&apos;log_verbose&apos;] = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#存储路径</span><br><span class="line">gitlab_rails[&apos;pages_path&apos;] = &quot;/mnt/storage/pages&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#监听和代理请求</span><br><span class="line">gitlab_pages[&apos;listen_proxy&apos;] = &quot;localhost:10080&quot;</span><br><span class="line">#禁用</span><br><span class="line">gitlab_pages[&apos;listen_proxy&apos;] = nil</span><br><span class="line"></span><br><span class="line">#安全</span><br><span class="line">#备份</span><br><span class="line">#page size</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>Environment variables: Supported environment variables that can be used to override their defaults values in order to configure GitLab.</p><p>GitLab公开了某些环境变量，这些变量可用于覆盖其默认值。</p><p><strong>支持的环境变量：</strong></p><table><thead><tr><th>Variable</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>GITLAB_CDN_HOST</code></td><td>string</td><td>Sets the base URL for a CDN to serve static assets (e.g. //mycdnsubdomain.fictional-cdn.com)</td></tr><tr><td><code>GITLAB_ROOT_PASSWORD</code></td><td>string</td><td>Sets the password for the root user on installation</td></tr><tr><td><code>GITLAB_HOST</code></td><td>string</td><td>The full URL of the GitLab server (including http:// or https://)</td></tr><tr><td><code>RAILS_ENV</code></td><td>string</td><td>The Rails environment; can be one of production, development, staging or test</td></tr><tr><td><code>DATABASE_URL</code></td><td>string</td><td>The database URL; is of the form: postgresql://localhost/blog_development</td></tr><tr><td><code>GITLAB_EMAIL_FROM</code></td><td>string</td><td>The e-mail address used in the “From” field in e-mails sent by GitLab</td></tr><tr><td><code>GITLAB_EMAIL_DISPLAY_NAME</code></td><td>string</td><td>The name used in the “From” field in e-mails sent by GitLab</td></tr><tr><td><code>GITLAB_EMAIL_REPLY_TO</code></td><td>string</td><td>The e-mail address used in the “Reply-To” field in e-mails sent by GitLab</td></tr><tr><td><code>GITLAB_EMAIL_SUBJECT_SUFFIX</code></td><td>string</td><td>The e-mail subject suffix used in e-mails sent by GitLab</td></tr><tr><td><code>GITLAB_UNICORN_MEMORY_MIN</code></td><td>integer</td><td>The minimum memory threshold (in bytes) for the Unicorn worker killer</td></tr><tr><td><code>GITLAB_UNICORN_MEMORY_MAX</code></td><td>integer</td><td>The maximum memory threshold (in bytes) for the Unicorn worker killer</td></tr><tr><td><code>GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN</code></td><td>string</td><td>Sets the initial registration token used for GitLab Runners</td></tr></tbody></table><p><br></p><p><strong>完整的数据库变量：</strong></p><p>指定数据库连接信息的推荐方法是设置<code>DATABASE_URL</code>环境变量。此变量仅保存连接信息(adapter, database, username, password, host, port)，没有行为信息(encoding, pool)。</p><p>如果你不想使用<code>DATABASE_URL</code>环境变量或想要使用数据库行为信息，则：</p><ul><li>复制模板文件: <code>cp config/database.yml.env config/database.yml</code></li><li>或，为<code>GITLAB_DATABASE_XXX</code>变量设置值</li></ul><p>你可以设置的<code>GITLAB_DATABASE_XXX</code>变量列表：</p><table><thead><tr><th>Variable</th><th>Default value</th><th>Overridden by <code>DATABASE_URL</code>?</th></tr></thead><tbody><tr><td><code>GITLAB_DATABASE_ADAPTER</code></td><td>postgresql (for MySQL use mysql2)</td><td>Yes</td></tr><tr><td><code>GITLAB_DATABASE_DATABASE</code></td><td>gitlab_#{ENV[‘RAILS_ENV’]</td><td>Yes</td></tr><tr><td><code>GITLAB_DATABASE_USERNAME</code></td><td>root</td><td>Yes</td></tr><tr><td><code>GITLAB_DATABASE_PASSWORD</code></td><td>None</td><td>Yes</td></tr><tr><td><code>GITLAB_DATABASE_HOST</code></td><td>localhost</td><td>Yes</td></tr><tr><td><code>GITLAB_DATABASE_PORT</code></td><td>5432</td><td>Yes</td></tr><tr><td><code>GITLAB_DATABASE_ENCODING</code></td><td>unicode</td><td>No</td></tr><tr><td><code>GITLAB_DATABASE_POOL</code></td><td>10</td><td>No</td></tr></tbody></table><p><br></p><p><strong>添加更多变量：</strong></p><p>我们欢迎合并请求，并通过变量进行更多配置。<br>请在<code>config/initializers/1_settings.rb</code>文件中进行更改，并使用<code>GITLAB_#{name in 1_settings.rb in upper case}</code>这样的命名方案。</p><p><br></p><p><strong>Omnibus设置自定义环境变量：</strong></p><p>如有必要，您可以通过<code>/etc/gitlab/gitlab.rb</code>设置Unicorn，Sidekiq，Rails和Rake使用的自定义环境变量。这在您需要使用代理来访问Internet并且您希望将外部托管的存储库直接克隆到gitlab的情况下非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">gitlab_rails[&apos;env&apos;] = &#123;</span><br><span class="line">    &quot;http_proxy&quot; =&gt; &quot;my_proxy&quot;,</span><br><span class="line">    &quot;https_proxy&quot; =&gt; &quot;my_proxy&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#你还可以覆盖GitLab组件中的其它环境变量</span><br><span class="line"># Needed for proxying Git clones</span><br><span class="line">gitaly[&apos;env&apos;] = &#123;</span><br><span class="line">    &quot;http_proxy&quot; =&gt; &quot;my_proxy&quot;,</span><br><span class="line">    &quot;https_proxy&quot; =&gt; &quot;my_proxy&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gitlab_workhorse[&apos;env&apos;] = &#123;</span><br><span class="line">    &quot;http_proxy&quot; =&gt; &quot;my_proxy&quot;,</span><br><span class="line">    &quot;https_proxy&quot; =&gt; &quot;my_proxy&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># If you use the docker registry</span><br><span class="line">registry[&apos;env&apos;] = &#123;</span><br><span class="line">    &quot;http_proxy&quot; =&gt; &quot;my_proxy&quot;,</span><br><span class="line">    &quot;https_proxy&quot; =&gt; &quot;my_proxy&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#应用更改</span><br><span class="line">#对环境变量所做的任何更改都需要在重新配置后进行硬重启才能使其生效</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>GitLab Plugin System<br>Plugins: With custom plugins, GitLab administrators can introduce custom integrations without modifying GitLab’s source code.</p><p>使用自定义插件，GitLab管理员可以在不修改GitLab源代码的情况下引入自定义集成。<br>你也可以之间修改GitLab源代码而不用编写插件。<br>必须在GitLab Server上配置插件。</p><p>插件将在每个事件上运行，因此您可以在插件代码中过滤事件或项目。你可以拥有任意数量的插件。如果发生事件，每个插件都将由GitLab异步触发。</p><p><br></p><p><strong>配置：</strong></p><p>插件必须直接放在plugin目录中，按照以下步骤自定义hook:</p><ul><li>在GitLab Server上，定位到plugin目录<ul><li>source: <code>/home/git/gitlab/plugins/</code></li><li>omnibus: <code>/opt/gitlab/embedded/service/gitlab-rails/plugins</code></li></ul></li><li>在plugins目录内，创建一个你需要的文件(文件名不要使用特殊字符)</li><li>使hook文件可执行，并有git用户所拥有</li><li>编写代码以使插件功能符合预期。这可以是任何语言</li><li>插件的数据将在STDIN上以JSON的形式提供</li></ul><p><br></p><p><strong>验证：</strong></p><p>编写自己的插件可能会非常棘手，如果您可以在不改变系统的情况下进行检查，则会更容易。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Omnibus installations</span></span><br><span class="line">sudo gitlab-rake plugins:validate</span><br><span class="line"></span><br><span class="line"><span class="comment"># Installations from source</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">bundle <span class="built_in">exec</span> rake plugins:validate RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h4 id="规范性"><a href="#规范性" class="headerlink" title="规范性"></a>规范性</h4><p>Compliance: A collection of features from across the application that you may configure to help ensure that your </p><p>您可以配置以下GitLab功能，以帮助确保您的GitLab实例符合通用的规范性标准。</p><table><thead><tr><th>功能</th><th>GitLab tier</th></tr></thead><tbody><tr><td><strong>Restrict SSH Keys</strong> <br> 控制用于访问GitLab的SSH密钥的技术和密钥长度</td><td>Core+</td></tr><tr><td><strong>Granular user roles and flexible permissions</strong> <br> 使用五种不同的用户角色和外部用户设置管理访问权限和权限。根据人员的角色设置权限，而不是对存储库的读取或写入访问权限。不要与只需要访问问题跟踪器的人共享源代码。</td><td>Core+</td></tr><tr><td><strong>Enforce TOS acceptance</strong> <br> 通过阻止GitLab流量强制您的用户接受新的服务条款。</td><td>Core+</td></tr><tr><td><strong>Email all users of a project, group, or entire server</strong> <br> 管理员可以根据项目或组成员身份向用户组发送电子邮件，或使用GitLab实例向每个人发送电子邮件。</td><td>Starter+</td></tr><tr><td><strong>Omnibus package supports log forwarding</strong> <br> 将日志转发到中央系统。</td><td>Starter+</td></tr><tr><td><strong>Lock project membership to group</strong> <br> 组所有者可以阻止将新成员添加到组中的项目。</td><td>Starter+</td></tr><tr><td><strong>LDAP group sync</strong> <br> GitLab企业版使管理员能够自动同步组并管理SSH密钥，权限和身份验证，因此您可以专注于构建产品，而不是配置工具。</td><td>Starter+</td></tr><tr><td><strong>LDAP group sync filters</strong> <br> GitLab企业版Premium可以更灵活地基于过滤器与LDAP同步，这意味着您可以利用LDAP属性来映射GitLab权限。</td><td>Premium+</td></tr><tr><td><strong>Audit logs</strong> <br> 为了保持代码的完整性，GitLab Enterprise Edition Premium使管理员能够在高级审计日志系统中查看GitLab服务器内的任何修改，以便您可以控制，分析和跟踪每个更改。</td><td>Premium+</td></tr><tr><td><strong>Auditor users</strong> <br> 审核员用户是对GitLab实例上的所有项目，组和其他资源具有只读访问权限的用户。</td><td>Premium+</td></tr></tbody></table><p><br><br><br><br><br></p><h4 id="自定义GitLab外观"><a href="#自定义GitLab外观" class="headerlink" title="自定义GitLab外观"></a>自定义GitLab外观</h4><p>Customizing GitLab’s appearance</p><p>这些外观配置请在Web UI里面进行设置：</p><ul><li>Header logo</li><li>Favicon</li><li>Branded login page</li><li>Welcome message</li><li>“New Project” page</li></ul><p><br><br><br><br><br><br><br></p><h3 id="维护GitLab"><a href="#维护GitLab" class="headerlink" title="维护GitLab"></a>维护GitLab</h3><p>Maintaining GitLab</p><p><br></p><h4 id="靶任务"><a href="#靶任务" class="headerlink" title="靶任务"></a>靶任务</h4><p>Raketasks: Perform various tasks for maintenance, backups, automatic webhooks setup, etc.</p><p><br></p><h5 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h5><p>Backing up and restoring GitLab</p><p>应用程序数据备份会创建一个归档文件，其中包含数据库、所有Repository和所有附件。<br>您只能将备份恢复到与其创建的GitLab完全相同的版本和类型（CE / EE）。将Repository从一个服务器迁移到另一个服务器的最佳方法是通过备份还原。</p><p><img src="/images/GitLab/backup_hrz.png" alt=""></p><p><br></p><p><strong>依赖(requirements)</strong><br>为了实现备份和还原，需要在系统上安装两个工具。</p><ul><li><code>rsync</code></li><li><code>tar v1.3+</code></li></ul><p><br></p><p><strong>备份时间戳(Backup timestamp)</strong></p><blockquote><p>Note: In GitLab 9.2 the timestamp format was changed from <code>EPOCH_YYYY_MM_DD</code> to <code>EPOCH_YYYY_MM_DD_GitLab_version</code></p></blockquote><p>备份存档将保存在<code>backup_path</code>中，它在<code>config/gitlab.yml</code>文件中指定。文件名为<code>[TIMESTAMP] _gitlab_backup.tar</code>，其中TIMESTAMP标识每个备份的创建时间以及GitLab版本。如果需要还原GitLab并且有多个备份可用，则需要时间戳。</p><p><br></p><p><strong>创建备份(Creating a backup of the GitLab system)</strong></p><p>GitLab提供了一个简单的命令行接口来备份整个实例。包括：</p><ul><li>Database</li><li>Attachments</li><li>Git repositories data</li><li>CI/CD job output logs</li><li>CI/CD job artifacts</li><li>LFS objects</li><li>Container Registry images</li><li>GitLab Pages content</li></ul><blockquote><p>注意：GitLab不会备份配置文件、SSL证书、系统文件。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:create</span><br><span class="line"></span><br><span class="line"><span class="comment">#source</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:backup:create RAILS_ENV=production</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker</span></span><br><span class="line">docker <span class="built_in">exec</span> -t &lt;container name&gt; gitlab-rake gitlab:backup:create</span><br><span class="line"></span><br><span class="line"><span class="comment">#k8s cluster</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it &lt;gitlab task-runner pod&gt; backup-utility</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出栗子</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:create</span><br><span class="line"></span><br><span class="line">Dumping database ...</span><br><span class="line">Dumping PostgreSQL database gitlabhq_production ... [DONE]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping repositories ...</span><br><span class="line"> * root/zhangbin-test ... [DONE]</span><br><span class="line">[SKIPPED] Wiki</span><br><span class="line"> * root/test02 ... [SKIPPED]</span><br><span class="line">[SKIPPED] Wiki</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping uploads ...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping builds ...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping artifacts ...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping pages ...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping lfs objects ...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping container registry images ...</span><br><span class="line">[DISABLED]</span><br><span class="line">Creating backup archive: 1544578010_2018_12_12_11.5.1_gitlab_backup.tar ... <span class="keyword">done</span></span><br><span class="line">Uploading backup archive to remote storage  ... skipped</span><br><span class="line">Deleting tmp directories ... <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Deleting old backups ... skipping</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">sudo ls /var/opt/gitlab/backups/</span><br><span class="line">1544578010_2018_12_12_11.5.1_gitlab_backup.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo tar -tvf  backups/1544578010_2018_12_12_11.5.1_gitlab_backup.tar</span><br><span class="line">drwx------ git/git           0 2018-12-12 09:26 repositories/</span><br><span class="line">drwxr-xr-x git/git           0 2018-12-12 09:26 repositories/root/</span><br><span class="line">-rw-r--r-- git/git         476 2018-12-12 09:26 repositories/root/zhangbin-test.bundle</span><br><span class="line">drwxr-xr-x git/git           0 2018-12-12 09:26 repositories/root/zhangbin-test/</span><br><span class="line">drwxr-xr-x git/git           0 2018-12-12 09:26 db/</span><br><span class="line">-rw------- git/git       84875 2018-12-12 09:26 db/database.sql.gz</span><br><span class="line">-rw------- git/git         152 2018-12-12 09:26 uploads.tar.gz</span><br><span class="line">-rw------- git/git         151 2018-12-12 09:26 builds.tar.gz</span><br><span class="line">-rw------- git/git         152 2018-12-12 09:26 artifacts.tar.gz</span><br><span class="line">-rw------- git/git         155 2018-12-12 09:26 pages.tar.gz</span><br><span class="line">-rw------- git/git         152 2018-12-12 09:26 lfs.tar.gz</span><br><span class="line">-rw-r--r-- git/git         190 2018-12-12 09:26 backup_information.yml</span><br></pre></td></tr></table></figure><p><br></p><p><strong>保存配置文件(Storing configuration files)</strong></p><ul><li>Omnibus<ul><li><code>/etc/gitlab/gitlab-secrets.json</code></li><li><code>/etc/gitlab/gitlab.rb</code></li></ul></li><li>Source<ul><li><code>/home/git/gitlab/config/secrets.yml</code></li><li><code>/home/git/gitlab/config/gitlab.yml</code></li></ul></li><li>TLS keys and certificates</li><li>SSH key</li><li>…</li></ul><p><br></p><p><strong>备份选项(Backup options)</strong><br>备份策略提供了许多可用选项。</p><ul><li>备份策略(Backup strategy option)<br>默认备份策略是使用Linux命令<code>tar</code>和<code>gzip</code>将数据从相应的数据位置流式传输到备份。这在大多数情况下都可以正常工作，但在数据快速变化时会导致问题。<br>当<code>tar</code>读取数据时数据发生变化，读取文件会发生错误，并导致备份过程失败。为了解决这个问题，<code>v8.17</code>引入了一种名为<code>copy</code>的新备份策略。该策略在调用<code>tar</code>和<code>gzip</code>之前将数据文件复制到临时位置，以避免错误。<br>副作用(side-effect)是备份过程中占用额外的磁盘空间，该过程尽最大努力在每个阶段清理临时文件，因此问题不会复杂化，但对于大型安装而言，这可能是一个相当大的变化。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:create STRATEGY=copy</span><br></pre></td></tr></table></figure><p><br></p><ul><li>从备份中排出特定目录(Excluding specific directories from the backup)<ul><li>db (database)</li><li>uploads (attachments)</li><li>repositories (Git repositories data)</li><li>builds (CI job output logs)</li><li>artifacts (CI job artifacts)</li><li>lfs (LFS objects)</li><li>registry (Container Registry images)</li><li>pages (Pages content)</li></ul></li></ul><p>你可以使用<code>SKIP</code>环境变量来跳过不需要备份的内容，使用逗号来分隔多个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#栗子</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:create SKIP=db,uploads</span><br></pre></td></tr></table></figure><p><br></p><ul><li>上传到本地挂载来共享(Uploading to locally mounted shares)<br>你也可以使用<code>Fog Local</code>存储提供程序将备份发送到已挂载的共享(NFS/CIFS/SMB…)。<code>local_root</code> key 指向的目录在挂载时必须由git用户拥有。<br>除<code>local_root</code> key 外，还必须设置<code>backup_upload_remote_directory</code>，这是已挂载目录中将要复制备份的子目录，如果不存在则将创建。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#Omnibus</span><br><span class="line">#vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">gitlab_rails[&apos;backup_upload_connection&apos;] = &#123;</span><br><span class="line">  :provider =&gt; &apos;Local&apos;,</span><br><span class="line">  :local_root =&gt; &apos;/mnt/backups&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># The directory inside the mounted folder to copy backups to</span><br><span class="line"># Use &apos;.&apos; to store them in the root directory</span><br><span class="line">gitlab_rails[&apos;backup_upload_remote_directory&apos;] = &apos;gitlab_backups&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#source</span><br><span class="line">#vi home/git/gitlab/config/gitlab.yml</span><br><span class="line"></span><br><span class="line">backup:</span><br><span class="line">  upload:</span><br><span class="line">    # Fog storage connection settings, see http://fog.io/storage/ .</span><br><span class="line">    connection:</span><br><span class="line">      provider: Local</span><br><span class="line">      local_root: &apos;/mnt/backups&apos;</span><br><span class="line">    # The directory inside the mounted folder to copy backups to</span><br><span class="line">    # Use &apos;.&apos; to store them in the root directory</span><br><span class="line">    remote_directory: &apos;gitlab_backups&apos;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>备份归档权限(Backup archive permissions)<br>GitLab创建的备份归档文件的默认所属用户和组为(<code>git:git</code>)，这是为了避免其它系统用户读取GitLab数据。如果你需要备份文件具有其它权限，请在配置文件中修改它：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line"><span class="comment">#/etc/gitlab/gitlab.rb</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'backup_archive_permissions'</span>] = 0644 <span class="comment"># Makes the backup archives world-readable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#source</span></span><br><span class="line"><span class="comment">#/home/git/gitlab/config/gitlab.yml:</span></span><br><span class="line">backup:</span><br><span class="line">  archive_permissions: 0644 <span class="comment"># Makes the backup archives world-readable</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li>配置定时备份(Configuring cron to make daily backups)</li></ul><p>请注意，<code>backup_keep_time</code>配置选项仅管理本地文件。 GitLab不会自动清理存储在第三方对象存储（例如，AWS S3）中的旧文件，因为用户可能没有列出和删除文件的权限。建议您为对象存储配置适当的保留策略。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line"><span class="comment">#/etc/gitlab/gitlab.rb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认保留7天</span></span><br><span class="line"><span class="comment">## Limit backup lifetime to 7 days - 604800 seconds</span></span><br><span class="line">gitlab_rails[<span class="string">'backup_keep_time'</span>] = 604800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cron</span></span><br><span class="line">sudo su -</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="comment">#每天2AM</span></span><br><span class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h5><p>Restore</p><p>GitLab提供了一个简单的命令行界面来恢复整个安装，并且足够灵活，可以满足您的需求。<br>您只能将备份恢复到与其创建的GitLab完全相同的版本和类型（CE / EE）。</p><p><br></p><p><strong>先决条件(prerequisites)</strong><br>在执行还原之前，您需要安装有效的GitLab。这主要是因为通常不允许执行恢复操作（<code>git</code>）的系统用户创建或删除将数据导入（<code>gitlabhq_production</code>）所需的SQL数据库。所有现有数据将被删除或移动到单独的目录。<br>要恢复备份，您还需要恢复<code>/etc/gitlab/gitlab-secrets.json</code>（Omnibus）或 <code>/home/git/gitlab/.secret</code>（Source），它包含了 database encryption key, CI/CD 变量 和 two-factor authentication的变量。如果您无法将此加密密钥文件与应用程序数据备份一起恢复，则启用了双因素身份验证的用户和GitLab Runners将无法访问您的GitLab服务器。<br>你可能还需要还原TLS keys, certificates, or SSH host keys…</p><p>根据你的情况，你可能需要使用如下选项：</p><ul><li><code>BACKUP=timestamp_of_backup</code>: 如果存在多个备份，则必需</li><li><code>force=yes</code>: 不询问<code>authorized_keys</code>文件是否应该重新生成，并假设“yes”表示将删除数据库表，启用“写入<code>authorized_keys</code>文件”设置，并更新LDAP提供程序。</li></ul><blockquote><p>注意: 如果要还原到作为挂载点的目录，则需要在尝试还原之前确保这些目录为空。否则GitLab将在恢复新数据之前尝试移动这些目录，这将导致错误。</p></blockquote><p><br></p><p><strong>还原源码安装(Source)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Stop processes that are connected to the database</span></span><br><span class="line">sudo service gitlab stop</span><br><span class="line"></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:backup:restore RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>还原包安装(Omnibus)</strong></p><p>此过程假定：</p><ul><li>你已使用包安装相同版本的GitLab</li><li>你至少已经运行了一次<code>sudo gitlab-ctl reconfigure</code></li><li>GitLab已经运行</li></ul><p>首先确保你的备份文件已经放置到了备份目录中(默认为<code>/var/opt/gitlab/backups</code>)，并将其所属用户和组修改为<code>git:git</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制备份文件</span></span><br><span class="line">sudo cp 11493107454_2018_04_25_10.6.4-ce_gitlab_backup.tar /var/opt/gitlab/backups/</span><br><span class="line">sudo chown git.git /var/opt/gitlab/backups/11493107454_2018_04_25_10.6.4-ce_gitlab_backup.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#暂停程序与数据库的连接</span></span><br><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line"><span class="comment"># Verify</span></span><br><span class="line">sudo gitlab-ctl status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#还原</span></span><br><span class="line"><span class="comment"># This command will overwrite the contents of your GitLab database!</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1493107454_2018_04_25_10.6.4-ce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启和检查</span></span><br><span class="line">sudo gitlab-ctl restart</span><br><span class="line">sudo gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>还原Docker</strong><br>对于使用Docker或可k8s安装的GitLab，还原期望还原的目录为空。然而，使用Docker和k8s volume 挂载时，可能会在Volume根下创建一些系统级的目录(如: <code>lost+found</code>)。这些目录通常由root拥有，可能会导致访问权限错误。因为还原操作是以<code>git</code>用户运行。因此，要还原GitLab，请确保还原的目标目录为空。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Docker</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;name of container&gt; gitlab-rake gitlab:backup:restore</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="其它备份策略"><a href="#其它备份策略" class="headerlink" title="其它备份策略"></a>其它备份策略</h5><p>Alternative backup strategies</p><p>如果您的GitLab服务器包含大量Git Repository数据，您可能会发现GitLab备份脚本太慢。在这种情况下，您可以考虑使用文件系统快照作为备份策略的一部分。</p><ul><li>LVM snapshots + rsync<br>建立一个临时的LVM快照，将它作为只读文件系统挂载到<code>/mnt/gitlab_backup</code>。现在我们可以有一个更长的rsync作业，它将在远程Server创建一致的副本。</li></ul><p><br><br><br></p><h5 id="完整性检查"><a href="#完整性检查" class="headerlink" title="完整性检查"></a>完整性检查</h5><p>Integrity Check</p><p><br></p><p><strong>仓库完整性(Repository Integrity)</strong></p><p>即使Git非常有弹性并试图防止数据完整性问题，但有时候仍会出现问题。以下Rake task 旨在帮助GitLab管理员诊断问题 Repo，以便修复它们。</p><ul><li>Git repository file system check</li><li>Check for <code>config.lock</code> in the repository directory</li><li>Check for any <code>branch/references</code> lock files in <code>refs/heads</code></li></ul><p>以下症状可能表示Repo完整性存在问题：</p><ul><li>Receiving an error when trying to push code - <code>remote: error: cannot lock ref</code></li><li>A 500 error when viewing the GitLab dashboard or when accessing a specific project</li></ul><p><br></p><p><strong>检查所有GitLab Repo完整性</strong></p><p>此任务循环遍历GitLab服务器上的所有存储库，并运行前面描述的完整性检查。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:git:fsck</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#source</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:git:fsck RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>上传的文件完整性(Uploaded Files Integrity)</strong></p><p>用户可以将各种类型的文件上传到GitLab上。此外，这些完整性检查可以检测丢失的文件。对于本地存储的文件，在上传时生成校验和(checksum)并将其存储在数据库中，并且这些检查将针对当前文件验证它们。<br>目前，支持一下类型文件的完整性检查：</p><ul><li>CI artifacts</li><li>LFS objects</li><li>User uploads</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:artifacts:check</span><br><span class="line">sudo gitlab-rake gitlab:lfs:check</span><br><span class="line">sudo gitlab-rake gitlab:uploads:check</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:artifacts:check RAILS_ENV=production</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:lfs:check RAILS_ENV=production</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:uploads:check RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>这些任务还接受一些环境变量，您可以使用这些变量来覆盖某些值：</p><table><thead><tr><th>Variable</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>BATCH</td><td>integer</td><td>Specifies the size of the batch. Defaults to 200.</td></tr><tr><td>ID_FROM</td><td>integer</td><td>Specifies the ID to start from, inclusive of the value.</td></tr><tr><td>ID_TO</td><td>integer</td><td>Specifies the ID value to end at, inclusive of the value.</td></tr><tr><td>VERBOSE</td><td>boolean</td><td>Causes failures to be listed individually, rather than being summarized.</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#栗子</span></span><br><span class="line">sudo gitlab-rake gitlab:artifacts:check BATCH=100 ID_FROM=50 ID_TO=250</span><br><span class="line">sudo gitlab-rake gitlab:lfs:check BATCH=100 ID_FROM=50 ID_TO=250</span><br><span class="line">sudo gitlab-rake gitlab:uploads:check BATCH=100 ID_FROM=50 ID_TO=250</span><br></pre></td></tr></table></figure><p><br></p><p><strong>LDAP检查</strong></p><p><br><br><br></p><h5 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h5><p>Cleanup</p><p><br></p><p><strong>从文件系统移除垃圾(Remove garbage from filesystem. Important! Data loss!)</strong></p><p>如果GitLab数据库中不存在 namespace（dirs），则从所有Repo存储路径中删除它们。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:cleanup:<span class="built_in">dirs</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:cleanup:<span class="built_in">dirs</span> RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p>如果GitLab数据库中不存在Repo，则从所有Repo存储路径重命名存储库。Repo获得一个<code>+orphaned+TIMESTAMP</code>后缀，以便他们无法阻止新Repo的创建。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:cleanup:repos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:cleanup:repos RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p>如果GitLab数据库中不存在本地项目上传文件，请将其清除。该任务尝试修复文件，如果它可以找到它的项目，否则它将文件移动到丢失和找到的目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:cleanup:project_uploads</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:cleanup:project_uploads RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p>如果GitLab数据库中不存在对象存储上载文件，请将其删除。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:cleanup:remote_upload_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:cleanup:remote_upload_files RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><p>Namespaces</p><p><strong>为用户项目启用用户名和命名空间(Enable usernames and namespaces for user projects)</strong></p><p>此命令启动命名空间，它将移动其命名空间文件夹中的每个项目。<br>注意：</p><ul><li>由于Repo Location发生改变，因此你需要更新git URL以指向新地址</li><li>用户名可在Profile中修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line"></span><br><span class="line">#Old path</span><br><span class="line">git@example.org:myrepo.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#new path</span><br><span class="line">git@example.org:username/myrepo.git</span><br><span class="line">#or</span><br><span class="line">git@example.org:groupname/myrepo.git</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h5><p>LDAP Rake Tasks</p><p><strong>检查(Check)</strong></p><p>LDAP检查Rake task 将测试<code>bind_dn</code>和<code>password</code>凭据（如果已配置），并将列出LDAP用户的示例。此任务作为<code>gitlab:check</code>任务的一部分执行，但可以使用以下命令单独运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibush</span></span><br><span class="line">sudo gitlab-rake gitlab:ldap:check</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:ldap:check RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>重命名提供商(Rename a provider)</strong></p><p>如果更改了配置文件中的LDAP Server ID，则需要更新所有用户标识，否则将无法登录。输入旧的和新的提供商，此任务将更新数据库中的所有匹配标识。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#栗子</span></span><br><span class="line"><span class="comment">#main是LDAP Server ID</span></span><br><span class="line"><span class="attr">main:</span></span><br><span class="line"><span class="attr">  label:</span> <span class="string">'LDAP'</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">'_your_ldap_server'</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">389</span></span><br><span class="line"><span class="attr">  uid:</span> <span class="string">'sAMAccountName'</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:ldap:rename_provider[old_provider,new_provider]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:ldap:rename_provider[old_provider,new_provider] RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="一般维护和自检"><a href="#一般维护和自检" class="headerlink" title="一般维护和自检"></a>一般维护和自检</h5><p><strong>收集有关GitLab及其运行的系统的信息</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:env:info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:env:info RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>检查GitLab配置</strong></p><p>运行以下<code>rake tasks</code>：</p><ul><li><code>gitlab:gitlab_shell:check</code></li><li><code>gitlab:gitaly:check</code></li><li><code>gitlab:sidekiq:check</code></li><li><code>gitlab:app:check</code></li></ul><p>它将检查每个组件是否已根据安装指南进行设置，并针对发现的问题提出修复建议。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:check</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:check RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>重建authorized_keys文件</strong></p><p>在某些情况下，有必要重建authorized_keys文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:shell:setup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:shell:setup RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>清理Redis缓存</strong></p><p>如果由于某种原因，仪表板显示错误信息，您可能希望清除Redis的缓存。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake cache:clear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake cache:clear RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>跟踪部署(Tracking Deployments)</strong></p><p>GitLab提供了一个Rake task，可以让您跟踪GitLab性能监控中的部署。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:track_deployment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:track_deployment RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>创建或修复Repo hook符号链接(Create or repair repository hooks symlink)</strong></p><p>如果GitLab shell hooks 目录位置更改或其他情况导致hooks符号链接丢失或无效，请运行此Rake task以创建或修复符号链接。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:shell:create_hooks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:shell:create_hooks RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>检查TCP连接(Check TCP connectivity to a remote site)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:tcp_check[example.com,80]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:tcp_check[example.com,80] RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p>User management</p><p><strong>将用户作为开发人员添加到所有项目中</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:import:user_to_projects[username@domain.tld]</span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:import:user_to_projects[username@domain.tld] RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>将所有用户添加到所有项目</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:import:all_users_to_all_projects</span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:import:all_users_to_all_projects RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>将用户作为开发人员添加到所有组</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:import:user_to_groups[username@domain.tld]</span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:import:user_to_groups[username@domain.tld] RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>将所有用户添加到所有组</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:import:all_users_to_all_groups</span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:import:all_users_to_all_groups RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>保持对GitLab上活跃用户数量的严格控制</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用此设置可以阻止新用户被管理员清除(默认：false)</span></span><br><span class="line">block_auto_created_users: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>禁用所有用户的双重验证（2FA）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:two_factor:disable_for_all_users</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:two_factor:disable_for_all_users RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>轮询双重认证的加密秘钥(Rotate Two-factor Authentication (2FA) encryption key)</strong></p><p>GitLab存储secret data，使双重认证(2FA)能够在加密的数据库列中工作。此数据的加密密钥称为<code>otp_key_base</code>，存储在<code>config/secrets.yml</code>中。<br>如果该文件被泄露，但个别2FA secret 没有泄露，则可以使用新的加密密钥重新加密这些机密。这允许您更改泄漏的密钥，而不强制所有用户更改其<code>2FA</code>详细信息。</p><ul><li>首先，查找old key。这是在<code>config/secrets.yml</code>文件中，但请确保您正在使用生产部分：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">production:</span></span><br><span class="line"><span class="attr">  otp_key_base:</span> <span class="string">ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br></pre></td></tr></table></figure><ul><li>生成new secret</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake secret</span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake secret RAILS_ENV=production</span><br></pre></td></tr></table></figure><ul><li>现在您需要停止GitLab服务器，备份现有的secrets file并更新数据库：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line">sudo cp config/secrets.yml config/secrets.yml.bak</span><br><span class="line">sudo gitlab-rake gitlab:two_factor:rotate_key:apply filename=backup.csv old_key=&lt;old key&gt; new_key=&lt;new key&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">sudo /etc/init.d/gitlab stop</span><br><span class="line">cp config/secrets.yml config/secrets.yml.bak</span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:two_factor:rotate_key:apply filename=backup.csv old_key=&lt;old key&gt; new_key=&lt;new key&gt; RAILS_ENV=production</span><br></pre></td></tr></table></figure><ul><li>最后，将<code>config/secrets.yml</code>中的<code>otp_key_base</code>更改为<code>&lt;new key&gt;</code>并重新启动。再次，确保您在生产部分中运行：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先更改key</span></span><br><span class="line"><span class="comment">#之后重启</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># installation from source</span></span><br><span class="line">sudo /etc/init.d/gitlab start</span><br></pre></td></tr></table></figure><p>如果出现问题，你也可以进行回滚。</p><p><br><br><br></p><h5 id="Webhooks"><a href="#Webhooks" class="headerlink" title="Webhooks"></a>Webhooks</h5><p><strong>为所有项目添加webhook</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:web_hook:add URL=<span class="string">"http://example.com/hook"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># source installations</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:web_hook:add URL=<span class="string">"http://example.com/hook"</span> RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><strong>为给定NAMESPACE中的项目添加webhook</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:web_hook:add URL=<span class="string">"http://example.com/hook"</span> NAMESPACE=acme</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># source installations</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:web_hook:add URL=<span class="string">"http://example.com/hook"</span> NAMESPACE=acme RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>从所有项目中删除webhook</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:web_hook:rm URL=<span class="string">"http://example.com/hook"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># source installations</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:web_hook:rm URL=<span class="string">"http://example.com/hook"</span> RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>从给定NAMESPACE中的项目中删除webhook：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:web_hook:rm URL=<span class="string">"http://example.com/hook"</span> NAMESPACE=acme</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># source installations</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:web_hook:rm URL=<span class="string">"http://example.com/hook"</span> NAMESPACE=acme RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>列出所有webhooks：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:web_hook:list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># source installations</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:web_hook:list RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>列出给定NAMESPACE中项目的webhooks</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># omnibus-gitlab</span></span><br><span class="line">sudo gitlab-rake gitlab:web_hook:list NAMESPACE=acme</span><br><span class="line"><span class="comment"># source installations</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake gitlab:web_hook:list NAMESPACE=acme RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="批量导入git库"><a href="#批量导入git库" class="headerlink" title="批量导入git库"></a>批量导入git库</h5><p>Import of git repositories in bulk</p><p><strong>注意：</strong></p><ul><li>The owner of the project will be the first admin</li><li>The groups will be created as needed, including subgroups</li><li>The owner of the group will be the first admin</li><li>Existing projects will be skipped</li><li>Projects in hashed storage may be skipped</li><li>The existing Git repos will be moved from disk</li></ul><p><br></p><p><strong>如何使用：</strong></p><ul><li>创建一个新文件夹以从中导入您的Git Repo：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意owner, group, permission</span></span><br><span class="line">sudo -u git mkdir /var/opt/gitlab/git-data/repository-import-&lt;date&gt;/new_group</span><br></pre></td></tr></table></figure><ul><li>将Repo复制到新创建的文件夹中<br>在任何子文件夹中找到的任何<code>.git</code> Repo 都将作为项目导入。<br>将根据需要创建group</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r /old/git/foo.git /var/opt/gitlab/git-data/repository-import-&lt;date&gt;/new_group/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do this once when you are done copying git repositories</span></span><br><span class="line">sudo chown -R git:git /var/opt/gitlab/git-data/repository-import-&lt;date&gt;</span><br></pre></td></tr></table></figure><ul><li>运行命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:import:repos[<span class="string">'/var/opt/gitlab/git-data/repository-import-&lt;date&gt;'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:import:repos[<span class="string">'/var/opt/gitlab/git-data/repository-import-&lt;date&gt;'</span>] RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><br></p><p><strong>从<code>hashed storage</code>导入Repo</strong></p><p>背景： 传统存储中的项目具有一个目录结构，该结构反映了GitLab中的完整项目路径，包括其命名空间结构。Repo导入程序利用此信息将项目导入其适当的位置。每个项目及其父命名空间都有名称。<br>但是，散列存储中的项目的目录结构不包含此信息。这有利于各种原因，尤其是改进的性能和数据完整性。</p><ul><li>GitLab v10.3 or earlier: 不支持导入<code>hashed storage</code></li><li>GitLab v10.4 and later: 为了支持从散列存储导入裸存储库，GitLab将每个存储库的完整项目路径存储在git Repo 配置文件的特殊部分中。</li></ul><p>如果Repo发生以下事件，则可导入：</p><ul><li>Created</li><li>Migrated to hashed storage</li><li>Renamed</li><li>Transferred to another namespace</li><li>Ancestor renamed</li><li>Ancestor transferred to another namespace</li></ul><p>满足以下内容，Repo无法导入：</p><ul><li>It was created in GitLab 10.3 or earlier.</li><li>It was not renamed, transferred, or migrated to hashed storage in GitLab 10.4 and later.</li><li>Its ancestor namespaces were not renamed or transferred in GitLab 10.4 and later.</li></ul><p>你也可以手动使用 Rails console 执行此操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># start a Rails console for GitLab</span><br><span class="line">sudo gitlab-rails console</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">project = Project.find_by_full_path(&apos;gitlab-org/gitlab-ce&apos;)</span><br><span class="line">project.write_repository_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在Rails控制台会话中，运行以下命令以迁移所有命名空间的项目</span><br><span class="line">namespace = Namespace.find_by_full_path(&apos;gitlab-org&apos;)</span><br><span class="line">namespace.send(:write_projects_repository_config)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h5><p>Uploads</p><blockquote><p><strong>注意：</strong> 上传表示可以作为单个文件(single file)发送到GitLab的所有用户数据。例如，头像和附注的附件是上传的。上传是GitLab功能的组成部分，因此无法禁用。</p></blockquote><p><strong>使用本地存储(Local Storage)</strong><br>这是默认选项。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line"><span class="comment">#上传默认存放位置： /var/opt/gitlab/gitlab-rails/uploads/-/system</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'uploads_storage_path'</span>] = <span class="string">"/mnt/storage/"</span></span><br><span class="line">gitlab_rails[<span class="string">'uploads_base_dir'</span>] = <span class="string">"uploads"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="comment">#默认存放位置：/home/git/gitlab/public/uploads/-/system</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">vi /home/git/gitlab/config/gitlab.yml</span><br><span class="line"></span><br><span class="line">uploads:</span><br><span class="line">  storage_path: /mnt/storage</span><br><span class="line">  base_dir: uploads</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用对象存储(Object Storage)</strong></p><p>如果不想使用本地存储，可使用对象存储(华为云、阿里云、腾讯云、aws…)。<br>GitLab有几个选项，其它云服务商的配置请参考他们的文档。</p><table><thead><tr><th><code>uploads_object_store_</code></th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>enabled</code></td><td>Enable/disable object storage</td><td>false</td></tr><tr><td><code>remote_directory</code></td><td>The bucket name where Uploads will be stored</td><td></td></tr><tr><td><code>direct_upload</code></td><td>Set to true to enable direct upload of Uploads without the need of local shared storage. Option may be removed once we decide to support only single storage for all files.</td><td>false</td></tr><tr><td><code>background_upload</code></td><td>Set to false to disable automatic upload. Option may be removed once upload is direct to S3</td><td>true</td></tr><tr><td><code>proxy_download</code></td><td>Set to true to enable proxying all files served. Option allows to reduce egress traffic as this allows clients to download directly from remote storage instead of proxying all data</td><td>false</td></tr><tr><td><code>connection</code></td><td>Various connection options described below</td></tr></tbody></table><p><br><br><br></p><p>#####　迁移上传文件</p><p>Migrate Uploads</p><p><strong>迁移到对象存储(Migrate to Object Storage)</strong></p><p>为GitLab的上传配置对象存储之后，您可以使用此任务将现有的上传文件从本地存储迁移到远程存储。</p><ul><li>All-in-one rake task<br>GitLab提供了一个 wrapper rake task，可以将所有上传的文件（头像，徽标，附件，图标等）一次性迁移到对象存储。在此之下，它会调用各个rake task来逐个迁移属于这个类别的文件。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate:all"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line">sudo RAILS_ENV=production -u git -H bundle <span class="built_in">exec</span> rake gitlab:uploads:migrate:all</span><br></pre></td></tr></table></figure><ul><li>Individual rake tasks<br>如果您已经运行了前面提到的rake task，则无需像自动完成那样运行这些单独的rake task。</li></ul><p>rake task使用3个参数来查找要迁移的上传：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>uploader_class</code></td><td>string</td><td>Type of the uploader to migrate from</td></tr><tr><td><code>model_class</code></td><td>string</td><td>Type of the model to migrate from</td></tr><tr><td><code>mount_point</code></td><td>string/symbol</td><td>Name of the model’s column on which the uploader is mounted on.</td></tr></tbody></table><p>注意：这些参数主要是GitLab结构的内部参数，您可能需要在下面引用任务列表。<br>此任务还接受一些可用于覆盖某些值的环境变量：</p><table><thead><tr><th>Variable</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>BATCH</td><td>integer</td><td>Specifies the size of the batch. Defaults to 200.</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab-rake gitlab:uploads:migrate[uploader_class, model_class, mount_point]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatars</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[AvatarUploader, Project, :avatar]"</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[AvatarUploader, Group, :avatar]"</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[AvatarUploader, User, :avatar]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attachments</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[AttachmentUploader, Note, :attachment]"</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[AttachmentUploader, Appearance, :logo]"</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[AttachmentUploader, Appearance, :header_logo]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Favicon</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[FaviconUploader, Appearance, :favicon]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Markdown</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[FileUploader, Project]"</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[PersonalFileUploader, Snippet]"</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[NamespaceFileUploader, Snippet]"</span></span><br><span class="line">gitlab-rake <span class="string">"gitlab:uploads:migrate[FileUploader, MergeRequest]"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Source</span></span><br><span class="line"><span class="comment">#Use RAILS_ENV=production for every task.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo -u git -H bundle exec rake gitlab:uploads:migrate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatars</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[AvatarUploader, Project, :avatar]"</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[AvatarUploader, Group, :avatar]"</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[AvatarUploader, User, :avatar]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Attachments</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[AttachmentUploader, Note, :attachment]"</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[AttachmentUploader, Appearance, :logo]"</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[AttachmentUploader, Appearance, :header_logo]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Favicon</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[FaviconUploader, Appearance, :favicon]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Markdown</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[FileUploader, Project]"</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[PersonalFileUploader, Snippet]"</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[NamespaceFileUploader, Snippet]"</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:uploads:migrate[FileUploader, MergeRequest]"</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>Performing Operations in GitLab<br>Operations: Keeping GitLab up and running (clean up Redis sessions, moving repositories, Sidekiq MemoryKiller, Unicorn)</p><p><br></p><h5 id="清理陈旧的Redis回话"><a href="#清理陈旧的Redis回话" class="headerlink" title="清理陈旧的Redis回话"></a>清理陈旧的Redis回话</h5><p>Cleaning up stale Redis sessions</p><p>在GitLab v7.3之前，用户会话不会自动从Redis expire。</p><p><br><br><br></p><h5 id="移动库"><a href="#移动库" class="headerlink" title="移动库"></a>移动库</h5><p>Moving repositories</p><p>将GitLab管理的所有库移动到另一个文件系统或另一个服务器。</p><p><br><br><br></p><h5 id="Sidekiq-MemoryKiller"><a href="#Sidekiq-MemoryKiller" class="headerlink" title="Sidekiq MemoryKiller"></a>Sidekiq MemoryKiller</h5><p>配置Sidekiq MemoryKiller以重启Sidekiq。</p><p>GitLab Rails应用程序代码有内存泄漏。对于Web请求，使用<code>unicorn-worker-killer</code>可以管理这个问题，在需要时会在请求之间重新启动Unicorn工作进程。 <code>Sidekiq MemoryKiller</code>对GitLab用于处理后台作业的Sidekiq进程应用相同的方法。</p><p>与自从GitLab 6.4以来默认启用的所有GitLab安装的<code>unicorn-worker-killer</code>不同，<code>Sidekiq MemoryKiller</code>默认仅对Omnibus软件包启用。原因是MemoryKiller依赖于Runit在内存引发的关闭后重新启动Sidekiq，并且来自源的GitLab安装并不都使用Runit或等效的。</p><p>使用默认设置，<code>MemoryKiller</code>将导致Sidekiq重启频率不超过每15分钟一次，重启会导致传入后台作业延迟大约一分钟。</p><p><br></p><p><strong>配置MemoryKiller</strong><br>MemoryKiller使用环境变量进行控制。</p><ul><li><p><code>SIDEKIQ_MEMORY_KILLER_MAX_RSS</code><br>如果设置了此变量，并且其值大于0，则在每个Sidekiq作业之后，MemoryKiller将检查执行该作业的Sidekiq进程的RSS。如果Sidekiq进程的RSS（KB）超过SIDEKIQ_MEMORY_KILLER_MAX_RSS，则会触发延迟关闭。<br>默认值可在<code>gitlab.rb</code>当中查看。</p></li><li><p><code>SIDEKIQ_MEMORY_KILLER_GRACE_TIME</code><br>默认为900s（15min）。当触发关闭时，Sidekiq进程将继续正常工作15分钟。</p></li><li><p><code>SIDEKIQ_MEMORY_KILLER_SHUTDOWN_WAIT</code><br>默认为30秒。当宽限时间到期时，MemoryKiller告诉Sidekiq停止接受新的工作，现有工作有30s去完成。之后，MemoryKiller告诉Sidekiq去关闭，外部监督机制必须重启Sidekiq</p></li></ul><p><br><br><br></p><h5 id="Unicorn"><a href="#Unicorn" class="headerlink" title="Unicorn"></a>Unicorn</h5><p>Understand Unicorn and unicorn-worker-killer</p><p><strong>Unicorn</strong><br>GitLab使用Unicorn，一个pre-forking的Ruby Web服务器来处理Web请求。Unicorn是一个用Ruby和C编写的Daemon，可以加载和运行Ruby on Rails Application(如GitLab CE/EE)。</p><p>Unicorn具有多进程(multi-process)架构，可以更好地利用可用的CPU核心并具有更强的容错能力。在启动时，Unicorn的Master进程使用GitLab应用程序代码加载一个干净的Ruby环境，然后生成继承这个干净的初始环境的Worker。 Master永远不会处理任何请求，而是留给Worker。操作系统网络堆栈对传入的请求进行排队，并在Worker之间分配它们。</p><p>Unicorn的主要可调参数(Tunables)是工作进程(work process)的数量和请求超时(request timeout)。</p><p><br></p><p><strong>unicorn-worker-killer</strong></p><p>GitLab存在内存泄漏。这些内存泄漏在长期运行的进程中表现出来，如Unicorn worker。<br>为了使这些内存泄漏易于管理，GitLab附带了<code>unicorn-worker-killer</code>。这个gem修补了Unicorn工作人员在每16个请求后进行内存自检。如果Unicorn工作程序的内存超过预设限制，则工作进程退出。然后Unicorn Master自动替换Wroker。<br>这是一种处理内存泄漏的强大方法：Unicorn旨在处理“崩溃”的Worker，因此不会丢弃任何用户请求。<code>unicorn-worker-killer</code> gem旨在仅在请求之间终止工作进程，因此不会影响用户请求。</p><p><br><br><br></p><h5 id="加快SSH操作"><a href="#加快SSH操作" class="headerlink" title="加快SSH操作"></a>加快SSH操作</h5><p>Speed up SSH operations by Authorizing SSH users via a fast, indexed lookup to the GitLab database, and/or by doing away with user SSH keys stored on GitLab entirely in favor of SSH certificates.</p><p><strong>快速查找数据库中的授权SSH密钥(Fast lookup of authorized SSH keys in the database)</strong></p><p><a href="https://docs.gitlab.com/ce/administration/operations/fast_ssh_key_lookup.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/administration/operations/fast_ssh_key_lookup.html</a></p><p><br></p><p><strong>通过Open SSH查找(User lookup via OpenSSH’s AuthorizedPrincipalsCommand)</strong></p><p><a href="https://docs.gitlab.com/ce/administration/operations/ssh_certificates.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/administration/operations/ssh_certificates.html</a></p><p><br><br><br></p><h5 id="文件系统性能基准测试"><a href="#文件系统性能基准测试" class="headerlink" title="文件系统性能基准测试"></a>文件系统性能基准测试</h5><p>Filesystem Performance Benchmarking</p><p>文件系统性能对整体GitLab性能有很大影响，特别是对于读取或写入Git Repo的操作。</p><p><strong>写性能(Write Performance)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入Repo root path</span></span><br><span class="line"><span class="built_in">cd</span> /var/opt/gitlab/git-data/repositories/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个空目录，便于测试后删除</span></span><br><span class="line">mkdir <span class="built_in">test</span> &amp;&amp; <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行命令</span></span><br><span class="line">time <span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..1000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">'test'</span> &gt; <span class="string">"test<span class="variable">$&#123;i&#125;</span>.txt"</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除测试目录</span></span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; rm -rf ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>以下是消耗时间范围：</p><table><thead><tr><th>Rating</th><th>Benchmark result</th></tr></thead><tbody><tr><td>Best</td><td>Less than 10 seconds</td></tr><tr><td>OK</td><td>10-18 seconds</td></tr><tr><td>Poor</td><td>18-25 seconds</td></tr><tr><td>Very poor</td><td>Greater than 25 seconds</td></tr></tbody></table><p><br><br><br><br><br></p><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>Restart GitLab: Learn how to restart GitLab and its components</p><p>依据安装方式，有几种不同的方式：</p><ul><li>Omnibus GitLab restartGitLab Workhorse<ul><li>Sidekiq</li><li>PostgreSQL (if you are using the bundled one)</li><li>NGINX (if you are using the bundled one)</li><li>Redis (if you are using the bundled one)</li><li>Mailroom</li><li>Logrotate</li></ul></li><li>Omnibus GitLab reconfigure</li><li>Source installation restart</li></ul><p><br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus GitLab restart</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#GitLab</span></span><br><span class="line">sudo gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#Nginx组件</span></span><br><span class="line">sudo gitlab-ctl restart nginx</span><br><span class="line"><span class="comment">#其它组件类似</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#GitLab Status</span></span><br><span class="line">sudo gitlab-ctl status</span><br><span class="line"></span><br><span class="line"><span class="comment">#Nginx组件状态</span></span><br><span class="line">sudo gitlab-ctl status nginx</span><br><span class="line"><span class="comment">#其它组件类似</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#有时，组件在重新启动期间会超时，有时会卡住</span></span><br><span class="line"><span class="comment">#你可以发送kill信号</span></span><br><span class="line">gitlab-ctl <span class="built_in">kill</span> &lt;service&gt;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus GitLab reconfigure</span></span><br><span class="line"><span class="comment">#在更改/etc/gitlab/gitlab.rb之后，需要重新配置GitLab</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Installations from source</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo service gitlab restart</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h3><p>Updating GitLab</p><p><br></p><h4 id="GitLab版本和维护策略"><a href="#GitLab版本和维护策略" class="headerlink" title="GitLab版本和维护策略"></a>GitLab版本和维护策略</h4><p>GitLab versions and maintenance policy: Understand GitLab versions and releases (Major, Minor, Patch, Security), as well as update recommendations.</p><p>GitLab releases:</p><ul><li>Major version: 主要版本，重要内容</li><li>Minor verson: 次要版本，小功能</li><li>Patch number: 补丁，fix bug</li><li>Security: 安全，临时添加的安全补丁</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line">GitLab v10.5.7</span><br><span class="line"></span><br><span class="line">#10 represents major version</span><br><span class="line">#5 represents minor version</span><br><span class="line">#7 represents patch number</span><br></pre></td></tr></table></figure><p><br></p><p><strong>升级建议:</strong></p><p>GitLab鼓励每个人运行最新的稳定版本(latest stable release)，以确保您可以轻松升级到最安全，功能最丰富的GitLab体验。<br>如果您无法遵循GitLab的月度发布周期，则需要考虑几种情况：</p><p>在一个主要版本(Major)中升级补丁版本(Patch)和次要版本(Minor)被认为是安全的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#Upgrade the patch version:</span><br><span class="line">8.9.0 -&gt; 8.9.7</span><br><span class="line">8.9.0 -&gt; 8.9.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Upgrade the minor version:</span><br><span class="line">8.9.4 -&gt; 8.12.3</span><br><span class="line">9.2.3 -&gt; 9.5.5</span><br></pre></td></tr></table></figure><p>升级主要版本需要多加小心。GitLab无法保证主要版本之间的升级是无缝的。<br>GitLab建议您首先升级到主要版本中的最新可用次要版本。通过执行此操作，您可以解决可能会在下一个主要版本中更改行为的任何弃用消息。</p><table><thead><tr><th>Latest stable version</th><th>Your version</th><th>Recommended upgrade path</th><th>Note</th></tr></thead><tbody><tr><td><code>9.4.5</code></td><td><code>8.13.4</code></td><td><code>8.13.4</code> -&gt; <code>8.17.7</code> -&gt; <code>9.4.5</code></td><td><code>8.17.7</code> is the last version in version 8</td></tr><tr><td><code>10.1.4</code></td><td><code>8.13.4</code></td><td><code>8.13.4</code> -&gt; <code>8.17.7</code> -&gt; <code>9.5.10</code> -&gt; <code>10.1.4</code></td><td><code>8.17.7</code> is the last version in version 8, 9.5.10 is the last version in version 9</td></tr><tr><td><code>11.3.4</code></td><td><code>8.13.4</code></td><td><code>8.13.4</code> -&gt; <code>8.17.7</code> -&gt; <code>9.5.10</code> -&gt; <code>10.8.7</code> -&gt; <code>11.3.4</code></td><td><code>8.17.7</code> is the last version in version 8, 9.5.10 is the last version in version 9, 10.8.7 is the last version in version 10</td></tr></tbody></table><p><br><br><br></p><h4 id="更新GitLab"><a href="#更新GitLab" class="headerlink" title="更新GitLab"></a>更新GitLab</h4><p>Update GitLab: Update guides to upgrade your installation to a new version.</p><p>根据安装方式与GitLab版本，有多种升级方法：</p><ul><li>Omnibus packages</li><li>Source installation</li><li>Docker installation</li></ul><p><br></p><h5 id="使用软件包的方式进行更新"><a href="#使用软件包的方式进行更新" class="headerlink" title="使用软件包的方式进行更新"></a>使用软件包的方式进行更新</h5><p>Updating GitLab installed with the Omnibus GitLab package</p><p><br></p><p><strong>特定版本:</strong></p><ul><li>GitLab 11</li><li>GitLab 10</li><li>GitLab 8</li><li>GitLab 7</li><li>GitLab 6</li></ul><p><br></p><p><strong>升级方法:</strong></p><ul><li>使用官方Repo</li><li>手动下载Package</li></ul><p><br></p><p><strong>零停机更新(Zero downtime updates)</strong></p><blockquote><p>注意：这仅适用于GitLab 9.1.0或更高版本。</p></blockquote><p>地址: <a href="https://docs.gitlab.com/omnibus/update/README.html#zero-downtime-updates" target="_blank" rel="noopener">https://docs.gitlab.com/omnibus/update/README.html#zero-downtime-updates</a></p><p><br></p><p><strong>降级(Downgrading):</strong></p><blockquote><p>注意：本指南假定您在要还原的版本下创建了备份存档。</p></blockquote><p>步骤：</p><ul><li>Download the package of a target version</li><li>Stop GitLab</li><li>Install the old package</li><li>Reconfigure GitLab</li><li>Restoring the backup</li><li>Starting GitLab</li></ul><p><br><br><br></p><h4 id="其它项的更新"><a href="#其它项的更新" class="headerlink" title="其它项的更新"></a>其它项的更新</h4><ul><li>MySQL to PostgreSQL</li><li>PostgreSQL to MySQL</li><li>更新失败之后从备份文件进行还原</li></ul><p><br><br><br><br><br></p><h3 id="CE-EE"><a href="#CE-EE" class="headerlink" title="CE-EE"></a>CE-EE</h3><p>Upgrading or downgrading GitLab</p><ul><li>Upgrade from GitLab CE to GitLab EE</li><li>Downgrade from GitLab EE to GitLab CE</li></ul><p><br><br><br><br><br><br><br></p><h2 id="平台集成"><a href="#平台集成" class="headerlink" title="平台集成"></a>平台集成</h2><p>GitLab platform integrations</p><p><br></p><h3 id="集成Mattermost"><a href="#集成Mattermost" class="headerlink" title="集成Mattermost"></a>集成Mattermost</h3><p>Mattermost是一个开源，可托管的聊天服务。它被设计为组织和公司的内部聊天，并且主要将自己作为Slack的替代品。</p><p><a href="https://docs.gitlab.com/omnibus/gitlab-mattermost/" target="_blank" rel="noopener">https://docs.gitlab.com/omnibus/gitlab-mattermost/</a></p><p><br><br><br><br><br></p><h3 id="集成PlantUML"><a href="#集成PlantUML" class="headerlink" title="集成PlantUML"></a>集成PlantUML</h3><p>PlantUML是一个开源工具，允许用户使用纯文本语言创建UML图表。</p><p><a href="https://docs.gitlab.com/ce/administration/integration/plantuml.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/administration/integration/plantuml.html</a></p><p><br><br><br><br><br></p><h3 id="集成Web终端"><a href="#集成Web终端" class="headerlink" title="集成Web终端"></a>集成Web终端</h3><p>从GitLab的<code>CI/CD</code>环境中提供对部署到Kubernetes的应用程序的终端访问。<br>随着Kubernetes集成的引入，GitLab获得了为Kubernetes集群存储和使用凭证的能力。它使用这些凭据的一个原因是提供对环境的Web终端的访问。</p><p>Web终端的体系结构及其工作原理：</p><ul><li>GitLab依靠用户提供他们自己的Kubernetes凭据，并在部署时适当地标记他们创建的pod。</li><li>当用户到环境的终端页面时，它们将被提供一个JavaScript应用程序，该应用程序将WebSocket连接返回给GitLab。</li><li>WebSocket在Workhorse中处理，而不是Rails Application Server。</li><li>Workhorse查询Rails的连接细节和用户权限; Rails使用Sidekiq在后台查询Kubernetes</li><li>Workhorse充当用户浏览器和Kubernetes API之间的代理服务器，在两者之间传递WebSocket frame</li><li>Workhorse定期轮询Rails，如果用户不再具有访问终端的权限，或者连接详细信息已更改，则终止WebSocket连接。</li></ul><blockquote><p>ps: WebSocket是一种在单个TCP连接上进行全双工通信的协议。</p></blockquote><p><br></p><p><strong>启用/禁用终端支持(Enabling and disabling terminal support)</strong></p><p>当Web终端使用WebSockets时，Workhorse前面的每个HTTP/HTTPS反向代理都需要配置为将Connection和Upgrade头传递给链中的下一个，在GitLab v8.15+，这是默认选项，不需要你配置。</p><p>但是，如果在GitLab前面运行负载均衡器，则可能需要对配置进行一些更改:</p><ul><li>Apache</li><li>NGINX</li><li>HAProxy</li><li>Varnish</li></ul><p>Workhorse不会让WebSocket请求通过non-WebSocket端点，因此可以安全地在全局范围内启用对这些Header的支持。如果您宁愿使用较窄的规则集，则可以将其限制为以<code>/terminal.ws</code>结尾的URL。</p><p>如果您想在GitLab中禁用Web终端支持，只需停止在链中的第一个HTTP反向代理中传递<code>Connection</code>和<code>Upgrade</code>逐跳Header。对于大多数用户来说，这将是与Omnibus GitLab捆绑在一起的NGINX服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#在gitLab.rb中找到 nginx[&apos;proxy_set_headers&apos;]</span><br><span class="line">#移除或注释 Connection和Upgrade</span><br><span class="line"></span><br><span class="line"># nginx[&apos;proxy_set_headers&apos;] = &#123;</span><br><span class="line">#  &quot;Upgrade&quot; =&gt; &quot;$http_upgrade&quot;,</span><br><span class="line">#  &quot;Connection&quot; =&gt; &quot;$connection_upgrade&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>限制Websocket连接时间(Limiting WebSocket connection time)</strong></p><blockquote><p>ps: GitLab v8.17+</p></blockquote><p>终端会话使用长期连接。默认情况下，这些可能永远持续下去。如果从可伸缩性或安全性角度发现这是不受欢迎的，您可以在GitLab实例的Admin区域中配置最长会话时间。</p><p><br><br><br></p><hr><p><br><br><br></p><h2 id="用户设置和权限"><a href="#用户设置和权限" class="headerlink" title="用户设置和权限"></a>用户设置和权限</h2><p>User settings and permissions</p><p><br></p><h3 id="Libravatar"><a href="#Libravatar" class="headerlink" title="Libravatar"></a>Libravatar</h3><p>Use Libravatar instead of Gravatar for user avatars.</p><p><a href="https://docs.gitlab.com/ce/customization/libravatar.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/customization/libravatar.html</a></p><p><br><br><br><br><br></p><h3 id="注册限制"><a href="#注册限制" class="headerlink" title="注册限制"></a>注册限制</h3><p>Sign-up restrictions: block email addresses of specific domains, or whitelist only specific domains.</p><p>您可以通过管理区域中的“应用程序设置”阻止特定域的电子邮件地址，或仅将某些特定域列入白名单。</p><ul><li>Whitelist email domains</li><li>Blacklist email domains</li></ul><p>白名单和黑名单支持通配符。<br>如可对白名单加自己信任的域(如：<code>company.com</code>)，再把所有加入黑名单(如： <code>*</code>)</p><p><br><br><br><br><br></p><h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><p>Access restrictions: Define which Git access protocols can be used to talk to GitLab (SSH, HTTP, HTTPS).</p><p><strong>启用Git访问协议</strong></p><ul><li>SSH 和 HTTP(s)</li><li>仅SSH</li><li>仅HTTP(s)</li></ul><p><br><br><br><br><br></p><h3 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h3><p>Authentication/Authorization: Enforce 2FA, configure external authentication with LDAP, SAML, CAS and additional Omniauth providers.</p><p><a href="https://docs.gitlab.com/ce/topics/authentication/index.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/topics/authentication/index.html</a></p><p><br><br><br><br><br></p><h3 id="传入电子邮件"><a href="#传入电子邮件" class="headerlink" title="传入电子邮件"></a>传入电子邮件</h3><p>Incoming email: Configure incoming emails to allow users to reply by email, create issues by email and merge requests by email, and to enable.</p><p>GitLab有几个基于接收传入电子邮件的功能：</p><ul><li>Reply by Email: 允许GitLab用户通过回复notification电子邮件对issues发表comment并merge request</li><li>New issue by email: 允许GitLab用户通过向用户特定的电子邮件地址发送电子邮件来创建新Issue</li><li>New merge request by email: 允许GitLab用户通过向用户特定的电子邮件地址发送电子邮件来创建新的 merge request</li></ul><p><br></p><p><strong>依赖(Requirements)：</strong></p><ul><li>Email sub-addressing</li><li>Dedicated email address</li><li>Catch-all mailbox</li></ul><p><br></p><p><strong>配置：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在gitlab.rb中找到incoming_email，启用该功能并填写IMAP信息和账户信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### Reply by email</span></span><br><span class="line"><span class="comment">###! Allow users to comment on issues and merge requests by replying to</span></span><br><span class="line"><span class="comment">###! notification emails.</span></span><br><span class="line"><span class="comment">###! Docs: https://docs.gitlab.com/ce/administration/reply_by_email.html</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_enabled'] = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Incoming Email Address</span></span><br><span class="line"><span class="comment">####! The email address including the `%&#123;key&#125;` placeholder that will be replaced</span></span><br><span class="line"><span class="comment">####! to reference the item being replied to.</span></span><br><span class="line"><span class="comment">####! **The placeholder can be omitted but if present, it must appear in the</span></span><br><span class="line"><span class="comment">####!   "user" part of the address (before the `@`).**</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_address'] = "gitlab-incoming+%&#123;key&#125;@gmail.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Email account username</span></span><br><span class="line"><span class="comment">####! **With third party providers, this is usually the full email address.**</span></span><br><span class="line"><span class="comment">####! **With self-hosted email servers, this is usually the user part of the</span></span><br><span class="line"><span class="comment">####!   email address.**</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_email'] = "gitlab-incoming@gmail.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Email account password</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_password'] = "[REDACTED]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### IMAP Settings</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_host'] = "imap.gmail.com"</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_port'] = 993</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_ssl'] = true</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_start_tls'] = false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Incoming Mailbox Settings</span></span><br><span class="line"><span class="comment">####! The mailbox where incoming mail will end up. Usually "inbox".</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_mailbox_name'] = "inbox"</span></span><br><span class="line"><span class="comment">####! The IDLE command timeout.</span></span><br><span class="line"><span class="comment"># gitlab_rails['incoming_email_idle_timeout'] = 60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载配置和重启</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证邮箱配置</span></span><br><span class="line">sudo gitlab-rake gitlab:incoming_email:check</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h2 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h2><p>Project settings</p><p><br></p><h3 id="Repo检查"><a href="#Repo检查" class="headerlink" title="Repo检查"></a>Repo检查</h3><p>Repository checks: Periodic Git repository checks.</p><blockquote><p>在GitLab 8.7中引入。它默认关闭，因为它仍会导致过多的误报。</p></blockquote><p>Git有一个内置机制<code>git fsck</code>，用于验证提交到存储库的所有数据的完整性。GitLab管理员可以通过管理面板下的项目页面触发对项目的检查。检查以异步方式运行，因此可能需要几分钟才能在项目管理页面上显示检查结果。如果检查失败，您可以在<code>repocheck.log</code>下的管理日志页面上看到它们的输出。</p><p><br></p><p><strong>定期检查(Periodic checks)</strong></p><p>启用后，GitLab会定期对所有项目存储库和wiki存储库运行存储库检查，以检测数据损坏。一个项目每月检查不超过一次。如果任何项目未通过其存储库检查，则所有GitLab管理员都将收到有关该情况的电子邮件通知。\</p><p><br></p><p><strong>禁用</strong></p><p>可在管理员面板上禁用定期检查。</p><p><br></p><p><strong>检查失败</strong></p><p>如果某个存储库检查失败，你应该在<code>repocheck.log</code>查找错误信息:</p><ul><li>管理员面板</li><li>磁盘日志文件<ul><li><code>/var/log/gitlab/gitlab-rails</code> for Omnibus installations</li><li><code>/home/git/gitlab/log</code> for installations from source</li></ul></li></ul><p>如果由于某种原因定期检查导致大量错误警报，您可以在管理员设置里来选择清除所有存储库检查状态。</p><p><br><br><br><br><br></p><h3 id="Repo存储路径"><a href="#Repo存储路径" class="headerlink" title="Repo存储路径"></a>Repo存储路径</h3><p>Repository storage paths: Manage the paths used to store repositories.</p><p><strong>GitLab允许您定义多个存储库存储路径，以在多个挂载点之间分配存储负载。</strong></p><p><strong>注意:</strong></p><ul><li>您必须至少有一个名为<code>default</code>的存储路径</li><li>路径以键值对进行定义</li><li>目标目录及其任何子路径都不能是符号链接</li><li>目标目录不能是制定路径的子目录，因为不能嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line">default:</span><br><span class="line">  path: /mnt/git-storage-1</span><br><span class="line">storage2:</span><br><span class="line">  path: /mnt/git-storage-2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#错误栗子</span><br><span class="line">default:</span><br><span class="line">  path: /mnt/git-storage-1</span><br><span class="line">storage2:</span><br><span class="line">  path: /mnt/git-storage-1/git-storage-2 # &lt;- NOT OK because of nesting</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="配置GitLab"><a href="#配置GitLab" class="headerlink" title="配置GitLab"></a>配置GitLab</h4><blockquote><p><strong>注意:</strong><br>为了使备份正常工作，存储路径不能是挂载点，GitLab用户应具有路径父目录的正确权限。在Omnibus GitLab中，这是自动处理的，但对于Source Code安装，您应该格外小心。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gitlab.rb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">  &quot;default&quot; =&gt; &#123; &quot;path&quot; =&gt; &quot;/var/opt/gitlab/git-data&quot; &#125;,</span><br><span class="line">  &quot;nfs&quot; =&gt; &#123; &quot;path&quot; =&gt; &quot;/mnt/nfs/git-data&quot; &#125;,</span><br><span class="line">  &quot;cephfs&quot; =&gt; &#123; &quot;path&quot; =&gt; &quot;/mnt/cephfs/git-data&quot; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">#Omnibus将存储库数据存储在git-data/repositories子目录下</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="选择新项目存储库的存储位置"><a href="#选择新项目存储库的存储位置" class="headerlink" title="选择新项目存储库的存储位置"></a>选择新项目存储库的存储位置</h4><p>设置了多个存储路径后，可在Admin下Application Setting选择新项目的存储路径。<br>从GitLab 8.13.4开始，可以选择多个路径。新项目将随机放置在其中一个选定路径上。</p><p><br><br><br><br><br></p><h3 id="Repo存储靶任务"><a href="#Repo存储靶任务" class="headerlink" title="Repo存储靶任务"></a>Repo存储靶任务</h3><p>Repository storage rake tasks: A collection of rake tasks to list and migrate existing projects and attachments associated with it from Legacy storage to Hashed storage</p><p>以下靶任务(rake task)，可用于帮助您列出现有项目以及与之关联的附件，从旧存储到新的Hashed存储类型。</p><p><br></p><h4 id="将现有项目迁移到哈希存储"><a href="#将现有项目迁移到哈希存储" class="headerlink" title="将现有项目迁移到哈希存储"></a>将现有项目迁移到哈希存储</h4><p>Migrate existing projects to Hashed storage</p><p>在迁移现有项目之前，还应为新项目启用哈希/散列存储。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:migrate_to_hashed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># to migrate any non migrated project from ID 20 to 50.</span></span><br><span class="line"><span class="built_in">export</span> ID_FROM=20 </span><br><span class="line"><span class="built_in">export</span> ID_TO=50</span><br></pre></td></tr></table></figure><p>你可在<code>Admin &gt; Monitoring &gt; Background jobs</code>里面进行查看。</p><p>在它达到零之后，您可以通过运行以下命令来确认已迁移每个项目。如果您认为有必要，可以再次运行此迁移脚本以安排缺少的项目。</p><p><br><br><br></p><h4 id="列出旧版存储的项目"><a href="#列出旧版存储的项目" class="headerlink" title="列出旧版存储的项目"></a>列出旧版存储的项目</h4><p>List projects on Legacy storage</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取旧项目存储摘要</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:legacy_projects</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出项目使用的旧存储</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:list_legacy_projects</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="列出哈希散列上的项目"><a href="#列出哈希散列上的项目" class="headerlink" title="列出哈希散列上的项目"></a>列出哈希散列上的项目</h4><p>List projects on Hashed storage</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用哈希存储的项目的简单摘要</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:hashed_projects</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出项目使用的散列存储</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:list_hashed_projects</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="列出旧版存储上的附件"><a href="#列出旧版存储上的附件" class="headerlink" title="列出旧版存储上的附件"></a>列出旧版存储上的附件</h4><p>List attachments on Legacy storage</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用旧版存储的附件的简单摘要</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:legacy_attachments</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出使用旧版存储的项目附件</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:list_legacy_attachments</span><br></pre></td></tr></table></figure><p><br><br><br></p><p>####列出哈希存储上的附件</p><p>List attachments on Hashed storage</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用哈希存储的附件的简单摘要</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:hashed_attachments</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出使用哈希存储的项目附件</span></span><br><span class="line"><span class="comment">#Ominibus</span></span><br><span class="line">sudo gitlab-rake gitlab:storage:list_hashed_attachments</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="限制Repo大小"><a href="#限制Repo大小" class="headerlink" title="限制Repo大小"></a>限制Repo大小</h3><p>Limit repository size: Set a hard limit for your repositories’ size</p><blockquote><p>Introduced in GitLab Enterprise Edition 8.12.</p></blockquote><p>GitLab实例中的存储库可能会快速增长，尤其是在使用LFS时。它们的大小可以指数级增长，并且可以非常快速地耗尽您的存储设备。为了避免这种情况发生，您可以为存储库的大小设置硬限制。<br>可以全局，按组或按项目设置此限制，每个项目限制具有最高优先级。</p><p>只有GitLab管理员才能设置这些限制。将限制设置为0表示没有限制。</p><p>到目前为止，无法检查新项目的第一次推送的大小，因此第一次推送将允许您上传超过限制规定，但每次后续推送都将被拒绝。但是，LFS对象可以在第一次推送时检查，如果它们的大小总和超过允许的最大存储库大小，则会被拒绝。</p><p><br><br><br></p><hr><p><br><br><br></p><h2 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h2><p>Continuous Integration settings</p><p><img src="/images/GitLab/cicd_pipeline_infograph.png" alt=""></p><p><br></p><h3 id="启用-禁用CICD"><a href="#启用-禁用CICD" class="headerlink" title="启用/禁用CICD"></a>启用/禁用CICD</h3><p>Enable/disable GitLab CI/CD: Enable or disable GitLab CI/CD for your instance.</p><p>您可以在站点范围内禁用GitLab CI/CD，方法是修改配置文件。</p><p>有两点需要注意：</p><ul><li>禁用GitLab CI/CD只会影响新创建的项目。在此修改之前启用它的项目将像以前一样工作</li><li>即使禁用了GitLab CI/CD，用户仍然可以在项目设置中启用它</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#Source</span><br><span class="line">vim gitlab.yml</span><br><span class="line"></span><br><span class="line">## Default project features settings, set build to false</span><br><span class="line">default_projects_features:</span><br><span class="line">  issues: true</span><br><span class="line">  merge_requests: true</span><br><span class="line">  wiki: true</span><br><span class="line">  snippets: false</span><br><span class="line">  builds: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Omnibus</span><br><span class="line">/etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">gitlab_rails[&apos;gitlab_default_projects_features_builds&apos;] = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重载</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="CI-CD-admin设置"><a href="#CI-CD-admin设置" class="headerlink" title="CI/CD admin设置"></a>CI/CD admin设置</h3><p>GitLab CI/CD admin settings: Enable or disable  DevOps site-wide and define the artifacts’ max size and expiration time.</p><p>在以管理员登录GitLab Web UI，在Admin area里面，您将找到Auto DevOps，Runners和job artifacts的设置。</p><p><br></p><p><strong>Auto DevOps</strong></p><p>要为所有项目启用/禁用 Auto DevOps：</p><ul><li>进入<code>Admin area &gt; Settings &gt; Continuous Integration and Deployment</code></li><li>检查<code>Default to Auto DevOps pipeline for all projects</code></li><li>可为Auto DevOps添加基本域</li><li>保存更改</li></ul><p>从现在开始，每个现有项目和新创建的项目都没有<code>.gitlab-ci.yml</code>，将使用Auto DevOps pipeline。</p><p><br></p><p><strong>Maximum artifacts size</strong></p><p>可为GitLab实例设置<code>[job artifacts][art-yml]</code>的最大大小。它的单位为<code>MB</code>，默认为每个Job设置为<code>100MB</code>。<code>GitLab.com</code>上它被设置为<code>1GB</code>。</p><p><br></p><p><strong>Default artifacts expiration</strong></p><p>可为GitLab实例的<code>job artifacts</code>设置默认到期时间。<code>GitLab.com</code>它<code>never expire</code>。<br>这里面的设置是按Job设置的，可在<code>.gitlab-ci.yml</code>中覆盖它。将其设置为0表示禁用过期，默认单位是秒。</p><p><strong>Archive jobs</strong></p><p>归档作业通过删除作业的一些功能（运行作业所需的元数据）来减少系统上的CI/CD占用空间，但是为了审计目的而保留跟踪(traces)和工件(artifacts)。<br>一旦该时间过去，作业将被存档，不再能够重试。让它变空成为永不过期的工作(它必须不少于1天)。</p><p><br><br><br><br><br></p><h3 id="Jobs-artifacts"><a href="#Jobs-artifacts" class="headerlink" title="Jobs artifacts"></a>Jobs artifacts</h3><p>Job artifacts: Enable, disable, and configure job artifacts (a set of files and directories which are outputted by a job when it completes successfully).</p><p>Artifacts是在成功完成后附加到作业的文件和目录的列表。此功能在所有的安装中默认启用。</p><p><br></p><p><strong>禁用 job artifacts</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line"><span class="comment">#/etc/gitlab/gitlab.rb</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'artifacts_enabled'</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>存储 job artifacts</strong><br>成功完成作业后，GitLab Runner将job artifacts的存档上传到GitLab。</p><ul><li>使用本地存储</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#默认路径</span><br><span class="line"># gitlab_rails[&apos;artifacts_path&apos;] = &quot;/var/opt/gitlab/gitlab-rails/shared/artifacts&quot;</span><br></pre></td></tr></table></figure><ul><li>使用对象存储</li></ul><table><thead><tr><th>Setting</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>enabled</td><td>Enable/disable object storage</td><td>false</td></tr><tr><td>remote_directory</td><td>The bucket name where Artifacts will be stored</td><td></td></tr><tr><td>direct_upload</td><td>Set to true to enable direct upload of Artifacts without the need of local shared storage. Option may be removed once we decide to support only single storage for all files.</td><td>false</td></tr><tr><td>background_upload</td><td>Set to false to disable automatic upload. Option may be removed once upload is direct to S3</td><td>true</td></tr><tr><td>proxy_download</td><td>Set to true to enable proxying all files served. Option allows to reduce egress traffic as this allows clients to download directly from remote storage instead of proxying all data</td><td>false</td></tr><tr><td>connection</td><td>Various connection options described below</td><td>-</td></tr></tbody></table><p><br></p><p><strong>Expiring artifacts</strong><br>如果工件使用了失效日期，则在该日期过后立即标记为删除。文件由<code>expire_build_artifacts_worker</code> cron job清理，该作业由Sidekiq每小时的第50分钟（<code>50 * * * *</code>）运行。</p><p>更改工件过期的默认调度计划：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Omnibus</span></span><br><span class="line"><span class="comment">#/etc/gitlab/gitlab.rb</span></span><br><span class="line">gitlab_rails[<span class="string">'expire_build_artifacts_worker_cron'</span>] = <span class="string">"50 * * * *"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重配</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>依赖验证(dependencies validation)</strong><br>要禁用依赖验证，可在Rail Console设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Omnibus</span><br><span class="line"></span><br><span class="line">#rails console</span><br><span class="line">sudo gitlab-rails console</span><br><span class="line"></span><br><span class="line">#禁用</span><br><span class="line"> Feature.enable(&apos;ci_disable_validates_dependencies&apos;)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>实施细节</strong><br>当GitLab收到工件存档时，GitLab Workhorse也会生成存档元数据文件。此元数据文件描述了工件存档本身中的所有条目。元数据文件采用二进制格式，具有额外的GZIP压缩。</p><p>GitLab不解压工件存档以节省Disk，Mem和I/O。它改为检查包含所有相关信息的元数据文件。当存在大量工件或存档是非常大的文件时，这一点尤为重要。<br>单击特定文件时，GitLab Workhorse会从存档中提取它并开始下载。此实现可节省空间，内存和磁盘I/O.</p><p><br><br><br><br><br></p><h3 id="Job-traces"><a href="#Job-traces" class="headerlink" title="Job traces"></a>Job traces</h3><p>Job traces: Information about the job traces (logs).</p><p>作业跟踪由GitLab Runner在处理作业时发送。您可以在job, pipeline, email notification查看工作踪迹。</p><p><br></p><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>Data flow</p><p>通常，作业踪迹中有两种状态：</p><ul><li>实时跟踪(live trace)</li><li>存档跟踪(archived trace)</li></ul><table><thead><tr><th>Phase</th><th>State</th><th>Condition</th><th>Data flow</th><th>Stored path</th></tr></thead><tbody><tr><td>1: <br> patching</td><td>Live trace</td><td>When a job is running</td><td>GitLab Runner =&gt; Unicorn =&gt; file storage</td><td><code>#{ROOT_PATH}/builds/#{YYYY_mm}/#{project_id}/#{job_id}.log</code></td></tr><tr><td>2: <br> overwriting</td><td>Live trace</td><td>When a job is finished</td><td>GitLab Runner =&gt; Unicorn =&gt; file storage</td><td><code>#{ROOT_PATH}/builds/#{YYYY_mm}/#{project_id}/#{job_id}.log</code></td></tr><tr><td>3: <br> archiving</td><td>Archived trace</td><td>After a job is finished</td><td>Sidekiq moves live trace to artifacts folder</td><td><code>#{ROOT_PATH}/shared/artifacts/#{disk_hash}/#{YYYY_mm_dd}/#{job_id}/#{job_artifact_id}/job.log</code></td></tr><tr><td>4: <br> uploading</td><td>Archived trace</td><td>After a trace is archived</td><td>Sidekiq moves archived trace to object storage (if configured)</td><td><code>#{bucket_name}/#{disk_hash}/#{YYYY_mm_dd}/#{job_id}/#{job_artifact_id}/job.log</code></td></tr></tbody></table><p><br><br><br></p><h4 id="修改工作踪迹本地位置"><a href="#修改工作踪迹本地位置" class="headerlink" title="修改工作踪迹本地位置"></a>修改工作踪迹本地位置</h4><p>Changing the job traces local location</p><p>更改存储Job Log的位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Omnibus</span><br><span class="line">#/etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_ci[&apos;builds_directory&apos;] = &apos;/mnt/to/gitlab-ci/builds&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Source</span><br><span class="line">#/home/git/gitlab/config/gitlab.yml</span><br><span class="line">gitlab_ci:</span><br><span class="line">  # The location where build traces are stored (default: builds/).</span><br><span class="line">  # Relative paths are relative to Rails.root.</span><br><span class="line">  builds_path: path/to/builds/</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="将踪迹上传到对象存储"><a href="#将踪迹上传到对象存储" class="headerlink" title="将踪迹上传到对象存储"></a>将踪迹上传到对象存储</h4><p>Uploading traces to object storage</p><p>存档的踪迹被视为工作工件。因此，在设置对象存储集成时，作业踪迹会自动与其他作业工件一起迁移到它。</p><p><br><br><br></p><p>####　如何归档旧的作业踪迹文件</p><p>How to archive legacy job trace files</p><p>旧的作业踪迹指的是在GitLab 10.5之前创建的，未定期归档的作业踪迹。那么你可能需要手动进行操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行此任务后，GitLab实例将Sidekiq作业（异步进程）排队，以将作业跟踪文件从本地存储迁移到对象存储。完成所有迁移工作可能需要一些时间。</span></span><br><span class="line">gitlab-rake gitlab:traces:archive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo gitlab-rails console</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果计数变为零，则归档过程完成</span></span><br><span class="line">[1] pry(main)&gt; Sidekiq::Stats.new.queues[<span class="string">'pipeline_background:archive_trace'</span>]</span><br><span class="line"> =&gt; 100</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="如何将归档的作业踪迹迁移到对象存储"><a href="#如何将归档的作业踪迹迁移到对象存储" class="headerlink" title="如何将归档的作业踪迹迁移到对象存储"></a>如何将归档的作业踪迹迁移到对象存储</h4><p>How to migrate archived job traces to object storage</p><blockquote><p>在GitLab 11.3中引入</p></blockquote><p>如果作业踪迹已存档到本地存储中，并且您希望将这些踪迹迁移到对象存储：</p><ul><li>确保已启用Job Artifacts的对象存储集成</li><li>执行此命令: <code>gitlab-rake gitlab:traces:migrate</code></li></ul><p><br><br><br></p><h4 id="如何删除作业踪迹"><a href="#如何删除作业踪迹" class="headerlink" title="如何删除作业踪迹"></a>如何删除作业踪迹</h4><p>How to remove job traces</p><p>没有办法自动使旧的作业日志过期，但如果它们占用太多空间，则可以安全地删除它们。如果手动删除日志，则UI中的作业输出将为空。</p><p><br><br><br></p><h4 id="新的实时踪迹架构"><a href="#新的实时踪迹架构" class="headerlink" title="新的实时踪迹架构"></a>新的实时踪迹架构</h4><p>New live trace architecture</p><blockquote><p>在GitLab 10.4中引入。在GitLab 11.0中宣布的一般可用性。<br>此功能默认禁用。</p></blockquote><p>这是一个详细的数据流：</p><ul><li>GitLab Runner picks a job from GitLab</li><li>GitLab Runner sends a piece of trace to GitLab</li><li>GitLab appends the data to Redis</li><li>Once the data in Redis reach 128KB, the data is flushed to a persistent store (object storage or the database).</li><li>The above steps are repeated until the job is finished.</li><li>Once the job is finished, GitLab schedules a Sidekiq worker to archive the trace.</li><li>The Sidekiq worker archives the trace to object storage and cleans up the trace in Redis and a persistent store (object storage or the database)</li></ul><p><br></p><p><strong>Enabling live trace</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#console</span><br><span class="line"></span><br><span class="line"># Omnibus GitLab</span><br><span class="line">gitlab-rails console</span><br><span class="line"></span><br><span class="line"># Installation from source</span><br><span class="line">cd /home/git/gitlab</span><br><span class="line">sudo -u git -H bin/rails console RAILS_ENV=production</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#检查实时踪迹</span><br><span class="line">Feature.enabled?(&apos;ci_enable_live_trace&apos;)</span><br><span class="line"></span><br><span class="line">#启用</span><br><span class="line">Feature.enable(&apos;ci_enable_live_trace&apos;)</span><br><span class="line"></span><br><span class="line">#禁用</span><br><span class="line">Feature.disable(&apos;ci_enable_live_trace&apos;)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>潜在影响(Potential implications)</strong></p><p>在某些情况下，将数据存储在Redis上可能会导致数据丢失：</p><ul><li><p><strong>Case 1: When all data in Redis are accidentally flushed</strong><br>可以通过重新发送追踪来恢复实时踪迹。未归档的已完成作业的实时踪迹将丢失踪迹数据的最后一部分。</p></li><li><p><strong>Case 2: When Sidekiq workers fail to archive</strong><br>目前，Redis中的所有踪迹数据将在一周后删除。如果Sidekiq Worker无法在过期之前完成，则踪迹数据的一部分将丢失。</p></li><li><p>可能出现的另一个问题是它可能占用Redis实例上的所有内存<br>如果作业数为1000，则消耗128MB（<code>128KB*1000</code>）。</p></li></ul><p><br><br><br><br><br></p><h3 id="配置GitLab-Runner"><a href="#配置GitLab-Runner" class="headerlink" title="配置GitLab Runner"></a>配置GitLab Runner</h3><p>Configuring GitLab Runners<br>Register Shared and specific Runners: Learn how to register and configure Shared and specific Runners to your own instance.</p><p>在GitLab CI中，Runners运行<code>.gitlab-ci.yml</code>中定义的代码。它们是隔离(虚拟)机器，通过GitLab CI的协调器API获取作业。<br>Runner可以特定于某个项目，也可以为GitLab CI中的任何项目提供服务。为所有项目提供服务的Runner称为<strong>shared Runner</strong>。<br>理想情况下，GitLab Runner不应与GitLab安装在同一台机器上。你可以为GitLab实例配置多个Runner。</p><p><br><br><br></p><h4 id="Runner的状态"><a href="#Runner的状态" class="headerlink" title="Runner的状态"></a>Runner的状态</h4><p>Shared, specific and group Runners</p><p>安装Runner后，您可以将其注册为共享的或特定的。如果您具有GitLab实例的管理员访问权限，则只能注册shared Runner。</p><p>每个Runner可处于一下状态；</p><ul><li><code>shared</code>: Runner runs jobs from all unassigned projects</li><li><code>group</code>: Runner runs jobs from all unassigned projects in its group</li><li><code>specific</code>: Runner runs jobs from assigned projects</li><li><code>locked</code>: Runner cannot be assigned to other projects</li><li><code>paused</code>: Runner will not receive any new jobs</li></ul><p><br><br><br></p><h4 id="注册共享的Runner"><a href="#注册共享的Runner" class="headerlink" title="注册共享的Runner"></a>注册共享的Runner</h4><p>Registering a shared Runner</p><p>如果您是GitLab实例的管理员，则只能注册shared Runner。</p><p>在Web UI -&gt; Admin Area -&gt; Runner里面用它提供的URL和Token进行Runner注册。<br><img src="/images/GitLab/Register_Runner.png" alt=""></p><p><br></p><p>默认情况下启用shared runner，但可在 Admin Area -&gt; CI/CD里面禁用。</p><p><img src="/images/Disable_SharedRunner.png" alt=""></p><p><br><br><br></p><h4 id="注册特定的Runner"><a href="#注册特定的Runner" class="headerlink" title="注册特定的Runner"></a>注册特定的Runner</h4><p>Registering a specific Runner</p><p>注册特定的Runner有两种方式：</p><ul><li>使用project registration token来注册Runner</li><li>将shared Runner 转换为 specific Runner(单向，仅限管理员)</li></ul><p><br></p><p><strong>使用项目Token注册特定的Runner：</strong><br>创建一个没有GitLab实例管理员权限的特定Runner。进入此项目， Setting -&gt; CI/CD -&gt; Runner进行配置。</p><p><img src="/images/GitLab/Register_SpecificRunner.png" alt=""></p><p><br><br><br></p><h4 id="注册一个组Runner"><a href="#注册一个组Runner" class="headerlink" title="注册一个组Runner"></a>注册一个组Runner</h4><p>Registering a group Runner</p><p>创建一个group Runner，然后访问词组，Setting -&gt; CI/CD -&gt; Runner。</p><p><img src="/images/GitLab/Register_GroupRunner.png" alt=""></p><p><br></p><p><strong>将共享的Runner特定化(Making an existing shared Runner specific)</strong></p><p>如果您是GitLab实例的管理员，则可以将任何shared Runner转换为specific Runner。请记住，这是一种单向转换，不能逆向转换。</p><ul><li>Admin Ares -&gt; Overview -&gt; Runner -&gt; 需要的Runner</li><li>对项目启用Restrict projects for this Runner</li></ul><p>这样，shared Runner便特定于某些项目。</p><p><img src="/images/GitLab/Convert_Shared_Specific.png" alt=""></p><p><img src="/images/GitLab/Convert_Shared_Specific_View.png" alt=""></p><p>之后此Runner的状态便发生了改变。</p><p><br><br><br></p><h4 id="锁定特定Runner"><a href="#锁定特定Runner" class="headerlink" title="锁定特定Runner"></a>锁定特定Runner</h4><p>Locking a specific Runner from being enabled for other projects</p><p>您可以配置Runner以将其专门分配给一个项目。当Runner以这种方式锁定时，不能再为其他项目启用它。</p><ul><li>Visit your project’s Settings &gt; CI/CD</li><li>Find the Runner you wish to lock/unlock and make sure it’s enabled</li><li>Click the pencil button</li><li>Check the Lock to current projects option</li><li>Click Save changes for the changes to take effect</li></ul><p><img src="/images/GitLab/Lock_Runner.png" alt=""></p><p><br><br><br></p><h4 id="将Runner分配给另外的项目"><a href="#将Runner分配给另外的项目" class="headerlink" title="将Runner分配给另外的项目"></a>将Runner分配给另外的项目</h4><p>Assigning a Runner to another project</p><p>如果您是分配了特定Runner的项目的维护人员，并且Runner未仅锁定到该项目(not locked only to that project)，则还可以在具有Maintainer权限的任何其他项目上启用Runner。</p><blockquote><p>请注意，如果您没有将特定的Runner锁定到特定项目，那么您项目中具有Maintainer角色的任何用户都可以将Runner分配给另一个任意项目，而无需您的授权，因此请谨慎使用。</p></blockquote><p>启用：</p><ul><li>Visit your project’s Settings &gt; CI/CD</li><li>Find the Runner you wish to enable/disable</li><li>Click Enable for this project or Disable for this project</li></ul><p>管理员可以为项目启用/禁用特定的Runner：</p><ul><li>Navigate to Admin &gt; Runners</li><li>Find the Runner you wish to enable/disable</li><li>Click edit on the Runner</li><li>Click Enable or Disable on the project</li></ul><p><br><br><br></p><h4 id="受保护的Runner"><a href="#受保护的Runner" class="headerlink" title="受保护的Runner"></a>受保护的Runner</h4><p>Protected Runners</p><blockquote><p>在GitLab 10.0中引入。</p></blockquote><p>你可以保护Runner免于泄露敏感信息。每当Runner受到保护时，Runner仅选择在<strong>受保护的分支</strong>或<strong>受保护的标签</strong>上创建的作业，并忽略其他作业。</p><p>protect/unprotect:</p><ul><li>Visit your project’s Settings &gt; CI/CD</li><li>Find a Runner you want to protect/unprotect and make sure it’s enabled</li><li>Click the pencil button besides the Runner name</li><li>Check the Protected option</li><li>Click Save changes for the changes to take effect</li></ul><p><img src="/images/GitLab/Protected_Runner.png" alt=""></p><p><br><br><br></p><h4 id="手动清理Runner缓存"><a href="#手动清理Runner缓存" class="headerlink" title="手动清理Runner缓存"></a>手动清理Runner缓存</h4><p>Manually clearing the Runners cache</p><ul><li>Navigate to your project’s CI/CD &gt; Pipelines page.</li><li>Click on the Clear Runner caches button to clean up the cache.</li><li>On the next push, your CI/CD job will use a new cache.</li></ul><p><br><br><br></p><h4 id="共享Runner如何选择作业"><a href="#共享Runner如何选择作业" class="headerlink" title="共享Runner如何选择作业"></a>共享Runner如何选择作业</h4><p>How shared Runners pick jobs</p><p>共享的Runner遵守我们称之为合理使用的进程队列(process queue)。公平的使用算法尝试从当前在shared Runners上运行的作业数量最少的项目中将作业分配给shared Runners。</p><p><br><br><br></p><h4 id="有效地使用共享Runner"><a href="#有效地使用共享Runner" class="headerlink" title="有效地使用共享Runner"></a>有效地使用共享Runner</h4><p>Using shared Runners effectively</p><p>如果您打算使用共享的Runners，您应该记住几件事。</p><p><br></p><p><strong>使用tags</strong></p><p>您必须设置一个Runner才能运行所有不同类型的作业，它可能会在共享的项目中遇到。如果不使用tags，则对于大型项目可能会出现问题。<br>通过为Runner打tag来标记它可以处理的作业类型，您可以确保shared Runners只运行它们配备的作业(only run the jobs they are equipped to run)。</p><p>例如，在GitLab中，如果Runners包含运行Rails测试套件的相应依赖项，那么我们将Runners标记为“rails”</p><p><br></p><p><strong>Preventing Runners with tags from picking jobs without tags</strong><br>您可以配置Runner以防止在Runner没有分配tag时使用tag选择作业。</p><p>Runner pick tagged/untagged jobs:</p><ul><li>Visit your project’s Settings ➔ CI/CD</li><li>Find the Runner you wish and make sure it’s enabled</li><li>Click the pencil button</li><li>Check the Run untagged jobs option</li><li>Click Save changes for the changes to take effect</li></ul><p><img src="/images/GitLab/Tagged_Runner.png" alt=""></p><p><br></p><p><strong>为Runner设置做大作业超时</strong></p><p>对于每个Runner，您可以指定最大作业超时时间。如果小于项目定义的超时，则此类超时将优先。</p><p><br></p><p><strong>小心敏感信息</strong></p><p>对于一些Runner Executors，如果您可以在Runner上运行作业，您就可以访问它运行的任何代码并获取Runner的Token。使用shared Runners，这意味着在Runner上运行作业的任何人都可以访问在Runner上运行的任何其他人的代码。</p><p>通过在大型公共GitLab实例上限制shared Runners的使用，控制对GitLab实例的访问以及使用更安全的Runner Executor，可以轻松避免上述情况。</p><p><br></p><p><strong>Forks</strong></p><p>每当项目forked时，它都会复制与其相关的作业的设置。这意味着如果您为项目设置了shared Runners并且有人fork该项目，则shated Runners也将为该项目的作业提供服务。</p><p><br><br><br></p><h4 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h4><p>tags用于从允许运行此项目的所有Runner列表中选择特定的Runner。你可以制定Runner的tag.</p><p>tags允许您使用分配了指定tag的Runners运行作业：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">job:</span><br><span class="line">  tags:</span><br><span class="line">    - ruby</span><br><span class="line">    - postgres</span><br></pre></td></tr></table></figure><p><br></p><p>例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">windows</span> <span class="attr">job:</span></span><br><span class="line"><span class="attr">  stage:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">windows</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">%USERNAME%!</span></span><br><span class="line"></span><br><span class="line"><span class="string">osx</span> <span class="attr">job:</span></span><br><span class="line"><span class="attr">  stage:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">osx</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"Hello, $USER!"</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="共享Runner的管道配额"><a href="#共享Runner的管道配额" class="headerlink" title="共享Runner的管道配额"></a>共享Runner的管道配额</h4><p>Shared Runners pipelines quota: Limit the usage of pipeline minutes for Shared Runners.</p><p>在Web UI的Admin Area下的Auto DevOps里面进行配置。</p><p><br><br><br></p><h3 id="Auto-DevOps"><a href="#Auto-DevOps" class="headerlink" title="Auto DevOps"></a>Auto DevOps</h3><p>Enable/disable Auto DevOps: Enable or disable Auto DevOps for your instance</p><blockquote><p>在GitLab 10.0中引入。一般在GitLab 11.0上可用。</p></blockquote><p>Auto DevOps提供预定义的<code>CI/CD</code>配置，允许您自动检测(detect)，构建(build)，测试(test)，部署(deploy)和监控(monitor)应用程序。利用<code>CI/CD</code>最佳实践和工具，Auto DevOps旨在简化成熟和现代软件开发生命周期的设置和执行。</p><p><br></p><h4 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h4><blockquote><p>从<code>GitLab v11.3</code>开始，默认情况下为所有项目启用Auto DevOps pipeline。如果尚未为项目显式启用，则会在第一个管道故障时自动禁用Auto DevOps。如果找到一个，您的项目将继续使用备用<code>CI/CD</code>配置文件。</p></blockquote><p>借助Auto DevOps，软件开发过程变得更容易设置，因为每个项目都可以拥有从验证到监控的完整工作流程，并且配置最少。只需推送您的代码，GitLab就会处理其他所有事情。这样可以更轻松地启动新项目，并使整个公司的应用程序设置更加一致。</p><p><br><br><br></p><h4 id="与应用程序平台和PaaS相比较"><a href="#与应用程序平台和PaaS相比较" class="headerlink" title="与应用程序平台和PaaS相比较"></a>与应用程序平台和PaaS相比较</h4><p>Comparison to application platforms and PaaS</p><p>Auto DevOps提供通常包含在应用程序平台或PaaS的功能。它有多个灵感：</p><ul><li>Auto DevOps适用于任何k8s集群;你不仅限于在GitLab的基础设施上运行。</li><li>没有额外成本，你可在任何公共云上使用自托管的k8s集群。</li><li>Auto DevOps包括了安全测试，性能测试和代码质量测试等众多功能。</li><li>Auto DevOps提供增量分级路径。如果您需要高级自定义，则可以开始修改模板，而无需在完全不同的平台上重新开始。</li></ul><p><br><br><br></p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>特性(Features):</p><ul><li>Auto Build</li><li>Auto Test</li><li>Auto Code Quality</li><li>Auto SAST (Static Application Security Testing)</li><li>Auto Dependency Scanning</li><li>Auto License Management</li><li>Auto Container Scanning</li><li>Auto Review Apps</li><li>Auto DAST (Dynamic Application Security Testing)</li><li>Auto Deploy</li><li>Auto Browser Performance Testing</li><li>Auto Monitoring</li></ul><p><br></p><p>由于Auto DevOps依赖于许多不同的组件，因此最好具备以下基本知识：</p><ul><li>Kubernetes</li><li>Helm</li><li>Docker</li><li>GitLab Runner</li><li>Prometheus</li></ul><p><br></p><p>Auto DevOps为所有阶段提供了很好的默认值;但是，您可以根据需要自定义几乎所有内容。</p><p><br><br><br></p><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><p>Requirements</p><p>要充分利用Auto DevOps，您需要:</p><ul><li><p><strong>GitLab Runner</strong>(所有阶段都需要)<br>Runner需要配置为能够运行Docker(通常，这意味着使用Docker或Kubernetes executor，并启用特权模式)。Runner不需要安装在k8s集群中，但k8s executor易于使用并且可以自动进行自动伸缩。基于Docker的Runner也可以使用Docker Machine配置为自动伸缩。应将Runners注册为整个GitLab实例的shared Runners，或分配给特定项目的specific Runner。</p></li><li><p><strong>Base domain</strong>(自动审阅和自动部署所需)<br>您将需要一个配置了通配符DNS的域，该域将由您的所有Auto DevOps应用程序使用。</p></li><li><p><strong>K8s</strong>(自动审阅、自动部署和自动监控所需)<br>要启用部署，您需要<code>k8s v1.5+</code>。您需要项目的Kubernetes集群，或整个GitLab安装的Kubernetes默认服务模板。<br>负载均衡器——您可以使用nginx-ingress Helm Chart将NGINX Ingress部署到Kubernetes集群，从而使用NGINX ingress。</p></li><li><p><strong>Prometheus</strong>(自动监控所需)<br>要启用自动监控，您需要在某处（集群内部或外部）安装Prometheus并配置为刮取您的Kubernetes集群。要获得除系统指标外的响应指标(Metrics)，您还需要配置Prometheus。</p></li></ul><p><br></p><blockquote><p><strong>注意</strong>：<br>如果您没有安装Kubernetes或Prometheus，则将自动跳过自动审阅，自动部署和自动监控。</p></blockquote><p><br><br><br></p><h4 id="自动化运维基本域"><a href="#自动化运维基本域" class="headerlink" title="自动化运维基本域"></a>自动化运维基本域</h4><p>Auto DevOps base domain</p><p>如果要使用自动审阅和自动部署，则需要启用Auto DevOps base domain。它可在三个地方定义：</p><ul><li>在项目下的<code>CI/CD</code></li><li>在Admin Area -&gt; Setting -&gt; CI/CD</li><li>在项目下配置变量: <code>AUTO_DEVOPS_DOMAIN</code></li><li>在组级别配置变量: <code>AUTO_DEVOPS_DOMAIN</code></li></ul><p><br></p><p>需要一个与基本域匹配的通配符DNS A记录，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.example.com   3600     A     1.2.3.4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在这种情况下，`example.com`是用于部署应用程序的域名，`1.2.3.4`是负载均衡器的IP地址(通常是NGINX)。如何设置DNS记录超出了本文档的范围;您应该咨询您的DNS提供商。</span><br><span class="line">#设置完成后，所有请求都会到达负载均衡器，然后负载均衡器会将它们路由到运行应用程序的Kubernetes pod</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="使用多个k8s集群"><a href="#使用多个k8s集群" class="headerlink" title="使用多个k8s集群"></a>使用多个k8s集群</h4><p>Using multiple Kubernetes clusters</p><p>使用Auto DevOps时，您可能希望将不同的环境部署到不同的Kubernetes集群。<br>在Auto DevOps template中，您需要知道3个已定义的环境名称：</p><ul><li><code>review/</code> (从<code>review/</code>开始每个环境)</li><li><code>staging</code></li><li><code>production</code></li></ul><p><br></p><p>这些环境与使用自动部署的作业相关联，因此除了环境范围之外，它们还需要具有部署到的不同域。这就是您需要根据环境为上述所有内容定义单独的<code>AUTO_DEVOPS_DOMAIN</code>变量的原因。</p><p><br></p><p>下表是如何配置三个不同群集的示例:</p><table><thead><tr><th>集群名</th><th>集群环境范围</th><th><code>AUTO_DEVOPS_DOMAIN</code>变量值</th><th>环境变量范围</th><th>备注</th></tr></thead><tbody><tr><td>review</td><td><code>review/*</code></td><td><code>review.example.com</code></td><td><code>review/*</code></td><td>The review cluster which will run all Review Apps. <code>*</code> is a wildcard, which means it will be used by every environment name starting with <code>review/.</code></td></tr><tr><td>staging</td><td><code>staging</code></td><td><code>staging.example.com</code></td><td><code>staging</code></td><td>(Optional) The staging cluster which will run the deployments of the staging environments. You need to enable it first.</td></tr><tr><td>production</td><td><code>production</code></td><td><code>example.com</code></td><td><code>production</code></td><td>The production cluster which will run the deployments of the production environment. You can use incremental rollouts.</td></tr></tbody></table><p><br></p><p>要为每个环境添加不同的群集：</p><ul><li>项目的Operations -&gt; Kubernetes并使用各自的环境范围创建Kubernetes集群，如上表所述</li><li>创建群集后，到每个群集并安装Helm Tiller和Ingress</li><li>确保已使用指定的自动化运维域配置DNS</li><li>到项目的Settings -&gt; CI/CD -&gt; Variables，添加<code>AUTO_DEVOPS_DOMAIN</code>变量及其各自的环境范围。</li></ul><p><br></p><blockquote><p><strong>注意：</strong><br>具有多个群集的组不支持自动DevOps，因为无法在组级别上为每个环境设置<code>AUTO_DEVOPS_DOMAIN</code>。</p></blockquote><p><br><br><br></p><h4 id="启用-禁用Auto-DevOps"><a href="#启用-禁用Auto-DevOps" class="headerlink" title="启用/禁用Auto DevOps"></a>启用/禁用Auto DevOps</h4><p>首次使用Auto Devops时，请查看要求以确保可以使用所有必要的组件来充分利用Auto DevOps。</p><p><br></p><p><strong>在实例级别启用/禁用Auto DevOps（仅限管理员）</strong></p><ul><li>Admin area -&gt; Settings -&gt; Continuous Integration and Deployment</li><li><code>Default to Auto DevOps pipeline for all projects</code></li><li><code>base domain</code></li></ul><p><br></p><p><strong>在项目级别启用/禁用 Auto DevOps</strong></p><ul><li>project’s Settings -&gt; CI/CD -&gt; Auto DevOps</li><li><code>Default to Auto DevOps pipeline</code></li><li><code>Domain</code></li><li><code>Deployment strategy</code></li></ul><p><br></p><p><strong>部署策略(Deployment strategy)</strong></p><blockquote><p>Introduced in GitLab 11.0</p></blockquote><p>你可以更改项目的部署策略。有三种策略:</p><ul><li><strong>Continuous deployment to production</strong>: 允许<code>master</code>分支启用Auto Deploy来直接部署到生产环境</li><li><strong>Continuous deployment to production using timed incremental rollout</strong>: 将<code>INCREMENTAL_ROLLOUT_MODE</code>变量设置为<code>timed</code>，并且将在<code>rollout</code>的每个增量之间延迟5分钟执行生产部署</li><li><strong>Automatic deployment to staging, manual deployment to production</strong>: 设置<code>STAGING_ENABLED</code>为1，<code>INCREMENTAL_ROLLOUT_MODE</code>为<code>manual</code>。提供手动操作以部署到生产环境</li></ul><p><br><br><br></p><h4 id="自动化运维的阶段"><a href="#自动化运维的阶段" class="headerlink" title="自动化运维的阶段"></a>自动化运维的阶段</h4><p>Stages of Auto DevOps</p><p>以下部分描述了Auto DevOps的各个阶段。仔细阅读它们以了解每个工作原理。</p><p><br></p><h5 id="Auto-Build"><a href="#Auto-Build" class="headerlink" title="Auto Build"></a>Auto Build</h5><p>自动化构建有两种方式创建应用程序的构建：</p><ul><li>如果有<code>Dockerfile</code>, 则使用<code>docker build</code>来创建镜像</li><li>否则，它将使用Herokuish和Heroku buildpacks自动检测并将应用程序构建到Docker镜像中</li></ul><p>无论哪种方式，生成的Docker镜像都会自动推送到Container Registry并使用commit SHA进行标记。</p><blockquote><p><strong>重要提示：</strong><br>如果您还使用Auto Review和Auto Deploy并选择提供自己的<code>Dockerfile</code>，请确保将应用程序expose到端口5000，因为这是默认Helm图表所假定的端口。</p></blockquote><p><br></p><h5 id="Auto-Test"><a href="#Auto-Test" class="headerlink" title="Auto Test"></a>Auto Test</h5><p>Auto Test通过分析您的项目来检测语言和框架，使用Herokuish和Heroku buildpacket自动为您的应用程序运行相应的测试。自动检测多种语言和框架，但如果未检测到您的语言，您可以使用自定义构建包(Custom buildpacks)。可检查当前支持的语言。</p><blockquote><p><strong>注意：</strong><br>自动测试使用您在应用程序中已有的测试。如果没有测试，则由您来添加它们。</p></blockquote><p><br></p><h5 id="Auto-Code-Quality"><a href="#Auto-Code-Quality" class="headerlink" title="Auto Code Quality"></a>Auto Code Quality</h5><blockquote><p>GitLab STARTER BRONZE</p></blockquote><p>Auto Code Quality使用<code>Code Quality image</code>对当前代码运行静态分析和其他代码检查。报告已创建，并作为工件上传，您可以在以后下载和检查。<br>源分支和目标分支之间的任何差异也会显示在合并请求窗口小部件中。</p><p><br></p><h5 id="Auto-SAST"><a href="#Auto-SAST" class="headerlink" title="Auto SAST"></a>Auto SAST</h5><blockquote><p>GitLab ULTIMATE GOLD</p></blockquote><p>Static Application Security Testing(SAST)使用<code>SAST Docker image</code>对当前代码运行静态分析并检查潜在的安全问题。创建报告后，它将作为工件上载，您可以在以后下载和检查。</p><p><br></p><h5 id="Auto-Dependency-Scanning"><a href="#Auto-Dependency-Scanning" class="headerlink" title="Auto Dependency Scanning"></a>Auto Dependency Scanning</h5><blockquote><p>GitLab ULTIMATE GOLD</p></blockquote><p>Dependency Scanning使用<code>Dependency Scanning Docker image</code>对项目依赖关系进行分析并检查潜在的安全问题。创建报告后，它将作为工件上载，您可以在以后下载和检查。</p><p><br><br><br></p><h5 id="Auto-License-Management"><a href="#Auto-License-Management" class="headerlink" title="Auto License Management"></a>Auto License Management</h5><blockquote><p>GitLab ULTIMATE GOLD</p></blockquote><p>License Management使用<code>License Management Docker image</code>搜索项目依赖项以获取其许可证。创建报告后，它将作为工件上载，您可以在以后下载和检查。</p><p><br></p><h5 id="Auto-Container-Scanning"><a href="#Auto-Container-Scanning" class="headerlink" title="Auto Container Scanning"></a>Auto Container Scanning</h5><blockquote><p>GitLab ULTIMATE</p></blockquote><p>容器的漏洞静态分析使用<code>Clair</code>在Docker image上运行静态分析并检查潜在的安全问题。创建报告后，它将作为工件上载，您可以在以后下载和检查。</p><p><br></p><h5 id="Auto-Review-Apps"><a href="#Auto-Review-Apps" class="headerlink" title="Auto Review Apps"></a>Auto Review Apps</h5><blockquote><p><strong>注意：</strong> 这是一个可选步骤，因为许多项目没有可用的Kubernetes集群。如果不满足要求，将默默跳过作业。<br><strong>警告</strong>：不应在Helm之外操作您的应用程序(直接使用Kubernetes)。这可能会导致Helm无法检测到更改，并且随后使用Auto DevOps进行部署可以撤消您的更改。此外，如果您更改某些内容并希望通过再次部署来撤消它，Helm可能无法检测到任何更改，因此没有意识到它需要重新应用旧配置。</p></blockquote><p>Review App 是基于分支代码的临时应用程序环境，因此开发人员，设计人员，QA，产品经理和其他审阅者可以在审阅过程中实际查看代码更改并与之交互。Auto Review Apps为每个分支创建一个Review App。</p><p>Auto Review Apps 仅将您的应用部署到您的Kubernetes群集。如果没有可用的群集，则不会进行部署。<br>Review App将具有基于项目名，分支名、唯一编号以及Auto DevOps基本域的唯一URL。如：<code>user-project-branch-1234.example.com</code>。审阅应用程序的链接显示在合并请求窗口小部件中，以便于发现。删除分支时，例如合并合并请求后，将自动删除Review App。</p><p><br></p><h5 id="Auto-DAST"><a href="#Auto-DAST" class="headerlink" title="Auto DAST"></a>Auto DAST</h5><blockquote><p>GitLab Ultimate</p></blockquote><p>Dynamic Application Security Testing (DAST)使用流行的开源工具<code>OWASP ZAProxy</code>对当前代码执行分析并检查潜在的安全问题。创建报告后，它将作为工件上载，您可以在以后下载和检查。</p><p><br></p><h5 id="Auto-Browser-Performance-Testing"><a href="#Auto-Browser-Performance-Testing" class="headerlink" title="Auto Browser Performance Testing"></a>Auto Browser Performance Testing</h5><blockquote><p>GitLab Premium</p></blockquote><p>自动浏览器性能测试利用<code>Sitespeed.io</code>容器来衡量网页的性能。创建JSON报告并将其作为工件上载，其中包括每个页面的整体性能分数。默认情况下，将测试Review和Production环境的根页面。如果要添加其他URL以进行测试，只需将路径添加到根目录中名为<code>.gitlab-urls.txt</code>的文件中，每行一个。</p><p>栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">/features</span><br><span class="line">/direction</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Auto-Deploy"><a href="#Auto-Deploy" class="headerlink" title="Auto Deploy"></a>Auto Deploy</h5><blockquote><p><strong>注意</strong>：这是一个可选步骤，因为许多项目没有可用的Kubernetes集群。如果不满足要求，将默默跳过作业。<br><strong>警告</strong>：不应在Helm之外操作您的应用程序（直接使用Kubernetes）。这可能会导致Helm无法检测到更改，并且随后使用Auto DevOps进行部署可以撤消您的更改。此外，如果您更改某些内容并希望通过再次部署来撤消它，Helm可能无法检测到任何更改，因此没有意识到它需要重新应用旧配置。</p></blockquote><p>将branch或merge request合并到项目的默认分支（通常是master）后，Auto Deploy将应用程序部署到Kubernetes集群中的生产环境，其中包含基于项目名称和唯一项目ID的命名空间。<br>您可以使用环境变量自动伸缩pod副本。</p><p>值得注意的是，当项目部署到Kubernetes集群时，它依赖于已推送到GitLab Container Registry的Docker image。k8s获取此镜像并运行应用。如果项目是公共的，Kubernetes可以在不进行任何身份验证的情况下访问该映像，从而使我们可以使部署更加可用。如果项目是私有/内部的，则注册表需要凭据才能提取镜像。目前，通过提供<code>CI_JOB_TOKEN</code>作为可以使用的密码来解决此问题，但是一旦部署作业完成，此标记将不再有效。这意味着Kubernetes可以运行应用程序，但是如果它应该重新启动或在其他地方执行，则无法再次访问。</p><p><br></p><h5 id="Auto-Monitoring"><a href="#Auto-Monitoring" class="headerlink" title="Auto Monitoring"></a>Auto Monitoring</h5><blockquote><p><strong>注意</strong>：检查自动监控的要求以使此阶段工作。</p></blockquote><p>部署应用程序后，自动监控可以立即监控应用程序的服务器和响应指标。自动监控使用Prometheus直接从Kubernetes获取系统指标，如CPU和内存使用情况，以及来自NGINX服务器的响应指标，如HTTP错误率，延迟和吞吐量。</p><p>指标有：</p><ul><li><strong>Response Metrics</strong>: latency, throughput, error rate</li><li><strong>System Metrics</strong>: CPU utilization, memory utilization</li></ul><p>为了使用监控，你需要：</p><ul><li>将Prometheus部署到k8s集群中</li><li>配置Prometheus以获取想要的指标</li></ul><p><br><br><br></p><h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>Customizing</p><p>虽然Auto DevOps提供了很好的默认设置来帮助您入门，但您可以自定义几乎所有内容以满足您的需求;从自定义buildpacks到Dockerfiles，Helm chart，甚至将完整的CI/CD配置复制到项目中进行部署。</p><p><br></p><h5 id="Custom-buildpacks"><a href="#Custom-buildpacks" class="headerlink" title="Custom buildpacks"></a>Custom buildpacks</h5><p>如果项目的自动buildpack检测失败，或者您想使用自定义buildpack，则可以使用项目变量或项目中的<code>.buildpacks</code>文件覆盖buildpack:</p><ul><li><strong>Project variable</strong>: 使用要使用的buildpack的URL创建项目变量<code>BUILDPACK_URL</code></li><li><code>.buildpacks</code>文件: 在项目中添加一个名为<code>.buildpacks</code>的文件，并添加要在文件中的一行使用的buildpack的URL(多个使用多行，一行一个)</li></ul><blockquote><p><strong>警告</strong>：Auto DevOps尚不支持使用多个buildpack</p></blockquote><p><br></p><h5 id="Custom-Dockerfile"><a href="#Custom-Dockerfile" class="headerlink" title="Custom Dockerfile"></a>Custom <code>Dockerfile</code></h5><p>如果您的项目的根目录中有一个<code>Dockerfile</code>，则Auto DevOps将基于Dockerfile而不是使用buildpacks构建Docker镜像。这可以更快，并导致更小的图像，尤其是如果您的Dockerfile基于Alpine。</p><p><br></p><h5 id="Custom-Helm-Chart"><a href="#Custom-Helm-Chart" class="headerlink" title="Custom Helm Chart"></a>Custom Helm Chart</h5><p>Auto DevOps使用Helm将您的应用程序部署到Kubernetes。您可以通过将chart捆绑到项目仓库中或通过指定项目变量来覆盖使用的Helm chart：</p><ul><li><strong>Bundled chart</strong>: 如果您的项目有一个带有<code>Chart.yaml</code>文件的<code>./chart</code>目录，Auto DevOps将检测chart并使用它而不是默认chart。这可以很好地控制应用程序的部署方式</li><li><strong>Project variable</strong>: 使用要使用的自定义chart的URL创建项目变量<code>AUTO_DEVOPS_CHART</code></li></ul><p><br></p><h5 id="Customizing-gitlab-ci-yml"><a href="#Customizing-gitlab-ci-yml" class="headerlink" title="Customizing .gitlab-ci.yml"></a>Customizing <code>.gitlab-ci.yml</code></h5><p>如果要修改Auto DevOps使用的CI/CD pipeline，可以将<a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/lib/gitlab/ci/templates/Auto-DevOps.gitlab-ci.yml" title="Template" target="_blank" rel="noopener">Auto DevOps template</a>复制到项目的repo中并根据需要进行编辑。</p><p>假设您的项目是新的或者没有<code>.gitlab-ci.yml</code>文件：</p><ul><li>在项目 CI/CD里面新建文件</li><li>选择<code>.gitlab-ci.yml</code>模板</li><li>选择Auto-DevOps</li><li>编辑此模板</li><li>提交</li></ul><blockquote><p><strong>提示</strong>：Auto DevOps模板包含有用的注释，可帮助您自定义它。如果您希望部署转到临时(staging)环境而不是直接转到生产(production)环境，则可以通过将<code>.staging</code>重命名为<code>staging</code>来启用<code>staging</code>作业；然后确保取消注释生产作业的<code>when</code>，将其转换为手动操作，而不是自动部署。</p></blockquote><p><br></p><h5 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h5><p>为了支持需要数据库的应用程序，默认情况下会配置PostgreSQL。访问数据库的凭据已预先配置，但可以通过设置关联的变量进行自定义。这些凭据可用于定义<code>DATABASE_URL</code>的格式：<code>postgres://user:password@postgres-host:postgres-port/postgres-database</code></p><p><br></p><h5 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h5><p>以下变量可用于设置Auto DevOps domain，提供自定义Helm chart或扩展应用程序。 PostgreSQL也可以自定义，您可以轻松使用自定义buildpack。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>AUTO_DEVOPS_DOMAIN</code></td><td>Auto DevOps domain</td></tr><tr><td><code>AUTO_DEVOPS_CHART</code></td><td>用于部署应用的Helm Chart</td></tr><tr><td><code>REPLICAS</code></td><td>要部署的副本数，默认为1</td></tr><tr><td><code>PRODUCTION_REPLICAS</code></td><td>要在生产环境中部署的副本数。这优先于<code>REPLICAS</code>;默认为1</td></tr><tr><td><code>CANARY_REPLICAS</code></td><td>Canary Deployments部署的副本数，默认为1</td></tr><tr><td><code>CANARY_PRODUCTION_REPLICAS</code></td><td>生产环境的，优先于<code>CANARY_REPLICAS</code>，默认为1</td></tr><tr><td><code>POSTGRES_ENABLED</code></td><td>是否启用PostgreSQL,默认为<code>true</code></td></tr><tr><td><code>POSTGRES_USER</code></td><td>PostgreSQL用户，默认为<code>user</code></td></tr><tr><td><code>POSTGRES_PASSWORD</code></td><td>PostgreSQL密码，默认为<code>testing-password</code></td></tr><tr><td><code>POSTGRES_DB</code></td><td>PostgreSQL数据库名称;默认值为<code>$CI_ENVIRONMENT_SLUG</code></td></tr><tr><td><code>BUILDPACK_URL</code></td><td>buildpack的完整URL</td></tr><tr><td><code>SAST_CONFIDENCE_LEVEL</code></td><td>您希望报告的安全问题的最低置信度; 1为低，2为中，3为高;默认为3</td></tr><tr><td><code>DEP_SCAN_DISABLE_REMOTE_CHECKS</code></td><td>是否禁用远程依赖扫描检查;默认为<code>false</code></td></tr><tr><td><code>DB_INITIALIZE</code></td><td>从GitLab 11.4开始，此变量可用于指定运行以初始化应用程序的PostgreSQL数据库的命令。它在应用程序pod内运行</td></tr><tr><td><code>DB_MIGRATE</code></td><td>从GitLab 11.4开始，此变量可用于指定运行以迁移应用程序的PostgreSQL数据库的命令。它在应用程序pod内运行</td></tr><tr><td><code>STAGING_ENABLED</code></td><td>可用于定义部署策略</td></tr><tr><td><code>CANARY_ENABLED</code></td><td>定义canary部署策略</td></tr><tr><td><code>INCREMENTAL_ROLLOUT_MODE</code></td><td>从GitLab 11.4开始，此变量（如果存在）可用于为生产环境启用应用程序的增量部署</td></tr><tr><td><code>TEST_DISABLED</code></td><td>从GitLab 11.0开始，此变量可用于禁用测试作业</td></tr><tr><td><code>CODE_QUALITY_DISABLED</code></td><td>从GitLab 11.0开始，此变量可用于禁用代码质量作业</td></tr><tr><td><code>SAST_DISABLED</code></td><td>从GitLab 11.0开始，此变量可用于禁用sast作业</td></tr><tr><td><code>DEPENDENCY_SCANNING_DISABLED</code></td><td>从GitLab 11.0开始，此变量可用于禁用<code>dependency_scanning</code>作业</td></tr><tr><td><code>CONTAINER_SCANNING_DISABLED</code></td><td>从GitLab 11.0开始，此变量可用于禁用<code>sast：container</code>作业</td></tr><tr><td><code>REVIEW_DISABLED</code></td><td>从GitLab 11.0开始，此变量可用于禁用审核和手动审核：停止作业</td></tr><tr><td><code>PERFORMANCE_DISABLED</code></td><td>从GitLab 11.0开始，此变量可用于禁用性能作业</td></tr></tbody></table><p><br></p><blockquote><p><strong>提示</strong>：使用项目变量设置副本变量，并通过重新部署来扩展应用程序！<br><strong>小心</strong>: 你不应该直接使用k8s来扩展你的应用程序，这可能会导致Helm异常。</p></blockquote><p><br></p><p><strong>高级副本变量设置(Advanced replica variables setup)</strong></p><p>除了上面提到的两个与副本相关的生产变量之外，您还可以将其它变量用于不同的环境。</p><p><br><br><br></p><h4 id="目前支持的语言"><a href="#目前支持的语言" class="headerlink" title="目前支持的语言"></a>目前支持的语言</h4><p>Currently supported languages</p><p>从GitLab 10.0开始，支持的构建包是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-multi</span>     <span class="string">v1.0.0</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-ruby</span>      <span class="string">v168</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-nodejs</span>    <span class="string">v99</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-clojure</span>   <span class="string">v77</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-python</span>    <span class="string">v99</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-java</span>      <span class="string">v53</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-gradle</span>    <span class="string">v23</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-scala</span>     <span class="string">v78</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-play</span>      <span class="string">v26</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-php</span>       <span class="string">v122</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-go</span>        <span class="string">v72</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">heroku-buildpack-erlang</span>    <span class="string">fa17af9</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">buildpack-nginx</span>            <span class="string">v8</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Auto-DevOps-template"><a href="#Auto-DevOps-template" class="headerlink" title="Auto DevOps template"></a>Auto DevOps template</h3><p>各种模板: <a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/gitlab/ci/templates" target="_blank" rel="noopener">https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/gitlab/ci/templates</a></p><p>在项目也可选择新建<code>.gitlab-ci.yml</code>模板文件，然后根据需要就行适当的修改。</p><p><br><br><br><br><br></p><h3 id="CI-CD环境变量"><a href="#CI-CD环境变量" class="headerlink" title="CI/CD环境变量"></a><code>CI/CD</code>环境变量</h3><p>CI/CD Variables - Learn how to use variables defined in your <code>.gitlab-ci.yml</code> or the ones defined in your project’s settings</p><p>当从GitLab CI接收作业时，Runner准备构建环境。首先，设置预定义变量列表<strong>predefined variables</strong>（环境变量）和用户定义变量列表<strong>user-defined variables</strong>。</p><p><br><br><br></p><h4 id="变量优先级"><a href="#变量优先级" class="headerlink" title="变量优先级"></a>变量优先级</h4><p>Priority of variables</p><p>变量可以被覆盖，并且它们按此顺序优先于彼此：</p><ol><li>Trigger variables / scheduled pipeline variables</li><li>Project-level variables / protected variables</li><li>Group-level variables / protected variables</li><li>YAML-defined job-level variables</li><li>YAML-defined global variables</li><li>Deployment variables</li><li>Predefined variables</li></ol><p><br><br><br></p><h4 id="不支持的变量"><a href="#不支持的变量" class="headerlink" title="不支持的变量"></a>不支持的变量</h4><p>在某些情况下，某些变量无法在<code>.gitlab-ci.yml</code>定义的上下文中使用——如在<code>script</code>下定义的变量。</p><p><br><br><br></p><h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><p>Predefined variables (Environment variables)</p><blockquote><p><strong>注意：</strong><br>从<code>GitLab 9.0</code>开始，我们已经弃用了一些变量。阅读<code>9.0</code>重命名部分以找出它们的替代品。强烈建议您使用新变量，因为我们将在以后的GitLab版本中删除旧变量。</p></blockquote><table><thead><tr><th>Variable</th><th>GitLab</th><th>Runner</th><th>Description</th></tr></thead><tbody><tr><td><code>ARTIFACT_DOWNLOAD_ATTEMPTS</code></td><td>8.15</td><td>1.9</td><td>Number of attempts to download artifacts running a job</td></tr><tr><td><code>CI</code></td><td>all</td><td>0.4</td><td>Mark that job is executed in CI environment</td></tr><tr><td><code>CI_COMMIT_BEFORE_SHA</code></td><td>11.2</td><td>all</td><td>The previous latest commit present on a branch before a push request.</td></tr><tr><td><code>CI_COMMIT_DESCRIPTION</code></td><td>10.8</td><td>all</td><td>The description of the commit: the message without first line, if the title is shorter than 100 characters; full message in other case.</td></tr><tr><td><code>CI_COMMIT_MESSAGE</code></td><td>10.8</td><td>all</td><td>The full commit message.</td></tr><tr><td><code>CI_COMMIT_REF_NAME</code></td><td>9.0</td><td>all</td><td>The branch or tag name for which project is built</td></tr><tr><td><code>CI_COMMIT_REF_SLUG</code></td><td>9.0</td><td>all</td><td>$CI_COMMIT_REF_NAME lowercased, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.</td></tr><tr><td><code>CI_COMMIT_SHA</code></td><td>9.0</td><td>all</td><td>The commit revision for which project is built</td></tr><tr><td><code>CI_COMMIT_SHORT_SHA</code></td><td>11.7</td><td>all</td><td>The first eight characters of CI_COMMIT_SHA</td></tr><tr><td><code>CI_COMMIT_TAG</code></td><td>9.0</td><td>0.5</td><td>The commit tag name. Present only when building tags.</td></tr><tr><td><code>CI_COMMIT_TITLE</code></td><td>10.8</td><td>all</td><td>The title of the commit - the full first line of the message</td></tr><tr><td><code>CI_CONFIG_PATH</code></td><td>9.4</td><td>0.5</td><td>The path to CI config file. Defaults to .gitlab-ci.yml</td></tr><tr><td><code>CI_DEBUG_TRACE</code></td><td>all</td><td>1.7</td><td>Whether debug tracing is enabled</td></tr><tr><td><code>CI_DEPLOY_PASSWORD</code></td><td>10.8</td><td>all</td><td>Authentication password of the GitLab Deploy Token, only present if the Project has one related.</td></tr><tr><td><code>CI_DEPLOY_USER</code></td><td>10.8</td><td>all</td><td>Authentication username of the GitLab Deploy Token, only present if the Project has one related.</td></tr><tr><td><code>CI_DISPOSABLE_ENVIRONMENT</code></td><td>all</td><td>10.1</td><td>Marks that the job is executed in a disposable environment (something that is created only for this job and disposed of/destroyed after the execution - all executors except shell and ssh). If the environment is disposable, it is set to true, otherwise it is not defined at all.</td></tr><tr><td><code>CI_ENVIRONMENT_NAME</code></td><td>8.15</td><td>all</td><td>The name of the environment for this job</td></tr><tr><td><code>CI_ENVIRONMENT_SLUG</code></td><td>8.15</td><td>all</td><td>A simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, etc.</td></tr><tr><td><code>CI_ENVIRONMENT_URL</code></td><td>9.3</td><td>all</td><td>The URL of the environment for this job</td></tr><tr><td><code>CI_JOB_ID</code></td><td>9.0</td><td>all</td><td>The unique id of the current job that GitLab CI uses internally</td></tr><tr><td><code>CI_JOB_MANUAL</code></td><td>8.12</td><td>all</td><td>The flag to indicate that job was manually started</td></tr><tr><td><code>CI_JOB_NAME</code></td><td>9.0</td><td>0.5</td><td>The name of the job as defined in .gitlab-ci.yml</td></tr><tr><td><code>CI_JOB_STAGE</code></td><td>9.0</td><td>0.5</td><td>The name of the stage as defined in .gitlab-ci.yml</td></tr><tr><td><code>CI_JOB_TOKEN</code></td><td>9.0</td><td>1.2</td><td>Token used for authenticating with the GitLab Container Registry and downloading dependent repositories</td></tr><tr><td><code>CI_JOB_URL</code></td><td>11.1</td><td>0.5</td><td>Job details URL</td></tr><tr><td><code>CI_MERGE_REQUEST_ID</code></td><td>11.6</td><td>all</td><td>The ID of the merge request if it’s pipelines for merge requests</td></tr><tr><td><code>CI_MERGE_REQUEST_IID</code></td><td>11.6</td><td>all</td><td>The IID of the merge request if it’s pipelines for merge requests</td></tr><tr><td><code>CI_MERGE_REQUEST_PROJECT_ID</code></td><td>11.6</td><td>all</td><td>The ID of the project of the merge request if it’s pipelines for merge requests</td></tr><tr><td><code>CI_MERGE_REQUEST_PROJECT_PATH</code></td><td>11.6</td><td>all</td><td>The path of the project of the merge request if it’s pipelines for merge requests (e.g. namespace/awesome-project)</td></tr><tr><td><code>CI_MERGE_REQUEST_PROJECT_URL</code></td><td>11.6</td><td>all</td><td>The URL of the project of the merge request if it’s pipelines for merge requests (e.g. <a href="http://192.168.10.15:3000/namespace/awesome-project" target="_blank" rel="noopener">http://192.168.10.15:3000/namespace/awesome-project</a>)</td></tr><tr><td><code>CI_MERGE_REQUEST_REF_PATH</code></td><td>11.6</td><td>all</td><td>The ref path of the merge request if it’s pipelines for merge requests. (e.g. refs/merge-requests/1/head)</td></tr><tr><td><code>CI_MERGE_REQUEST_SOURCE_BRANCH_NAME</code></td><td>11.6</td><td>all</td><td>The source branch name of the merge request if it’s pipelines for merge requests</td></tr><tr><td>CI_MERGE_REQUEST_SOURCE_PROJECT_ID</td><td>11.6</td><td>all</td><td>The ID of the source project of the merge request if it’s pipelines for merge requests</td></tr><tr><td>CI_MERGE_REQUEST_SOURCE_PROJECT_PATH</td><td>11.6</td><td>all</td><td>The path of the source project of the merge request if it’s pipelines for merge requests</td></tr><tr><td>CI_MERGE_REQUEST_SOURCE_PROJECT_URL</td><td>11.6</td><td>all</td><td>The URL of the source project of the merge request if it’s pipelines for merge requests</td></tr><tr><td>CI_MERGE_REQUEST_TARGET_BRANCH_NAME</td><td>11.6</td><td>all</td><td>The target branch name of the merge request if it’s pipelines for merge requests</td></tr><tr><td>CI_NODE_INDEX</td><td>11.5</td><td>all</td><td>Index of the job in the job set. If the job is not parallelized, this variable is not set.</td></tr><tr><td>CI_NODE_TOTAL</td><td>11.5</td><td>all</td><td>Total number of instances of this job running in parallel. If the job is not parallelized, this variable is set to 1.</td></tr><tr><td>CI_API_V4_URL</td><td>11.7</td><td>all</td><td>The GitLab API v4 root URL</td></tr><tr><td>CI_PIPELINE_ID</td><td>8.10</td><td>all</td><td>The unique id of the current pipeline that GitLab CI uses internally</td></tr><tr><td>CI_PIPELINE_IID</td><td>11.0</td><td>all</td><td>The unique id of the current pipeline scoped to project</td></tr><tr><td>CI_PIPELINE_SOURCE</td><td>10.0</td><td>all</td><td>Indicates how the pipeline was triggered. Possible options are: push, web, trigger, schedule, api, and pipeline. For pipelines created before GitLab 9.5, this will show as unknown</td></tr><tr><td>CI_PIPELINE_TRIGGERED</td><td>all</td><td>all</td><td>The flag to indicate that job was triggered</td></tr><tr><td>CI_PIPELINE_URL</td><td>11.1</td><td>0.5</td><td>Pipeline details URL</td></tr><tr><td>CI_PROJECT_DIR</td><td>all</td><td>all</td><td>The full path where the repository is cloned and where the job is run</td></tr><tr><td>CI_PROJECT_ID</td><td>all</td><td>all</td><td>The unique id of the current project that GitLab CI uses internally</td></tr><tr><td>CI_PROJECT_NAME</td><td>8.10</td><td>0.5</td><td>The project name that is currently being built (actually it is project folder name)</td></tr><tr><td>CI_PROJECT_NAMESPACE</td><td>8.10</td><td>0.5</td><td>The project namespace (username or groupname) that is currently being built</td></tr><tr><td>CI_PROJECT_PATH</td><td>8.10</td><td>0.5</td><td>The namespace with project name</td></tr><tr><td>CI_PROJECT_PATH_SLUG</td><td>9.3</td><td>all</td><td>$CI_PROJECT_PATH lowercased and with everything except 0-9 and a-z replaced with -. Use in URLs and domain names.</td></tr><tr><td>CI_PROJECT_URL</td><td>8.10</td><td>0.5</td><td>The HTTP address to access project</td></tr><tr><td>CI_PROJECT_VISIBILITY</td><td>10.3</td><td>all</td><td>The project visibility (internal, private, public)</td></tr><tr><td>CI_REGISTRY</td><td>8.10</td><td>0.5</td><td>If the Container Registry is enabled it returns the address of GitLab’s Container Registry</td></tr><tr><td>CI_REGISTRY_IMAGE</td><td>8.10</td><td>0.5</td><td>If the Container Registry is enabled for the project it returns the address of the registry tied to the specific project</td></tr><tr><td>CI_REGISTRY_PASSWORD</td><td>9.0</td><td>all</td><td>The password to use to push containers to the GitLab Container Registry</td></tr><tr><td>CI_REGISTRY_USER</td><td>9.0</td><td>all</td><td>The username to use to push containers to the GitLab Container Registry</td></tr><tr><td>CI_REPOSITORY_URL</td><td>9.0</td><td>all</td><td>The URL to clone the Git repository</td></tr><tr><td>CI_RUNNER_DESCRIPTION</td><td>8.10</td><td>0.5</td><td>The description of the runner as saved in GitLab</td></tr><tr><td>CI_RUNNER_EXECUTABLE_ARCH</td><td>all</td><td>10.6</td><td>The OS/architecture of the GitLab Runner executable (note that this is not necessarily the same as the environment of the executor)</td></tr><tr><td>CI_RUNNER_ID</td><td>8.10</td><td>0.5</td><td>The unique id of runner being used</td></tr><tr><td>CI_RUNNER_REVISION</td><td>all</td><td>10.6</td><td>GitLab Runner revision that is executing the current job</td></tr><tr><td>CI_RUNNER_TAGS</td><td>8.10</td><td>0.5</td><td>The defined runner tags</td></tr><tr><td>CI_RUNNER_VERSION</td><td>all</td><td>10.6</td><td>GitLab Runner version that is executing the current job</td></tr><tr><td>CI_SERVER</td><td>all</td><td>all</td><td>Mark that job is executed in CI environment</td></tr><tr><td>CI_SERVER_NAME</td><td>all</td><td>all</td><td>The name of CI server that is used to coordinate jobs</td></tr><tr><td>CI_SERVER_REVISION</td><td>all</td><td>all</td><td>GitLab revision that is used to schedule jobs</td></tr><tr><td>CI_SERVER_VERSION</td><td>all</td><td>all</td><td>GitLab version that is used to schedule jobs</td></tr><tr><td>CI_SERVER_VERSION_MAJOR</td><td>11.4</td><td>all</td><td>GitLab version major component</td></tr><tr><td>CI_SERVER_VERSION_MINOR</td><td>11.4</td><td>all</td><td>GitLab version minor component</td></tr><tr><td>CI_SERVER_VERSION_PATCH</td><td>11.4</td><td>all</td><td>GitLab version patch component</td></tr><tr><td>CI_SHARED_ENVIRONMENT</td><td>all</td><td>10.1</td><td>Marks that the job is executed in a shared environment (something that is persisted across CI invocations like shell or ssh executor). If the environment is shared, it is set to true, otherwise it is not defined at all.</td></tr><tr><td>GET_SOURCES_ATTEMPTS</td><td>8.15</td><td>1.9</td><td>Number of attempts to fetch sources running a job</td></tr><tr><td>GITLAB_CI</td><td>all</td><td>all</td><td>Mark that job is executed in GitLab CI environment</td></tr><tr><td>GITLAB_USER_EMAIL</td><td>8.12</td><td>all</td><td>The email of the user who started the job</td></tr><tr><td>GITLAB_USER_ID</td><td>8.12</td><td>all</td><td>The id of the user who started the job</td></tr><tr><td>GITLAB_USER_LOGIN</td><td>10.0</td><td>all</td><td>The login username of the user who started the job</td></tr><tr><td>GITLAB_USER_NAME</td><td>10.0</td><td>all</td><td>The real name of the user who started the job</td></tr><tr><td>RESTORE_CACHE_ATTEMPTS</td><td>8.15</td><td>1.9</td><td>Number of attempts to restore the cache running a job</td></tr></tbody></table><p><br></p><p><strong>GitLab 9.0 renaming</strong></p><table><thead><tr><th>8.x name</th><th>9.0+ name</th></tr></thead><tbody><tr><td>CI_BUILD_ID</td><td>CI_JOB_ID</td></tr><tr><td>CI_BUILD_REF</td><td>CI_COMMIT_SHA</td></tr><tr><td>CI_BUILD_TAG</td><td>CI_COMMIT_TAG</td></tr><tr><td>CI_BUILD_BEFORE_SHA</td><td>CI_COMMIT_BEFORE_SHA</td></tr><tr><td>CI_BUILD_REF_NAME</td><td>CI_COMMIT_REF_NAME</td></tr><tr><td>CI_BUILD_REF_SLUG</td><td>CI_COMMIT_REF_SLUG</td></tr><tr><td>CI_BUILD_NAME</td><td>CI_JOB_NAME</td></tr><tr><td>CI_BUILD_STAGE</td><td>CI_JOB_STAGE</td></tr><tr><td>CI_BUILD_REPO</td><td>CI_REPOSITORY_URL</td></tr><tr><td>CI_BUILD_TRIGGERED</td><td>CI_PIPELINE_TRIGGERED</td></tr><tr><td>CI_BUILD_MANUAL</td><td>CI_JOB_MANUAL</td></tr><tr><td>CI_BUILD_TOKEN</td><td>CI_JOB_TOKEN</td></tr></tbody></table><p><br><br><br></p><h4 id="gitlab-ci-yml定义的变量"><a href="#gitlab-ci-yml定义的变量" class="headerlink" title=".gitlab-ci.yml定义的变量"></a><code>.gitlab-ci.yml</code>定义的变量</h4><p>GitLab CI允许您添加在构建环境中设置的<code>.gitlab-ci.yml</code>变量。因此，变量保存在存储库中，它们用于存储非敏感项目配置。</p><p><br><br><br></p><h4 id="组-库级别变量"><a href="#组-库级别变量" class="headerlink" title="组/库级别变量"></a>组/库级别变量</h4><p>这个变量在Web UI上进行配置。</p><p><br><br><br><br><br></p><h3 id="gitlab-ci-yml配置"><a href="#gitlab-ci-yml配置" class="headerlink" title=".gitlab-ci.yml配置"></a><code>.gitlab-ci.yml</code>配置</h3><p>使用<code>.gitlab-ci.yml</code>配置你的Jobs，该文件是GitLab Runner用来管理项目作业的文件。</p><p><br></p><h4 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h4><p>YAML文件定义了一组具有约束的作业，说明应该何时运行它们。您可以指定无限数量的作业，这些作业被定义为具有任意名称的顶级元素，并且始终必须至少包含<code>script</code>子句。<br>可以是直接运行命令，也可以写成<code>xxx.sh</code>脚本，然后执行此脚本。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两个单独的作业，执行各自的命令</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">"execute-script-for-job1"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">"execute-script-for-job2"</span></span><br></pre></td></tr></table></figure><p>Runner选择Job并在Runner的环境中执行。重要的是，每项工作都是相互独立运作的，这里可对比Jenkins里面的workspace。</p><p>每个作业必须具有唯一的名称，但有一些<strong>保留的关键字(keywords)</strong>不能用作作业名称:</p><ul><li><code>image</code></li><li><code>services</code></li><li><code>stages</code></li><li><code>types</code></li><li><code>before_script</code></li><li><code>after_script</code></li><li><code>variables</code></li><li><code>cache</code></li></ul><p><br></p><p><strong>作业由定义作业行为的参数列表定义:</strong></p><table><thead><tr><th>Keyword</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>script</code></td><td>yes</td><td>Defines a shell script which is executed by Runner</td></tr><tr><td><code>extends</code></td><td>no</td><td>Defines a configuration entry that this job is going to inherit from</td></tr><tr><td><code>image</code></td><td>no</td><td>Use docker image, covered in Using Docker Images</td></tr><tr><td><code>services</code></td><td>no</td><td>Use docker services, covered in Using Docker Images</td></tr><tr><td><code>stage</code></td><td>no</td><td>Defines a job stage (default: <code>test</code>)</td></tr><tr><td><code>type</code></td><td>no</td><td>Alias for <code>stage</code></td></tr><tr><td><code>variables</code></td><td>no</td><td>Define job variables on a job level</td></tr><tr><td><code>only</code></td><td>no</td><td>Defines a list of git refs for which job is created</td></tr><tr><td><code>except</code></td><td>no</td><td>Defines a list of git refs for which job is not created</td></tr><tr><td><code>tags</code></td><td>no</td><td>Defines a list of tags which are used to select Runner</td></tr><tr><td><code>allow_failure</code></td><td>no</td><td>Allow job to fail. Failed job doesn’t contribute to commit status</td></tr><tr><td><code>when</code></td><td>no</td><td>Define when to run job. Can be <code>on_success</code>, <code>on_failure</code>, <code>always</code> or `manual</td></tr><tr><td><code>dependencies</code></td><td>no</td><td>Define other jobs that a job depends on so that you can pass artifacts between them</td></tr><tr><td><code>artifacts</code></td><td>no</td><td>Define list of job artifacts</td></tr><tr><td><code>cache</code></td><td>no</td><td>Define list of files that should be cached between subsequent runs</td></tr><tr><td><code>before_script</code></td><td>no</td><td>Override a set of commands that are executed before job</td></tr><tr><td><code>after_script</code></td><td>no</td><td>Override a set of commands that are executed after job</td></tr><tr><td><code>environment</code></td><td>no</td><td>Defines a name of environment to which deployment is done by this job</td></tr><tr><td><code>coverage</code></td><td>no</td><td>Define code coverage settings for a given job</td></tr><tr><td><code>retry</code></td><td>no</td><td>Define when and how many times a job can be auto-retried in case of a failure</td></tr><tr><td><code>parallel</code></td><td>no</td><td>Defines how many instances of a job should be run in parallel</td></tr></tbody></table><p><br><br><br></p><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a><code>extends</code></h4><p><code>extends</code>定义了一个使用<code>extends</code>的作业将继承的条目名称。</p><p>这是使用YAML锚点(anchor)的替代方案，并且更加灵活和可读：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.tests:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rake</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="attr">    refs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">branches</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line"><span class="attr">  extends:</span> <span class="string">.tests</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rake</span> <span class="string">rspec</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$RSPEC</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，rspec作业继承自<code>.tests</code>模板作业。GitLab将根据键执行反向深度合并。GitLab将:</p><ul><li>将<code>rspec</code>内容以递归方式合并到<code>.tests</code>中</li><li>Not merge the values of the keys</li></ul><p>这导致以下<code>rspec</code>作业:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意，script: rake test将被script: rake rspec覆盖</span></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rake</span> <span class="string">rspec</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="attr">    refs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">branches</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$RSPEC</span></span><br></pre></td></tr></table></figure><p>如果想要包含<code>rake test</code>, 请查看<code>before_script-and-after_script</code>.<br><code>extends</code>支持多级继承，但不建议使用三级以上。支持的最大嵌套级别为10。</p><p>一下栗子具有两级继承:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.tests:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">pushes</span></span><br><span class="line"></span><br><span class="line"><span class="string">.rspec:</span></span><br><span class="line"><span class="attr">  extends:</span> <span class="string">.tests</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rake</span> <span class="string">rspec</span></span><br><span class="line"></span><br><span class="line"><span class="string">rspec</span> <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line"><span class="attr">    RSPEC_SUITE:</span> <span class="string">'1'</span></span><br><span class="line"><span class="attr">  extends:</span> <span class="string">.rspec</span></span><br><span class="line"></span><br><span class="line"><span class="string">rspec</span> <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line"><span class="attr">    RSPEC_SUITE:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">  extends:</span> <span class="string">.rspec</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spinach:</span></span><br><span class="line"><span class="attr">  extends:</span> <span class="string">.tests</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rake</span> <span class="string">spinach</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="pages"><a href="#pages" class="headerlink" title="pages"></a><code>pages</code></h4><p><code>pages</code>是一项特殊工作，用于将静态内容上传到GitLab，可用于为您的网站提供服务。它有一个特殊的语法，因此必须满足以下两个要求：</p><ul><li>任何静态内容都必须放在<code>public/</code>目录下</li><li>须定义具有<code>public/</code>目录路径的<code>artifacts</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pages:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mkdir</span> <span class="string">.public</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cp</span> <span class="bullet">-r</span> <span class="string">*</span> <span class="string">.public</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mv</span> <span class="string">.public</span> <span class="string">public</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">public</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>更多详细信息请参考GitLab Pages。</p><p><br><br><br></p><h4 id="image-and-services"><a href="#image-and-services" class="headerlink" title="image and services"></a><code>image</code> and <code>services</code></h4><p>这允许指定自定义Docker镜像和可用于作业时间的服务列表。</p><p><br><br><br></p><h4 id="before-script-and-after-script"><a href="#before-script-and-after-script" class="headerlink" title="before_script and after_script"></a><code>before_script</code> and <code>after_script</code></h4><p><code>before_script</code>用于定义应在所有作业（包括部署作业）之前，在恢复工件(artifacts)之后，运行的命令；这可以是数组或多行字符串。<br><code>after_script</code>用于定义将在所有作业（包括失败的作业）之后运行的命令。这必须是数组或多行字符串。</p><p><code>before_script</code>和<code>main script</code>连接在一个上下文/容器中运行。<code>after_script</code>是单独运行的，因此根据执行程序，在工作树之外完成的更改可能不可见。</p><p>如果在每个工作中定义了<code>before_script</code>和<code>after_script</code>，则可以覆盖全局定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">global</span> <span class="string">before</span> <span class="string">script</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  before_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">execute</span> <span class="string">this</span> <span class="string">instead</span> <span class="string">of</span> <span class="string">global</span> <span class="string">before</span> <span class="string">script</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">my</span> <span class="string">command</span></span><br><span class="line"><span class="attr">  after_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">execute</span> <span class="string">this</span> <span class="string">after</span> <span class="string">my</span> <span class="string">script</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="stages"><a href="#stages" class="headerlink" title="stages"></a><code>stages</code></h4><p><code>stages</code>用于在全局范围定义可由作业使用的阶段。<br><code>stages</code>规范允许具有灵活的多级阶段管道(multi stage pipeline)。<code>stages</code>元素的排序定义了作业执行的顺序:</p><ul><li>同一阶段的作业是并行运行的</li><li>下一阶段的作业在上一阶段的作业成功完成之后运行</li></ul><p>让我们考虑以下示例，它定义了3个阶段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#首先，build阶段的所有作业都是并行执行的</span></span><br><span class="line"><span class="comment">#如果build阶段的所有作业都成功，则test阶段的作业将并行执行</span></span><br><span class="line"><span class="comment">#如果test阶段的所有作业都成功，则deploy阶段的作业将并行执行</span></span><br><span class="line"><span class="comment">#如果deploy阶段的所有作业都成功，则commit将被标记为passwd</span></span><br><span class="line"><span class="comment">#如果任何先前的作业失败，则commit被标记为failed，并且不执行其他阶段的作业</span></span><br></pre></td></tr></table></figure><p>有两个边缘案例值得注意：</p><ul><li>如果在<code>.gitlab-ci.yml</code>文件中没有定义<code>stages</code>，<code>build</code>、<code>test</code>和<code>deploy</code>用作默认情况允许的作业阶段；</li><li>如果作业未指定<code>stage</code>，则为作业分配<code>test</code>阶段</li></ul><p><br><br><br></p><h4 id="stage"><a href="#stage" class="headerlink" title="stage"></a><code>stage</code></h4><p><code>stage</code>是按工作定义的，依赖于全局定义的<code>stages</code>。它允许将作业分组到不同的阶段，并且同一阶段的作业并行执行:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="string">job</span> <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">build</span> <span class="string">dependencies</span></span><br><span class="line"></span><br><span class="line"><span class="string">job</span> <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">build</span> <span class="string">artifacts</span></span><br><span class="line"></span><br><span class="line"><span class="string">job</span> <span class="number">3</span><span class="string">:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="string">job</span> <span class="number">4</span><span class="string">:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="types"><a href="#types" class="headerlink" title="types"></a><code>types</code></h4><p>不推荐使用<code>types</code>，可以在以后的某个版本中删除。请使用<code>stages</code>替代它。</p><p><br><br><br></p><h4 id="script"><a href="#script" class="headerlink" title="script"></a><code>script</code></h4><p><code>script</code>是作业所需的唯一必需关键字。这是一个由Runner执行的shell script。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#栗子</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">"bundle exec rspec"</span></span><br></pre></td></tr></table></figure><p>此参数还可以包含使用数组的多个命令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">uname</span> <span class="bullet">-a</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rspec</span></span><br></pre></td></tr></table></figure><p>有时，脚本命令需要用单引号或双引号括起来，例如命令中有特殊字符的时候。</p><p><br><br><br></p><h4 id="only和except-简单"><a href="#only和except-简单" class="headerlink" title="only和except(简单)"></a><code>only</code>和<code>except</code>(简单)</h4><p><code>only</code>和<code>except</code>两个参数，用于创建作业时设置作业策略来限制它:</p><ul><li><code>only</code>定义作业将运行的branch和tag的名称</li><li><code>except</code>定义作业不会运行的branch和tag的名称</li></ul><p>有一些适用于作业策略的规则：</p><ul><li><code>only</code>和<code>except</code>是包容性的，如果在作业规范中定义了<code>only</code>和<code>except</code>，则ref被<code>only</code>和<code>except</code>过滤</li><li><code>only</code>和<code>except</code>允许使用正则表达式: <a href="https://ruby-doc.org/core-2.6/Regexp.html" target="_blank" rel="noopener">Ruby regexp syntax</a></li><li><code>only</code>和<code>except</code>允许指定一个Repo path来为forks过滤作业</li></ul><p>另外，<code>only</code>和<code>except</code>允许使用如下关键字:</p><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>branches</code></td><td>When a git reference of a pipeline is a branch</td></tr><tr><td><code>tags</code></td><td>When a git reference of a pipeline is a tag</td></tr><tr><td><code>api</code></td><td>When pipeline has been triggered by a second pipelines API (not triggers API)</td></tr><tr><td><code>external</code></td><td>When using CI services other than GitLab</td></tr><tr><td><code>pipelines</code></td><td>For multi-project triggers, created using the API with <code>CI_JOB_TOKEN</code></td></tr><tr><td><code>pushes</code></td><td>Pipeline is triggered by a <code>git push</code> by the user</td></tr><tr><td><code>schedules</code></td><td>For scheduled pipelines</td></tr><tr><td><code>triggers</code></td><td>For pipelines created using a trigger token</td></tr><tr><td><code>web</code></td><td>For pipelines created using Run pipeline button in GitLab UI (under your project’s Pipelines)</td></tr><tr><td><code>merge_requests</code></td><td>When a merge request is created or updated</td></tr></tbody></table><p><br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#job将仅针对以issue-开头的refs运行，而所有分支都将被跳过</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="comment"># use regexp</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/^issue-.*$/</span></span><br><span class="line">  <span class="comment"># use special keyword</span></span><br><span class="line"><span class="attr">  except:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">branches</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#job将仅对tagged refs</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="comment"># use special keywords</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tags</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">triggers</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">schedules</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#repo path可用于仅为parent repo而不是forks执行作业</span></span><br><span class="line"><span class="comment">#将为除了master的gitlab-org/gitlab-ce上的所有分支运行job</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">branches@gitlab-org/gitlab-ce</span></span><br><span class="line"><span class="attr">  except:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master@gitlab-org/gitlab-ce</span></span><br></pre></td></tr></table></figure><p><br></p><p>如果作业既没有<code>only</code>也没有<code>except</code>规则，则默认设置为<code>only: [&#39;branches&#39;, &#39;tags&#39;]</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#未配置</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">echo</span> <span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#它被转换为下面这个样子</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">echo</span> <span class="string">'test'</span></span><br><span class="line"><span class="attr">  only:</span> <span class="string">['branches',</span> <span class="string">'tags'</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="only和except-复杂"><a href="#only和except-复杂" class="headerlink" title="only和except(复杂)"></a><code>only</code>和<code>except</code>(复杂)</h4><blockquote><ul><li><code>refs</code> and <code>kubernetes</code> policies introduced in GitLab 10.0.</li><li><code>variables</code> policy introduced in GitLab 10.7.</li><li><code>changes</code> policy introduced in GitLab 11.4.</li></ul><p>这是一个alpha功能，它可能随时更改，恕不另行通知！</p></blockquote><p>GitLab支持简单和复杂的策略，因此可以使用数组和哈希配置方案。<br>提供了4个key:</p><ul><li>refs</li><li>variables</li><li>changes</li><li>kubernetes</li></ul><p>可以使用<code>AND</code>组合多可键。</p><p><br></p><ul><li><code>only: refs</code></li><li><code>except: refs</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="attr">    refs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">schedules</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><code>only: kubernetes</code></li><li><code>except: kubernetes</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kubernetes策略只接受active关键字</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="attr">    kubernetes:</span> <span class="string">active</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><code>only: variables</code></li><li><code>except: variables</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#variables关键字用于定义变量表达式</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">cap</span> <span class="string">staging</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="attr">    refs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">branches</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$RELEASE</span> <span class="string">==</span> <span class="string">"staging"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$STAGING</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><code>only: changes</code></li><li><code>except: changes</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否应该根据git push事件修改的文件来创建作业</span></span><br><span class="line"><span class="string">docker</span> <span class="attr">build:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">docker</span> <span class="string">build</span> <span class="bullet">-t</span> <span class="attr">my-image:$CI_COMMIT_REF_SLUG</span> <span class="string">.</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="attr">    changes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">Dockerfile</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker/scripts/*</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">dockerfiles/**/*</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">more_scripts/*.&#123;rb,py,sh&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个例子中，只要有上面几个文件或文件夹内的内容发生了commit push</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="tags-1"><a href="#tags-1" class="headerlink" title="tags"></a><code>tags</code></h4><p><code>tags</code>从允许运行此项目的所有Runner中选择特定Runner。在注册Runner期间，您可以指定Runner的tag。<br><code>tags</code>允许你使用分配了特定标签的Runner运行作业。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ruby</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#栗子</span></span><br><span class="line"><span class="string">windows</span> <span class="attr">job:</span></span><br><span class="line"><span class="attr">  stage:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">windows</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">%USERNAME%!</span></span><br><span class="line"></span><br><span class="line"><span class="string">osx</span> <span class="attr">job:</span></span><br><span class="line"><span class="attr">  stage:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">osx</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"Hello, $USER!"</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="allow-failure"><a href="#allow-failure" class="headerlink" title="allow_failure"></a><code>allow_failure</code></h4><p><code>allow_failure</code>允许作业失败而不会影响CI套件的其余部分。除手动作业外，默认值为<code>false</code>。<br>启用并且作业失败后，作业将在UI中显示橙色警告。但是，管道的逻辑流程将认为作业成功/通过，并且不会被阻止。假设所有其它作业都成功，作业的阶段及其管道将显示相同的橙色警告。但是，关联的提交将被标记为<code>passed</code>，而不会发出警告。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job1:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">execute_script_that_will_fail</span></span><br><span class="line"><span class="attr">  allow_failure:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">execute_script_that_will_succeed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job3:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">deploy_to_staging</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="when"><a href="#when" class="headerlink" title="when"></a><code>when</code></h4><p><code>when</code>用于实现在发生故障或尽管失败时运行的作业，它有以下值:</p><ul><li><code>on_success</code>： 只有当前几个阶段的所有工作都成功时才执行工作</li><li><code>on_failure</code>： 仅当前一阶段中的至少一个作业失败时才执行作业</li><li><code>always</code>： 无论先前阶段的工作状态如何，都可以执行工作</li><li><code>manual</code>： 手动执行作业</li><li><code>delayed</code>： 延迟执行作业(GitLab v11.4)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cleanup_build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cleanup</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">make</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cleanup_build_job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">cleanup_build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cleanup</span> <span class="string">build</span> <span class="string">when</span> <span class="string">failed</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">on_failure</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test_job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">make</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">make</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cleanup_job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">cleanup</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cleanup</span> <span class="string">after</span> <span class="string">jobs</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>手动操作是一种特殊类型的作业，不会自动执行，需要由用户明确启动。(例如，部署到生产环境)<br>手动操作可以是可选的也可以是阻止的。阻止手动操作将在定义此操作的阶段阻止管道的执行。当有人通过单击播放按钮执行阻止手动操作时，可以继续执行管道。默认情况下，手动操作是非阻止的。如果要阻止手动操作，则需要添加<code>allow_failure：false</code>。<br>手动操作被视为写入操作，因此当用户想要触发操作时，将使用受保护分支的权限。换句话说，为了触发分配给管道运行的分支的手动操作，用户需要具有合并到该分支的能力。</p><p><br></p><p><code>when: delayed</code>，延迟作业用于在一段时间后执行脚本。如果要避免作业立即进入暂挂(<code>pending</code>)状态，这非常有用。<br>你可以使用<code>start_in</code>键来设置时期，它的值是以秒(s)为单位的经过时间，或者你提供时间单位，它的值必须小于等于一小时。<br>当阶段中的作业延迟时，管道将不会进展，直到延迟作业完成。这意味着此关键字也可用于在不同阶段之间插入延迟。<br>延迟作业的计时器在前一阶段完成后立即开始。与其他类型的作业类似，除非前一阶段过去，否则延迟作业的计时器将无法启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#10 seconds</span><br><span class="line">#30 minutes</span><br><span class="line">#1 hour</span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">timed rollout 10%:</span><br><span class="line">  stage: deploy</span><br><span class="line">  script: echo &apos;Rolling out 10% ...&apos;</span><br><span class="line">  when: delayed</span><br><span class="line">  start_in: 30 minutes</span><br></pre></td></tr></table></figure><p>您可以通过单击<strong>Unschedule</strong>按钮来停止延迟作业的活动计时器。除非您手动执行作业，否则将来不会执行此作业。<br>您可以通过单击<strong>Play</strong>按钮立即开始延迟作业。 GitLab Runner很快就会选择你的工作并开始工作。</p><p><br><br><br></p><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h4><p><code>environment</code>用于定义作业部署到特定环境。如果指定了<code>environment</code>且该名称下没有环境，则将自动创建一个新环境。<br>它有如下几个值:</p><ul><li><code>name</code></li><li><code>url</code></li><li><code>on_stop</code></li><li><code>action</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常见的名字有qa, staging, production</span></span><br><span class="line"><span class="comment">#但你可以为你的工作流使用任何名称</span></span><br><span class="line"><span class="string">deploy</span> <span class="string">to</span> <span class="attr">production:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">git</span> <span class="string">push</span> <span class="string">production</span> <span class="attr">HEAD:master</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">production</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#url是一个可选值</span></span><br><span class="line"><span class="comment">#在设置时，它会在GitLab中的各个位置公开按钮，单击这些按钮会转到定义的URL</span></span><br><span class="line"><span class="comment">#如果作业成功完成，它将在合并请求和environments/deployments页面中创建指向url的按钮</span></span><br><span class="line"><span class="string">deploy</span> <span class="string">to</span> <span class="attr">production:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">git</span> <span class="string">push</span> <span class="string">production</span> <span class="attr">HEAD:master</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">production</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://prod.example.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#on_stop来实现closing(stopping)环境。它声明了一个不同的工作，以便关闭环境</span></span><br><span class="line"><span class="comment">#action与on_stop一起使用，在被调用以关闭环境的作业中定义</span></span><br><span class="line"><span class="attr">review_app:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">deploy-app</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">review</span></span><br><span class="line"><span class="attr">    on_stop:</span> <span class="string">stop_review_app</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stop_review_app:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">delete-app</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">review</span></span><br><span class="line"><span class="attr">    action:</span> <span class="string">stop</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Dynamic-environments"><a href="#Dynamic-environments" class="headerlink" title="Dynamic environments"></a>Dynamic environments</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">deploy</span> <span class="string">as</span> <span class="string">review</span> <span class="attr">app:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">review/$CI_COMMIT_REF_NAME</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://$CI_ENVIRONMENT_SLUG.example.com/</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a><code>cache</code></h4><blockquote><p><strong>Notes:</strong></p><ul><li>Introduced in GitLab Runner v0.7.0</li><li>cache can be set globally and per-job</li><li>From GitLab 9.0, caching is enabled and shared between pipelines and jobs by default<br>-From GitLab 9.2, caches are restored before artifacts</li></ul></blockquote><p><code>cache</code>用于指定应在作业之间缓存的文件和目录列表，您只能使用项目工作区内的路径。<br>如果在作业范围之外定义了<code>cache</code>，则表示它是全局设置的，并且所有作业都将使用该定义。</p><p>它的几个值:</p><ul><li><code>paths</code></li><li><code>key</code></li><li><code>untracked</code></li><li><code>policy</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#paths指令选择要缓存的文件或目录。支持通配符</span></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">binaries/*.apk</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">.config</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于cache是在作业之间共享的，如果对不同的作业使用不同的路径，则还应设置不同的cache:key，否则缓存内容可以被覆盖</span></span><br><span class="line"><span class="comment">#key指令允许您定义作业之间的缓存关联，允许为所有作业提供single cache，cache per-job，cache per-branch或适合您工作流的任何其他方式</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">"$CI_COMMIT_REF_SLUG"</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">binaries/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#untracked：true缓存Git存储库中未跟踪的所有文件</span></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    untracked:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">binaries/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#policy的默认行为是在执行开始时下载文件，并在结束时重新上载它们</span></span><br><span class="line"><span class="comment">#这允许将作业所做的任何更改保留以供将来运行，并称为pull-push缓存策略</span></span><br><span class="line"><span class="comment">#这有助于加快作业执行速度并减少缓存服务器上的负载，尤其是当您有大量并行执行缓存的作业时。</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">setup</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">prepare:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">setup</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">gems</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">vendor/bundle</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">bundle</span> <span class="string">install</span> <span class="bullet">--deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">gems</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">vendor/bundle</span></span><br><span class="line"><span class="attr">    policy:</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rspec</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="artifacts"><a href="#artifacts" class="headerlink" title="artifacts"></a><code>artifacts</code></h4><blockquote><p><strong>Notes:</strong></p><ul><li>Introduced in GitLab Runner v0.7.0 for non-Windows platforms.</li><li>Windows support was added in GitLab Runner v.1.0.0.</li><li>From GitLab 9.2, caches are restored before artifacts.</li><li>Not all executors are supported.</li><li>Job artifacts are only collected for successful jobs by default.</li></ul></blockquote><p><code>artifacts</code>用于指定成功后应附加到作业的文件和目录列表。作业成功完成后，工件将被发送到GitLab，并可在GitLab UI中下载。</p><p>有以下值:</p><ul><li><code>paths</code></li><li><code>name</code></li><li><code>untracked</code></li><li><code>when</code><ul><li><code>when: on_success</code></li><li><code>when: on_failure</code></li><li><code>when: always</code></li></ul></li><li><code>expire_in</code></li><li><code>reports</code><ul><li><code>reports:junit</code></li><li><code>reports:codequality</code></li><li><code>reports:sast</code></li><li><code>reports:dependency_scanning</code></li><li><code>reports:container_scanning</code></li><li><code>reports:dast</code></li><li><code>reports:license_management</code></li><li><code>reports:performance</code></li></ul></li></ul><p><br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#artifacts:paths</span></span><br><span class="line"><span class="comment">#要在不同作业之间传递工件，只能使用项目工作区内的路径</span></span><br><span class="line"><span class="attr">default-job:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mvn</span> <span class="string">test</span> <span class="bullet">-U</span></span><br><span class="line"><span class="attr">  except:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tags</span></span><br><span class="line"></span><br><span class="line"><span class="attr">release-job:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mvn</span> <span class="string">package</span> <span class="bullet">-U</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">target/*.war</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tags</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#artifacts:name</span></span><br><span class="line"><span class="comment">#定义创建的工件归档的名称</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"$CI_JOB_NAME"</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">binaries/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#artifacts:untracked</span></span><br><span class="line"><span class="comment">#用于将所有Git未跟踪文件添加为工件</span></span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line"><span class="attr">  untracked:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">binaries/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#artifacts:when</span></span><br><span class="line"><span class="comment">#用于在作业失败时上传工件</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">on_failure</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#artifacts:expire_in</span></span><br><span class="line"><span class="comment">#允许您指定工件在到期之前应该存在多长时间并因此被删除，从它们上载和存储在GitLab上的时间开始计算</span></span><br><span class="line"><span class="comment">#如果未定义到期时间，则默认为实例范围设置(默认30天)</span></span><br><span class="line"><span class="comment">#到期后，每小时定时任务删除工件</span></span><br><span class="line"><span class="comment">#默认单位是秒，支持提供时间单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#‘42’</span></span><br><span class="line"><span class="comment">#‘3 mins 4 sec’</span></span><br><span class="line"><span class="comment">#‘2 hrs 20 min’</span></span><br><span class="line"><span class="comment">#‘2h20min’</span></span><br><span class="line"><span class="comment">#‘6 mos 1 day’</span></span><br><span class="line"><span class="comment">#‘47 yrs 6 mos and 4d’</span></span><br><span class="line"><span class="comment">#‘3 weeks and 2 days’</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    expire_in:</span> <span class="number">1</span> <span class="string">week</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#artifacts:reports</span></span><br><span class="line"><span class="comment">#用于从工作中收集测试报告并在GitLab UI中公开它们</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a><code>dependencies</code></h4><p>此功能应与<code>artifacts</code>结合使用，并允许您定义要在不同作业之间传递的工件<br>要使用此功能，请在作业上下文中定义<code>dependencies</code>，并传递应从中下载工件的所有先前作业的列表。</p><p>如果作为依赖项设置的作业的工件已过期或已擦除，则相关作业将失败。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当执行test:osx时，将在构建的上下文中下载并提取build:osx中的工件</span></span><br><span class="line"><span class="comment">#test:linux也是如此，要从build: linux拉取工件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span><span class="attr">osx:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="attr">build:osx</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">binaries/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span><span class="attr">linux:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="attr">build:linux</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">binaries/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span><span class="attr">osx:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="attr">test:osx</span></span><br><span class="line"><span class="attr">  dependencies:</span></span><br><span class="line"><span class="attr">    - build:</span><span class="string">osx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span><span class="attr">linux:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="attr">test:linux</span></span><br><span class="line"><span class="attr">  dependencies:</span></span><br><span class="line"><span class="attr">    - build:</span><span class="string">linux</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">make</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="coverage"><a href="#coverage" class="headerlink" title="coverage"></a><code>coverage</code></h4><p>允许您配置从作业输出中提取代码覆盖率的方式，正则表达式是此处唯一有效的值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job1:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rspec</span></span><br><span class="line"><span class="attr">  coverage:</span> <span class="string">'/Code coverage: \d+\.\d+/'</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="retry"><a href="#retry" class="headerlink" title="retry"></a><code>retry</code></h4><p>允许您配置在发生故障时重试作业的次数。如果重试作业成功完成，则不会再进行剩余的重试。它的值为<code>2&gt;=retry&gt;=0</code>的正整数。</p><p>要更好的控制retry，可使用以下key:</p><ul><li><code>max</code>: 最大重试次数</li><li><code>when</code>: 败的情况下重试<ul><li><code>always</code>: 重试任何失败 (default)</li><li><code>unknown_failure</code>: 失败原因未知时重试</li><li><code>script_failure</code>: 脚本失败时重试</li><li><code>api_failure</code>: API失败重试</li><li><code>stuck_or_timeout_failure</code>: 当作业卡住或超时时重试<ul><li><code>runner_system_failure</code>: 如果Runner故障，重试</li></ul></li><li><code>missing_dependency_failure</code>: 如果缺少依赖项，重试</li><li><code>runner_unsupported</code>: 如果Runner不受支持，重试</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rspec</span></span><br><span class="line"><span class="attr">  retry:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rspec</span></span><br><span class="line"><span class="attr">  retry:</span></span><br><span class="line"><span class="attr">    max:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    when:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">runner_system_failure</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">stuck_or_timeout_failure</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a><code>parallel</code></h4><p>允许您配置并行运行的作业实例数，它的值<code>50&gt;=parallel&gt;=2</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单栗子</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">rspec</span></span><br><span class="line"><span class="attr">  parallel:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="include"><a href="#include" class="headerlink" title="include"></a><code>include</code></h4><blockquote><p>Introduced in GitLab Premium 10.5</p></blockquote><p>使用<code>include</code>，可以允许包含外部YAML文件(本地Repo或远程URL)，但也需要为<code>.yml</code>和<code>.yaml</code>扩展格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Content of .gitlab-ci.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">'https://gitlab.com/awesome-project/raw/master/.before-script-template.yml'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rspec</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="variables"><a href="#variables" class="headerlink" title="variables"></a><code>variables</code></h4><blockquote><p>整数(浮点数)对于变量是有效的，浮点数无效。</p></blockquote><p>GitLab CI/CD允许你在<code>.gitlab-ci.yml</code>中定义变量，然后在作业环境中传递。变量可以是全局的，也可以是基于每个作业的。当在作业级别定义了与全局或项目相同名称的变量时，则作业级别的变量会覆盖它们。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">  DATABASE_URL:</span> <span class="string">"postgres://postgres@postgres/my_database"</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="特殊YAML功能"><a href="#特殊YAML功能" class="headerlink" title="特殊YAML功能"></a>特殊YAML功能</h4><p>可使用特殊的YAML功能，如锚点(anchors<code>&amp;</code>)、别名(aliases<code>*</code>)、map merging (<code>&lt;&lt;</code>)等，这大大降低了<code>.gitlab-ci.yml</code>的复杂性。</p><p><br></p><h5 id="Hidden-keys-jobs"><a href="#Hidden-keys-jobs" class="headerlink" title="Hidden keys (jobs)"></a>Hidden keys (jobs)</h5><p>如果要暂时禁用作业，而不是注释掉定义作业的所有行，你可是在作业名前加一个点(<code>.</code>)，这样GitLab CI将会忽略它。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hidden_job:</span></span><br><span class="line"><span class="comment">#  script:</span></span><br><span class="line"><span class="comment">#    - run test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">.hidden_job:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">run</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="Anchors"><a href="#Anchors" class="headerlink" title="Anchors"></a>Anchors</h5><p>YAML的锚点功能此处就不赘述了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用锚点和map merging</span></span><br><span class="line"><span class="string">.job_template:</span> <span class="meta">&amp;job_definition</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="string">project</span></span><br><span class="line"></span><br><span class="line"><span class="string">.postgres_services:</span></span><br><span class="line"><span class="attr">  services:</span> <span class="meta">&amp;postgres_definition</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ruby</span></span><br><span class="line"></span><br><span class="line"><span class="string">.mysql_services:</span></span><br><span class="line"><span class="attr">  services:</span> <span class="meta">&amp;mysql_definition</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ruby</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span><span class="attr">postgres:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*job_definition</span></span><br><span class="line"><span class="attr">  services:</span> <span class="meta">*postgres_definition</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span><span class="attr">mysql:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*job_definition</span></span><br><span class="line"><span class="attr">  services:</span> <span class="meta">*mysql_definition</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展应该为这个样子</span></span><br><span class="line"><span class="string">.job_template:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="string">project</span></span><br><span class="line"></span><br><span class="line"><span class="string">.postgres_services:</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ruby</span></span><br><span class="line"></span><br><span class="line"><span class="string">.mysql_services:</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ruby</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span><span class="attr">postgres:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="string">project</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ruby</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span><span class="attr">mysql:</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="string">project</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ruby</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="GitLab-CI-CD栗子"><a href="#GitLab-CI-CD栗子" class="headerlink" title="GitLab CI/CD栗子"></a>GitLab CI/CD栗子</h3><p>各种语言、框架 、操作系统 CI/CD栗子: <a href="https://docs.gitlab.com/ce/ci/examples/README.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/ci/examples/README.html</a></p><ul><li>PHP</li><li>Ruby</li><li>Python</li><li>Java</li><li>Scala</li><li>Clojure</li><li>Elixir</li><li>IOS and MacOS</li><li>Android</li><li>Debian</li><li>Maven</li></ul><p><br></p><p><br><br><br></p><hr><p><br><br><br></p><h2 id="Git配置项"><a href="#Git配置项" class="headerlink" title="Git配置项"></a>Git配置项</h2><p>Git configuration options</p><p><br></p><h3 id="自定Git-hooks"><a href="#自定Git-hooks" class="headerlink" title="自定Git hooks"></a>自定Git hooks</h3><p>Custom Git hooks: Custom Git hooks (on the filesystem) for when webhooks aren’t enough</p><blockquote><p><strong>注意</strong>：必须在GitLab服务器的文件系统上配置自定义Git hooks。只有GitLab服务器管理员才能完成这些任务。</p></blockquote><p>Git本身支持在不同操作上执行的hooks。服务器端git hooks的示例包括预接收，后接收和更新。从gitlab-shell 2.2.0版（需要GitLab 7.5+）开始，GitLab管理员可以为任何GitLab项目添加自定义git hooks。</p><p><br><br><br></p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>通常，Githooks放在存储库或项目的hooks目录中。 GitLab从每个项目的hooks目录创建一个符号链接到<code>gitlab-shell</code> hooks目录，以便于<code>gitlab-shell</code>升级之间的维护。因此，自定义挂钩的实现方式略有不同。但是，一旦创建了钩子，行为就完全相同了。</p><p>请按照以下步骤设置自定义hooks：</p><ul><li>选择一个需要自定义Git hook的项目</li><li>在GitLab Server，导航到项目的存储库目录(如: <code>/var/opt/gitlab/git-data/repositories/user/xx.git</code>)</li><li>此位置创建名为<code>custom_hooks</code>的新目录</li><li>在<code>custom_hooks</code>目录中，创建一个名称与hook类型匹配的文件(如: <code>pre-hook</code>)</li><li>修改hook文件属主为git，添加可执行权限</li><li>编写代码以使Git hook函数按预期方式运行，可以是任何语言。确保顶部的<code>shebang</code>(<code>#!/bin/python3</code>)正确反映语言类型</li></ul><p>假设正确实现了hook代码，hook将适当地触发。</p><p><br><br><br></p><h4 id="链式hook"><a href="#链式hook" class="headerlink" title="链式hook"></a>链式hook</h4><p>Chained hooks support</p><blockquote><p>在GitLab Shell 4.1.0和GitLab 8.15中引入</p></blockquote><p>hook也可以放在<code>hook/&lt;hook_name&gt;.d</code>（全局）或<code>custom_hooks/&lt;hook_name&gt;.d</code>（每个项目）目录中，支持钩子的链式执行。<br>注意：<code>&lt;hook_name&gt;.d</code>需要<code>pre-receive.d</code>，<code>post-receive.d</code>或<code>update.d</code>才能正常工作。任何其他名称都将被忽略</p><p>要查看全局自定义hook（<code>hook/&lt;hook_name.d&gt;</code>）中的不同目录，请在<code>gitlab-shell config</code>中设置<code>custom_hooks_dir</code>。对于Omnibus安装，可在<code>gitlab.rb</code>中设置。</p><p>按以下顺序搜索并执行hook：</p><ul><li><code>gitlab-shell/hooks</code> directory as known to Gitaly</li><li><code>&lt;project&gt;.git/hooks/&lt;hook_name&gt;</code> - executed by <code>git</code> itself, this is <code>gitlab-shell/hooks/&lt;hook_name&gt;</code></li><li><code>&lt;project&gt;.git/custom_hooks/&lt;hook_name&gt;</code> - per project hook</li><li><code>&lt;project&gt;.git/custom_hooks/&lt;hook_name&gt;.d/*</code> - per project hooks</li><li><code>&lt;project&gt;.git/hooks/&lt;hook_name&gt;.d/* OR &lt;custom_hooks_dir&gt;/&lt;hook_name.d&gt;/*</code> - global hooks: all executable files</li></ul><p><br><br><br></p><h4 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h4><p>Custom error messages</p><blockquote><p>在GitLab 8.10中引入</p></blockquote><p>如果commit被拒绝或在Git hook检查期间发生错误，则钩子的STDERR或STDOUT消息将出现在GitLab的UI中，STDERR优先于STDOUT。</p><p><br><br><br><br><br></p><h3 id="Git-LFS"><a href="#Git-LFS" class="headerlink" title="Git LFS"></a>Git LFS</h3><ul><li>Git LFS: <a href="https://docs.gitlab.com/ce/workflow/lfs/manage_large_binaries_with_git_lfs.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/workflow/lfs/manage_large_binaries_with_git_lfs.html</a></li><li>Git LFS config: <a href="https://docs.gitlab.com/ce/workflow/lfs/lfs_administration.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/workflow/lfs/lfs_administration.html</a></li></ul><p><br></p><p>管理音频，视频和图形文件等大文件一直是Git的缺点之一。一般建议是不要让Git存储库大于1GB以保持性能。</p><p><br><br><br><br><br></p><h3 id="Housekeeping"><a href="#Housekeeping" class="headerlink" title="Housekeeping"></a>Housekeeping</h3><p>Housekeeping(管家): Keep your Git repositories tidy and fast</p><blockquote><p>在GitLab 8.4中引入</p></blockquote><p><br></p><h4 id="Automatic-housekeeping"><a href="#Automatic-housekeeping" class="headerlink" title="Automatic housekeeping"></a>Automatic housekeeping</h4><p>在Git push后，GitLab会自动在存储库上运行<code>git gc</code>和<code>git repack</code>命令。如果需要，您可以更改这种情况发生的频率，或者将其关闭。在Admin ares -&gt; Setting</p><p><br><br><br></p><h4 id="Manual-housekeeping"><a href="#Manual-housekeeping" class="headerlink" title="Manual housekeeping"></a>Manual housekeeping</h4><p>housekeeping功能将运行<code>gc</code>还是<code>repack</code>，取决于你的设置。</p><p><br><br><br><br><br></p><h3 id="Git协议"><a href="#Git协议" class="headerlink" title="Git协议"></a>Git协议</h3><p>Configuring Git Protocol v2: Git protocol version 2 support</p><blockquote><p>在GitLab 11.4中引入</p></blockquote><p>Git第二版协议以多种方式改进了第一版协议，并且在GitLab中默认为HTTP请求启用。要为SSH启用，管理员需要进一步配置。</p><p><br></p><p><strong>Requirements：</strong></p><ul><li>客户端，git v2.18.0+</li><li>服务端，如果要配置SSH，需要设置sshd以接受<code>GIT_PROTOCOL</code>环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#/etc/ssh/sshd_config</span><br><span class="line">AcceptEnv GIT_PROTOCOL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo service ssh restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置新协议</span><br><span class="line"></span><br><span class="line">#局部</span><br><span class="line">git -c protocol.version=2</span><br><span class="line"></span><br><span class="line">#全局</span><br><span class="line">git config --global protocol.version 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#验证</span><br><span class="line"></span><br><span class="line">#HTTP</span><br><span class="line"></span><br><span class="line">#C端</span><br><span class="line">GIT_TRACE_CURL=1 git -c protocol.version=2 ls-remote https://your-gitlab-instance.com/group/repo.git 2&gt;&amp;1 | grep Git-Protocol</span><br><span class="line"></span><br><span class="line">#S端</span><br><span class="line">GIT_TRACE_PACKET=1 git -c protocol.version=2 ls-remote https://your-gitlab-instance.com/group/repo.git 2&gt;&amp;1 | head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#SSH</span><br><span class="line"></span><br><span class="line">#C端</span><br><span class="line">GIT_SSH_COMMAND=&quot;ssh -v&quot; git -c protocol.version=2 ls-remote ssh://your-gitlab-instance.com:group/repo.git 2&gt;&amp;1 |grep GIT_PROTOCOL</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>Monitoring GitLab</p><p><br><br><br></p><hr><p><br><br><br></p><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><p>Troubleshooting</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h1><p><strong>Runner</strong>是<code>GitLab CI</code>的客户端。 作为GitLab持续集成和持续部署(CI/CD)的一部分，主要用来配置和运行构建脚本以及其他的任务。<br>GitLab Runner 是一个开源项目， 它用来运行你定制的任务（jobs）并把结果返回给 GitLab。 GitLab Runner配合GitLab CI（GitLab 内置的持续集成服务）协调完成任务。</p><p><br></p><p><strong>要求(Requirements)</strong></p><p>GitLab Runner是用Go编写的，可以作为单个二进制文件运行，不需要语言特定的要求。它可在多个操作系统上运行，只要你在此平台上编译成二进制文件。支持Docker v1.5+。</p><p><br></p><p><strong>特点(Feature)</strong></p><ul><li>Allows to run:<ul><li>multiple jobs concurrently(同时)</li><li>use multiple tokens with multiple server (even per-project)</li><li>limit number of concurrent(并发) jobs per-token</li></ul></li><li>Jobs can be run:<ul><li>locally</li><li>using Docker containers</li><li>using Docker containers and executing job over SSH</li><li>using Docker containers with autoscaling on different clouds and virtualization hypervisors</li><li>connecting to remote SSH server</li></ul></li><li>Is written in Go and distributed as single binary without any other requirements</li><li>Supports Bash, Windows Batch and Windows PowerShell</li><li>Works on GNU/Linux, OS X and Windows (pretty much anywhere you can run Docker)</li><li>Allows to customize the job running environment</li><li>Automatic configuration reload without restart</li><li>Easy to use setup with support for Docker, Docker-SSH, Parallels or SSH running environments</li><li>Enables caching of Docker containers</li><li>Easy installation as a service for GNU/Linux, OSX and Windows</li><li>Embedded Prometheus metrics HTTP server</li></ul><p><br></p><p><strong>兼容性图表(Compatibility chart)</strong></p><p>GitLab Runner的版本应该与GitLab同步。如果存在版本差异，则功能可能无法使用或无法正常工作。</p><p><br><br><br><br><br></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>Install GitLab Runner</p><ul><li>Install using GitLab’s repository for Debian/Ubuntu/CentOS/RedHat (preferred)</li><li>Install on GNU/Linux manually (advanced)</li><li>Install on macOS</li><li>Install on Windows</li><li>Install as a Docker service</li><li>Install in autoscaling mode using Docker machine</li><li>Install on FreeBSD</li><li>Install on Kubernetes</li><li>Install the nightly binary manually (development)</li></ul><p><br></p><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>Install GitLab Runner using the official GitLab repositories</p><p><strong>安装：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加镜像库</span></span><br><span class="line"><span class="comment"># For Debian/Ubuntu/Mint</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># For RHEL/CentOS/Fedora</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装最新版</span></span><br><span class="line"><span class="comment"># For Debian/Ubuntu/Mint</span></span><br><span class="line">sudo apt-get install gitlab-runner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># For RHEL/CentOS/Fedora</span></span><br><span class="line">sudo yum install gitlab-runner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装制定版本</span></span><br><span class="line"><span class="comment"># for DEB based systems</span></span><br><span class="line">apt-cache madison gitlab-runner</span><br><span class="line">sudo apt-get install gitlab-runner=10.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for RPM based systems</span></span><br><span class="line">yum list gitlab-runner --showduplicates | sort -r</span><br><span class="line">sudo yum install gitlab-runner-10.0.0-1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册Runner</span></span><br><span class="line"><span class="comment">#注册Runner参考后面</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>更新：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Debian/Ubuntu/Mint</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-runner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># For RHEL/CentOS/Fedora</span></span><br><span class="line">sudo yum update</span><br><span class="line">sudo yum install gitlab-runner</span><br></pre></td></tr></table></figure><p><br></p><p><strong>手动下载包安装</strong></p><p>下载地址: <a href="https://packages.gitlab.com/runner/gitlab-runner" target="_blank" rel="noopener">https://packages.gitlab.com/runner/gitlab-runner</a></p><p><br></p><p><strong>升级到GitLab Runner 10</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移除旧库</span></span><br><span class="line"><span class="comment"># For Debian/Ubuntu/Mint</span></span><br><span class="line">sudo rm /etc/apt/sources.list.d/runner_gitlab-ci-multi-runner.list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># For RHEL/CentOS/Fedora</span></span><br><span class="line">sudo rm /etc/yum.repos.d/runner_gitlab-ci-multi-runner.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装新库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#再安装</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载二进制包</span></span><br><span class="line"><span class="comment"># Linux x86-64</span></span><br><span class="line">sudo wget -O /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux x86</span></span><br><span class="line">sudo wget -O /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-386</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux arm</span></span><br><span class="line">sudo wget -O /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-arm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加可执行权限</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/gitlab-runner</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果想使用Docker</span></span><br><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a GitLab CI user:</span></span><br><span class="line">sudo useradd --comment <span class="string">'GitLab Runner'</span> --create-home gitlab-runner --shell /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Install and run as service:</span></span><br><span class="line">sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br><span class="line">sudo gitlab-runner start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Register the Runner</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新的话重新下载二进制包安装</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#挂载运行</span><br><span class="line"> docker run -d --name gitlab-runner --restart always \</span><br><span class="line">   -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">   -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">   gitlab/gitlab-runner:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Register the Runner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新的话，停止旧容器，拉取新镜像</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#GitLab Runner Logs</span><br><span class="line">#可以把Runner Logs目录挂载到宿主机，也可是使用docker 读取</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><p><br><br><br><br><br></p><h3 id="Autoscale"><a href="#Autoscale" class="headerlink" title="Autoscale"></a>Autoscale</h3><p><br><br><br><br><br></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>Register GitLab Runner</p><p>安装GitLab Runner后，需要将其注册到GitLab。注册Runner是将Runner与GitLab实例绑定的过程。</p><p><br></p><p><strong>要求(Requirements)</strong>，在注册Runner之前，你需要：</p><ul><li>将其安装在与安装GitLab位置不同的Server上</li><li>通过GitLab的界面获取共享或特定Runner的Token</li></ul><p><br></p><p><strong>注册环境：</strong></p><ul><li>GNU/Linux</li><li>macOS</li><li>Windows</li><li>FreeBSD</li><li>Docker</li><li>…</li></ul><p><br><br><br></p><h3 id="GNU-Linux"><a href="#GNU-Linux" class="headerlink" title="GNU/Linux"></a>GNU/Linux</h3><p>在GNU / Linux下注册Runner：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#URL和Token在GitLab实例的runner里面去看</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行命令</span></span><br><span class="line">sudo gitlab-runner register</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输入GitLab 实例 URL</span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">https://gitlab.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输入获得的token</span></span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner</span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输入Runner的描述，之后可在Web UI下更改</span></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner</span><br><span class="line">[hostame] my-runner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输入与Runner相关联的tag，之后可在Web UI下更改</span></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">my-tag,another-tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输入Runner executor</span></span><br><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果您选择Docker作为执行程序，则会要求您未在.gitlab-ci.yml中定义的用于项目的默认image</span></span><br><span class="line">Please enter the Docker image (eg. ruby:2.1):</span><br><span class="line">alpine:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动runner</span></span><br><span class="line">sudo systemctl start gitlab-runner</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="单行注册命令"><a href="#单行注册命令" class="headerlink" title="单行注册命令"></a>单行注册命令</h3><p>One-line registration command</p><p>如果要使用非交互模式注册Runner，可以使用register子命令或使用其等效的环境变量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看帮助</span></span><br><span class="line">gitlab-runner register -h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册</span></span><br><span class="line">sudo gitlab-runner register \</span><br><span class="line">  --non-interactive \</span><br><span class="line">  --url <span class="string">"https://gitlab.com/"</span> \</span><br><span class="line">  --registration-token <span class="string">"PROJECT_REGISTRATION_TOKEN"</span> \</span><br><span class="line">  --executor <span class="string">"docker"</span> \</span><br><span class="line">  --docker-image alpine:3 \</span><br><span class="line">  --description <span class="string">"docker-runner"</span> \</span><br><span class="line">  --tag-list <span class="string">"docker,aws"</span> \</span><br><span class="line">  --run-untagged \</span><br><span class="line">  --locked=<span class="string">"false"</span> \</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p>Executors</p><p>GitLab Runner实现了许多执行程序，可用于在不同的场景中运行构建。</p><p>执行器：</p><ul><li>Shell</li><li>Docker</li><li>Docker Machine and Docker Machine SSH (autoscaling)</li><li>Parallels</li><li>VirtualBox</li><li>SSH</li><li>Kubernetes</li></ul><p><br><br><br></p><h3 id="选择执行器"><a href="#选择执行器" class="headerlink" title="选择执行器"></a>选择执行器</h3><p>Selecting the executor</p><p>GitLab Runner实现了许多执行程序，可用于在不同的场景中运行构建。如果您不确定要选择什么，请阅读“我不确定”部分。访问兼容性图表，了解每个执行程序支持哪些功能，哪些功能不支持。</p><p>执行器支持不同平台和方法的项目构建：</p><table><thead><tr><th>Executor</th><th>SSH</th><th>Shell</th><th>VirtualBox</th><th>Parallels</th><th>Docker</th><th>Kubernetes</th></tr></thead><tbody><tr><td>Clean build environment for every build</td><td>✗</td><td>✗</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Migrate runner machine</td><td>✗</td><td>✗</td><td>partial</td><td>partial</td><td>✓</td><td>✓</td></tr><tr><td>Zero-configuration support for concurrent builds</td><td>✗</td><td>✗ (1)</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Complicated build environments</td><td>✗</td><td>✗ (2)</td><td>✓ (3)</td><td>✓ (3)</td><td>✓</td><td>✓</td></tr><tr><td>Debugging build problems</td><td>easy</td><td>easy</td><td>hard</td><td>hard</td><td>medium</td><td>medium</td></tr></tbody></table><p><br><br><br></p><h4 id="不清楚该选择哪个执行器"><a href="#不清楚该选择哪个执行器" class="headerlink" title="不清楚该选择哪个执行器"></a>不清楚该选择哪个执行器</h4><p>I am not sure</p><ul><li><p><strong>Shell</strong><br>Shell是最简单的配置执行器。需要在安装Runner的同一台机器上手动安装构建的所有必需依赖项。</p></li><li><p><strong>Virtual Machine</strong><br>此类执行器允许您使用已创建的虚拟机，该虚拟机已克隆并用于运行构建。我们提供两种完整的系统虚拟化选项：VirtualBox和Parallels。如果您希望在不同的操作系统上运行构建，它们可以证明是有用的，因为它允许在Windows，Linux，OSX或FreeBSD上创建虚拟机，然后GitLab Runner连接到虚拟机并在其上运行构建。它的使用对于降低基础设施成本也很有用。</p></li><li><p><strong>Docker</strong><br>一个很好的选择是使用Docker，因为它允许一个干净的构建环境，并且易于依赖管理（构建项目的所有依赖项都可以放在Docker镜像中）。 Docker执行程序允许您轻松创建具有依赖服务的构建环境，如MySQL</p></li><li><p><strong>Kubernetes</strong><br>Kubernetes执行程序允许您使用现有的Kubernetes集群进行构建。执行程序将调用Kubernetes集群API并为每个GitLab CI作业创建一个新的Pod（带有构建容器和服务容器）。</p></li><li><p><strong>SSH</strong><br>添加SSH执行程序是为了完整性，但它是所有执行程序中支持最少的。它使GitLab Runner连接到外部服务器并在那里运行构建。(通常建议使用其它案例)</p></li></ul><p><br><br><br></p><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>Compatibility</p><p>不同执行器支持的功能：</p><table><thead><tr><th>Executor</th><th>SSH</th><th>Shell</th><th>VirtualBox</th><th>Parallels</th><th>Docker</th><th>Kubernetes</th></tr></thead><tbody><tr><td>Secure Variables</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>GitLab Runner Exec command</td><td>✗</td><td>✓</td><td>✗</td><td>✗</td><td>✓</td><td>✓</td></tr><tr><td>gitlab-ci.yml: image</td><td>✗</td><td>✗</td><td>✗</td><td>✗</td><td>✓</td><td>✓</td></tr><tr><td>gitlab-ci.yml: services</td><td>✗</td><td>✗</td><td>✗</td><td>✗</td><td>✓</td><td>✓</td></tr><tr><td>gitlab-ci.yml: cache</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>gitlab-ci.yml: artifacts</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Absolute paths: caching, artifacts</td><td>✗</td><td>✗</td><td>✗</td><td>✗</td><td>✗</td><td>✓</td></tr><tr><td>Passing artifacts between stages</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Use GitLab Container Registry private images</td><td>n/a</td><td>n/a</td><td>n/a</td><td>n/a</td><td>✓</td><td>✓</td></tr><tr><td>Interactive Web terminal</td><td>✗</td><td>✓ (bash)</td><td>✗</td><td>✗</td><td>✓</td><td>✓</td></tr></tbody></table><p><br></p><p>不同shell支持的系统：</p><table><thead><tr><th>Shells</th><th>Bash</th><th>Windows Batch</th><th>PowerShell</th></tr></thead><tbody><tr><td>Windows</td><td>✓</td><td>✓ (default)</td><td>✓</td></tr><tr><td>Linux</td><td>✓ (default)</td><td>✗</td><td>✗</td></tr><tr><td>OSX</td><td>✓ (default)</td><td>✗</td><td>✗</td></tr><tr><td>FreeBSD</td><td>✓ (default)</td><td>✗</td><td>✗</td></tr></tbody></table><p><br></p><p>不同shell支持的交互式Web终端：</p><table><thead><tr><th>Shells</th><th>Bash</th><th>Windows Batch</th><th>PowerShell</th></tr></thead><tbody><tr><td>Windows</td><td>✗</td><td>✗</td><td>✗</td></tr><tr><td>Linux</td><td>✓</td><td>✗</td><td>✗</td></tr><tr><td>OSX</td><td>✓</td><td>✗</td><td>✗</td></tr><tr><td>FreeBSD</td><td>✓</td><td>✗</td><td>✗</td></tr></tbody></table><p><br><br><br><br><br></p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>Shell executor 是一个简单的执行程序，它允许您在运行Runner的机器上本地执行构建。它支持可以安装Runner的所有系统。这意味着它可使用Bash和PowerShell。</p><p>在Bash中，在<code>gitlab-runner command</code>命令之后加上<code>--user</code>，表示使用非特权用户运行。</p><p><br></p><p>源项目被切换到: <code>&lt;working-directory&gt;/builds/&lt;short-token&gt;/&lt;concurrent-id&gt;/&lt;namespace&gt;/&lt;project-name&gt;</code><br>项目的缓存放于: <code>&lt;working-directory&gt;/cache/&lt;namespace&gt;/&lt;project-name&gt;</code></p><p>这些都在GitLab-runner的配置: <code>/etc/gitlab-runner/atom.config.toml</code></p><p><br></p><p><strong>以非特权用户运行(Running as unprivileged user)</strong></p><p>在Linux上(rpm/dpk)，安装程序将尝试使用<code>gitlab_ci_multi_runner</code>用户(如果找到)；如果找不到，它将创建一个<code>gitlab-runner</code>用户并改为使用它。<br>然后，所有shell build都将使用<code>gitlab-runner</code>或<code>gitlab_ci_multi_runner</code>用户执行。</p><p><br></p><p>在某些场景中，您的构建可能需要访问某些特权资源，例如Docker Engine或VirtualBox。在这种情况下，您需要将gitlab-runner用户添加到相应的组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG docker gitlab-runner</span><br><span class="line">usermod -aG vboxusers gitlab-runner</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="Docker-1"><a href="#Docker-1" class="headerlink" title="Docker"></a>Docker</h3><p>The Docker executor</p><p>文档: <a href="https://docs.gitlab.com/runner/executors/docker.html" target="_blank" rel="noopener">https://docs.gitlab.com/runner/executors/docker.html</a></p><p><br><br><br><br><br></p><h3 id="K8s"><a href="#K8s" class="headerlink" title="K8s"></a>K8s</h3><p>The Kubernetes executor</p><p>文档: <a href="https://docs.gitlab.com/runner/executors/kubernetes.html" target="_blank" rel="noopener">https://docs.gitlab.com/runner/executors/kubernetes.html</a></p><p><br><br><br><br><br><br><br></p><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><p>Advanced Configuration</p><p><br></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Advanced configuration options Learn how to use the TOML configuration file that GitLab Runner uses.</p><p>GitLab Runner配置使用TOML格式，配置文件可能在如下位置:</p><ul><li><code>/etc/gitlab-runner/config.toml</code></li><li><code>~/.gitlab-runner/config.toml</code></li><li><code>./config.toml</code></li></ul><p><br></p><h4 id="global部分"><a href="#global部分" class="headerlink" title="global部分"></a>global部分</h4><p>这定义了GitLab Runner的全局配置。</p><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>concurrent</code></td><td>限制全局可以同时运行多少个作业，0并不意味着无限制</td></tr><tr><td><code>log_level</code></td><td>日志级别(debug, info, warn, error, fatal, panic)</td></tr><tr><td><code>log_format</code></td><td>日志格式(runner, text, json)</td></tr><tr><td><code>check_interval</code></td><td>定义新作业检查之间的间隔长度(s)。默认值为3，如果设置为0或更低，将使用默认值</td></tr><tr><td><code>sentry_dsn</code></td><td>启用追踪所有系统级错误</td></tr><tr><td><code>listen_address</code></td><td><code>host:port</code>，Prometheus应该在其上进行监听</td></tr></tbody></table><p><br></p><p><strong><code>check_interval</code> 如何工作:</strong></p><p>如果<code>config.toml</code>配置文件中有多个<code>[[runner]]</code>(称之为worker)，那么GitLab请求之间的间隔比人们预期的要频繁。GitLab Runner包含一个循环，该循环不断地为worker针对其配置的GitLab实例调度请求。</p><p><br><br><br></p><h4 id="session-server-部分"><a href="#session-server-部分" class="headerlink" title="[session_server]部分"></a><code>[session_server]</code>部分</h4><p><code>[session_server]</code>是系统运行程序级别的配置，因此应该在根级别指定，而不是每个执行器指定，即它应该在<code>[[runners]]</code>部分之外。session server允许用户与Runner负责的作业进行交互。<br>如果想要禁用<code>[session_server]</code>部分，删掉它即可。</p><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>listen_address</code></td><td>用于session server的内部URL</td></tr><tr><td><code>advertise_address</code></td><td>向GitLab公开的用于访问Runner的URL</td></tr><tr><td><code>session_timeout</code></td><td>作业完成后，会话可以在多长时间内保持活动状态(默认1800s)</td></tr></tbody></table><p><br><br><br></p><h4 id="runners-部分"><a href="#runners-部分" class="headerlink" title="[[runners]]部分"></a><code>[[runners]]</code>部分</h4><p>如下定义了Runner entry:</p><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>name</code></td><td>Runner的描述</td></tr><tr><td><code>url</code></td><td>GitLab URL</td></tr><tr><td><code>token</code></td><td>Runner指定的token</td></tr><tr><td><code>tls-ca-file</code></td><td>HTTPS的CA证书</td></tr><tr><td><code>tls-cert-file</code></td><td>HTTP的S端证书</td></tr><tr><td><code>tls-key-file</code></td><td>HTTPS的S端Key</td></tr><tr><td><code>limit</code></td><td>限制此token可同时处理的作业数，0为不限制</td></tr><tr><td><code>executor</code></td><td>执行器</td></tr><tr><td><code>shell</code></td><td>用于生成脚本的shell的名称</td></tr><tr><td><code>builds_dir</code></td><td>构建将存储在所选执行器的上下文中的目录(local, docker, ssh)</td></tr><tr><td><code>cache_dir</code></td><td>构建缓存将存储在所选执行器的上下文中的目录(local, docker, ssh)</td></tr><tr><td><code>environment</code></td><td>附加或覆盖环境变量</td></tr><tr><td><code>request_concurrency</code></td><td>限制GitLab新作业的并发请求数（默认值为1）</td></tr><tr><td><code>output_limit</code></td><td>最大构建日志大小(默认4096KB)</td></tr><tr><td><code>pre_clone_script</code></td><td>在克隆Git存储库之前要在Runner上执行的命令</td></tr><tr><td><code>pre_build_script</code></td><td>克隆Git存储库之后但在执行构建之前要在Runner上执行的命令</td></tr><tr><td><code>post_build_script</code></td><td>在执行构建之后但在执行<code>after_script</code>之前在Runner上执行的命令</td></tr><tr><td><code>clone_url</code></td><td>覆盖GitLab实例的URL</td></tr></tbody></table><p><br></p><p><strong><code>clone_url</code>怎样工作:</strong></p><p>如果GitLab实例公开给Runner无法使用的URL，则可以配置<code>clone_url</code>。</p><p><br><br><br></p><p>####　EXECUTORS</p><ul><li>shell</li><li>docker</li><li>docker-ssh</li><li>ssh</li><li>parallels</li><li>virtualbox</li><li>docker+machine</li><li>docker-ssh+machine</li><li>kubernetes</li></ul><p><br><br><br></p><h4 id="SHELLS"><a href="#SHELLS" class="headerlink" title="SHELLS"></a>SHELLS</h4><ul><li>bash</li><li>sh</li><li>cmd</li><li>powershell</li></ul><p><br><br><br></p><p>####　<code>[runners.docker]</code>部分</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>host</code></td><td>指定Docker endpoint (默认 <code>$DOCKER_HOST</code>或<code>unix:///var/run/docker.sock</code>)</td></tr><tr><td><code>hostname</code></td><td>为Docker容器指定主机名</td></tr><tr><td><code>runtime</code></td><td>为Docker容器指定一个运行环境</td></tr><tr><td><code>tls_cert_path</code></td><td>证书路径</td></tr><tr><td><code>image</code></td><td>使用此镜像进行构建</td></tr><tr><td><code>memory</code></td><td>容器内存限制</td></tr><tr><td><code>memory_swap</code></td><td>总内存限制</td></tr><tr><td><code>memory_reservation</code></td><td>容器内存soft limit</td></tr><tr><td><code>oom_kill_disable</code></td><td>容器OOM后也不kill进程</td></tr><tr><td><code>cpuset_cpus</code></td><td>容器使用的CPU</td></tr><tr><td><code>cpus</code></td><td>CPU数量</td></tr><tr><td><code>dns</code></td><td>容器使用的DNS列表</td></tr><tr><td><code>dns_search</code></td><td>DNS搜索域列表</td></tr><tr><td><code>privileged</code></td><td>特权容器</td></tr><tr><td><code>disable_entrypoint_overwrite</code></td><td>禁用镜像端点覆盖</td></tr><tr><td><code>userns_mode</code></td><td>启用usernamespace重映射选项时，为容器设置usernamespace模式</td></tr><tr><td><code>cap_add</code></td><td>向容器添加其他Linux功能</td></tr><tr><td><code>cap_drop</code></td><td>从容器中移除其他Linux功能</td></tr><tr><td><code>security_opt</code></td><td>设置安全选项(key: value)</td></tr><tr><td><code>devices</code></td><td>与容器共享其他主机设备</td></tr><tr><td><code>cache_dir</code></td><td>指定缓存目录</td></tr><tr><td><code>disable_cache</code></td><td>禁用缓存</td></tr><tr><td><code>network_mode</code></td><td>将容器添加到一个自定义的网络</td></tr><tr><td><code>wait_for_services_timeout</code></td><td>等待docker的时间，0为禁用(默认30)</td></tr><tr><td><code>volumes</code></td><td>docker挂载卷</td></tr><tr><td><code>extra_hosts</code></td><td>指定应在容器环境中定义的主机</td></tr><tr><td><code>shm_size</code></td><td>指定镜像共享的内存大小(Byte))</td></tr><tr><td><code>volumes_from</code></td><td>指定从其它容器继承的卷(格式: `\<container name\="">[:\&lt;ro</container></td><td>rw>]`)</td></tr><tr><td><code>volume_driver</code></td><td>指定容器使用的卷的驱动</td></tr><tr><td><code>links</code></td><td>指定与其建立链接的容器</td></tr><tr><td><code>services</code></td><td>指定使用build运行的其它服务</td></tr><tr><td><code>allowed_images</code></td><td>指定可在<code>.gitlab-ci.ym</code>l中指定的通配符图像列表</td></tr><tr><td><code>allowed_services</code></td><td>指定可在<code>.gitlab-ci.yml</code>中指定的通配符服务列表</td></tr><tr><td><code>pull_policy</code></td><td>指定镜像拉取策略</td></tr><tr><td><code>sysctls</code></td><td>指定sysctl options</td></tr><tr><td><code>helper_image</code></td><td>覆盖用于克隆repos和上载工件的默认帮助程序镜像</td></tr></tbody></table><p><br><br><br></p><h4 id="runners-parallels-部分"><a href="#runners-parallels-部分" class="headerlink" title="[runners.parallels]部分"></a><code>[runners.parallels]</code>部分</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>base_name</code></td><td>将克隆的Parallels VM的名称</td></tr><tr><td><code>template_name</code></td><td>Parallels VM链接模板的自定义名称</td></tr><tr><td><code>disable_snapshots</code></td><td>如果禁用，则在构建之后将摧毁VM</td></tr></tbody></table><p><br><br><br></p><h4 id="runners-virtualbox-部分"><a href="#runners-virtualbox-部分" class="headerlink" title="[runners.virtualbox]部分"></a><code>[runners.virtualbox]</code>部分</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>base_name</code></td><td>要克隆的VirtualBox VM的名称</td></tr><tr><td><code>base_snapshot</code></td><td>要从中创建链接克隆的VM的特定快照的名称或UUID</td></tr><tr><td><code>disable_snapshots</code></td><td>如果禁用，则在构建之后将摧毁VM</td></tr></tbody></table><p><br><br><br></p><h4 id="runners-ssh-部分"><a href="#runners-ssh-部分" class="headerlink" title="[runners.ssh]部分"></a><code>[runners.ssh]</code>部分</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>host</code></td><td>指定主机</td></tr><tr><td><code>port</code></td><td>指定端口</td></tr><tr><td><code>user</code></td><td>指定用户</td></tr><tr><td><code>password</code></td><td>指定密码</td></tr><tr><td><code>identity_file</code></td><td>指定私钥</td></tr></tbody></table><p><br><br><br></p><h4 id="runners-machine-部分"><a href="#runners-machine-部分" class="headerlink" title="[runners.machine]部分"></a><code>[runners.machine]</code>部分</h4><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>IdleCount</code></td><td>Number of machines, that need to be created and waiting in Idle state.</td></tr><tr><td><code>IdleTime</code></td><td>Time (in seconds) for machine to be in Idle state before it is removed.</td></tr><tr><td><code>OffPeakPeriods</code></td><td>Time periods when the scheduler is in the OffPeak mode. An array of cron-style patterns (described below).</td></tr><tr><td><code>OffPeakTimezone</code></td><td>Time zone for the times given in OffPeakPeriods. A timezone string like Europe/Berlin (defaults to the locale system setting of the host if omitted or empty).</td></tr><tr><td><code>OffPeakIdleCount</code></td><td>Like IdleCount, but for Off Peak time periods.</td></tr><tr><td><code>OffPeakIdleTime</code></td><td>Like IdleTime, but for Off Peak time mperiods.</td></tr><tr><td><code>MaxBuilds</code></td><td>Builds count after which machine will be removed.</td></tr><tr><td><code>MachineName</code></td><td>Name of the machine. It must contain %s, which will be replaced with a unique machine identifier.</td></tr><tr><td><code>MachineDriver</code></td><td>Docker Machine driver to use</td></tr><tr><td><code>MachineOptions</code></td><td>Docker Machine options</td></tr></tbody></table><p><br><br><br></p><h4 id="runners-cache-部分"><a href="#runners-cache-部分" class="headerlink" title="[runners.cache]部分"></a><code>[runners.cache]</code>部分</h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Type</code></td><td>string</td><td>One of: <code>s3</code>, <code>gcs</code></td></tr><tr><td><code>Path</code></td><td>string</td><td>Name of the path to prepend to the cache URL</td></tr><tr><td><code>Shared</code></td><td>boolean</td><td>Enables cache sharing between runners, <code>false</code> by default</td></tr></tbody></table><p><br><br><br></p><h4 id="runners-kubernetes-部分"><a href="#runners-kubernetes-部分" class="headerlink" title="[runners.kubernetes]部分"></a><code>[runners.kubernetes]</code>部分</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>host</code></td><td>k8s master url</td></tr><tr><td><code>cert_file</code></td><td>k8s master认证证书</td></tr><tr><td><code>key_file</code></td><td>k8s master 私钥</td></tr><tr><td><code>ca_file</code></td><td>k8s master CA</td></tr><tr><td><code>image</code></td><td>当未指定时，用于构建的默认docker镜像</td></tr><tr><td><code>namespace</code></td><td>命名空间</td></tr><tr><td><code>privileged</code></td><td>特权容器(true/false)</td></tr><tr><td><code>node_selector</code></td><td>节点选择器</td></tr><tr><td><code>image_pull_secrets</code></td><td>镜像拉取秘钥</td></tr></tbody></table><p><br><br><br><br><br></p><h3 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h3><p>Use self-signed certificates Configure certificates that are used to verify TLS peer when connecting to the GitLab server.</p><p>这允许在注册runner时解决由未知权限问题签名的证书(<code>x509</code>)。</p><p><br></p><p><strong>支持自签名的证书:</strong></p><ol><li>默认情况下： GitLab Runner读取系统存储的证书并根据存储在系统中的CA验证GitLab服务器</li><li>GitLab Runner从预定义文件中读取PEM（不支持DER格式）证书: 如<code>/etc/gitlab-runner/certs/</code></li><li>GitLab Runner在注册期间和<code>[[runners]]</code>部分下的<code>config.toml</code>配置中公开<code>tls-ca-file</code>选项，允许您指定带证书的自定义文件。每当Runner尝试访问GitLab服务器时，都会读取此文件。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;li&gt;GitLab文档: &lt;a href=&quot;https://docs.gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.gitlab.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;版本:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitLib-CE: &lt;code&gt;v11.6.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GitLab-Runner: &lt;code&gt;v11.6.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Git" scheme="https://zhang21.github.io/tags/Git/"/>
    
      <category term="GitLab" scheme="https://zhang21.github.io/tags/GitLab/"/>
    
      <category term="CI" scheme="https://zhang21.github.io/tags/CI/"/>
    
      <category term="CD" scheme="https://zhang21.github.io/tags/CD/"/>
    
  </entry>
  
  <entry>
    <title>大明官职</title>
    <link href="https://zhang21.github.io/2018/12/05/%E6%98%8E%E6%9C%9D%E5%AE%98%E8%81%8C/"/>
    <id>https://zhang21.github.io/2018/12/05/明朝官职/</id>
    <published>2018-12-05T07:53:04.000Z</published>
    <updated>2018-12-05T10:09:42.357Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>维基百科</li><li>《万历十五年》</li><li>《南明史》</li><li>《中国历史地图集》</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><p>最近看《万历十五年》、《南明史》及电视剧“大明王朝1566”有感，想详细地了解一下大明王朝的官职制度。</p><p><br><br><br></p><hr><p><br><br><br></p><p>朱明王朝是以<strong>“驱逐胡虏，恢复中华”</strong>为号召北伐中原。</p><p>1368年正月，朱元璋于南京称帝，即明太祖，年号洪武，明朝建立。大明朝（1368年1月23日）是中国历史上最后一个由汉人建立的大一统王朝。<br>如按照李自成大顺军攻破北京，崇祯皇帝于煤山自缢(1644年)来算，历经十二世、十六位皇帝，国祚二百七十六年；<br>如加上南明永历皇帝被吴三桂勒死于昆明(1662年)来算，历经十九位皇帝，国祚二百九十四年。</p><blockquote><p>注：本文将按照万历时期来查看大明疆域和体制。</p></blockquote><p><br><br><br></p><p><strong>大明君主列表：</strong></p><table><thead><tr><th>庙号</th><th>谥号</th><th>名讳</th><th>在世时间</th><th>年号</th><th>在位时间</th></tr></thead><tbody><tr><td>太祖</td><td>高皇帝</td><td>朱元璋</td><td>1328年－1398年</td><td>洪武</td><td>1368年－1398年</td></tr><tr><td>惠宗</td><td>让皇帝</td><td>朱允炆</td><td>1377年－？</td><td>建文</td><td>1398年－1402年</td></tr><tr><td>成祖</td><td>文皇帝</td><td>朱棣(di)</td><td>1360年－1424年</td><td>永乐</td><td>1402年－1424年</td></tr><tr><td>仁宗</td><td>昭皇帝</td><td>朱高炽(chi)</td><td>1378年－1425年</td><td>洪熙</td><td>1424年－1425年</td></tr><tr><td>宣宗</td><td>章皇帝</td><td>朱瞻基</td><td>1399年－1435年</td><td>宣德</td><td>1425年－1435年</td></tr><tr><td>英宗</td><td>睿皇帝</td><td>朱祁镇</td><td>1427年－1464年</td><td>正统 <br> 天顺(复辟)</td><td>1435年－1449年 <br> 1457年－1464年</td></tr><tr><td>代宗</td><td>景皇帝</td><td>朱祁钰</td><td>1428年－1457年</td><td>景泰</td><td>1449年－1457年</td></tr><tr><td>宪宗</td><td>纯皇帝</td><td>朱见深</td><td>1447年－1487年</td><td>成化</td><td>1464年－1487年</td></tr><tr><td>孝宗</td><td>敬皇帝</td><td>朱佑樘(cheng)</td><td>1470年－1505年</td><td>弘治</td><td>1487年－1505年</td></tr><tr><td>武宗</td><td>毅皇帝</td><td>朱厚照</td><td>1491年－1521年</td><td>正德</td><td>1505年－1521年</td></tr><tr><td>世宗</td><td>肃皇帝</td><td>朱厚熜</td><td>1507年－1567年</td><td>嘉靖</td><td>1521年－1567年</td></tr><tr><td>穆宗</td><td>庄皇帝</td><td>朱载坖(ji)</td><td>1537年－1572年</td><td>隆庆</td><td>1567年－1572年</td></tr><tr><td>神宗</td><td>显皇帝</td><td>朱翊钧</td><td>1563年－1620年</td><td>万历</td><td>1572年－1620年</td></tr><tr><td>光宗</td><td>贞皇帝</td><td>朱常洛</td><td>1582年－1620年</td><td>泰昌</td><td>1620年</td></tr><tr><td>熹宗</td><td>悊皇帝</td><td>朱由校</td><td>1605年－1627年</td><td>天启</td><td>1620年－1627年</td></tr><tr><td>怀宗</td><td>烈皇帝</td><td>朱由检</td><td>1611年－1644年</td><td>崇祯</td><td>1627年－1644年</td></tr><tr><td>南明</td><td>福王</td><td>朱由崧</td><td>1607年－1646年</td><td>弘光</td><td>1644年6月－1645年6月</td></tr><tr><td>南明</td><td>唐王</td><td>朱聿键</td><td>1602年－1646年</td><td>隆武</td><td>1645年8月－1646年10月</td></tr><tr><td>南明</td><td>桂王</td><td>朱由榔</td><td>1623年－1662年</td><td>永历</td><td>1646年12月－1661年8月</td></tr></tbody></table><p><br><br><br></p><p>明一代为直隶二、布政使司十三。流俗称为两京一十三省。二直隶又称京师、南京二京，十三布政使司俗称十三省。</p><ul><li>二京<ul><li>京师顺天府(北直隶)</li><li>南京应天府(南直隶)</li></ul></li><li>十三布政使司<ul><li>陕西</li><li>山西</li><li>山东</li><li>河南</li><li>浙江</li><li>江西</li><li>湖广</li><li>四川</li><li>广东</li><li>福建</li><li>广西</li><li>贵州</li><li>云南</li></ul></li></ul><p><br></p><p>万历时期大明地图：</p><p><img src="/images/Ming/Map_wanli.jpg" alt=""></p><p><br><br><br></p><p><strong>行政：</strong></p><p>明朝一级地方行政区分置承宣布政使司（布政司）、提刑按察使司（按察司）与都指挥使司（都司）的都布按三司制度，分别掌管行政、司法与军事等三种治权，防止地方权力集中。</p><p>布政司通称省，底下依序有道、府州与县。道是明朝特别设置介于省和府州之间的行政单位，分为分守道和分巡道两种，分守道为布政司的派出机构，负责监督协调府州行政，分巡道为按察司的派出机构，负责监督协调府州司法治安。府为明朝最主要的统县政区，原为元朝的路，以税粮多寡为划分标准，粮廿万石以上为上府，廿万以下十万以上为中府，十万以下为下府。州与府同样是统县政区，但人口税收比府少，地位也比府低。州按照其行政隶属分为两类，直辖于布政司的州称直隶州，隶属于府的称散州或属州。军事区划有卫、所两级，但部分位于少数民族聚居区或边疆军屯区的卫所具有类似内地州县的行政职能，行政上分别相当于府与县。明代宗、明英宗时设有中央派出管理行政的巡抚与管理军事的总督，地位在布政司与都司之上。为限制巡抚与总督的权力，又设有都御史制衡之。明朝最后有140府，193州，1138县，493卫，359所。</p><p>巡抚主理民政，原本是明宣宗时期派六部、都察院大臣以此为名义督抚地方行政，到明代宗时正式形成一级行政区。总督于明英宗时设置，分短期与长期两种，管辖数个布政司的军务。</p><p><br><br><br></p><p><strong>内阁</strong></p><p>洪武十三年（1380年），明太祖以丞相胡惟庸谋反伏诛，于是废去中书省和丞相一职。秦、汉以降实行一千六百余年的宰相制度自此废除，六部直接向皇帝负责，相权与君权合而为一，大权独揽，施行军权、行政权、监察权三权分立的国家体制。由于国家事务繁多，皇帝无法处理，而明太祖也一度深感疲惫，于是设立四辅制度来辅佐政事。但这项制度效能不彰。洪武十七年（1384年）后被废。之后朱元璋请来几位翰林学士帮忙辅佐，这些翰林学士的官职效仿唐宋馆阁学士旧制，被命为“某某殿（阁）大学士”[注 24]，官阶只有正五品。明成祖登基后，特派解缙、胡广、杨荣等入午门值文渊阁，参预机务，由此始设内阁</p><p>内阁最初只是皇帝的咨询机构，相当于今日秘书或幕僚的职务，奏章的批答为皇帝的专责。到后来成为明朝实际上最高决策机构，首辅地位有时可比丞相，有票拟之权明朝内阁由始至终都不是明朝中枢的一级行政机构，所谓内阁只是文渊阁的别称。内阁大学士一职多以硕德宿儒或朝中大臣担任，只照皇帝的意旨写出，称“传旨当笔”，权力及地位远远不及过去的宰相，只有有实无名之地位，而没有法定地位。宣宗时期，由于杨溥、杨士奇、杨荣等三杨入阁，宣宗批准内阁在奏章上以条旨陈述己见，称为“票拟”制度，又授予宦官机构司礼监“批红”。票拟之法补救可君主不愿面见阁臣之弊，但内阁大臣与皇帝沟通，全赖司礼监（宦官）。</p><p><br><br><br></p><p><strong>六部</strong></p><p>明朝在中央设置吏、户、礼、工、刑、兵六部，与前代相比，明朝最初在每部增加尚书、侍郎各一。胡惟庸案之后，朱元璋废丞相之职，取消中书省。六部因此地位得到提高。每部只设一个尚书，两个侍郎，原有的各科尚书降为郎中。各部尚书和侍郎的官阶也上升。<br>其中以礼部（主管教育，负责领导儒家学术，以及祭祀，外交等）和吏部（主管文官升迁）最为重要，户部（主管财政，土地和人口）人员最多。兵部（主管国防），刑部（主管司法，有对较大刑事案件的审判权）与工部（主管公共建设）地位较低。</p><p>在拟诏审议机构上，明朝开始只设给事中与中书舍人，不复设中书门下二省。明朝的审议机构为六科给事中，到洪武廿四年，设都给事中六人，分吏、户、礼、工、刑、兵六科，每科一人，每科都给事中下设左右给事中各一人及给事中若干。六科给事中制度基本是继承唐朝的门下省制度，但官位下降，机构更为精简，也失去了自魏晋以来皇帝内臣（皇室的收发站）和礼官的职责。六科官职品级虽低，然职权很高，他们可以批驳皇帝的意旨， 也能充当谏官的职责，对六部吏僚则具有分科对应的监察权，故该制度也发挥一定的改善朝政作用。明朝的拟诏机构为中书舍人官署，因其制度源流源于与门下并立的中书，故与六科相对俗称 “中书科”，但是其地位大为下降，职能也大幅削弱，事实上只是内阁与翰林院的誊抄机构。中央的重要事务执行机构为五寺，包括大理寺、太常寺、光禄寺、太仆寺、鸿胪寺，与唐宋相比，减省了四寺：宗正寺被并入宗人府，卫尉寺被并入兵部，司农寺与太府寺被并入户部。大理寺与刑部和都察院合为三法司，负责重大刑事案件的复审与复核。大理寺的首长称为大理寺卿，也是九卿之一。其余四个寺的卿职权较低。太常寺负责祭祀；太仆寺管理马匹与全国牧政；光禄寺负责寿宴；鸿胪寺负责接待外宾。</p><p><br><br><br></p><p><strong>监察机构</strong></p><p>在洪武十三年前，明朝还沿袭元的监察制度，设立御史台，有左右御史大夫各一名。洪武十三年后，朱元璋废御史台。两年之后，朱元璋设立新的监察机构—都察院。都察院下面设立监察御史若干人，分巡全国各省，称为十二道监察御史。每道有监察御史三至五人，范围大体为一省。但监察御史都驻在京师，有事带印出巡，事毕回京缴印。到明末，监察御史分为十三道，共有一百一十人。都察院与六科同样具有谏官的职能和风闻言事的职责，故合称“科道言官”。</p><p><br><br><br></p><p><strong>厂卫制度</strong></p><p>明初还实行特务机构，主要包括锦衣卫、东厂和西厂，武宗时期还一度设有内行厂。锦衣卫设立于洪武十五年，直接听命于皇上，可以逮捕任何人，并进行不公开的审讯。但是朱元璋晚年逐步废除了锦衣卫及其特权，还有一些比较残酷的刑法。<br>在东厂设立后，锦衣卫权力受到削弱。东厂成立于永乐十八年，是明成祖为镇压政治上的反对力量而成立。地点位于京师东安门北。东厂的主要职责就是监视政府官员、社会名流、学者等各种政治力量，并有权将监视结果直接向皇帝汇报。依据监视得到的情报，对于那些地位较低的政治反对派，东厂可以直接逮捕、审讯；而对于担任政府高级官员或者有皇室贵族身份的反对派，东厂在得到皇帝的授权后也能够对其执行逮捕、审讯。东厂在设立之初，就由宦官担任提督，后来通常以司礼监秉笔太监中位居第二、第三者担任。西厂设立于宪宗时期，首领为汪直。1482年后被废。其后又被武宗短暂恢复。内厂设置于武宗时期，首领为宦官刘瑾，刘瑾伏诛后，内厂与西厂同时被废除，仅留东厂。</p><p><br><br><br></p><p><strong>其它机构</strong></p><p>公孤官包括三公与三孤，是名义上的诸臣之首，但这些官职都是虚衔，一般授予功劳相当大的大臣以示荣耀。三公为太师、太傅、太保，三孤则是辅弼他们的少师、少傅、少保。其中太保和太傅名义上是太子的老师，而太师则是皇帝名义上的老师，但实际上辅导太子的机构是詹事府。詹事府下设两坊、一局、一厅。此外还有太医院，专门负责皇室人员的健康和医疗。太医院附属有生药库和惠民药局。翰林院作为政府的官方学术最高机构，地位相当重要，甚至在政府中都有相当大的影响力。翰林院首长是翰林大学士，此职位者经常会同时兼任内阁大臣。</p><p>诸司指不属于各部院的司。主要指通政司和行人司。通政司负责传递公文，公告周知。行人司负责到地方上颁诏谕及赴外国作使臣。</p><p>外三监包括国子监、钦天监、上林苑监。钦天监负责观测星象。国子监是最高官方教育机构，也是全国官学的领导机构，有祭酒一人，司业一人，监丞一人，博士五人，助教十五人，学正十人，学录七人，典簿一人，典籍一人，典馔两人。上林苑监负责掌管皇帝的御花园，畜牧场与菜圃。</p><p>内十二监为宦官衙门。事实上只有在这些衙门工作的宦官才是太监。包括司礼监、内宫监、御用监、司设监、御马监、神宫监、尚膳监、尚宝监、印绶监、直殿监、尚衣监、都知监。以司礼监最为重要，监内的提督太监主管宫内一切宦官礼仪刑名。而秉笔太监在宦官极端专权时竟代替皇帝批公文。此外宫内还设有四个司（惜薪、钟鼓、宝钞、混堂），八个局（兵仗、银作、浣衣、巾帽、针工、内织染、酒醋面，司苑），合为内官廿四衙门。宫女也有六个局（尚宫、尚仪、尚服、尚食、尚寝、尚工），每个局下设四个司。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;li&gt;《万历十五年》&lt;/li&gt;
&lt;li&gt;《南明史》&lt;/li&gt;
&lt;li&gt;《中国历史地图集》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="History" scheme="https://zhang21.github.io/categories/History/"/>
    
    
      <category term="大明" scheme="https://zhang21.github.io/tags/%E5%A4%A7%E6%98%8E/"/>
    
      <category term="历史" scheme="https://zhang21.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>一战二战武器</title>
    <link href="https://zhang21.github.io/2018/11/18/%E4%B8%80%E6%88%98%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8/"/>
    <id>https://zhang21.github.io/2018/11/18/一战二战武器/</id>
    <published>2018-11-18T15:35:49.000Z</published>
    <updated>2018-11-22T05:28:33.909Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%B8%80%E6%88%98%E6%AD%A6%E5%99%A8" target="_blank" rel="noopener">各国一战武器，维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%86%9B%E4%BA%8B%E8%A3%85%E5%A4%87" target="_blank" rel="noopener">第一次世界大战武器装备，维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8" target="_blank" rel="noopener">各国二战武器，维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/Category:%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8" target="_blank" rel="noopener">第二次世界大战武器装备，维基百科</a></li></ul><p><br><br><br></p><hr><p><br><br><br></p><p>最近玩<strong>battlefield I</strong>(一战)有感，一时兴起，顺带在<strong>battlefield V</strong>(二战)发布前夕做一个一战二战各国使用的武器装备归纳总结。</p><p>玩了战地1，才体会到战争的残酷性，使我对战争的感觉从光辉转变为厌恶。没有什么英雄在我心中，你不知道自己何时会死去，或即将死去。<br>战场上每个人都一样，都是一条鲜活的生命，有家人有朋友。从战争游戏来反思战争，这点DICE studio做的不错。</p><p><br></p><p><strong>衷心祝愿世界和平！</strong></p><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><h1 id="一战"><a href="#一战" class="headerlink" title="一战"></a>一战</h1><p>第一次世界大战（简称一次大战、一战，或称欧战；英语：World War I、WWI、Great War、First World War；法语：la première Guerre Mondiale、la Grande Guerre）是一场于1914年7月28日至1918年11月11日主要发生在欧洲的大战，然而战火最终延烧至全球，当时世界上大多数国家都被卷入这场战争，史称“第一次世界大战”。</p><p><br></p><p>主要介绍国家：</p><ul><li>德国</li><li>法国</li><li>俄国</li><li>英国</li><li>美国</li></ul><p><br></p><p>主要武器分类：</p><ul><li>枪械</li><li>大炮</li><li>坦克</li><li>飞机</li><li>船舰</li></ul><p><br><br><br></p><h2 id="德国"><a href="#德国" class="headerlink" title="德国"></a>德国</h2><p>第一次世界大战德国主要武器</p><p><br></p><h3 id="手榴弹"><a href="#手榴弹" class="headerlink" title="手榴弹"></a>手榴弹</h3><p>hand grenade</p><p><br></p><ul><li><strong>柄式手榴弹</strong></li></ul><p>柄式手榴弹（德语：Stielhandgranate）为德国陆军自第一次世界大战中期至第二次世界大战末期所使用之手榴弹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重量595克</span><br><span class="line">长度365毫米</span><br><span class="line">直径70毫米</span><br><span class="line">填充三硝基甲苯（TNT）</span><br><span class="line">引爆机制5秒</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Stielhandgranate.png" alt=""></p><p><br><br><br></p><h3 id="手枪"><a href="#手枪" class="headerlink" title="手枪"></a>手枪</h3><p>pistol</p><p><br></p><ul><li><strong>毛瑟C96(Mauser C96)</strong></li></ul><p>由毛瑟在1896年推出的手枪，在中国还有驳壳枪、快慢机、自来得、大镜面等别称。<br>毛瑟（德语：Mauser）是一个德国的枪械制造商。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">重量        1.130公斤（空枪）</span><br><span class="line">长度        288毫米</span><br><span class="line">枪管长度     140毫米</span><br><span class="line">子弹        7.63×25mm毛瑟弹</span><br><span class="line">           9×19mm鲁格弹</span><br><span class="line">           .45 ACP</span><br><span class="line">           9×25mm毛瑟弹</span><br><span class="line">枪机      枪管短行程后座作用</span><br><span class="line">           单动</span><br><span class="line">发射模式    C96：半自动</span><br><span class="line">           M712速射型：半自动、全自动</span><br><span class="line">枪口初速    425米/秒</span><br><span class="line">有效射程100米</span><br><span class="line">最大射程200米</span><br><span class="line">供弹方式C96：10发内置弹仓</span><br><span class="line">M712速射型：10发或20发弹匣</span><br><span class="line">瞄具V型照门上刻度最大可调至1000米</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mauser_C96.png" alt="毛瑟C96"></p><p><br></p><ul><li><strong>鲁格手枪（Pistole 08 Luger)</strong></li></ul><p>简称P08<br>该枪由奥地利人格奥尔格·鲁格于1898年设计，并由以德国武器及弹药兵工厂及毛瑟为首等多间工厂于1900年投入生产。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量        1.92磅（871克）</span><br><span class="line">长度      8.75英寸（222毫米）</span><br><span class="line">枪管长度     98毫米–203毫米</span><br><span class="line">           （3.9 -8.02英寸）</span><br><span class="line">子弹        7.65×21毫米帕拉贝伦弹</span><br><span class="line">           9毫米鲁格弹</span><br><span class="line">           .45 ACP（相当罕见）</span><br><span class="line">枪机     枪管短行程后座作用，肘节式起落闭锁（Toggle Lock）</span><br><span class="line">枪口初速    350 - 400米/秒</span><br><span class="line">有效射程    50米</span><br><span class="line">供弹方式    8发弹匣、32发弹鼓</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/P08.png" alt="P08"></p><p><br></p><ul><li><strong>帝国转轮手枪（Reichsrevolver）</strong></li></ul><p>该枪后来被著名的鲁格P08半自动手枪所取代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量1040克</span><br><span class="line">长度310毫米</span><br><span class="line">子弹10.6×25mmR</span><br><span class="line">口径10.6mm</span><br><span class="line">射速单动式</span><br><span class="line">枪口初速205米/秒</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具V型缺口及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1879.png" alt="帝国轮转手枪"></p><p><br></p><ul><li><strong>贝格曼1896型手枪</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量1.13 kg</span><br><span class="line">长度254 mm</span><br><span class="line">枪管长度102 mm</span><br><span class="line">子弹5毫米贝格曼弹</span><br><span class="line">6.5毫米贝格曼弹</span><br><span class="line">8×22毫米贝格曼弹</span><br><span class="line">枪机反冲作用</span><br><span class="line">枪口初速380米/秒</span><br><span class="line">供弹方式5发载入内置弹仓内</span><br><span class="line">瞄具固定式瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Bergmann1896.png" alt="贝格曼1896型"></p><p><br></p><ul><li><strong>费罗梅尔停止手枪()Frommer Stop</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量610 g（22 oz）</span><br><span class="line">长度165 mm（6.5英寸）</span><br><span class="line">枪管长度95毫米（3.7英寸）</span><br><span class="line">子弹.32 ACP</span><br><span class="line">.380 ACP</span><br><span class="line">枪机长行程后座作用</span><br><span class="line">枪口初速280 m/s（919 ft/s）</span><br><span class="line">供弹方式7发弹匣</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FrommerStop.png" alt=""></p><p><br><br><br></p><h3 id="冲锋枪"><a href="#冲锋枪" class="headerlink" title="冲锋枪"></a>冲锋枪</h3><p>Submachine Guns</p><p><br></p><ul><li><strong>MP18</strong></li></ul><p>MP18冲锋枪是第一次世界大战时期由德国的胡戈·施梅瑟所开发的冲锋枪。MP18冲锋枪因其生产厂Bergmann也被称为伯格曼冲锋枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量4.18公斤</span><br><span class="line">长度832毫米</span><br><span class="line">枪管长度200 毫米</span><br><span class="line">子弹9毫米鲁格弹</span><br><span class="line">7.63×25毫米毛瑟弹</span><br><span class="line">枪机反冲作用、开放式枪机</span><br><span class="line">发射模式MP18：全自动</span><br><span class="line">MP28：半自动、全自动</span><br><span class="line">射速500发/分</span><br><span class="line">枪口初速380米/秒</span><br><span class="line">供弹方式32发弹匣 TM 08 （一战）；20，30 和 50 发弹匣（二战前）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MP18.png" alt="MP18"></p><p><br><br><br></p><h3 id="机枪"><a href="#机枪" class="headerlink" title="机枪"></a>机枪</h3><p>machine gun</p><p><br></p><ul><li><strong>MG08重机枪</strong></li></ul><p>Maschinengewehr 08（也称MG08，Maschinengewehr意为机枪）由海勒姆·马克沁1884年开发的马克沁机枪发展而来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量     连冷却水一共 69 kg ，除去冷却水65 kg 枪身26.5 kg 4 kg水 三脚架38.5 kg</span><br><span class="line">        MG08/15：连同两脚架17.8kg 水 3KG</span><br><span class="line">        MG08/18：不含两脚架14.5KG</span><br><span class="line">长度   1175 mm</span><br><span class="line">        MG08/15、MG08/18：1445 mm</span><br><span class="line">枪管长度720mm</span><br><span class="line">操作人数4人班组</span><br><span class="line">子弹7.92×57毫米毛瑟</span><br><span class="line">枪机枪管短后座，肘节式起落闭锁</span><br><span class="line">射速450-500 发/分</span><br><span class="line">枪口初速900米每秒（3,000英尺每秒）</span><br><span class="line">有效射程2,000米（2,200码）</span><br><span class="line">最大射程3,500米（3,800码）</span><br><span class="line">供弹方式250 发弹链</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MG08.png" alt=""></p><p><br></p><ul><li><strong>麦德森轻机枪(Madsen machine gun)</strong></li></ul><p>这也是全世界上第一种大量生产的真正实用化的轻机枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">重量空枪：9.07 千克（20 磅）</span><br><span class="line">长度1,143 毫米（45 英寸）</span><br><span class="line">枪管长度584.2 毫米（23 英寸）</span><br><span class="line">子弹</span><br><span class="line">6.5×55毫米瑞典子弹</span><br><span class="line">7×57毫米毛瑟子弹</span><br><span class="line">7.65×53毫米阿根廷子弹</span><br><span class="line">7.62×51毫米NATO</span><br><span class="line">7.62×54毫米R</span><br><span class="line">.303英式子弹[1]</span><br><span class="line">7.92×57毫米毛瑟子弹</span><br><span class="line">枪管1 根，膛线4 条，右旋，枪管装上风冷式枪管套和消焰器</span><br><span class="line">枪机枪管长行程后座作用</span><br><span class="line">发射模式全自动</span><br><span class="line">射速450发／分钟</span><br><span class="line">枪口初速6.5×55毫米瑞典子弹：700—870米／秒（2,296.59—2,854.33英尺／秒）</span><br><span class="line">供弹方式25、30、40发可拆卸式弹匣</span><br><span class="line">瞄具机械瞄具：Ｖ型缺口式照门及柱状准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Madsen_MachineGun.png" alt=""></p><p><br><br><br></p><h3 id="步枪"><a href="#步枪" class="headerlink" title="步枪"></a>步枪</h3><p>rifle</p><p><br></p><ul><li><strong>Gewehr 98步枪</strong></li></ul><p>Gewehr 98步枪（又称：G98、Gew 98、毛瑟M1898或M98）是德国毛瑟枪厂在德国军方采用Gewehr 88步枪后，为了夺回在德国枪械市场的地位而研制的步枪。Gew 98在1898年到1935年间为德国军队的制式步枪，直到它在1935年被毛瑟Kar98k步枪取代为止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量4.09千克（9.0磅） Gewehr 98（空枪）</span><br><span class="line">        3.50千克（7.7磅） Karabiner 98a</span><br><span class="line">长度1,250 mm（49.2英寸） Gewehr 98</span><br><span class="line">        1,090 mm（42.9英寸） Karabiner 98a</span><br><span class="line">枪管长度740 mm（29.1英寸） Gewehr 98</span><br><span class="line">        590 mm（23.2英寸） Karabiner 98a</span><br><span class="line">子弹7.92×57mm毛瑟</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速878 m/s（2,881 ft/s）</span><br><span class="line">有效射程500米（550 yd） （机械瞄具）</span><br><span class="line">        ≥800米（870 yd）（瞄准镜）</span><br><span class="line">供弹方式5发内置弹仓（能够以弹夹条压入）</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Gewehr98.png" alt=""></p><p><br></p><ul><li><strong>蒙德拉贡步枪</strong></li></ul><p>蒙德拉贡步枪（西班牙语：Fusil Mondragón）是一种由墨西哥上将曼努埃尔·蒙德拉贡(Manuel Mondragón)设计，瑞士工业公司（SIG）生产的半自动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4.18 公斤</span><br><span class="line">长度1105 毫米</span><br><span class="line">枪管长度577 毫米</span><br><span class="line">子弹7 × 57 毫米毛瑟弹/7.92 × 57 毫米毛瑟弹</span><br><span class="line">枪机气动式</span><br><span class="line">        转拴式枪机</span><br><span class="line">枪口初速760 米/秒</span><br><span class="line">有效射程800 米</span><br><span class="line">最大射程2,000 米</span><br><span class="line">供弹方式8、10、20、30 发可拆式弹匣</span><br><span class="line">        100 发弹鼓</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mondragon_rifle.png" alt=""></p><p><br></p><ul><li><strong>毛瑟13.2毫米反坦克步枪</strong></li></ul><p>毛瑟13.2毫米反坦克步枪为德意志帝国陆军于第一次世界大战中针对协约国（主要是英国）的装甲车辆所研发生产的反装甲武器，初次登场时间是1918年2月。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量15.8公斤</span><br><span class="line">长度1.68米</span><br><span class="line">枪管长度0.98米</span><br><span class="line">子弹13.2mm TuF</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速805米/秒</span><br><span class="line">供弹方式单发装填</span><br><span class="line">瞄具传统铁制照门</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/AntiTank_132mm.png" alt=""></p><p><br><br><br></p><h3 id="装甲车"><a href="#装甲车" class="headerlink" title="装甲车"></a>装甲车</h3><ul><li><strong>埃尔哈特E-V/4装甲车</strong></li></ul><p>埃尔哈特E-V/4装甲车是德国二战前研发用于轻度战斗和警务的装甲车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量7.12 - 7.75 吨</span><br><span class="line">长度5.3 m</span><br><span class="line">宽度2 m</span><br><span class="line">高度2.85 m</span><br><span class="line">操作人数8 - 9人</span><br><span class="line">装甲约9 mm</span><br><span class="line">主武器三挺机枪</span><br><span class="line">发动机汽油</span><br><span class="line">80 hp (59 kw)</span><br><span class="line">功率/重量10.3 hp/tonne</span><br><span class="line">悬挂四轮驱动</span><br><span class="line">作战范围250 km</span><br><span class="line">速度61.3 km/h</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Panzer_EV4.png" alt=""></p><p><br><br><br></p><h3 id="坦克"><a href="#坦克" class="headerlink" title="坦克"></a>坦克</h3><p>Tank</p><p><br></p><ul><li><strong>A7V坦克</strong></li></ul><p>A7V（Sturmpanzerwagen A7V）是德意志帝国在第一次世界大战时开发的坦克。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量30 至33 吨</span><br><span class="line">长度7.34 米（24 尺 1 寸）</span><br><span class="line">宽度3.1 米（10 尺）</span><br><span class="line">高度3.3 米（10 尺 10 寸）</span><br><span class="line">操作人数18人</span><br><span class="line">装甲侧面20 毫米，正面50 毫米</span><br><span class="line">主武器57 毫米主炮</span><br><span class="line">副武器6挺7.92毫米机枪</span><br><span class="line">发动机2具戴姆勒4汽缸汽油引擎</span><br><span class="line">100匹／800-900转（149 千瓦）x2</span><br><span class="line">功率/重量6.5 匹／吨</span><br><span class="line">悬挂履带、立式弹簧</span><br><span class="line">作战范围30-80 公里（20-50 英里）</span><br><span class="line">速度9 公里／小时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/A7V.png" alt=""></p><p><br></p><ul><li><strong>LK I</strong></li></ul><p>Leichter Kampfwagen (中文：轻型战斗车辆) 或“LK I”是第一次世界大战期间德国制造的原型轻型坦克。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量6.9 吨</span><br><span class="line">长度5.1 米</span><br><span class="line">宽度1.9 米</span><br><span class="line">高度2.5 米</span><br><span class="line">操作人数3 人</span><br><span class="line">装甲8-14 毫米</span><br><span class="line">主武器7.92 毫米 机枪</span><br><span class="line">发动机戴姆勒-奔驰4缸发动机</span><br><span class="line">60 匹/44.7 千瓦</span><br><span class="line">悬挂非悬挂</span><br><span class="line">作战范围70 千米</span><br><span class="line">速度14-18 千米/小时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LK1.png" alt=""></p><p><br><br><br></p><h3 id="飞机"><a href="#飞机" class="headerlink" title="飞机"></a>飞机</h3><p>aircraft</p><p><br></p><ul><li><strong>AEG B.I侦察机</strong></li></ul><p>AEG B.I侦察机是德国的双座双翼侦察机，于1914年小批量生产。它为AEG公司更成功的后继机型——B型和C型的设计提供了基础。</p><p><img src="/images/Weapons/AEG_BI.png" alt=""></p><p><br></p><ul><li><strong>J.I攻击机</strong></li></ul><p>J.I攻击机（制造厂商将其定为“J 4”，以防止与1915年开发的“J 1”机混淆）是德意志帝国陆军航空队于第一次世界大战所使用的一款地面攻击机、侦察机和连络机，由容克斯所研制，属德国“J系列”装甲航空机之一。</p><p><img src="/images/Weapons/JI.png" alt=""></p><p><br></p><ul><li><strong>信天翁C侦察机</strong></li></ul><p>信天翁C侦察机是由信天翁飞机公司研制的双翼侦察机，在第一次世界大战期间不单作为侦察机，还以其机载机枪件为战斗机和对地攻击机，信天翁飞机公司以此为基础推出信天翁D战斗机。</p><p><img src="/images/Weapons/C-VII.png" alt=""></p><p><br></p><ul><li><strong>信天翁D战斗机</strong></li></ul><p>信天翁D战斗机是由信天翁飞机公司以信天翁C侦察机的基础和参考了法国纽波特11战斗机而研制的双翼战斗机，在第一次世界大战期间是继福克E单翼战斗机后德国空军的主力战斗机。</p><p><img src="/images/Weapons/D-Va.png" alt=""></p><p><br></p><ul><li><strong>戈塔G轰炸机</strong></li></ul><p>戈塔G轰炸机是德国在第一次世界大战时的重型轰炸机，在大战期间主要用于轰炸英国，把死亡和恐惧带给英国民众。</p><p><img src="/images/Weapons/G-IV.png" alt=""></p><p><br></p><ul><li><strong>巨人机</strong></li></ul><p>巨人机（德语：Riesenflugzeug，複數時寫作：Riesenflugzeuge），英语有时简称为R型飞机，是指一次世界大战中德意志帝国所使用的重型轰炸机。</p><p><br></p><ul><li><strong>柏法茨战斗机</strong></li></ul><p>柏法茨双翼战斗机是在第一次世界大战时由德国柏法茨飞机公司(德文:Pfalz Flugzeugwerke)研制的双翼战斗机。</p><p><img src="/images/Weapons/D-IIIa.png" alt=""></p><p><img src="/images/Weapons/D-XII.png" alt=""></p><p><br></p><ul><li><strong>汉诺威CL攻击机</strong></li></ul><p>汉诺威CL攻击机是在第一次世界大战时由德国汉诺威飞机公司(德文:Hannoversche Waggonfabrik)研制的双翼攻击机，CL原本是指比一般侦察机（代号为C）轻巧的双座机，原本是用作为侦察机提供直接的护航，但后来发展成为对地攻击机尤其以其后座机枪作为居高临下的机枪火力点。</p><p><img src="/images/Weapons/CL-III.png" alt=""></p><p><br></p><ul><li><strong>福克战斗机</strong></li></ul><p>是福克飞机公司为了参加德国空军的“新型战斗机比赛”而提出的战斗机设计。</p><p><img src="/images/Weapons/D-VIII.png" alt=""></p><p><img src="/images/Weapons/D-VII.png" alt=""></p><p><img src="/images/Weapons/E-III.png" alt=""></p><p><br></p><ul><li><strong>罗兰C-II侦察机</strong></li></ul><p>罗兰C-II侦察机是由LFG公司（Luft-Fahrzeug-Gesellschaft）研制的双翼侦察机，它被誉为第一次世界大战当中最漂亮的德国侦察机，它也因此被称为“鲸鱼”。</p><p><img src="/images/Weapons/C-II.png" alt=""></p><p><br></p><ul><li><strong>齐柏林-斯塔肯R-VI轰炸机</strong></li></ul><p>齐柏林-斯塔肯R-VI轰炸机是德国在第一次世界大战时的重型轰炸机，在大战期间主要和戈塔G轰炸机一起轰炸英国，把死亡和恐惧带给英国民众。</p><p><img src="/images/Weapons/R-VI.png" alt=""></p><p><br></p><ul><li><strong>鸽式单翼机</strong></li></ul><p>鸽式单翼机是由奥地利(当时的“奥匈帝国)飞机工程师埃高．艾垂奇发明的，在第一次世界大战期间除了奥匈帝国，其同盟国盟友德意志帝国也大量采用作为侦察机、轰炸机和教练机等多种用途，虽然在1914年此机已算落伍，但毫无疑问的此后德国所有震惊世界的优秀军用飞机都是从鸽式单翼机开始的。</p><p><img src="/images/Weapons/geshi.png" alt=""></p><p><br><br><br></p><h3 id="巡洋舰"><a href="#巡洋舰" class="headerlink" title="巡洋舰"></a>巡洋舰</h3><p>一次世界大战德国巡洋舰： <a href="https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%B0%E5%BE%B7%E5%9C%8B%E5%B7%A1%E6%B4%8B%E8%89%A6" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%B0%E5%BE%B7%E5%9C%8B%E5%B7%A1%E6%B4%8B%E8%89%A6</a></p><p><br></p><p>巡洋舰（英语：Cruiser）指在排水量、火力、装甲防护等方面仅次于战列舰的大型水面舰艇，拥有同时对付多个作战目标的能力，以及能胜任多种任务的多样性。历史上，巡洋舰由于吨位大、火力强、性能佳，一开始是指可以独立行动的战舰 ; 而与此相对的驱逐舰则需要其它船只（比如补给船只）的协助，才能执行任务。不过随着现今驱逐舰被大型化后的综合作战能力的提升，何潬吨位其实超过早年的巡洋舰，所以这个区分已经不明显了，很多新式的大型军舰都不再冠以巡洋舰之名了。</p><p>巡洋舰的用途顾名思义确实是用来巡逻的。</p><p><br><br><br></p><h3 id="战列舰"><a href="#战列舰" class="headerlink" title="战列舰"></a>战列舰</h3><p>一次大战德国战列舰: <a href="https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%BE%B7%E5%9B%BD%E6%88%98%E5%88%97%E8%88%B0" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%BE%B7%E5%9B%BD%E6%88%98%E5%88%97%E8%88%B0</a></p><p><br></p><p>战列舰（英语：Battleship），是装有厚重装甲和大口径主炮的大型军舰，是人类创造的最庞大和复杂的武器系统之一，大舰巨炮主义时代的极致产物。</p><p><br><br><br></p><hr><p><br></p><h2 id="法国"><a href="#法国" class="headerlink" title="法国"></a>法国</h2><h3 id="手枪-1"><a href="#手枪-1" class="headerlink" title="手枪"></a>手枪</h3><ul><li><strong>FN M1900手枪(勃朗宁)</strong></li></ul><p>FN M1900是一款由著名枪械设计师约翰·勃朗宁于1896年设计，交由比利时Fabrique Nationale生产的单动式半自动手枪。该枪亦是史上第一款使用套筒设计的手枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">重量625克（空枪）</span><br><span class="line">长度172亳米</span><br><span class="line">枪管长度102亳米</span><br><span class="line">子弹.32 ACP（7.65×17亳米）</span><br><span class="line">枪机反冲作用，单动</span><br><span class="line">供弹方式7 + 1发弹匣</span><br><span class="line">瞄具固定式瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FN_M1900.jpg" alt=""></p><p><br></p><ul><li><strong>M1892转轮手枪</strong></li></ul><p>M1892转轮手枪（或称：勒贝尔转轮手枪或圣埃蒂安8毫米）是法国采用的一种制式手枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量0.85公斤（空枪）</span><br><span class="line">长度24厘米</span><br><span class="line">子弹8毫米法国军械弹</span><br><span class="line">口径8毫米</span><br><span class="line">枪机双动式</span><br><span class="line">枪口初速220米/秒</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1892.jpg" alt=""></p><p><br></p><ul><li><strong>M1911手枪</strong></li></ul><p>M1911（45手枪）是一种在1911年起生产的.45 ACP口径半自动手枪，由约翰·勃朗宁设计。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量空枪连弹匣：2.437磅（1,105克）[1]</span><br><span class="line">长度8.25吋（210毫米）</span><br><span class="line">枪管长度</span><br><span class="line">政府型：5.03吋（127毫米）</span><br><span class="line">指挥官型：4.25吋（108毫米）</span><br><span class="line">军官ACP型：3.5吋（89毫米）</span><br><span class="line">子弹.45 ACP</span><br><span class="line">枪机枪管短行程后座作用、单动式板机</span><br><span class="line">枪口初速251.46米/秒、〔825英尺/秒〕</span><br><span class="line">有效射程50米</span><br><span class="line">供弹方式7发（标准弹匣），膛室1发</span><br><span class="line">瞄具机械瞄具：金属缺口式照门及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1911.png" alt=""></p><p><br></p><ul><li><strong>MAS 1873转轮手枪</strong></li></ul><p>MAS 1873（或称：Chamelot-Delvigne）是法国军队采用的第一种双动式转轮手枪，此枪不久便被更新的M1892转轮手枪所取代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量1.04 kg</span><br><span class="line">长度240 mm</span><br><span class="line">枪管长度115 mm</span><br><span class="line">子弹11毫米M1873</span><br><span class="line">口径11 mm</span><br><span class="line">枪机双动式</span><br><span class="line">射速20 - 30发/分钟</span><br><span class="line">最大射程50米</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具V型缺口及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MAS1873.png" alt=""></p><p><br><br><br></p><h3 id="冲锋枪-1"><a href="#冲锋枪-1" class="headerlink" title="冲锋枪"></a>冲锋枪</h3><p><br><br><br></p><h3 id="机枪-1"><a href="#机枪-1" class="headerlink" title="机枪"></a>机枪</h3><ul><li><strong>圣艾蒂安M1907中型机枪</strong></li></ul><p>圣艾蒂安M1907（法语：St. Étienne Mle 1907）是法国军队于第一次世界大战及第二次世界大战期间所装备的一种中型机枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量26公斤</span><br><span class="line">长度1,180毫米</span><br><span class="line">枪管长度710毫米</span><br><span class="line">子弹8×50毫米勒贝尔弹</span><br><span class="line">枪管1根</span><br><span class="line">枪机气动式</span><br><span class="line">射速可调整：8 - 650发/分钟</span><br><span class="line">枪口初速724米/秒</span><br><span class="line">供弹方式25、30发金属弹链</span><br><span class="line">300发布制弹链（1916年）</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1907.png" alt=""></p><p><br></p><ul><li><strong>绍沙轻机枪</strong></li></ul><p>绍沙轻机枪，是在一战（1914年–1918年）时法国军队装备的制式轻机枪。官方名”Fusil Mitrailleur Modele 1915 CSRG”（机关步枪1915年型CSRG）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量9.07千克（20.0英磅）</span><br><span class="line">长度1,143毫米（45.0英寸）</span><br><span class="line">枪管长度470毫米（19英寸）</span><br><span class="line">子弹8×50毫米勒贝尔弹</span><br><span class="line">其他</span><br><span class="line">枪机长行程后座作用、气动式、开放式枪机</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速约240发/分钟</span><br><span class="line">枪口初速630米/秒</span><br><span class="line">有效射程200米</span><br><span class="line">最大射程2,000米</span><br><span class="line">供弹方式20发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/CSRG1915.png" alt=""></p><p><br></p><ul><li><strong>刘易斯机枪</strong></li></ul><p>刘易斯机枪（Lewis Gun）由美国陆军上校艾萨克·牛顿·刘易斯发明，但美国陆军并未采用，而是在英国发扬光大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量12公斤（空枪）</span><br><span class="line">长度1,125 mm</span><br><span class="line">枪管长度660 mm</span><br><span class="line">子弹.303英式弹</span><br><span class="line">口径7.7 mm</span><br><span class="line">枪机气动式、开放式枪机</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速500 - 600发/分钟</span><br><span class="line">枪口初速747米/秒</span><br><span class="line">有效射程800 m</span><br><span class="line">最大射程3,200 m</span><br><span class="line">供弹方式47发、97发弹鼓</span><br><span class="line">瞄具刀片式瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LewisGun.png" alt=""></p><p><br></p><ul><li><strong>霍奇克斯M1914重机枪</strong></li></ul><p>霍奇克斯M1914重机枪（法语：Hotchkiss Mle 1914）由美国人班杰明·霍奇克斯所开设的霍奇克斯公司研发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量24.4公斤</span><br><span class="line">46.8公斤（连三脚架）</span><br><span class="line">长度1,390毫米</span><br><span class="line">枪管长度800毫米</span><br><span class="line">子弹8×50毫米勒贝尔子弹</span><br><span class="line">7×57毫米毛瑟子弹</span><br><span class="line">6.5×50毫米有坂子弹</span><br><span class="line">11毫米Gras子弹</span><br><span class="line">6.5×55毫米</span><br><span class="line">枪机导气式</span><br><span class="line">射速450发/分钟</span><br><span class="line">枪口初速724米/秒</span><br><span class="line">供弹方式24发保弹板</span><br><span class="line">250发铰接式弹链</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1914.png" alt=""></p><p><br><br><br></p><h3 id="步枪-1"><a href="#步枪-1" class="headerlink" title="步枪"></a>步枪</h3><ul><li><strong>M1917RSC半自动步枪</strong></li></ul><p>M1917式RSC半自动步枪（法语：Fusil Automatique Modèle 1917，别名RSC M1917）是一种半自动气动式军用步枪，于第一次世界大战末期（1918年）装备法国军队。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">重量5,25公斤（11,6磅）</span><br><span class="line">长度1331毫米（52,4英寸）</span><br><span class="line">枪管长度798毫米（31,4英寸）</span><br><span class="line">子弹8×50mm勒贝尔弹</span><br><span class="line">枪机长行程导气式活塞，滚转式枪机</span><br><span class="line">枪口初速701米/秒</span><br><span class="line">有效射程标尺最低射程250米，最大有效1200米</span><br><span class="line">供弹方式5发内装漏夹供弹</span><br><span class="line">瞄具铁质标尺，标尺直立射程2400米</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1917RSC.png" alt=""></p><p><br></p><ul><li><strong>Mle 1918 全自动卡宾枪</strong></li></ul><p>Mle 1918 利贝罗勒全自动卡宾枪（英语：Ribeyrolles 1918 automatic carbine ，法语：Carabine Mitrailleuse 1918）是法国的一款自动步枪，亦是世界首型应用突击步枪概念的枪械。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量5.1公斤（空枪）</span><br><span class="line">长度1090毫米</span><br><span class="line">枪管长度450毫米</span><br><span class="line">子弹8 × 35 毫米利贝罗勒弹</span><br><span class="line">口径8 毫米</span><br><span class="line">枪机直接反冲</span><br><span class="line">射速550~600发/分钟</span><br><span class="line">枪口初速570 米/秒</span><br><span class="line">有效射程400 米</span><br><span class="line">供弹方式25 发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mle1918.jpg" alt=""></p><p><br></p><ul><li><strong>勒贝尔M1886步枪</strong></li></ul><p>勒贝尔M1886（法语：Fusil Lebel Modèle 1886）或勒贝尔步枪（法语：Fusil Lebel）是法国于1886年推出的栓式步枪，由尼古拉斯·勒贝尔上校研制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4.41 kg（上弹）</span><br><span class="line">4.18 kg（空枪）</span><br><span class="line">长度130 cm</span><br><span class="line">枪管长度80 cm</span><br><span class="line">子弹8×50毫米勒贝尔弹</span><br><span class="line">口径8 mm</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速610 - 700米/秒</span><br><span class="line">有效射程400米</span><br><span class="line">最大射程1,800米</span><br><span class="line">供弹方式8发管状弹仓（若算上托弹板上和膛室内的额外两发子弹为10发）</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1886.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特1907型半自动步枪</strong></li></ul><p>温彻斯特1907型是由美国枪械设计师托马斯·克罗斯利.约翰逊设计的一种半自动步枪，它在1906年到1958年期间由温彻斯特连发武器公司生产。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量3.6 kg - 4.1 kg</span><br><span class="line">长度1,000 mm</span><br><span class="line">枪管长度510 mm</span><br><span class="line">子弹.351 Winchester Self-Loading</span><br><span class="line">口径.351</span><br><span class="line">枪机后座作用</span><br><span class="line">供弹方式5 发、10 发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Winchester1907.png" alt=""></p><p><br></p><ul><li><strong>双管霰弹枪</strong></li></ul><p>双管霰弹枪（英语：Double-barreled shotgun，或称双管猎枪），是一种有两根枪管的猎枪，可分为水平排列或上下排列，可算是最早期的猎枪之一，前身为镇暴枪。</p><p><img src="/images/Weapons/Double-barreled_shotgun.png" alt=""></p><p><br><br><br></p><h3 id="炮"><a href="#炮" class="headerlink" title="炮"></a>炮</h3><ul><li><strong>皮托SA-18坦克炮</strong></li></ul><p>皮托SA-18坦克炮是法国在一战期间由设计的一种战车炮，主要装备于雷诺FT-17坦克上。</p><p><img src="/images/Weapons/SA18.png" alt=""></p><p><br><br><br></p><h3 id="坦克-1"><a href="#坦克-1" class="headerlink" title="坦克"></a>坦克</h3><ul><li><strong>2C超级重战车</strong></li></ul><p>2C超重型坦克，又名Char 2C，是法国于一战时设计的超重型坦克。但是，它并没有参加一战。不过，这辆坦克是所有被正式量产的坦克中吨位第二大的，仅次于猎虎式驱逐战车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量69 t（68 long ton；76 short ton）</span><br><span class="line">长度10.27米（33英尺8英寸）</span><br><span class="line">宽度3米（9英尺10英寸）</span><br><span class="line">高度4.09米（13英尺5英寸）</span><br><span class="line">操作人数11人[注 1]</span><br><span class="line">装甲45 mm（1.8英寸） max.</span><br><span class="line">主武器75 mm 火炮</span><br><span class="line">副武器4挺8 mm 机枪 (有一门在后炮塔上)</span><br><span class="line">发动机双引擎</span><br><span class="line">        2 x 250 马力</span><br><span class="line">作战范围150 km（93 mi）</span><br><span class="line">速度15 km/h（9.3 mph）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/2C.png" alt=""></p><p><br></p><ul><li><strong>施耐德CA1坦克</strong></li></ul><p>施耐德CA1坦克（法语：Char Schneider CA1）是法国研制的第一种坦克，研发的主要目的是破坏战场上的铁丝网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量13.6 吨</span><br><span class="line">长度6.32 米</span><br><span class="line">宽度2.05 米</span><br><span class="line">高度2.30 米</span><br><span class="line">操作人数6人</span><br><span class="line">装甲5.5-11毫米钢板</span><br><span class="line">主武器施耐德75mm迫击炮</span><br><span class="line">副武器2门8mm霍奇基斯M1914机枪</span><br><span class="line">发动机施耐德4缸55hp汽油引擎</span><br><span class="line">悬挂弹簧</span><br><span class="line">作战范围45 公里</span><br><span class="line">速度8.1 公里／小时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/CA1.png" alt=""></p><p><br></p><ul><li><strong>雷诺FT-17坦克</strong></li></ul><p>雷诺FT-17，是一款法国轻型坦克。它于一战时由法国研发，是世界上第一款安装旋转炮塔的坦克。截至一战结束时，一共生产了3187辆。甚至在二战爆发时，还有1800辆FT-17坦克在法国军队中服役。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量7吨</span><br><span class="line">长度5米</span><br><span class="line">宽度1.74米</span><br><span class="line">高度2.14米</span><br><span class="line">操作人数2（车长及驾驶员）</span><br><span class="line">装甲6-22毫米</span><br><span class="line">主武器皮托SA-18 37mmL/21战车炮</span><br><span class="line">或8mm哈奇开斯M1914机枪</span><br><span class="line">发动机雷诺直立式4缸水冷汽油机</span><br><span class="line">35匹</span><br><span class="line">功率/重量6马力/吨</span><br><span class="line">变速机械式（4前进档，1倒车档）</span><br><span class="line">悬挂垂直弹簧</span><br><span class="line">作战范围35公里</span><br><span class="line">速度7.7公里/时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FT-17.png" alt=""></p><p><br><br><br></p><h3 id="飞机-1"><a href="#飞机-1" class="headerlink" title="飞机"></a>飞机</h3><ul><li><strong>纽波特战斗机</strong></li></ul><p>纽波特11战斗机是法国在第一次世界大战早期推出的双翼战斗机，因其机体细小而被称为“婴儿”，它是由纽波特飞机公司研制的，成立于1902年的纽波特飞机公司由1909年开始造飞机，该公司由纽波特兄弟创立但两兄弟后来都在飞行事故当中死去，公司由他人接手，而在推出纽波特11战斗机后该公司才在航空界打响名堂并开创了“纽波特皇朝”。</p><p><img src="/images/Weapons/NBT11.png" alt=""></p><p><img src="/images/Weapons/NBT17.png" alt=""></p><p><img src="/images/Weapons/NBT28.png" alt=""></p><p><br></p><ul><li><em>莫兰-索尼耶L单翼机**</em></li></ul><p>莫兰-索尼耶L单翼机是法国莫兰-索尼耶飞机公司在1913年研制的单翼多用途飞机，该型机在当年12月的就在巴黎的航空展览上公开，在第一次世界大战爆发后就成为法国空军的侦察机，也是第一种在螺旋桨上加上钢铁制子弹偏导片而实现机枪安装在机头并开火，估计这样有大约1/4的子弹会被它挡住不伤到螺旋桨，其余3/4可穿过螺旋桨射击目标，此种做法是在同步射击系统出现前唯一的可行办法。<br>莫兰-索尼耶L单翼机也因此被称为“历史上第一种战斗机”。</p><p><img src="/images/Weapons/MS-L.png" alt=""></p><p><br><br><br></p><hr><p><br></p><h2 id="俄国"><a href="#俄国" class="headerlink" title="俄国"></a>俄国</h2><ul><li><strong>M1911手枪</strong></li></ul><p><br></p><ul><li><strong>毛瑟C96手枪</strong></li></ul><p><br></p><ul><li><strong>纳甘M1895转轮手枪</strong></li></ul><p>纳甘M1895（俄语：Револьвер системы Нагана，意为：纳甘系统转轮手枪）是由比利时工业家莱昂·纳甘为俄罗斯帝国所研发的7发双动式转轮手枪，发射7.62×38mmR弹药。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量0.8 kg（空枪）</span><br><span class="line">长度235 mm</span><br><span class="line">枪管长度114 mm</span><br><span class="line">子弹7.62×38mmR</span><br><span class="line">口径7.62 mm</span><br><span class="line">枪机单动式、双动式</span><br><span class="line">射速14 - 21发/分钟</span><br><span class="line">枪口初速272米/秒</span><br><span class="line">有效射程22米</span><br><span class="line">供弹方式7发转轮式弹巢</span><br><span class="line">瞄具V型照门及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1895.png" alt=""></p><p><br></p><ul><li><strong>三八式步枪</strong></li></ul><p>三八式步枪（日语：三八式歩兵銃；さんぱちしきほへいじゅう，Sanpachi-shiki hohei-juu）为手动步枪，日本陆军于日俄战争同年（1905年，明治38年）正式采用为制式武器，一直到第二次世界大战。三八式步枪在中国一向俗称为三八大盖，由于其枪机上有一个随枪机连动的防尘盖以及机匣上刻有“三八式”字样而得名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量3,730g（加上刺刀重4,100g）</span><br><span class="line">长度127.6cm（上刺刀可达166.3cm）</span><br><span class="line">枪管长度797毫米</span><br><span class="line">子弹6.5×50mm有阪（Arisaka）</span><br><span class="line">口径6.5毫米</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速765米／秒</span><br><span class="line">有效射程460米</span><br><span class="line">供弹方式5发弹匣，内置弹仓</span><br><span class="line">瞄具铁制直立式表尺</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/38shi.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特步枪</strong></li></ul><p>温彻斯特步枪（Winchester Rifle），有时亦称温彻斯特连发步枪（Winchester Repeating Rifle），是由美国温彻斯特连发武器公司研制及生产的一系列步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4.3 kg</span><br><span class="line">长度125.2 cm</span><br><span class="line">枪管长度76.2 cm</span><br><span class="line">子弹.44-40温彻斯特</span><br><span class="line">.38-40温彻斯特</span><br><span class="line">.32-20温彻斯特</span><br><span class="line">.30-30温彻斯特</span><br><span class="line">.22 LR</span><br><span class="line">其他</span><br><span class="line">枪机杠杆式</span><br><span class="line">供弹方式8（M1894）、10（M1866）、13（M1866）、15发内置管状弹仓</span><br><span class="line">瞄具后方缺口及前准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/WinchesterRifle.png" alt=""></p><p><br></p><ul><li><strong>莫辛-纳甘步枪</strong></li></ul><p>莫辛-纳甘（法文：Mosin-Nagant）步枪是由设计者俄国陆军上校谢尔盖·伊凡诺维奇·莫辛和比利时枪械设计师李昂·纳甘共同命名的手动步枪，在俄语圈国家也被普遍的称为莫辛步枪 （俄文：Винтовка Мосина），官方名称为”三线M1891步枪”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量4.22公斤（空枪），各型号不同</span><br><span class="line">长度1306毫米，各型号不同</span><br><span class="line">枪管长度800毫米，各型号不同</span><br><span class="line">子弹7.62×54毫米R枪弹</span><br><span class="line">口径7.62毫米</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速615米/秒（M1891）</span><br><span class="line">860米/秒（M1891/30）</span><br><span class="line">有效射程548.64米（600码）</span><br><span class="line">最大射程1828.8米（2000码）</span><br><span class="line">供弹方式5发内置弹仓</span><br><span class="line">10发可拆式弹匣（现代化改版限定）</span><br><span class="line">瞄具机械瞄具：后方可调式缺口表尺及前方柱状准星</span><br><span class="line">PU 3.5倍光学瞄准镜</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MosinNagant.png" alt=""></p><p><br></p><ul><li><strong>费德洛夫M1916自动步枪</strong></li></ul><p>费德洛夫M1916 （俄语：Автомат Фёдорова）是一种战斗步枪，由弗拉基米尔·格里高利耶维奇·费德洛夫（Vladimir Grigoryevich Fyodorov）设计，1916年在沙俄境内生产。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量4.4公斤 (全重：5.2公斤)</span><br><span class="line">长度1,045毫米</span><br><span class="line">枪管长度520 毫米</span><br><span class="line">子弹6.5×50毫米有坂子弹</span><br><span class="line">口径6.5毫米</span><br><span class="line">枪机枪管短行程后座作用</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速600发/分钟[1]</span><br><span class="line">枪口初速654米每秒（2,150英尺每秒）[1]</span><br><span class="line">供弹方式25发可拆卸式弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FyodorovM1916.png" alt=""></p><p><br></p><ul><li><strong>绍沙轻机枪</strong></li></ul><p><br></p><ul><li><strong>麦德森轻机枪</strong></li></ul><p><br></p><ul><li><strong>刘易斯机枪</strong></li></ul><p><br></p><ul><li><strong>维克斯机枪</strong></li></ul><p>维克斯机枪（Vickers），是第一次世界大战与第二次世界大战期间英国军队所使用的中型机枪。基于维克斯机枪优异的设计，使它成为世界上著名的战争武器之一。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量15 kg</span><br><span class="line">长度1,100 mm</span><br><span class="line">枪管长度720 mm</span><br><span class="line">操作人数3人</span><br><span class="line">子弹.303英式弹</span><br><span class="line">口径7.7毫米</span><br><span class="line">枪机后坐式，水冷却</span><br><span class="line">射速450 - 500发/分钟</span><br><span class="line">枪口初速744米/秒</span><br><span class="line">有效射程2,000米</span><br><span class="line">最大射程4,100米</span><br><span class="line">供弹方式250发布制弹链</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Vickers.png" alt=""></p><p><br></p><ul><li><strong>马克沁M1910重机枪</strong></li></ul><p>马克沁M1910重机枪（Пулемёт Максима на станке Соколова）又名PM M1910马克沁，是海勒姆·马克沁开发的马克沁机枪之衍生型，发射7.62×54毫米R弹药，配有轮式射架。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">重量64.3公斤（139.6磅）</span><br><span class="line">长度1067毫米</span><br><span class="line">枪管长度721毫米</span><br><span class="line">子弹7.62×54毫米R</span><br><span class="line">口径7.62毫米</span><br><span class="line">枪机后座作用</span><br><span class="line">射速600发/分</span><br><span class="line">枪口初速740米/秒（2,427.2尺/秒）</span><br><span class="line">供弹方式250发布制弹链</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PM_M1910.png" alt=""></p><p><br><br><br></p><hr><p><br></p><h2 id="英国"><a href="#英国" class="headerlink" title="英国"></a>英国</h2><ul><li><strong>M1911手槍</strong></li></ul><p><br></p><ul><li><strong>毛瑟C96手槍</strong></li></ul><p><br></p><ul><li><strong>M1917左轮手枪</strong></li></ul><p>M1917左轮手枪（M1917 Revolver），官方正式名称为M1917 .45英寸美国左轮手枪（英语：United States Revolver, Caliber .45, M1917）是一把美国六发式左轮手枪，主要发射.45 ACP口径手枪子弹。</p><p><img src="/images/Weapons/M1917Revolver.png" alt=""></p><p><br></p><ul><li><strong>史密斯威森军警型左轮手枪</strong></li></ul><p>史密斯威森军警型（Smith &amp; Wesson Military &amp; Police，缩写：S&amp;W MP；简称：点三八），是一种.38口径的美国制左轮手枪。</p><p><img src="/images/Weapons/SW_MP.png" alt=""></p><p><br></p><ul><li><strong>韦伯利转轮手枪</strong></li></ul><p>韦伯利转轮手枪（英语：Webley Revolver）是由英国生产的一系列军用和警用转轮手枪。当中最著名的版本为韦伯利MK VI， 它在一次大战期间成为了英国军队以及其殖民地军队的制式手枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量1.1公斤（空枪）</span><br><span class="line">长度286毫米</span><br><span class="line">枪管长度106毫米</span><br><span class="line">子弹.455韦伯利</span><br><span class="line">.38/200</span><br><span class="line">口径.455英寸（11.6×19毫米）、.38英寸</span><br><span class="line">枪机单/双动式板机</span><br><span class="line">射速20-30发/分钟</span><br><span class="line">枪口初速190米/秒</span><br><span class="line">有效射程50码</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具缺口式机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MK_VI.png" alt=""></p><p><br></p><ul><li><p><strong>三八步枪</strong></p></li><li><p><strong>温彻斯特步枪</strong></p></li></ul><p><br></p><ul><li><strong>恩菲尔德M1917步枪</strong></li></ul><p>恩菲尔德M1917步枪（M1917 Enfield，又名P17、P1917或Pattern 1917）是“美国恩菲尔德”（American Enfield）于1917至1918年间生产的.30-06口径手动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">重量4.17 公斤（9磅3安士）</span><br><span class="line">长度1175 毫米（3尺10.25寸）</span><br><span class="line">枪管长度26 寸（660毫米）</span><br><span class="line">子弹.30-06（7.62 x 63毫米）</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速823 米/秒（2700尺/秒）</span><br><span class="line">供弹方式5发弹夹、6发内置弹仓</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1917_Enfield.jpg" alt=""></p><p><br></p><ul><li><strong>李-恩菲尔德步枪</strong></li></ul><p>李-恩菲尔德步枪（Lee-Enfield）也译李恩飞步枪是1895年至1956年英军的制式手动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量4.19公斤（MLE Mk.I）</span><br><span class="line">3.96公斤（SMLE No.1 Mk.III）</span><br><span class="line">长度1257毫米（MLE Mk.I）</span><br><span class="line">        1138毫米（SMLE No.1 Mk.III）</span><br><span class="line">        1130毫米（No.4 Mk.I）</span><br><span class="line">枪管长度767毫米（MLE Mk.I）</span><br><span class="line">        640毫米（SMLE No.1 Mk.III）</span><br><span class="line">子弹.303 British（7.7×56mm R）</span><br><span class="line">        7.92×57毫米尖头弹(为适应中国战场所改膛的)</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速744米／秒</span><br><span class="line">有效射程914米（1000码）</span><br><span class="line">最大射程1828米（2000码）</span><br><span class="line">供弹方式10发内置弹仓（两个5发弹夹）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Lee-Enfield.png" alt=""></p><p><br></p><ul><li><strong>马提尼-亨利步枪</strong></li></ul><p>马提尼-亨利”（Martini-Henry）是一种英国陆军曾经装备的起落式枪机步枪。它于1871年首度投入服役，最终取代了原有的史奈德步枪，一款改良至发射定装弹的前装枪。马提尼-亨利的衍生型在大英帝国中一共服役了三十年。它采用了由亨利·O·皮博迪为其皮博迪步枪设计的起落式枪机，并由瑞士设计师里德里希·冯·马提尼进行改良，结合由苏格兰人亚历山大·亨利设计的多边形膛线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量3.827 kg（空枪）</span><br><span class="line">长度1245 mm</span><br><span class="line">子弹.577/450 Boxer-Henry</span><br><span class="line">        .577/450马提尼-亨利</span><br><span class="line">        .303英式弹</span><br><span class="line">        11.43×55R（奥斯曼帝国）</span><br><span class="line">        11.43×59R（罗马尼亚）</span><br><span class="line">        7.65×53毫米（奥斯曼帝国）</span><br><span class="line">枪机起落式枪机（Martini Falling Block）</span><br><span class="line">射速12发/分钟</span><br><span class="line">枪口初速400米/秒</span><br><span class="line">有效射程370米</span><br><span class="line">最大射程1,700米</span><br><span class="line">供弹方式1发装在膛室内</span><br><span class="line">瞄具可滑动式表尺及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Martini-Henry.png" alt=""></p><p><br></p><ul><li><p><strong>维克斯机枪</strong></p></li><li><p><strong>刘易斯机枪</strong></p></li><li><p><strong>马克沁机枪</strong></p></li><li><p><strong>双管霰弹枪</strong></p></li></ul><p><br></p><ul><li><strong>勃朗宁M1917重机枪</strong></li></ul><p>M1917重机枪是由约翰·勃朗宁设计，美军在一战，二战及韩战中采用的重机枪，并有限延伸至越战，同时它也被其他国家使用。这是一种班组操作，弹链供弹的水冷重机枪，与同时期的M1919风冷中型机枪共同服役。该型机枪以营为单位配发同时也经常装备于各种载具之上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量47公斤</span><br><span class="line">长度980毫米</span><br><span class="line">枪管长度609毫米</span><br><span class="line">子弹.30-06春田</span><br><span class="line">口径7.62毫米</span><br><span class="line">枪机短行程后座作用式</span><br><span class="line">射速450发/分钟</span><br><span class="line">        600发/分钟（M1917A1）</span><br><span class="line">枪口初速853.6米/秒</span><br><span class="line">最大射程900米</span><br><span class="line">供弹方式250发布制弹链</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Browning_M1917.png" alt=""></p><p><br></p><ul><li><strong>Template:V及W級驱逐舰</strong></li></ul><p><br></p><ul><li><strong>步行者号驱逐舰</strong></li></ul><p>步行者号驱逐舰（舷号D27）是一艘英国皇家海军建造的驱逐舰，为W级驱逐舰的3号舰。她是英军第一艘以步行者（Walker）为名的军舰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标准排水量设计：1,100吨</span><br><span class="line">全长整体：300呎</span><br><span class="line">全宽水线：26.75呎</span><br><span class="line">吃水9呎</span><br><span class="line">最高速度34节</span><br><span class="line">武器装备4门4吋Mk V速射炮</span><br><span class="line">        2门单装2磅砰砰炮</span><br><span class="line">        2座3联装鱼雷发射管</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Walker_D27.jpg" alt=""></p><p><br></p><ul><li><strong>范诺克号驱逐舰</strong></li></ul><p>范诺克号驱逐舰（舷号H33）是一艘英国皇家海军建造的驱逐舰，为V级驱逐舰的1号舰。她是英军第一艘以范诺克（Vanoc）为名的军舰，舰名取自圆桌骑士团的范诺克骑士。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标准排水量设计：1,272吨至1,339吨</span><br><span class="line">全长整体：300呎</span><br><span class="line">全宽水线：26呎9吋</span><br><span class="line">吃水9呎</span><br><span class="line">最高速度34节</span><br><span class="line">武器装备4门4吋Mk V速射炮</span><br><span class="line">        2门单装2磅砰砰炮</span><br><span class="line">        2座双联装鱼雷发射管</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Vanoc_H33.png" alt=""></p><p><br></p><ul><li><strong>Mark I 坦克</strong></li></ul><p>Mark I 坦克由英国研制并在第一次世界大战于英国军队服役，是世界上第一种正式参与战争的坦克。[1] Mark I 坦克在1916年8月开始服役，并于1916年9月15日首次应用在索姆河战役上。它的主要作用是破坏战场上的铁丝网、越过战壕、亦能抵御小型武器的射击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">重量雄性：28.4公吨（28.0长吨）</span><br><span class="line">雌性：27.4公吨（27.0长吨）</span><br><span class="line">长度9.94米（32英尺7英寸）</span><br><span class="line">宽度4.33米（14英尺2英寸）</span><br><span class="line">高度2.44米（8英尺0英寸）</span><br><span class="line">操作人数8人</span><br><span class="line">装甲6-12 毫米</span><br><span class="line">主武器雄性：2 × 霍奇基斯QF 6磅炮</span><br><span class="line">        雌性：4 × 维克斯机枪</span><br><span class="line">副武器雄性：3 × 霍奇基斯轻机枪</span><br><span class="line">        雌性：1 × 霍奇基斯轻机枪</span><br><span class="line">发动机戴姆勒-奈特6缸 13升 汽油引擎</span><br><span class="line">        105匹马力（78千瓦特）</span><br><span class="line">功率/重量雄性：3.7匹马力每公吨（2.8千瓦每公吨）</span><br><span class="line">        雌性：4.0匹马力每公吨（3.0千瓦每公吨）</span><br><span class="line">悬挂履带</span><br><span class="line">作战范围23.6英里（38.0千米），巡航6.2小时</span><br><span class="line">速度5.9千米每小时（3.7英里每小时）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mark-I.png" alt=""></p><p><br><br><br></p><hr><p><br></p><h2 id="美国"><a href="#美国" class="headerlink" title="美国"></a>美国</h2><ul><li><strong>Mk 2手榴弹</strong></li></ul><p>Mk 2手榴弹（或写作Mk II）是一种反人员破片手榴弹，美军于1918年导入，用以取代Mk 1手榴弹，在二战、韩战至越战中所使用。由于外型相似凤梨又名凤梨手榴弹，因保险片的形状被称为“鸭嘴手榴弹”，因外观被称为“卵形手榴弹”、“凤梨手榴弹”或“癞瓜手榴弹”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重量595克</span><br><span class="line">长度111毫米</span><br><span class="line">填充TNT</span><br><span class="line">填充量2安士</span><br><span class="line">引爆机制4-5秒</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MK2.png" alt=""></p><p><br></p><ul><li><p><strong>M1911手枪</strong></p></li><li><p><strong>M1917左轮手枪</strong></p></li><li><p><strong>史密斯威森军警型左轮手枪</strong></p></li></ul><p><br></p><ul><li><p><strong>恩菲尔德M1917步枪</strong></p></li><li><p><strong>李-恩菲尔德步枪</strong></p></li><li><p><strong>温彻斯特步枪</strong></p></li><li><p><strong>温彻斯特1907型半自动步枪</strong></p></li><li><p><strong>莫辛-纳甘步枪</strong></p></li></ul><p><br></p><ul><li><strong>M1903春田步枪</strong></li></ul><p>M1903春田步枪是一种旋转后拉式枪机弹仓式手动步枪，1903年定型称为“0.30口径M1903式步枪”，因其由春田（Springfield）兵工厂研制而得名M1903春田步枪（Springfield rifle）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量3.95公斤</span><br><span class="line">长度1,098毫米（44.9寸）</span><br><span class="line">枪管长度610毫米（24寸）</span><br><span class="line">子弹.30-03</span><br><span class="line">       .30-06（7.62×63毫米）</span><br><span class="line">        7.92×57毫米尖头弹(为适应中国与欧洲战场所改膛的)</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速823 - 853米／秒</span><br><span class="line">有效射程550米</span><br><span class="line">供弹方式5发弹夹，内置弹仓</span><br><span class="line">瞄具片状准星；带&quot;U&quot;形缺口折叠式框形表尺</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/SpringField_M1903.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特M1897泵动式霰弹枪</strong></li></ul><p>温彻斯特M1897（英语：Winchester Model (M) 1897，俗称：Model 97或M97）是一枝由著名的美国枪械设计师约翰·勃朗宁设计、美国温彻斯特连发武器公司生产的泵动式及外置击锤型设计霰弹枪。</p><p><img src="/images/Weapons/Winchester_M1897.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特M1912泵动式霰弹枪</strong></li></ul><p>温彻斯特M1912（英语：Winchester Model（M） 1912，俗称：Model 12或M12）是一枝由美国温彻斯特连发武器公司生产的泵动式、内置式击锤设计及外部管式弹仓供弹的霰弹枪。此枪在推出后不久被流行地命名为完美的连发枪（英语：Perfect Repeater），基本奠定了此枪对泵动霰弹枪超过51年的高效率生产的生涯的标准。</p><p><img src="/images/Weapons/Winchester_M1912.png" alt=""></p><p><br></p><ul><li><strong>勃朗宁Auto-5半自动霰彈槍</strong></li></ul><p>勃朗宁Auto-5（英语：Browning Automatic 5，简称：Auto-5、A-5，意为：勃朗宁自动五发式霰弹枪）是一枝由美国著名轻兵器设计家约翰·勃朗宁所研制、后座作用操作的半自动霰弹枪，可发射12铅径霰弹、16铅径霰弹或20铅径霰弹。</p><p><img src="/images/Weapons/Auto-5.png" alt=""></p><p><br></p><ul><li><strong>勃朗宁自动步枪</strong></li></ul><p>勃朗宁自动步枪（英语：Browning Automatic Rifle，简称：BAR），是美军在20世纪上半叶使用的一种自动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量空枪重：7.2公斤（A1）</span><br><span class="line">空枪重：8.8公斤（A2）</span><br><span class="line">长度1,214毫米（47.8寸）</span><br><span class="line">枪管长度610毫米（24寸）</span><br><span class="line">子弹.30-06 Springfield </span><br><span class="line">       （7.62×63毫米）</span><br><span class="line">        7.92×57毫米尖头弹(为适应中国战场所改膛的)</span><br><span class="line">口径7.62毫米（.30寸）</span><br><span class="line">枪机长行程导气式活塞、开放式枪机</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速300-450发/分；</span><br><span class="line">        500-650发/分（A2）</span><br><span class="line">枪口初速805米/秒</span><br><span class="line">有效射程548米</span><br><span class="line">供弹方式20发弹匣</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/BAR.png" alt=""></p><p><br></p><ul><li><p><strong>刘易斯机枪</strong></p></li><li><p><strong>勃朗宁机枪</strong></p></li><li><p><strong>绍沙轻机枪</strong></p></li><li><p><strong>霍奇科斯重机枪</strong></p></li></ul><p><br></p><ul><li><strong>勃朗宁M1919中型机枪</strong></li></ul><p>勃朗宁M1919（M1919 Browning machine gun），俗称（Browning Machine Gun，30 Cal ），是由约翰·勃朗宁在一战后设计的机枪，主要是把水冷式M1917改为风冷式，采用.30-06 Springfield 步枪弹药。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量14公斤</span><br><span class="line">长度964毫米（37.94英寸）</span><br><span class="line">操作人数2至3名</span><br><span class="line">子弹.30-06 Springfield（U.S.）</span><br><span class="line">        7.62×51mm NATO（U.S.）</span><br><span class="line">        .303 British</span><br><span class="line">口径7.62毫米/7.7毫米</span><br><span class="line">枪机后坐作用</span><br><span class="line">射速400–600发／分</span><br><span class="line">枪口初速853米／秒</span><br><span class="line">有效射程1,400米</span><br><span class="line">供弹方式M9弹链供弹</span><br><span class="line">瞄具可调机械照门</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Browning_M1919.png" alt=""></p><p><br></p><ul><li><strong>D级潜艇</strong></li></ul><p>D级潜艇是美国海军一战中建造的潜艇级，子合约由格罗昆的电船公司签订，由昆西的佛尔河船厂建造。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">舰型Submarine</span><br><span class="line">排水量288 long ton（293 t） surfaced</span><br><span class="line">        337 long ton（342 t） submerged</span><br><span class="line">全长134英尺10英寸（41.10米）</span><br><span class="line">全宽13英尺11英寸（4.24米）</span><br><span class="line">吃水11英尺8英寸（3.56米）</span><br><span class="line">动力来源2 x NELSECO gasoline engines, 600 hp（450 kW） total[1]</span><br><span class="line">        2 x electric motors, 260 hp（190 kW） total</span><br><span class="line">        2 x 60-cell batteries</span><br><span class="line">        2 shafts</span><br><span class="line">速度12节（22千米每小时；14英里每小时） surfaced, 9.5节（17.6千米每小时；10.9英里每小时） submerged</span><br><span class="line">续航距离1,240海里（2,300千米；1,430英里） (surfaced)</span><br><span class="line">潜航深度200英尺（61米）</span><br><span class="line">乘员15 officers and men</span><br><span class="line">武器装备4 × 18 inch (457 mm) bow torpedo tubes, (4 torpedoes)[3]</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/USS_D1.png" alt=""></p><p><br></p><ul><li><strong>美国一战驱逐舰</strong></li></ul><p>维基百科： <a href="https://zh.wikipedia.org/wiki/Category:%E7%BE%8E%E5%9B%BD%E4%B8%80%E6%88%98%E9%A9%B1%E9%80%90%E8%88%B0" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Category:%E7%BE%8E%E5%9B%BD%E4%B8%80%E6%88%98%E9%A9%B1%E9%80%90%E8%88%B0</a></p><p>驱逐舰（英语：destroyer）是一种多用途的军舰。驱逐舰的用途是保护舰队，驱逐和消灭鱼雷艇和潜艇等以鱼雷为主要武器的舰只，为舰队提供保护。</p><p><br><br><br></p><hr><p><br></p><h2 id="化学武器"><a href="#化学武器" class="headerlink" title="化学武器"></a>化学武器</h2><ul><li><strong>三氯硝基甲烷</strong></li></ul><p>三氯硝基甲烷，俗称氯化苦（英语：Chloropicrin），是一种化学式为Cl3CNO2的有机氯化合物。这种高毒性的物质曾被用作代号为PS的化学武器；现在则主要用作熏蒸剂和杀线虫剂。</p><p><br></p><ul><li><strong>二氯甲基胂</strong></li></ul><p>二氯甲基胂，亦可简写为MD，是一种有机化合物，化学式为CH3AsCl2。它是一种无色、易挥发的液体，具有很强的毒性，是一种糜烂性毒剂，可作为化学武器使用。</p><p><br></p><ul><li><strong>氯丙酮</strong></li></ul><p>氯丙酮，结构式ClCH2COCH3。无色有极强刺激性臭味液体，对生物体有强刺激性，在日光下分解产生强催泪性气体。见光变为暗黄的琥珀色。</p><p><br></p><ul><li><strong>溴乙酸乙酯</strong></li></ul><p>溴乙酸乙酯是一种有机化合物，化学式为CH2BrCO2C2H5。它可由乙酸为原料合成。它是一种催泪剂，具有果味和刺激性气味。它是毒性很高的烷基化试剂。吸入、吞咽或与皮肤接触可能致命。</p><p><br></p><ul><li><strong>绿十字毒气</strong></li></ul><p>绿十字毒气（德语：Grünkreuz)是在第一次世界大战时使用的化学武器，属于窒息性毒剂，是由三氯硝基甲烷，光气或/和双光气的混合物。</p><p><br></p><ul><li><strong>芥子毒气</strong></li></ul><p>芥子毒气（英语：mustard gas），亦简称为芥子气，学名二氯二乙硫醚，是一种重要的糜烂性毒剂，因味道与芥末相似而得名。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="二战"><a href="#二战" class="headerlink" title="二战"></a>二战</h1><p>第二次世界大战（又简称二次大战、二战、WWII等；英语：World War II；法语：Seconde Guerre mondiale；德语：Zweiter Weltkrieg；俄语：Вторая мировая война；日语：第二次世界大戰）是一次自1939年至1945年所爆发的全球军事冲突，整场战争涉及到全球绝大多数的国家，包括所有的大国，并最终分成两个彼此对立的军事同盟─同盟国和轴心国。这次战争是人类史上最大的战争，动员了1亿多名军人参与这次军事冲突。主要的参战国纷纷宣布进入总体战状态，几乎将自身国家的全部经济、工业和科学技术用于战争之上，同时将民用和军用的资源合并以便规划。包括有犹太人大屠杀、南京大屠杀、战争中日军对中国军民进行细菌战、以及最终美国对日本首次使用原子弹等事件，使第二次世界大战也是有纪录以来最多大规模民众死亡的军事冲突，全部将近有5,000万至7,000万人因而死亡，这让第二次世界大战成了人类历史上死伤人数最多的战争[2]。第二次世界大战改变了世界局势，英国、法国等欧洲殖民帝国衰落，美国和苏联取代了欧洲殖民帝国的地位成了新的超级大国并在战后形成了两极格局直到1991年。</p><p><br></p><p>二战装备比一战更加多样化，如坦克、飞机、潜艇、航空母舰…</p><p><br><br><br></p><h2 id="德国-1"><a href="#德国-1" class="headerlink" title="德国"></a>德国</h2><p>此列表将列出所有纳粹德国在二次大战中使用过的武器（包括在占领地生产和缴获的武器，但从盟军缴获的武器除外）。</p><p><br></p><h3 id="坦克-2"><a href="#坦克-2" class="headerlink" title="坦克"></a>坦克</h3><p>德国第二次世界大战装甲战斗车辆:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">輕型坦克一号坦克 二号坦克 35(t)坦克 38(t)坦克</span><br><span class="line">中型坦克三号坦克 四号坦克 五号坦克豹式</span><br><span class="line">重型坦克六号坦克 虎I 虎II</span><br><span class="line">突击炮三号突击炮 四号突击炮 10.5厘米突击榴弹炮42 33B突击步兵炮 灰熊式 突击虎式</span><br><span class="line">驅逐戰車／坦克驱逐车一号反坦克自走炮 黄鼠狼I式／II式／III式 追猎者式 四号驅逐戰車 犀牛式 猎豹式 猎虎式 象式</span><br><span class="line">自走炮一号自走重步兵炮 二号自走重步兵炮 黄蜂式 野蜂式 蟋蟀式 装甲机动车 40型发射架 卡尔自走臼炮</span><br><span class="line">防空坦克38(t)防空坦克 一号防空坦克 四号防空坦克 家具车式 旋风式 东风式 球状闪电</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>LT-35坦克</strong></li></ul><p>LT-35或LT vz. 35是捷克斯洛伐克制造的轻型坦克，在二战中被纳粹德国采用，德军称为Panzerkampfwagen 35(t)（Pz.Kpfw. 35(t)）或Panzer 35(t)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">乘员4人</span><br><span class="line">长度4.9米</span><br><span class="line">宽度2.16米</span><br><span class="line">高度2.2米</span><br><span class="line">重量11吨</span><br><span class="line">发动机斯科达汽油T11</span><br><span class="line">功率120匹 ( 89千瓦)</span><br><span class="line">功率重量比10.9匹/吨</span><br><span class="line">悬挂系统leaf spring bogie</span><br><span class="line">速度34公里/小时</span><br><span class="line">最大行程193公里</span><br><span class="line"></span><br><span class="line">装甲25毫米</span><br><span class="line">主要武器1 x Skoda 37毫米M1934炮</span><br><span class="line">辅助武器2 x 7.92毫米MG34机枪</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LT-35.png" alt=""></p><p><br></p><ul><li><strong>LT-38坦克</strong></li></ul><p>LT-38是捷克斯洛伐克斯柯达厂制造的LTvz-38轻型坦克，德军编号Sd.Kfz140 Pz.38(t)，由著名的斯科达（Skoda）兵工厂所制造，于1938年末起服役于捷军，1939年3月德国并吞捷克之后，鉴于此车设计优良，遂以Pz.38(t)的名号继续使用，一直到大战后期都还能看到此车的变种继续为德国在各地奋战。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">乘员4人</span><br><span class="line">长度4.61 米</span><br><span class="line">宽度2.14 米</span><br><span class="line">高度2.40 米</span><br><span class="line">重量9.5吨</span><br><span class="line">发动机汽油Praga EPA 6-cylinder</span><br><span class="line">功率126匹 ( 95千瓦)</span><br><span class="line">功率重量比13匹/吨</span><br><span class="line">悬挂系统钢板弹簧</span><br><span class="line">速度42公里/小时（公路）</span><br><span class="line">15公里/小时（非公路）</span><br><span class="line">最大行程160至250公里</span><br><span class="line"></span><br><span class="line">装甲A-D型：8-30毫米</span><br><span class="line">E型：50毫米</span><br><span class="line">主要武器1 x 37毫米 L/47.8炮</span><br><span class="line">辅助武器2 x 7.92毫米ZB53机枪</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LT-38.png" alt=""></p><p><br></p><ul><li><strong>一号坦克</strong></li></ul><p>一号坦克（德语：Panzerkampfwagen I，意为一号装甲战斗车辆）是德国于1930年代研制的一款轻型坦克，缩写为“PzKpfw I”，其官方军械署赋予的编号为SdKfz 101（“第101号特殊用途车辆”）。一号坦克自1932年开始设计，并于1934年开始大量生产，它原先仅作为德军建构新一代的装甲战斗与技术时所使用的训练车辆，但后来将其投入了西班牙内战、二战的波兰、法国、苏联、北非战场以及中国在抗日战争中使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">重量5.4(A型)/5.8(B型)吨</span><br><span class="line">长度4.02(A型)/4.42(B型)米</span><br><span class="line">宽度2.06米</span><br><span class="line">高度1.72米</span><br><span class="line">操作人数2人；车长及驾驶员</span><br><span class="line">装甲7至13毫米</span><br><span class="line">主武器两门7.92毫米MG13机枪（A型和B型）</span><br><span class="line">发动机克虏伯M 305 4汽缸气冷汽油引擎（A型）</span><br><span class="line">梅巴赫NL 38 TR 6汽缸液冷汽油引擎（B型以后）</span><br><span class="line">60PS（59匹，44千瓦）</span><br><span class="line">100PS（98匹马力、73千瓦）</span><br><span class="line">功率/重量11.1PS／吨</span><br><span class="line">悬挂椭圆钢板弹簧</span><br><span class="line">作战范围140千米（A型）</span><br><span class="line">170千米（B型）</span><br><span class="line">速度37千米／小时（A型）</span><br><span class="line">40千米／小时（B型）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PzKpfw-I.png" alt=""></p><p><br></p><ul><li><strong>二号坦克</strong></li></ul><p>二号坦克（德语：Panzer II）是第二次世界大战纳粹德国的坦克，这型坦克是用来填补其他设计中坦克的空隙, 它在第二次世界大战中的波兰战役与法国战役扮演了一个很重要的角色。到1942年底前绝大多数二号坦克已经离开第一线单位，生产线到1943年终止，然而车体继续被改良回其他种类装甲车辆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">乘员3人</span><br><span class="line">(车长/炮手、装填手、驾驶)</span><br><span class="line">长度4.8米</span><br><span class="line">宽度2.2米</span><br><span class="line">高度2.0米</span><br><span class="line">重量7.2吨</span><br><span class="line">发动机6-cyl汽油梅巴赫HL</span><br><span class="line">功率140匹 (105千瓦)</span><br><span class="line">功率重量比15匹/吨</span><br><span class="line">悬挂系统钢板弹簧</span><br><span class="line">速度40千米/小时</span><br><span class="line">最大行程200千米</span><br><span class="line"></span><br><span class="line">装甲5-14.5毫米</span><br><span class="line">主要武器20毫米 KwK 30 L/55 Ausf.A-f</span><br><span class="line">20毫米 KwK 38 L/55 Ausf.J-L</span><br><span class="line">辅助武器7.92毫米MG34机枪</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Panzer-II.png" alt=""></p><p><br></p><ul><li><strong>三号坦克</strong></li></ul><p>三号坦克（德语：Panzerkampfwagen III），是一款德军二战坦克。三号坦克拥有多种衍生及改进型，并由德军在二战中广泛使用，其改进和衍生型号一直服役到二战结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">重量19.5 吨</span><br><span class="line">长度5.38米 17ft 8in</span><br><span class="line">宽度2.91米 9ft 7in</span><br><span class="line">高度2.59米 8ft</span><br><span class="line">操作人数5名</span><br><span class="line"></span><br><span class="line">装甲30mm</span><br><span class="line">主武器37mm KwK L/46.5（A、B、C、D、E型、部分F、G型）</span><br><span class="line">50mm KwK L/42（部分F、G、J型，H型）</span><br><span class="line">50mm KwK L/60（部分J型、L型）</span><br><span class="line">75mm L/24（部分L型，M型，N型）</span><br><span class="line">副武器3挺MG34（A-H型）</span><br><span class="line">2挺MG34（G型以后）</span><br><span class="line">发动机迈巴赫HL108TR（A、B、C、D型）</span><br><span class="line">迈巴赫HL120TR V形12缸（E型以后）</span><br><span class="line">320匹（迈巴赫HL120TR）</span><br><span class="line">变速SRG 328-145型（E-G型）</span><br><span class="line">迈巴赫SSG77（H型）</span><br><span class="line">悬挂扭力杆悬挂[2]</span><br><span class="line">作战范围200公里[6]</span><br><span class="line">速度42公里/时[6]</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PzKpfw-III.png" alt=""></p><p><br></p><ul><li><strong>四号坦克</strong></li></ul><p>四号坦克（德语：Panzerkampfwagen IV，或称IV号坦克）为纳粹德国在第二次世界大战中生产的一款中型坦克。它原本设计目的是支援步兵，并且与专门执行反坦克任务的三号坦克协同作战。在三号坦克的整体性能逐渐不敷二次大战中期装甲战斗需要时，四号坦克因所使用的技术较为成熟而比三号坦克有更大的改良空间，因此在不断改进的过程中，四号坦克逐渐成为装甲师装备的主力车种。四号坦克较大的改良空间亦使其较为容易改装，既有改造为突击炮、自行反坦克炮，也有改造为弹药运送车、架桥坦克等，成为用途最广泛的坦克。从投产至二战结束，德国共制造了逾8,800辆四号坦克或其改造型。四号坦克参加了几乎所有战役，而且表现出相当的可靠性，没有像豹式坦克初期型号有大量的技术问题，就数量、服役时间来看，这型坦克才是德国装甲兵的主力，因此被德军装甲兵昵称为“军马”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">乘员5人（车长、炮手、装填手、驾驶员及无线电操作员）</span><br><span class="line">长度7.02米</span><br><span class="line">宽度2.88米</span><br><span class="line">高度2.68米</span><br><span class="line">重量B型：16吨；C型：18.14吨</span><br><span class="line">D型：20吨；F型：22.3吨</span><br><span class="line">G型：23.6吨；H型：25吨</span><br><span class="line">发动机梅巴赫A型：HL108TR 12缸汽油引擎</span><br><span class="line">B型：HL120TR 12缸汽油引擎</span><br><span class="line">C型：HL120TRM 12缸汽油引擎</span><br><span class="line">功率A型：250hp；B型：300hp</span><br><span class="line">功率重量比12匹/吨</span><br><span class="line">悬挂系统弹簧悬挂（C型开始使用板簧悬挂系统）</span><br><span class="line">速度A型：31公里/小时〔道路〕</span><br><span class="line">B型：39公里/小时〔道路〕</span><br><span class="line">42公里/小时（道路）</span><br><span class="line">16公里/小时（越野）</span><br><span class="line">最大行程200公里</span><br><span class="line">J型：320公里</span><br><span class="line"></span><br><span class="line">装甲炮塔正面50毫米/10°</span><br><span class="line">炮塔两侧30毫米/26°</span><br><span class="line">炮塔后方30毫米/10°</span><br><span class="line">炮塔顶10毫米</span><br><span class="line">车体正面80毫米/11°</span><br><span class="line">车体侧面30毫米（后期型号加5毫米裙甲）</span><br><span class="line">车体后面20毫米</span><br><span class="line">主要武器坦克炮-KwK40 75毫米43倍径炮（KwK-40 75mm）</span><br><span class="line">辅助武器2×7.92毫米MG34</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PzKpfw-IV.png" alt=""></p><p><br></p><ul><li><strong>五号坦克 </strong></li></ul><p>五号坦克 黑豹式（德语：Panzerkampfwagen V Panther）是第二次世界大战中纳粹德国所制造的中型坦克。制式编号为Sd.Kfz.171。其后，由于“五号坦克（V号坦克）”这个名称被废除，所以在后来以“黑豹式坦克（Pz.Kpfw. Panther）”作为制式名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">乘员5人</span><br><span class="line">车长、炮手、驾驶、通讯员、装填手[3]</span><br><span class="line">长度6.87米（车身）</span><br><span class="line">8.66米（全长）</span><br><span class="line">宽度3.27米</span><br><span class="line">高度2.995米</span><br><span class="line">重量44.8吨（战斗重量）</span><br><span class="line">发动机梅巴赫230P30</span><br><span class="line">水冷V型12汽缸汽油引擎</span><br><span class="line">功率700匹</span><br><span class="line">功率重量比15.625匹／吨</span><br><span class="line">悬挂系统双扭力杆</span><br><span class="line">速度55公里／小时（平地）</span><br><span class="line">30公里／小时（越野）</span><br><span class="line">最大行程250公里（平地）、100公里（越野）</span><br><span class="line"></span><br><span class="line">装甲前方80毫米，倾斜装甲139.48毫米</span><br><span class="line">侧面及后方40毫米</span><br><span class="line">主要武器7.5厘米Kwk42L/70炮（炮弹79发后期81发）</span><br><span class="line">辅助武器7.92毫米MG34机枪 ×2</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Panther.png" alt=""></p><p><br></p><ul><li><strong>六号坦克</strong></li></ul><p>六号坦克（德语：Panzerkampfwagen VI）是纳粹德国在第二次世界大战期间所使用的重坦克。<br>被称为六号坦克的坦克共有2款，分别是I型与II型，即为“虎I”与“虎II”。在当时被评为其中一系列世界上最强的坦克。一般称其为“虎式坦克”，或者以英文“Tiger Tank”来称呼。</p><p><br></p><ul><li><strong>虎I坦克</strong></li></ul><p>虎I坦克（德语：Panzerkampfwagen VI Ausf. E (Sd Kfz 181) Tiger），是第二次世界大战中德意志国防军及武装党卫队所使用的坦克，正式名称为六号坦克（VI号坦克）。一般称为虎式坦克，简称“虎式”或“Tiger”。从1942年下半年服役起至1945年纳粹德国投降为止，一直是活跃于第一线的重型坦克。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">乘员5人</span><br><span class="line">车长、炮手、装填手、驾驶员、通讯员</span><br><span class="line">长度8.45米（全长）</span><br><span class="line">6.316米（车身）</span><br><span class="line">宽度3.705米</span><br><span class="line">高度3米</span><br><span class="line">重量57吨（战斗重量）</span><br><span class="line">发动机梅巴赫HL230 P45</span><br><span class="line">水冷4冲程V型12汽缸汽油引擎[2]</span><br><span class="line">功率700匹</span><br><span class="line">功率重量比12.3匹／吨</span><br><span class="line">悬挂系统扭力杆</span><br><span class="line">速度40公里／小时（平地）</span><br><span class="line">20-25公里／小时（越野）</span><br><span class="line">最大行程100公里（平地）、60公里（越野）</span><br><span class="line"></span><br><span class="line">装甲前方100毫米</span><br><span class="line">侧面及后方80毫米</span><br><span class="line">车顶25毫米</span><br><span class="line">主要武器8.8厘米Kwk 36 L/56炮（炮弹92发）</span><br><span class="line">辅助武器7.92毫米MG34机枪 ×2</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Tiger-I.png" alt=""></p><p><br></p><ul><li><strong>虎II坦克</strong></li></ul><p>六号坦克B型 （德语：Panzerkampfwagen VI Ausf.B Tiger II，通称“虎王坦克”或“虎II坦克”），是一款纳粹德国在二战期间研发的重型坦克。<br>虎王坦克是虎I坦克的继任者，它继承了虎I坦克的重装甲风格，还有着豹式坦克那样的倾斜装甲。虎王坦克重达70公吨，前装甲有100到180毫米厚，装配一门88毫米KwK 43 L/71式坦克炮。没有炮塔的猎虎式坦克歼击车与虎王坦克共用同一种底盘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">重量68.5公吨（装备保时捷炮塔）</span><br><span class="line">69.8公吨（装备亨舍尔炮塔）</span><br><span class="line">长度7.38米（车体）</span><br><span class="line">10.286米（33英尺9英寸）（炮向前）</span><br><span class="line">宽度3.755米</span><br><span class="line">高度3.09米</span><br><span class="line">操作人数五人（车长、炮手、装填手、通信兵、驾驶员）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">装甲25～185毫米（1～7英寸）</span><br><span class="line">主武器1门KwK43 88毫米坦克炮</span><br><span class="line">保时捷型炮塔可携带80发炮弹</span><br><span class="line">亨舍尔型炮塔可携带86发炮弹</span><br><span class="line">副武器2挺7.92毫米MG 34 携带5850发弹药</span><br><span class="line">发动机V-12 迈巴赫HL 230 P30汽油机 690匹</span><br><span class="line">功率/重量8.97匹/公吨</span><br><span class="line">变速迈巴赫OLVAR EG 40 12 16 B（8个前进档、4个倒车档）</span><br><span class="line">悬挂扭力杆悬挂</span><br><span class="line">底盘高度495至510毫米</span><br><span class="line">燃料容量860升（190英制加仑）</span><br><span class="line">作战范围于公路上行驶：170千米</span><br><span class="line">越野时：120千米</span><br><span class="line">速度公路上最大速度：41.5千米/时</span><br><span class="line">能允许持续行进：38千米/时</span><br><span class="line">越野时：15-20千米/时</span><br></pre></td></tr></table></figure><p>!()[/images/Weapons/Tiger-II.png]</p><p><br></p><ul><li><strong>七号狮式坦克</strong></li></ul><p>七号狮式超重型坦克（Panzerkampfwagen VII Löwe）为二战纳粹德国研发的一款超重型坦克。<br>制造数量    从未被制造出来。</p><p><br></p><ul><li><strong>八号坦克鼠式</strong></li></ul><p>八号坦克鼠式（Panzerkampfwagen VIII Maus），是德国在第二次世界大战设计并制造的超重型坦克。<br>产量    2（原型车，其中只有一台完工）。</p><p><br></p><ul><li><strong>九/十号坦克</strong></li></ul><p>九号坦克（Panzerkampfwagen IX）及十号坦克（Panzerkampfwagen X），为纳粹德国在第二次世界大战晚期故意散布欺敌的虚构坦克开发计划。</p><p><br></p><ul><li><strong>陆地巡航者P. 1000老鼠</strong></li></ul><p>P. 1000 巨鼠重型巡航坦克（Landkreuzer P. 1000 Ratte）是纳粹德国计划开发的一种重量达1000吨的超重型坦克，由德国的克虏伯公司研制，但计划在1943年被放弃，没有一辆P-1000被生产出来。此超重型坦克非常巨大，高度有11米，炮台也有两个平常人的高度。<br>制造数量    0（完全从未实际投产）</p><p><br></p><ul><li><strong>陆地巡航者P.1500怪物</strong></li></ul><p>P. 1500 怪物陆行舰（Landkreuzer P. 1500 Monster）外型和古斯塔夫超重型铁道炮相似，是纳粹德国计划开发的一种重量达1,500吨的超重型坦克。<br>制造数量    0（完全从未实际投产）</p><p><br><br><br></p><h3 id="潜艇"><a href="#潜艇" class="headerlink" title="潜艇"></a>潜艇</h3><p>submarine</p><p><br></p><ul><li><strong>U-47潜艇</strong></li></ul><p>U-47号潜艇是一艘于第二次世界大战时于纳粹德国海军服役的VIIB型U-潜艇。它在1937年2月25日开始建造并于1938年10月29日在基尔的克虏伯造船厂下水。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">舰型VIIB型</span><br><span class="line">排水量761吨</span><br><span class="line">865吨（潜入海底）</span><br><span class="line">全长66.6米（219英尺）</span><br><span class="line">全宽6.2米（20英尺）</span><br><span class="line">深度220米（720英尺）</span><br><span class="line">动力来源2 × 1400 马力的柴油机</span><br><span class="line">2 × 375 PS （280 kW） 的电动马达</span><br><span class="line">速度</span><br><span class="line">最大17.7节（海面）</span><br><span class="line">最大7.6节（潜入海底）</span><br><span class="line">续航距离6,500海里（12,000千米）</span><br><span class="line">乘员44-48</span><br><span class="line">船员47</span><br><span class="line">武器装备</span><br><span class="line">鱼雷发射管：前4后1，共5个533mm发射管</span><br><span class="line">8.8厘米 SK C/35舰炮（虽同为88毫米口径但是与8.8 cm Flak 18/36/37高射炮不同），2厘米 MG C/30 机炮</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/U-47.png" alt=""></p><p><br></p><ul><li><strong>U-2365</strong></li></ul><p>U-2365号潜艇为纳粹德国海军XXIII级潜艇（德语：Klasse XXIII、或称Typ XXIII）的一艘，属于近海小型攻击潜艇。<br>U-2365号潜艇于1945年3月2日服役。由于服役时已临近战争尾声，该艇并未取得任何战果，最终于1945年5月8日中被凿沉在卡特加特海峡。</p><p><br><br><br></p><h3 id="火炮"><a href="#火炮" class="headerlink" title="火炮"></a>火炮</h3><p>第二次世界大战期间德国陆军所用火炮:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">坦克主炮</span><br><span class="line">2厘米KwK 30炮 3.7厘米KwK 36炮 3.7厘米KwK 38炮(t) 5厘米KwK 38炮 5厘米KwK 39炮 7.5厘米KwK 37炮 7.5厘米KwK 40炮 7.5厘米KwK 42炮 8.8厘米 KwK 36炮 8.8厘米 KwK 43炮</span><br><span class="line"></span><br><span class="line">反坦克炮</span><br><span class="line">sPzB 41反坦克炮 PaK 36反坦克炮 4.2厘米Pak 41反坦克炮 Pak 38反坦克炮 Pak 97/38反坦克炮 Pak 39反坦克炮 Pak 40反坦克炮 7.5厘米Pak 41反坦克炮 7.5厘米Pak 42反坦克炮 7.62厘米PaK 36反坦克炮(r) 8公分PAW 600反坦克炮 Pak 43反坦克炮 PaK 44反坦克炮</span><br><span class="line"></span><br><span class="line">步兵支援火炮</span><br><span class="line">le.IG 1步兵支援火炮 IG 37步兵支援火炮 IG 42步兵支援火炮 sIG 33步兵支援火炮 GebH 34步兵支援火炮 GebG 36步兵支援火炮 GebH 40步兵支援火炮</span><br><span class="line"></span><br><span class="line">无后座力炮</span><br><span class="line">7.5厘米LG 40无后座力炮 105毫米LG 40无后座力炮 LG 42无后座力炮</span><br><span class="line"></span><br><span class="line">重型迫击炮</span><br><span class="line">10公分35年式喷烟者 10公分40年式喷烟者 leLdgW迫击炮 GrW 69迫击炮 schwerer Ladungswerfer迫击炮</span><br><span class="line"></span><br><span class="line">火箭炮</span><br><span class="line">7.3厘米Föhn-Gerät 7.3厘米41年式Propagandawerfer 8厘米Raketen-Vielfachwerfer 15厘米Do-Gerät 15公分41年式喷烟者 21公分42年式喷烟者 28/32公分41年式喷烟者 30公分42年式喷烟者 30 cm Raketenwerfer 56 Wurfrahmen 40多管火箭炮</span><br><span class="line"></span><br><span class="line">中重型野战炮</span><br><span class="line">FK 16 nA野战炮 FK 18野战炮 FK 38野战炮 FK 7M85野战炮 10 cm K 17野战炮 sK 18野战炮 leFH 16榴弹炮 leFH 18榴弹炮 leFH 18M榴弹炮 leFH 18/40榴弹炮 sK 18/40野战炮 sFH 13榴弹炮 SFH 18榴弹炮 K 16野战炮 K 18重炮 K 39重炮 SK C/28重炮 K 18重榴弹炮 Mrs 16重榴弹炮 Mrs 18重榴弹炮</span><br><span class="line"></span><br><span class="line">超重炮及攻城武器</span><br><span class="line">K 38重炮 K 39重炮 H 39攻城榴弹炮 K(t)超重型攻城炮 Kanone L/46 K 3重型攻城炮 H L/12重型攻城榴弹炮 Haubitze M1攻城榴弹炮 Gamma Mörser攻城榴弹炮 卡尔臼炮 古斯塔夫超重型铁道炮</span><br><span class="line"></span><br><span class="line">列车炮</span><br><span class="line">15厘米K列车炮 17厘米K列车炮 20.3厘米K列车炮 21厘米K 12列车炮 24厘米Th K列车炮 24厘米ThBr K列车炮 28厘米kzBr K列车炮 28厘米lgBr K列车炮 28厘米sBr K列车炮 28厘米Br NK列车炮 K5列车炮 38厘米Siegfried K列车炮 古斯塔夫超重型铁道炮</span><br><span class="line"></span><br><span class="line">防空炮</span><br><span class="line">2厘米30/38年式高射炮 2厘米Gebirgsflak 38高射炮 3.7厘米18/36/37/43年式高射炮 5厘米41年式高射炮 8.8厘米18/36/37年式高射炮 8.8厘米41年式高射炮 10.5厘米38年式高射炮 12.8厘米40年式高射炮</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>Mrs 18重榴弹炮</strong></li></ul><p>Mrs 18重榴弹炮（21公分Mrs 18式）是纳粹德国于第二次世界大战中所使用的一种重型榴弹炮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量16,700 公斤（36,817 磅）</span><br><span class="line">枪管长度6.51米L/30（30倍径）</span><br><span class="line">炮弹分离装填式弹药</span><br><span class="line">炮弹重量113公斤（高爆弹）</span><br><span class="line">口径211 毫米</span><br><span class="line">后膛水平滑契式炮栓</span><br><span class="line">后坐力液压机械复合式</span><br><span class="line">载具box trail</span><br><span class="line">射击仰角-6° to +70°</span><br><span class="line">回旋角度16°（于轮上）</span><br><span class="line">360°（于平台上）</span><br><span class="line">枪口初速550 米/秒</span><br><span class="line">有效射程14,500 米</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mrs-18.png" alt=""></p><p><br></p><ul><li><strong>3.7厘米KwK 36炮</strong></li></ul><p>3.7 cm KwK 36 L/45 (3.7 公分战车炮36 45倍径)是第二次世界大战时由德国所生产的3.7cm火炮，主要用做三号战车的主炮，亦见于其他德军装甲车辆上。</p><p><br></p><ul><li><strong>5厘米KwK 38炮</strong></li></ul><p>5 cm KwK 38 L/42(5公分战车炮 42倍径)是二战时德军所用的50毫米火炮，仅见于三号战车上使用。</p><p><br></p><ul><li><strong>5厘米KwK 39炮</strong></li></ul><p>5 cm KwK 39 L/60 (5公分战车炮 60倍径)是二战时德军所用的50毫米火炮，主要作为1941年以后，三号战车后续型号的主炮。</p><p><br></p><ul><li><strong>7.5厘米KwK 37炮</strong></li></ul><p>7.5 cm KwK 37 L/24(7.5公分战车炮24倍径)是一种二战时，德军所使用的75mm，类似榴弹炮的短管战车炮。主要用于四号战车的早期型号和三号突击炮的早期型号。</p><p><br></p><ul><li><strong>7.5厘米KwK 40炮</strong></li></ul><p>7.5 cm KwK 40是在二战时，德军所使用的战车炮。主要搭载于于四号战车（F2型以后）、三号突击炮以及四号突击炮上。</p><p><br></p><ul><li><strong>7.5厘米LG 40无后座力炮</strong></li></ul><p>7.5厘米LG 40无后座力炮是由德国军队在第二次世界大战期间使用的无后座力炮。</p><p><br></p><ul><li><strong>7.5厘米Pak 41反坦克炮</strong></li></ul><p>7.5 cm Pak 41是第二次世界大战后期进入服役，由德国制造的反坦克炮。</p><p><br></p><ul><li><strong>7.5厘米 Pak 39炮</strong></li></ul><p>7.5厘米Pak39(L/48)（德语：7.5 cm Panzerjägerkanone 39），是一款德国于第二次世界大战期间所使用的反坦克火炮。该火炮于1942年1月开始装备于四号驱逐战车和追猎者式驱逐战车等驱逐战车。</p><p><br></p><ul><li><strong>KwK36 88毫米战车炮</strong></li></ul><p>88 mm KwK 36 L/56 (德语：8.8 cm KampfwagenKanone 36 L/56) 是在第二次世界大战中德意志国防军所使用的88毫米坦克炮。由克鲁伯所研制，是虎I坦克的主武器。</p><p><br></p><ul><li><strong>KwK43 88毫米战车炮</strong></li></ul><p>8.8 cm KwK 43 L/71 (德语：KampfWagenKanone—坦克炮) 是在第二次世界大战中，克鲁伯公司所设计，德意志国防军所使用的一门坦克炮。它是虎II坦克的主武器，并且是在第二次世界大战中作为放在拥有可转动炮塔的战车上最具威力的一门炮。</p><p><br><br><br></p><h3 id="装甲战斗车"><a href="#装甲战斗车" class="headerlink" title="装甲战斗车"></a>装甲战斗车</h3><p><br><br><br></p><h3 id="飞机-2"><a href="#飞机-2" class="headerlink" title="飞机"></a>飞机</h3><p><br><br><br></p><h3 id="船舰"><a href="#船舰" class="headerlink" title="船舰"></a>船舰</h3><p><br><br><br></p><h3 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h3><ul><li><strong>39型卵状手榴弹</strong></li></ul><p>39型卵状手榴弹（德语：Eihandgranate 39）是第二次世界大战期间德军所产的手榴弹。</p><p><br></p><ul><li><strong>柄式手榴弹</strong></li></ul><p>柄式手榴弹（德语：Stielhandgranate）为德国陆军自第一次世界大战中期至第二次世界大战末期所使用之手榴弹。</p><p><br></p><ul><li><strong>铁拳</strong></li></ul><p>铁拳（德语：Panzerfaust）又称作装甲拳或反坦克榴弹发射器，是第二次世界大战时由德国研发与制造的火药推进无后座力反装甲武器。</p><p><img src="/images/Weapons/Panzerfaust.png" alt=""></p><p><br></p><ul><li><strong>防空铁拳</strong></li></ul><p>防空铁拳(德文:Fliegerfaust)是第二次世界大战末期德国士兵使用的手提防空火箭弹，由于在二战末期，德军失去制空权(尤其在西线)，而研制出来的步兵手提防空火箭弹。</p><p><img src="/images/Weapons/Fliegerfaust.png" alt=""></p><p><br></p><ul><li><strong>装甲投掷雷</strong></li></ul><p>装甲投掷雷（德语：Panzerwurfmine，也缩写为PWM）是一种由纳粹德国开发并在二战中生产使用的反坦克碰炸手榴弹。</p><p><br></p><ul><li><strong>坦克杀手</strong></li></ul><p>Panzerschreck（德语）是二战中，纳粹德国的Raketenpanzerbüchse（“反战车火箭步枪”，缩写为RPzB）的昵称，它是一种口径为88毫米，可重复使用的反战车火箭发射器。</p><p><img src="/images/Weapons/Panzerschreck.png" alt=""></p><p><br></p><ul><li><strong>LeGrW 36型50毫米迫击炮</strong></li></ul><p>LeGrW 36型50毫米迫击炮（德语：5cm leichter Granatenwerfer 36 ）是纳粹德国在第二次世界大战中使用的一种轻型迫击炮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量14 kg (31 lb)</span><br><span class="line">枪管长度465 mm (18 in)</span><br><span class="line">操作人数2</span><br><span class="line">炮弹0.9 kg (2 lb) TNT 装药</span><br><span class="line">口径50 mm (1.97 in)</span><br><span class="line">射击仰角42°到 90°</span><br><span class="line">回旋角度33°到 45°</span><br><span class="line">射速15-25 发/每分钟</span><br><span class="line">枪口初速75 m/s (246 ft/s)</span><br><span class="line">有效射程50 m (54.7 yd) 最小</span><br><span class="line">510 m (557.7 yd) 最大</span><br><span class="line">最大射程520 m (568.7 yd)</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LeGrW-36.png" alt=""></p><p><br></p><ul><li><strong>GrW 34型81毫米迫击炮</strong></li></ul><p>GrW 34型81毫米迫击炮（德语：8 cm Granatwerfer 34）是纳粹德国陆军在第二次世界大战使用的一种迫击炮，这种迫击炮的射速和射程都颇为优秀，在训练有素的士兵手中可以发挥出更大的威力。在单兵携带时，这种迫击炮可以分解为炮筒、底座和支架三个部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量62 kg (136.6 lbs) 钢炮筒</span><br><span class="line">57 kg (125.6 lbs)合金炮筒</span><br><span class="line">枪管长度1,143 mm (45 in)</span><br><span class="line">操作人数8</span><br><span class="line">炮弹3.5 kg (7.71 lbs)</span><br><span class="line">口径81.4 mm (3.20 in)</span><br><span class="line">射击仰角45°到90°</span><br><span class="line">回旋角度10°到23°</span><br><span class="line">射速15-25 发/每分钟</span><br><span class="line">枪口初速174 m/s (571 ft/s)</span><br><span class="line">最大射程2,400 m (2,624 yds)</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/GrW-34.png" alt=""></p><p><br></p><ul><li><strong>GrW 42型81毫米迫击炮</strong></li></ul><p>GrW 42型81毫米迫击炮（德语：kurzer 8 cm Granatwerfer 42 ）是纳粹德国在第二次世界大战中使用的一种前装式滑膛迫击炮。是GrW 34型81毫米迫击炮使用短炮筒后的轻量化版本，最初计划是供伞兵使用的。然而由于50毫米口径的LeGrW 36型50毫米迫击炮射程太近，此款迫击炮也常被用来替换前者。GrW 42发射的炮弹重量是前者的3.5倍，射程则为两倍，迫击炮的重量则不到前者两倍，同时还可分解为三个部分携带。</p><p><br></p><ul><li><p><strong>鲁格手枪</strong></p></li><li><p><strong>M1879帝国转轮手枪</strong></p></li><li><p><strong>毛瑟C96手枪</strong></p></li></ul><p><br></p><ul><li><strong>瓦尔特P38手枪</strong></li></ul><p>瓦尔特P38（德语：Walther P38）是由德国瓦尔特武器公司在1930年代为德意志国防军研制的一种9毫米口径半自动手枪，此枪在二战期间被广泛采用。尽管该枪的出现原先是为了取代成本昂贵的鲁格P08手枪，然而直到二战结束时也没有完全取代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量800克</span><br><span class="line">长度216毫米</span><br><span class="line">枪管长度125毫米</span><br><span class="line">子弹9毫米鲁格弹</span><br><span class="line">枪机短行程后座</span><br><span class="line">单动/双动</span><br><span class="line">枪口初速365米/秒</span><br><span class="line">有效射程50米</span><br><span class="line">供弹方式8发可拆式单排弹匣</span><br><span class="line">瞄具凹形照门，刀片形准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/P38.png" alt=""></p><p><br></p><ul><li><strong>ViS wz. 35手枪</strong></li></ul><p>Pistolet ViS wz. 35是由波兰枪工Piotr Wilniewczyc研制的一款半自动手枪，于1935年成为波兰军队的制式手枪。ViS wz. 35一直都被认为是有史以来最好的手枪之一，更是一些枪械收藏家的珍藏之一。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量1.123 kg（上弹）</span><br><span class="line">0.950 kg（空枪）</span><br><span class="line">长度205 mm</span><br><span class="line">枪管长度115 mm</span><br><span class="line">子弹9毫米鲁格弹</span><br><span class="line">口径9×19毫米</span><br><span class="line">枪机枪管短行程后座作用、单动</span><br><span class="line">枪口初速345米/秒</span><br><span class="line">供弹方式8发弹匣</span><br><span class="line">瞄具金属缺口式照门及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/ViSwz-35.png" alt=""></p><p><br></p><ul><li><p><strong>MP18冲锋枪</strong></p></li><li><p><strong>MP28冲锋枪</strong></p></li></ul><p><br></p><ul><li><strong>MP3008冲锋枪</strong></li></ul><p>MP 3008是纳粹德国在1945年二战末期制造的冲锋枪。主要目的是提供给在战争末期扩编的国民突击队使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量3.18公斤</span><br><span class="line">长度760毫米</span><br><span class="line">枪管长度196毫米</span><br><span class="line">子弹9×19毫米</span><br><span class="line">口径9毫米</span><br><span class="line">枪机反冲作用，开放式枪机</span><br><span class="line">发射模式全自动</span><br><span class="line">射速450发/分锺</span><br><span class="line">枪口初速365米/秒</span><br><span class="line">供弹方式32发MP40可拆卸式弹匣</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MP3008.png" alt=""></p><p><br></p><ul><li><strong>MP34冲锋枪</strong></li></ul><p>MP34（德语：Maschinenpistole 34，意为：34型冲锋枪）是一枝由奥地利斯泰尔兵工厂生产的冲锋枪，在1930年代至二战期间被奥地利警察以及随后的德国国防军和武装党卫队所采用。</p><p><img src="/images/Weapons/MP34.png" alt=""></p><p><br></p><ul><li><strong>MP35冲锋枪</strong></li></ul><p>MP35（德语：Maschinenpistole 35，意为：35型冲锋枪）是一枝由纳粹德国生产的冲锋枪，在二战以前和期间被德国国防军、武装党卫队和德国警察所采用。</p><p><img src="/images/Weapons/MP35.png" alt=""></p><p><br></p><ul><li><strong>MP40冲锋枪</strong></li></ul><p>MP40冲锋枪（Maschinenpistole 40），常被称为“施迈瑟冲锋枪”，是一种为方便大量生产而设计，与传统枪械制造观念不同的冲锋枪，亦是第二次世界大战期间德国军队使用最广泛、性能最优良的冲锋枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4公斤（8.82磅）</span><br><span class="line">长度收起枪托：630毫米</span><br><span class="line">展开枪托：833毫米</span><br><span class="line">枪管长度251毫米</span><br><span class="line">子弹9×19毫米鲁格弹</span><br><span class="line">枪机提前击发底火式反冲作用及开放式枪机</span><br><span class="line">发射模式全自动</span><br><span class="line">射速500发／分钟</span><br><span class="line">枪口初速约380米／秒</span><br><span class="line">有效射程约100米</span><br><span class="line">供弹方式32发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MP40.png" alt=""></p><p><br></p><ul><li><strong>MP41冲锋枪</strong></li></ul><p>MP41（德语：Maschinenpistole 41，意为：41型冲锋枪）是一款由纳粹德国枪械设计师胡戈·施迈瑟所研发、黑内尔公司生产的冲锋枪，外观而言是MP40冲锋枪改用MP28冲锋枪的木制枪托的修改型，发射9×19毫米鲁格手枪子弹。<br>MP41是专门为出口和警察部门而生产。</p><p><img src="/images/Weapons/MP41.png" alt=""></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%B8%80%E6%88%98%E6%AD%A6%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;各国一战武器，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%86%9B%E4%BA%8B%E8%A3%85%E5%A4%87&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第一次世界大战武器装备，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;各国二战武器，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第二次世界大战武器装备，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;最近玩&lt;strong&gt;battlefield I&lt;/strong&gt;(一战)有感，一时兴起，顺带在&lt;strong&gt;battlefield V&lt;/strong&gt;(二战)发布前夕做一个一战二战各国使用的武器装备归纳总结。&lt;/p&gt;
&lt;p&gt;玩了战地1，才体会到战争的残酷性，使我对战争的感觉从光辉转变为厌恶。没有什么英雄在我心中，你不知道自己何时会死去，或即将死去。&lt;br&gt;战场上每个人都一样，都是一条鲜活的生命，有家人有朋友。从战争游戏来反思战争，这点DICE studio做的不错。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;衷心祝愿世界和平！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weapon" scheme="https://zhang21.github.io/categories/Weapon/"/>
    
    
      <category term="武器" scheme="https://zhang21.github.io/tags/%E6%AD%A6%E5%99%A8/"/>
    
      <category term="战争" scheme="https://zhang21.github.io/tags/%E6%88%98%E4%BA%89/"/>
    
  </entry>
  
  <entry>
    <title>英语语法</title>
    <link href="https://zhang21.github.io/2018/11/14/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/"/>
    <id>https://zhang21.github.io/2018/11/14/英语语法/</id>
    <published>2018-11-14T13:06:24.000Z</published>
    <updated>2019-02-10T13:24:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考: 《新概念英语语法手册》</p><p><br><br><br></p><hr><a id="more"></a><p><br><br><br></p><h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>名词是指人或事物的名称，也包括一些具有抽象概念的名词。</p><p><br><br><br></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li><strong>充当动词的主语</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Our &apos;agent&apos; in Cairo sent a telex this morning.</span><br><span class="line">#今天早晨我们在开罗的代理人发来一封电传。</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>作动词的直接宾语</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Frank sent an urgent &apos;telex&apos; from Cairo this morning.</span><br><span class="line">#弗兰克今天早上从开罗发来一份加急电传。</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>作动词的间接宾语</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Frank sent his &apos;boss&apos; a telex.</span><br><span class="line">#弗兰克给他的老板发了一份电传。</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>作介词的宾语</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I read about it in &apos;the China Daily&apos;.</span><br><span class="line">#我在中国日报上看到了这个消息。</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>作be、seem等系动词的表语</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Jones is our &apos;guest&apos;.</span><br><span class="line">#琼斯是我们的客人</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>作同位语</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Laura, &apos;a BBC reporter&apos;, asked for an interview.</span><br><span class="line">#劳拉，BBC的记者，要求采访。</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="复合名词"><a href="#复合名词" class="headerlink" title="复合名词"></a>复合名词</h2><p>由两个或两个以上的名词部分组合而成的名词，称为复合名词。</p><p><br></p><ul><li><strong>复合名词通常有四种构成形式</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 名词+名词</span><br><span class="line">a keyboard(键盘)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 形容词+名词</span><br><span class="line">a greenhouse(温室)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 动名词+名词</span><br><span class="line">drinking water(饮用水)</span><br><span class="line"></span><br><span class="line">4. 名词+动名词</span><br><span class="line">sight-seeing(观光)</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>还有一些复合名词表示特定含义</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oxford Road, Beijing Capital International Airport</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><strong>专有名词</strong></li></ul><p>专有名词指特定的人、地方、事物或概念，他们被认为是独一无二的。专有名词的开头字母要大写，前面一般不用冠词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#人名</span><br><span class="line">Parker</span><br><span class="line">Mr. Parker</span><br><span class="line"></span><br><span class="line">#称呼</span><br><span class="line">Mum</span><br><span class="line"></span><br><span class="line">#地名</span><br><span class="line">Asia</span><br><span class="line"></span><br><span class="line">#月份、星期、节日、季节</span><br><span class="line">April</span><br><span class="line">Monday</span><br><span class="line">Christmas</span><br><span class="line">spring(季节一般不大写)</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>普通名词</strong></li></ul><p>普通名词又可分为<strong>可数名词</strong>和<strong>不可数名词</strong>。<br>在普通名词前通常要使用冠词a, an, the…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#可数名词</span><br><span class="line">a book, an envelop</span><br><span class="line">how many stamps do you have?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#不可数名词</span><br><span class="line">water, milk, air</span><br><span class="line">how much milk do you have?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#既是可数又是不可数</span><br><span class="line">He ate much fish yesterday.</span><br><span class="line">There are a large variety of fishes in the pond.</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>复形名词</strong></li></ul><p>有些名词虽然形式上是复数形式，即以<code>-s</code>结尾，但实际上却表示单数意义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The news is at six.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="名词的数"><a href="#名词的数" class="headerlink" title="名词的数"></a>名词的数</h2><ul><li><strong>名词的单数形式和复数形式</strong></li></ul><table><thead><tr><th>拼写规则</th><th>单数</th><th>复数</th></tr></thead><tbody><tr><td>一般情况下加<code>-s</code></td><td>cat</td><td>cats</td></tr><tr><td>以 -o, -x, -ch, -sh  结尾的加 <code>-es</code></td><td>potato <br> class <br> box <br> watch <br> brush</td><td>potatoes <br> classes <br> boxes <br> watches <br> brushes</td></tr><tr><td>以 辅音字母加 -y结尾，去-y加-ies <br> 元音字母加 -y 结尾的加 -s</td><td>country <br> boys</td><td>countries <br> boys</td></tr><tr><td>以 -y 结尾的专有名词加 -s</td><td>Fry</td><td>Frys</td></tr><tr><td>以 -f, -fe 结尾的名词， 把-f, -fe变为 -ves</td><td>wife</td><td>wives</td></tr><tr><td>不规则变化</td><td>man <br> sheep</td><td>men <br> sheep</td></tr></tbody></table><p><br></p><ul><li><strong>以 -o 结尾一般要在后面加 -es</strong></li></ul><p>但元音字母加 -o 结尾的名词则只能加 -s。</p><p><br></p><ul><li><strong>不规则拼写法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foot/feet</span><br><span class="line">mouse/mice</span><br><span class="line">tooth/teeth</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>单/复数形式相同</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sheep</span><br><span class="line">deer</span><br><span class="line">aricraft</span><br><span class="line">Chinese</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="名词的性"><a href="#名词的性" class="headerlink" title="名词的性"></a>名词的性</h2><ul><li>阳性</li><li>阴性</li><li>中性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acrot(男演员)</span><br><span class="line">actress(女演员)</span><br><span class="line">guest(客人)</span><br></pre></td></tr></table></figure><p><br></p><p>有些名词可以不加思索的用阳性代词he、阴性代词she、中性代词it来指代。<br>表示动物性别相对的名词一般可用it指代。</p><p><br><br><br></p><h2 id="名词的格"><a href="#名词的格" class="headerlink" title="名词的格"></a>名词的格</h2><ul><li><strong>名词所有格的构成</strong></li></ul><table><thead><tr><th>说明</th><th>栗子</th></tr></thead><tbody><tr><td>单数名词末尾加<code>&#39;s</code></td><td>child’s</td></tr><tr><td>以 -s结尾的单数名词末尾加<code>&#39;s</code>或加<code>&#39;</code></td><td>actress’s/actress’</td></tr><tr><td>不规则的复数名词末尾加 <code>&#39;s</code></td><td>children’s</td></tr><tr><td>以-s结尾的复数名词末尾加 <code>&#39;</code></td><td>girls’</td></tr><tr><td>一些以 -s 结尾的人名末尾加 <code>&#39;s</code></td><td>James’s</td></tr></tbody></table><p><br></p><p>所有格一般表示人或事物的所属概念，通常可以回答<code>Whose...?</code>的问句。</p><p>通常来说<code>&#39;s/s&#39;</code>和<code>of</code>的作用是一样的，但<code>&#39;s/s&#39;</code>一般不和无生命的名词连用，而有生命的名词则两者通用。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h1><p>有若干个词可以用在名词或形容词+名词的前面，我们把这类词统称为限定词(determiners)，因为它们影响或限定着这个名词的意义。<br>冠词就是其中一种。</p><p><br><br><br></p><h2 id="限定词"><a href="#限定词" class="headerlink" title="限定词"></a>限定词</h2><p>限定词分为两种：</p><ul><li>有助于分类或确认的词</li><li>表数量的词</li></ul><p><br></p><h3 id="有助于分类或确认的词"><a href="#有助于分类或确认的词" class="headerlink" title="有助于分类或确认的词"></a>有助于分类或确认的词</h3><ul><li>不定冠词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I bought &apos;a&apos; new shirt yesterday.</span><br><span class="line"></span><br><span class="line">&apos;A&apos; girl came in and put &apos;an&apos; envelope on his desk.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>定冠词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;The&apos; shirt I am wearing is new.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>指示代词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I bought &apos;this/that&apos; shirt yesterday.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>物主代词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;My&apos; shirt is blue.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="表示数量的词"><a href="#表示数量的词" class="headerlink" title="表示数量的词"></a>表示数量的词</h3><ul><li>数词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I bought &apos;two&apos; shirts yesterday.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>量词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I didn&apos;t buy &apos;many&apos; new shirts yesterday.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="冠词的基本用法"><a href="#冠词的基本用法" class="headerlink" title="冠词的基本用法"></a>冠词的基本用法</h2><p>冠词分为：</p><ul><li>不定冠词(a/an)</li><li>定冠词(the)</li><li>零冠词</li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h1><p>代词是用来代替名词或名词短语的。</p><p>代词可分为：</p><ul><li>人称代词: I, me, he…</li><li>物主代词: my, their, yours…</li><li>反身代词: myself, herself, themselves…</li><li>指示代词: this, that, those…</li><li>不定代词: some, many, each, any, all…</li><li>疑问代词: what, which…</li><li>关系代词: which, who(m), as, that…</li><li>…</li></ul><p><br></p><h2 id="人称代词"><a href="#人称代词" class="headerlink" title="人称代词"></a>人称代词</h2><ul><li>主格人称代词在句子中一般用在谓语动词前面，充当句子的主语</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I think, therefore I am.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>it也可以用来表示人，它一般表示要确认什么人，或在表示弄不清楚小孩儿的性别的时候</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There&apos;s a knock at the door. Who is &apos;it&apos;?</span><br></pre></td></tr></table></figure><p><br></p><ul><li>宾格人称代词可代替处于宾语位置上的名词，充当动词或介词的宾语。有些动词接两个宾语：直接宾语和间接宾语。直接宾语指动作的承受者，间接宾语指动作所向的人或物。间接宾语必须与直接宾语连用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I gave &apos;him&apos; a glass of water.</span><br><span class="line">#him 为间接宾语</span><br><span class="line">#a glass of water 为直接宾语</span><br></pre></td></tr></table></figure><p><br></p><ul><li>使用人称代词时无论主格还是宾格，都应考虑到其所处的具体位置，在系动词be后也可以使用宾格，但不强调</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Who is &apos;it&apos;?</span><br></pre></td></tr></table></figure><p><br></p><ul><li>当人称代词处于同位结构中时，应与其同位的部分保持一致。也就是说当其同位的部分为主语时，其同位代词也为主语(用主格)，而当其同位的部分为宾语时，所用代词也为宾语(用宾格)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Both Jack an &apos;I&apos; can swim very well.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>有时候，尤其在口语中，宾格人称代词me也可用作主语</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Me/Not me!</span><br></pre></td></tr></table></figure><p><br></p><ul><li>注意祈使句中可用宾格人称代词作主语，起强调作用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">She&apos;s been promoted. Lucky &apos;her&apos;!</span><br></pre></td></tr></table></figure><p><br></p><ul><li>关于动物、东西和国家，人们通常将其人格化，这样它们也就具有了<strong>阴/阳性</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The cuckoo lays &apos;her&apos; eggs in other birds&apos; nests.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>当我们谈论汽车、船、摩托及其它机械时，常常把它们看做阴性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My car&apos;s not fast, but &apos;she&apos; does 50 miles to the gallon.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>国家通常也人格化，经常看成阴性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In 1941, America assumed &apos;her&apos; role as a world power.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="不定代词"><a href="#不定代词" class="headerlink" title="不定代词"></a>不定代词</h2><ul><li>不定代词指的是some, any, no, every…以及与之组成的复合词<br>不定代词常常表示不确定的人、物或量。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someone, anyone, none, everyone</span><br><span class="line">somebody...</span><br><span class="line">something...</span><br></pre></td></tr></table></figure><p><br></p><ul><li>在表示一些时，some一般用于肯定陈述句中，而any则一般用于疑问句和否定句中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">There are &apos;some&apos; frogs in the pond.</span><br><span class="line"></span><br><span class="line">There aren&apos;t &apos;any&apos; frogs in the pod.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>当表示建议或请求的时候，仍用some或something等</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Would you like &apos;something&apos; to drink?</span><br></pre></td></tr></table></figure><p><br></p><ul><li>any或anything用于陈述句的肯定形式的时候，表示泛指概念，指任何</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can choose &apos;anything&apos; you like here.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>复合不定代词(如something, anything)等的定语一般应后置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is &apos;something&apos; special.</span><br><span class="line"></span><br><span class="line">Is there &apos;anything&apos; for me to sit on?</span><br></pre></td></tr></table></figure><p><br></p><ul><li>当需要<strong>排除</strong>概念时，经常将else与不定代词连用，构成如下组合词，表示<strong>另外的，别的</strong>之意</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">everyone else, someone else, anyone else, anything else, nothing else...</span><br><span class="line"></span><br><span class="line">We need one more helper. Can you find &apos;anyone else&apos;?</span><br></pre></td></tr></table></figure><p><br></p><ul><li>指代a/an + 可数名词时，则必须用one作宾语</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Would you like a drink?</span><br><span class="line">I&apos;d love &apos;one&apos;. Thank you.</span><br></pre></td></tr></table></figure><p><br></p><ul><li>当不可数名词或复数名词用于非特指时，则必须使用some或any作宾语</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Have you got &apos;any&apos; sugar? Can you lend me &apos;some&apos;?</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="物主代词"><a href="#物主代词" class="headerlink" title="物主代词"></a>物主代词</h2><p>物主代词分为:</p><ul><li>形容词性物主代词(或所有格形容词)</li><li>名词性物主代词(或所有格代词)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">形容词性:</span> <span class="string">my,</span> <span class="string">your,</span> <span class="string">his,</span> <span class="string">her,</span> <span class="string">its,</span> <span class="string">one's,</span> <span class="string">our,</span> <span class="string">your,</span> <span class="string">their</span></span><br><span class="line"><span class="string">名词性:</span> <span class="string">mine,</span> <span class="string">yours,</span> <span class="string">his,</span> <span class="string">hers,ours,</span> <span class="string">theirs</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>形容词性物主代词和名词性物主代词都表示所有，即某人或某物属于某个人，回答Whose…?的问题。形容词性物主代词是限定词，因此必须放在名词之前，不可单独使用。它们的形式取决于所有者，而不是被拥有的东西。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">John&apos;s daugther = his daugther</span><br><span class="line"></span><br><span class="line">Jane&apos;s son = her son</span><br><span class="line"></span><br><span class="line">the cat&apos;s milk = its milk</span><br></pre></td></tr></table></figure><p><br></p><p><strong>my, your, their可表示男性所有，也可表示女性所有。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;My house is there,&quot; Sally/John said.</span><br><span class="line"></span><br><span class="line">Your passports, please.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>their也可表示动物或物品所有。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dogs should have their own kennels outside the house.</span><br><span class="line"></span><br><span class="line">Cars with their engines at the back are very noisy.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>one’s 可用作非人称形容词性物主代词，但不能用作名词性物主代词。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">One&apos;s first duty is to one&apos;s family.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>所有格代词mine, yours不能用在名词之前，且在说话时要加重语气。它们在指人或物时，单数或复数都一样。its从来不作所有格代词用。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">There are my children. These children are mine.</span><br><span class="line"></span><br><span class="line">I can&apos;t find my pen. Can you lend me yours?</span><br></pre></td></tr></table></figure><p><br></p><p><strong>名词性所有格可以放在句首。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is my cup. Yours is the one ttat&apos;s chipped.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>在特别强调所有关系时，通常用one’s own。可以在任何形容词性物主代词而不是名词性物主代词后面加上own，这样形成的词组既可以起形容词性物主代词的作用，也可以起名词性物主代词的作用。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I&apos;d love to have my own room / a room of my own.</span><br><span class="line"></span><br><span class="line">Our cat has its own corner / a corner of its own in this room.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>如果需要再进一步强调则可以加上very。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I&apos;d love to have my very own room /a room of my very own.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="反身代词"><a href="#反身代词" class="headerlink" title="反身代词"></a>反身代词</h2><p><strong>反身代词属于所有格形容词，其构成为”形容词性物主代词+self”组成的复合词，或”人称代词宾格+self”。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单数: myself, yourself, himself, herself, itself, oneself</span><br><span class="line">复数: ourselves, yourselves, themselves</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="指示代词"><a href="#指示代词" class="headerlink" title="指示代词"></a>指示代词</h2><p><strong>指示代词包括this, that, these, those。 其中， this, these为近指指示代词，与here对应； that, those为远指指示代词，与there对应。它们一般与名词连用。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this girl, that boy, these teachers, those students</span><br></pre></td></tr></table></figure><p><br></p><p><strong>通常来说，单独用指示代词时，不指人而指物；但在Who…?问句中，也可指人。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I found this watch. I found this.</span><br><span class="line"></span><br><span class="line">Who&apos;s this? Who&apos;s that?</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br><br><br></p><h1 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>数量词或数量词组常用来修饰名词，表示我们所说的事物的数与量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有些数量词修饰可数名词复数，如 many, (a) few, several...</span><br><span class="line"></span><br><span class="line">有些数量词修饰不可数名词，如 much, (a) little...</span><br><span class="line"></span><br><span class="line">有些两者皆可修饰，如 a lot of, lots of, some...</span><br></pre></td></tr></table></figure><p><br></p><p><strong>修饰可数名词时，用来回答How many…?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">How many eggs are there in the fridge?</span><br><span class="line">There are a few.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>数量词修饰不可数名词时，用来回答How much…?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">How much milk is there in the fridge?</span><br><span class="line">There&apos;s a little.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>两者皆可修饰，因此既能回答How many…? 也能回答How much…?</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">How many eggs are there in the fridge?</span><br><span class="line">There are plenty.</span><br><span class="line"></span><br><span class="line">How much milk is there in the fridge?</span><br><span class="line">There is plenty.</span><br></pre></td></tr></table></figure><p><br></p><p><strong>数量词+名词 的组合形式</strong></p><table><thead><tr><th>搭配形式分类</th><th>同类数量词</th></tr></thead><tbody><tr><td>数量词+复数可数名词 <br> 如: many books</td><td>both, a couple of, hundreds of, (a) few, a number of, serval …</td></tr><tr><td>数量词+不可数名词 <br> 如: much sugar</td><td>a amount of, a bit of, a drop of, a deal of, (a) little of …</td></tr><tr><td>数量词+复数可数名词,不可数名词 <br> 如: some books, some sugar</td><td>some, any, all, hardly, a lot of, lots of, the other …</td></tr><tr><td>数量词+单数可数名词 <br> 如: each book</td><td>another, each, either, the other, some, the whole …</td></tr></tbody></table><p><br><br><br></p><h2 id="不是不确定的数量"><a href="#不是不确定的数量" class="headerlink" title="不是不确定的数量"></a>不是不确定的数量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#数量可以是确定的，也就是可确切地说出到底有多少</span><br><span class="line">We need six eggs and half a kilo of butter.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更多的时候，数量是不确定的，它只说明了一个大致的情况</span><br><span class="line">Are there (any) apples in the bag?</span><br><span class="line"></span><br><span class="line">There is some milk in the fridge.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#数量词后常和more连用</span><br><span class="line">I&apos;d like some more chips</span><br><span class="line"></span><br><span class="line">I&apos;d like some more milk.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#数量词后也常和less连用</span><br><span class="line">Much less soup, please.</span><br><span class="line"></span><br><span class="line">I want mush less, please.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#数量词前用not</span><br><span class="line">Not enough is known about this subject.</span><br><span class="line"></span><br><span class="line">It has given not a little trouble.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="数词的分类"><a href="#数词的分类" class="headerlink" title="数词的分类"></a>数词的分类</h2><p>数词可分为:</p><ul><li>基数词</li><li>序数词</li><li>分数</li><li>小数</li><li>百分数</li><li>…</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#基数词</span><br><span class="line">one, two, three...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#序数词</span><br><span class="line">first, sixth, tenth...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#分数</span><br><span class="line">#英语中分数的构成为: 一个基数词加一个序数词</span><br><span class="line"></span><br><span class="line">#分子为1时，分母直接使用序数词；分子大于1时，分母序数词+s</span><br><span class="line">one third, nine sixteenths</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#小数</span><br><span class="line">0.5, nought point five, point five</span><br><span class="line">2.5, two point five</span><br><span class="line">2.05, two nought five, two point o five</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#百分数</span><br><span class="line">8%, eight percent</span><br><span class="line">99%, ninety-nine percent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#近似的数量</span><br><span class="line">about, almost, exactly, fewer than, at least, less than, nearly ...</span><br><span class="line"></span><br><span class="line">There wrer over seventy people at the party.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="not-no-none-little与bit等的区别"><a href="#not-no-none-little与bit等的区别" class="headerlink" title="not, no, none, little与bit等的区别"></a>not, no, none, little与bit等的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#not, no, none的区别</span><br><span class="line"></span><br><span class="line">#构成否定句的方式可以用not来否定动词，也可用no来否定后面的名词</span><br><span class="line">#none可以直接作为一个代词来用，而no则不可</span><br><span class="line"></span><br><span class="line">There aren&apos;t buses after midnight.</span><br><span class="line"></span><br><span class="line">There are no buses after midnight.</span><br><span class="line"></span><br><span class="line">Do you have any diaries? We&apos;ve got none at the moment.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考: 《新概念英语语法手册》&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="English" scheme="https://zhang21.github.io/categories/English/"/>
    
    
      <category term="English" scheme="https://zhang21.github.io/tags/English/"/>
    
      <category term="Grammar" scheme="https://zhang21.github.io/tags/Grammar/"/>
    
  </entry>
  
  <entry>
    <title>国际音标</title>
    <link href="https://zhang21.github.io/2018/11/13/%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87/"/>
    <id>https://zhang21.github.io/2018/11/13/国际音标/</id>
    <published>2018-11-13T03:25:44.000Z</published>
    <updated>2018-11-13T10:02:31.590Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99" target="_blank" rel="noopener">国际音标维基</a></li><li>巴士英语网: <a href="https://en-yinbiao.xiao84.com/yinbiaofayin/" target="_blank" rel="noopener">https://en-yinbiao.xiao84.com/yinbiaofayin/</a></li><li>知乎<code>@姜枣茶茶母</code>的回答: <a href="https://www.zhihu.com/question/19913374" target="_blank" rel="noopener">https://www.zhihu.com/question/19913374</a></li></ul><p><br><br><br></p><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>英语发音有多个国家的区别，我们重点了解两个：</p><ul><li>公认发音，英国标准（Received pronunciation, RP）</li><li>通用美式英语（General American, GA）</li></ul><p><br></p><p>国际音标(International Phonetic Alphabet，缩写：IPA)旁边的分隔号和括号并非音标的一部分，它们是语言专家用以分辨两个主要标音方法：音位标音和语音学标音。</p><p>48个国际音标通常是国内学生学习英语、学好英语发音必须掌握的发音基础，48个国际音标表也被称作48个音标表、48个英语音标表、48个英语国际英标表，48个国际英语音标表，这些称呼通常都是指48个英语国际英标表。<br>48个国际音标中有20个元音、28个辅音。</p><p><br></p><p><strong>元音</strong>，又称母音。</p><p>元音是在发音过程中由气流通过口腔而不受阻碍发出的音。<br>按前后分类为高 、中、低元音。<br>按音节分，可分为单元音和双元音。</p><p><br></p><p>气流在口腔或咽头受到阻碍而形成的音叫做<strong>辅音</strong>，辅音又叫子音。</p><p>共分为清辅音、浊辅音、鼻音、舌侧音 、半元音五种不同类型。<br>其中鼻音、舌侧音 、半元音为浊辅音。</p><p><br></p><p>英语元音和辅音在英语发音中扮演着重要的角色，英语元音和辅音组合起来就成为英语音标，共48个音位，是英语发音的基础。</p><p><br></p><p><img src="/images/English/IPA.jpg" alt="国际音标"></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="发音与技巧"><a href="#发音与技巧" class="headerlink" title="发音与技巧"></a>发音与技巧</h1><p>巴士英语网有每个音标的发音: <a href="https://en-yinbiao.xiao84.com/yinbiaofayin/" target="_blank" rel="noopener">https://en-yinbiao.xiao84.com/yinbiaofayin/</a></p><p><br></p><p>国际音标：</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>元音</td><td>单元音 <br><br> 双元音</td><td>前元音 <br> 中元音 <br> 后元音 <br> 开合双元音 <br> 集中双元音</td><td><code>/iː/</code>, <code>/ɪ/</code>, <code>/e/</code>, <code>/æ/</code> <br> <code>/ɜː/</code>, <code>/ə/</code>, <code>/ʌ/</code> <br> <code>/uː/</code>, <code>/ʊ/</code>, <code>/ɔː/</code>, <code>/ɒ/</code>, <code>/ɑː/</code> <br> <code>/eɪ/</code>, <code>/aɪ/</code>, <code>/ɔɪ/</code>, <code>/aʊ/</code>, <code>/əʊ/</code> <br> <code>/ɪə/</code>, <code>/eə/</code>, <code>/ʊə/</code></td></tr><tr><td>辅音</td><td>爆破音 <br><br> 摩擦音 <br><br> 破擦音 <br><br> 鼻音 <br> 舌则音 <br> 半元音</td><td>清辅音 <br> 浊辅音 <br> 清辅音 <br> 浊辅音 <br> 清辅音 <br> 浊辅音 <br> 浊辅音 <br> 浊辅音 <br> 浊辅音 <br></td><td><code>/p/</code>, <code>/t/</code>, <code>/k/</code> <br> <code>/b/</code>, <code>/d/</code>, <code>/ɡ/</code> <br> <code>/f/</code>, <code>/s/</code>, <code>/ʃ/</code>, <code>/θ/</code>, <code>/h/</code> <br> <code>/v/</code>, <code>/z/</code>, <code>/ʒ/</code>, <code>/ð/</code>, <code>/r/</code> <br> <code>/tʃ/</code>, <code>/tr/</code>, <code>/ts/</code> <br> <code>/dʒ/</code>, <code>/dr/</code>, <code>/dz/</code> <br> <code>/m/</code>, <code>/n/</code>, <code>/ŋ/</code> <br> <code>/l/</code> <br> <code>/j/</code>, <code>/w/</code></td></tr></tbody></table><p><br></p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>元音20个</td><td>长元音 <br> 短元音 <br> 双元音</td><td><code>/iː/</code>, <code>/ɑː/</code>, <code>/ɔː/</code>, <code>/uː/</code>, <code>/ɜː/</code> <br> <code>/ɪ/</code>, <code>/ʌ/</code>, <code>/ɒ/</code>, <code>/ʊ/</code>, <code>/ə/</code>, <code>/æ/</code>, <code>/e/</code> <br> <code>/eɪ/</code>, <code>/aɪ/</code>, <code>/ɔɪ/</code>, <code>/ɪə/</code>, <code>/eə/</code>, <code>/ʊə/</code>, <code>/aʊ/</code>, <code>/əʊ/</code></td></tr><tr><td>辅音28个</td><td>轻辅音 <br> 浊辅音 <br> 轻辅音 <br> 浊辅音 <br> 鼻音 <br> 半元音 <br> 边音</td><td><code>/p/</code>, <code>/t/</code>, <code>/k/</code>, <code>/f/</code>, <code>/θ/</code>, <code>/s/</code> <br> <code>/b/</code>, <code>/d/</code>, <code>/ɡ/</code>, <code>/v/</code>, <code>/ð/</code>, <code>/z/</code> <br> <code>/ʃ/</code>, <code>/h/</code>, <code>/ts/</code>, <code>/tʃ/</code>, <code>/tr/</code> <br> <code>/ʒ/</code>, <code>/r/</code>, <code>/dz/</code>, <code>/dʒ/</code>, <code>/dr/</code> <br> <code>/m/</code>, <code>/n/</code>, <code>/ŋ/</code> <br> <code>/j/</code>, <code>/w/</code> <br> <code>/l/</code></td></tr></tbody></table><p><br><br><br><br><br></p><h2 id="知识点讲解"><a href="#知识点讲解" class="headerlink" title="知识点讲解"></a>知识点讲解</h2><p><strong>长短元音的区别在于——是否有<code>:</code></strong></p><ul><li>有，则拖长音节</li><li>无，则短促音结尾</li></ul><p><br></p><p><strong>双元音就是把两个单元音拼到一起</strong></p><p>发音也是两个拼到一起的，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/iə/= /i/ + /ə/</span><br><span class="line"></span><br><span class="line">/uə/= /u/ + /ə/</span><br><span class="line"></span><br><span class="line">/εə/= /e/ + /ə/</span><br></pre></td></tr></table></figure><p><br></p><p><strong>清浊辅音的区别在于——喉结是否震动</strong></p><ul><li>震动，浊辅音</li><li>不震动，清辅音</li></ul><p><br></p><p><strong>鼻音–鼻腔发出</strong></p><p><br><br><br><br><br></p><h2 id="难读的音标"><a href="#难读的音标" class="headerlink" title="难读的音标"></a>难读的音标</h2><p>易出问题的地方：</p><p><img src="/images/English/IPA_difficulty.jpg" alt=""></p><p><br></p><p><strong>核心技巧：</strong></p><ul><li>用中文的<strong>音近字</strong>代替</li><li>用简单的<strong>英文字母或单词</strong>进行备注</li></ul><p>中文字很挫，两种方法结合使用，哪个好记用哪个。</p><p><br><br><br></p><p><strong>元音</strong>部分发音讲解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ei/ ：A</span><br><span class="line">/ai/ ：I</span><br><span class="line">/ɔi/ ：“噢一”</span><br><span class="line">/iə/ : /i/ + /ə/ = ear</span><br><span class="line">/eə/ : /e/ + /ə/ = air</span><br><span class="line">/uə/ : /u/ + /ə/ = 污饿</span><br><span class="line">/əu/ ：O</span><br><span class="line">/au/ ：嗷（张大嘴）</span><br></pre></td></tr></table></figure><p><br><br><br></p><p><strong>辅音</strong>部分发音讲解：</p><p>第一组：<code>/s/, /z/</code> 和 <code>/θ/, /ð/</code><br>这两组发音听起来差不多，唯一的区别在于：舌头是否看得见</p><ul><li>看不见，<code>/s/, /z/</code></li><li>看得见，<code>/θ/, /ð/</code></li></ul><p><br></p><p>第二组：<code>/ʃ/, /ʒ/</code> <strong>“屎” “日”</strong></p><p>第三组：<code>/h/, /r/</code> <strong>“喝” “弱”</strong></p><p>第四组：<code>/ts/, /dz/</code> <strong>“此” “滋”</strong></p><p>第五组：<code>/tʃ/, /dʒ/</code> <strong>“尺” “之”</strong></p><p>第六组：<code>/tr/, /dr/</code> <strong>“戳” “捉”</strong></p><p>第七组：<code>/m/, /n/, /ŋ/</code> 都是发<strong>“嗯”</strong>的音，只是嘴型大小不一样。</p><ul><li><code>/m/</code>, 闭紧</li><li><code>/n/</code>, 半张开</li><li><code>/ŋ/</code>, 张大嘴</li></ul><p><br></p><p>第八组：<code>/l/</code><br>这个音最难发，因为声音有点奇怪，像大舌头。发音技巧在于，把舌尖抵在上门牙底端，然后自然发出声音，就是这个音标啦。</p><p><br><br><br></p><p><strong>知识点讲解</strong></p><p><code>/m/, /n/, /l/</code> 分别有两个发音，一个是上面讲解的发音，另一个是他们的本来音，即英文字母m/n/l的发音（么，讷，勒）。</p><ul><li>本身发音： 出现在每个音节的开头</li><li>奇怪音： 出现在每个音节的中间</li></ul><p><br><br><br><br><br></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>自己找单词书进行测试和练习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;国际音标维基&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;巴士英语网: &lt;a href=&quot;https://en-yinbiao.xiao84.com/yinbiaofayin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en-yinbiao.xiao84.com/yinbiaofayin/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;知乎&lt;code&gt;@姜枣茶茶母&lt;/code&gt;的回答: &lt;a href=&quot;https://www.zhihu.com/question/19913374&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/19913374&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="https://zhang21.github.io/categories/English/"/>
    
    
      <category term="English" scheme="https://zhang21.github.io/tags/English/"/>
    
      <category term="国际音标" scheme="https://zhang21.github.io/tags/%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87/"/>
    
  </entry>
  
</feed>
