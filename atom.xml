<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风继续吹</title>
  
  <subtitle>Yesterday, you said tomorrow!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhang21.github.io/"/>
  <updated>2018-12-05T10:09:42.357Z</updated>
  <id>https://zhang21.github.io/</id>
  
  <author>
    <name>Zhang21</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大明官职</title>
    <link href="https://zhang21.github.io/2018/12/05/%E6%98%8E%E6%9C%9D%E5%AE%98%E8%81%8C/"/>
    <id>https://zhang21.github.io/2018/12/05/明朝官职/</id>
    <published>2018-12-05T07:53:04.000Z</published>
    <updated>2018-12-05T10:09:42.357Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>维基百科</li><li>《万历十五年》</li><li>《南明史》</li><li>《中国历史地图集》</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><p>最近看《万历十五年》、《南明史》及电视剧“大明王朝1566”有感，想详细地了解一下大明王朝的官职制度。</p><p><br><br><br></p><hr><p><br><br><br></p><p>朱明王朝是以<strong>“驱逐胡虏，恢复中华”</strong>为号召北伐中原。</p><p>1368年正月，朱元璋于南京称帝，即明太祖，年号洪武，明朝建立。大明朝（1368年1月23日）是中国历史上最后一个由汉人建立的大一统王朝。<br>如按照李自成大顺军攻破北京，崇祯皇帝于煤山自缢(1644年)来算，历经十二世、十六位皇帝，国祚二百七十六年；<br>如加上南明永历皇帝被吴三桂勒死于昆明(1662年)来算，历经十九位皇帝，国祚二百九十四年。</p><blockquote><p>注：本文将按照万历时期来查看大明疆域和体制。</p></blockquote><p><br><br><br></p><p><strong>大明君主列表：</strong></p><table><thead><tr><th>庙号</th><th>谥号</th><th>名讳</th><th>在世时间</th><th>年号</th><th>在位时间</th></tr></thead><tbody><tr><td>太祖</td><td>高皇帝</td><td>朱元璋</td><td>1328年－1398年</td><td>洪武</td><td>1368年－1398年</td></tr><tr><td>惠宗</td><td>让皇帝</td><td>朱允炆</td><td>1377年－？</td><td>建文</td><td>1398年－1402年</td></tr><tr><td>成祖</td><td>文皇帝</td><td>朱棣(di)</td><td>1360年－1424年</td><td>永乐</td><td>1402年－1424年</td></tr><tr><td>仁宗</td><td>昭皇帝</td><td>朱高炽(chi)</td><td>1378年－1425年</td><td>洪熙</td><td>1424年－1425年</td></tr><tr><td>宣宗</td><td>章皇帝</td><td>朱瞻基</td><td>1399年－1435年</td><td>宣德</td><td>1425年－1435年</td></tr><tr><td>英宗</td><td>睿皇帝</td><td>朱祁镇</td><td>1427年－1464年</td><td>正统 <br> 天顺(复辟)</td><td>1435年－1449年 <br> 1457年－1464年</td></tr><tr><td>代宗</td><td>景皇帝</td><td>朱祁钰</td><td>1428年－1457年</td><td>景泰</td><td>1449年－1457年</td></tr><tr><td>宪宗</td><td>纯皇帝</td><td>朱见深</td><td>1447年－1487年</td><td>成化</td><td>1464年－1487年</td></tr><tr><td>孝宗</td><td>敬皇帝</td><td>朱佑樘(cheng)</td><td>1470年－1505年</td><td>弘治</td><td>1487年－1505年</td></tr><tr><td>武宗</td><td>毅皇帝</td><td>朱厚照</td><td>1491年－1521年</td><td>正德</td><td>1505年－1521年</td></tr><tr><td>世宗</td><td>肃皇帝</td><td>朱厚熜</td><td>1507年－1567年</td><td>嘉靖</td><td>1521年－1567年</td></tr><tr><td>穆宗</td><td>庄皇帝</td><td>朱载坖(ji)</td><td>1537年－1572年</td><td>隆庆</td><td>1567年－1572年</td></tr><tr><td>神宗</td><td>显皇帝</td><td>朱翊钧</td><td>1563年－1620年</td><td>万历</td><td>1572年－1620年</td></tr><tr><td>光宗</td><td>贞皇帝</td><td>朱常洛</td><td>1582年－1620年</td><td>泰昌</td><td>1620年</td></tr><tr><td>熹宗</td><td>悊皇帝</td><td>朱由校</td><td>1605年－1627年</td><td>天启</td><td>1620年－1627年</td></tr><tr><td>怀宗</td><td>烈皇帝</td><td>朱由检</td><td>1611年－1644年</td><td>崇祯</td><td>1627年－1644年</td></tr><tr><td>南明</td><td>福王</td><td>朱由崧</td><td>1607年－1646年</td><td>弘光</td><td>1644年6月－1645年6月</td></tr><tr><td>南明</td><td>唐王</td><td>朱聿键</td><td>1602年－1646年</td><td>隆武</td><td>1645年8月－1646年10月</td></tr><tr><td>南明</td><td>桂王</td><td>朱由榔</td><td>1623年－1662年</td><td>永历</td><td>1646年12月－1661年8月</td></tr></tbody></table><p><br><br><br></p><p>明一代为直隶二、布政使司十三。流俗称为两京一十三省。二直隶又称京师、南京二京，十三布政使司俗称十三省。</p><ul><li>二京<ul><li>京师顺天府(北直隶)</li><li>南京应天府(南直隶)</li></ul></li><li>十三布政使司<ul><li>陕西</li><li>山西</li><li>山东</li><li>河南</li><li>浙江</li><li>江西</li><li>湖广</li><li>四川</li><li>广东</li><li>福建</li><li>广西</li><li>贵州</li><li>云南</li></ul></li></ul><p><br></p><p>万历时期大明地图：</p><p><img src="/images/Ming/Map_wanli.jpg" alt=""></p><p><br><br><br></p><p><strong>行政：</strong></p><p>明朝一级地方行政区分置承宣布政使司（布政司）、提刑按察使司（按察司）与都指挥使司（都司）的都布按三司制度，分别掌管行政、司法与军事等三种治权，防止地方权力集中。</p><p>布政司通称省，底下依序有道、府州与县。道是明朝特别设置介于省和府州之间的行政单位，分为分守道和分巡道两种，分守道为布政司的派出机构，负责监督协调府州行政，分巡道为按察司的派出机构，负责监督协调府州司法治安。府为明朝最主要的统县政区，原为元朝的路，以税粮多寡为划分标准，粮廿万石以上为上府，廿万以下十万以上为中府，十万以下为下府。州与府同样是统县政区，但人口税收比府少，地位也比府低。州按照其行政隶属分为两类，直辖于布政司的州称直隶州，隶属于府的称散州或属州。军事区划有卫、所两级，但部分位于少数民族聚居区或边疆军屯区的卫所具有类似内地州县的行政职能，行政上分别相当于府与县。明代宗、明英宗时设有中央派出管理行政的巡抚与管理军事的总督，地位在布政司与都司之上。为限制巡抚与总督的权力，又设有都御史制衡之。明朝最后有140府，193州，1138县，493卫，359所。</p><p>巡抚主理民政，原本是明宣宗时期派六部、都察院大臣以此为名义督抚地方行政，到明代宗时正式形成一级行政区。总督于明英宗时设置，分短期与长期两种，管辖数个布政司的军务。</p><p><br><br><br></p><p><strong>内阁</strong></p><p>洪武十三年（1380年），明太祖以丞相胡惟庸谋反伏诛，于是废去中书省和丞相一职。秦、汉以降实行一千六百余年的宰相制度自此废除，六部直接向皇帝负责，相权与君权合而为一，大权独揽，施行军权、行政权、监察权三权分立的国家体制。由于国家事务繁多，皇帝无法处理，而明太祖也一度深感疲惫，于是设立四辅制度来辅佐政事。但这项制度效能不彰。洪武十七年（1384年）后被废。之后朱元璋请来几位翰林学士帮忙辅佐，这些翰林学士的官职效仿唐宋馆阁学士旧制，被命为“某某殿（阁）大学士”[注 24]，官阶只有正五品。明成祖登基后，特派解缙、胡广、杨荣等入午门值文渊阁，参预机务，由此始设内阁</p><p>内阁最初只是皇帝的咨询机构，相当于今日秘书或幕僚的职务，奏章的批答为皇帝的专责。到后来成为明朝实际上最高决策机构，首辅地位有时可比丞相，有票拟之权明朝内阁由始至终都不是明朝中枢的一级行政机构，所谓内阁只是文渊阁的别称。内阁大学士一职多以硕德宿儒或朝中大臣担任，只照皇帝的意旨写出，称“传旨当笔”，权力及地位远远不及过去的宰相，只有有实无名之地位，而没有法定地位。宣宗时期，由于杨溥、杨士奇、杨荣等三杨入阁，宣宗批准内阁在奏章上以条旨陈述己见，称为“票拟”制度，又授予宦官机构司礼监“批红”。票拟之法补救可君主不愿面见阁臣之弊，但内阁大臣与皇帝沟通，全赖司礼监（宦官）。</p><p><br><br><br></p><p><strong>六部</strong></p><p>明朝在中央设置吏、户、礼、工、刑、兵六部，与前代相比，明朝最初在每部增加尚书、侍郎各一。胡惟庸案之后，朱元璋废丞相之职，取消中书省。六部因此地位得到提高。每部只设一个尚书，两个侍郎，原有的各科尚书降为郎中。各部尚书和侍郎的官阶也上升。<br>其中以礼部（主管教育，负责领导儒家学术，以及祭祀，外交等）和吏部（主管文官升迁）最为重要，户部（主管财政，土地和人口）人员最多。兵部（主管国防），刑部（主管司法，有对较大刑事案件的审判权）与工部（主管公共建设）地位较低。</p><p>在拟诏审议机构上，明朝开始只设给事中与中书舍人，不复设中书门下二省。明朝的审议机构为六科给事中，到洪武廿四年，设都给事中六人，分吏、户、礼、工、刑、兵六科，每科一人，每科都给事中下设左右给事中各一人及给事中若干。六科给事中制度基本是继承唐朝的门下省制度，但官位下降，机构更为精简，也失去了自魏晋以来皇帝内臣（皇室的收发站）和礼官的职责。六科官职品级虽低，然职权很高，他们可以批驳皇帝的意旨， 也能充当谏官的职责，对六部吏僚则具有分科对应的监察权，故该制度也发挥一定的改善朝政作用。明朝的拟诏机构为中书舍人官署，因其制度源流源于与门下并立的中书，故与六科相对俗称 “中书科”，但是其地位大为下降，职能也大幅削弱，事实上只是内阁与翰林院的誊抄机构。中央的重要事务执行机构为五寺，包括大理寺、太常寺、光禄寺、太仆寺、鸿胪寺，与唐宋相比，减省了四寺：宗正寺被并入宗人府，卫尉寺被并入兵部，司农寺与太府寺被并入户部。大理寺与刑部和都察院合为三法司，负责重大刑事案件的复审与复核。大理寺的首长称为大理寺卿，也是九卿之一。其余四个寺的卿职权较低。太常寺负责祭祀；太仆寺管理马匹与全国牧政；光禄寺负责寿宴；鸿胪寺负责接待外宾。</p><p><br><br><br></p><p><strong>监察机构</strong></p><p>在洪武十三年前，明朝还沿袭元的监察制度，设立御史台，有左右御史大夫各一名。洪武十三年后，朱元璋废御史台。两年之后，朱元璋设立新的监察机构—都察院。都察院下面设立监察御史若干人，分巡全国各省，称为十二道监察御史。每道有监察御史三至五人，范围大体为一省。但监察御史都驻在京师，有事带印出巡，事毕回京缴印。到明末，监察御史分为十三道，共有一百一十人。都察院与六科同样具有谏官的职能和风闻言事的职责，故合称“科道言官”。</p><p><br><br><br></p><p><strong>厂卫制度</strong></p><p>明初还实行特务机构，主要包括锦衣卫、东厂和西厂，武宗时期还一度设有内行厂。锦衣卫设立于洪武十五年，直接听命于皇上，可以逮捕任何人，并进行不公开的审讯。但是朱元璋晚年逐步废除了锦衣卫及其特权，还有一些比较残酷的刑法。<br>在东厂设立后，锦衣卫权力受到削弱。东厂成立于永乐十八年，是明成祖为镇压政治上的反对力量而成立。地点位于京师东安门北。东厂的主要职责就是监视政府官员、社会名流、学者等各种政治力量，并有权将监视结果直接向皇帝汇报。依据监视得到的情报，对于那些地位较低的政治反对派，东厂可以直接逮捕、审讯；而对于担任政府高级官员或者有皇室贵族身份的反对派，东厂在得到皇帝的授权后也能够对其执行逮捕、审讯。东厂在设立之初，就由宦官担任提督，后来通常以司礼监秉笔太监中位居第二、第三者担任。西厂设立于宪宗时期，首领为汪直。1482年后被废。其后又被武宗短暂恢复。内厂设置于武宗时期，首领为宦官刘瑾，刘瑾伏诛后，内厂与西厂同时被废除，仅留东厂。</p><p><br><br><br></p><p><strong>其它机构</strong></p><p>公孤官包括三公与三孤，是名义上的诸臣之首，但这些官职都是虚衔，一般授予功劳相当大的大臣以示荣耀。三公为太师、太傅、太保，三孤则是辅弼他们的少师、少傅、少保。其中太保和太傅名义上是太子的老师，而太师则是皇帝名义上的老师，但实际上辅导太子的机构是詹事府。詹事府下设两坊、一局、一厅。此外还有太医院，专门负责皇室人员的健康和医疗。太医院附属有生药库和惠民药局。翰林院作为政府的官方学术最高机构，地位相当重要，甚至在政府中都有相当大的影响力。翰林院首长是翰林大学士，此职位者经常会同时兼任内阁大臣。</p><p>诸司指不属于各部院的司。主要指通政司和行人司。通政司负责传递公文，公告周知。行人司负责到地方上颁诏谕及赴外国作使臣。</p><p>外三监包括国子监、钦天监、上林苑监。钦天监负责观测星象。国子监是最高官方教育机构，也是全国官学的领导机构，有祭酒一人，司业一人，监丞一人，博士五人，助教十五人，学正十人，学录七人，典簿一人，典籍一人，典馔两人。上林苑监负责掌管皇帝的御花园，畜牧场与菜圃。</p><p>内十二监为宦官衙门。事实上只有在这些衙门工作的宦官才是太监。包括司礼监、内宫监、御用监、司设监、御马监、神宫监、尚膳监、尚宝监、印绶监、直殿监、尚衣监、都知监。以司礼监最为重要，监内的提督太监主管宫内一切宦官礼仪刑名。而秉笔太监在宦官极端专权时竟代替皇帝批公文。此外宫内还设有四个司（惜薪、钟鼓、宝钞、混堂），八个局（兵仗、银作、浣衣、巾帽、针工、内织染、酒醋面，司苑），合为内官廿四衙门。宫女也有六个局（尚宫、尚仪、尚服、尚食、尚寝、尚工），每个局下设四个司。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维基百科&lt;/li&gt;
&lt;li&gt;《万历十五年》&lt;/li&gt;
&lt;li&gt;《南明史》&lt;/li&gt;
&lt;li&gt;《中国历史地图集》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="History" scheme="https://zhang21.github.io/categories/History/"/>
    
    
      <category term="大明" scheme="https://zhang21.github.io/tags/%E5%A4%A7%E6%98%8E/"/>
    
      <category term="历史" scheme="https://zhang21.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>一战二战武器</title>
    <link href="https://zhang21.github.io/2018/11/18/%E4%B8%80%E6%88%98%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8/"/>
    <id>https://zhang21.github.io/2018/11/18/一战二战武器/</id>
    <published>2018-11-18T15:35:49.000Z</published>
    <updated>2018-11-22T05:28:33.909Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%B8%80%E6%88%98%E6%AD%A6%E5%99%A8" target="_blank" rel="noopener">各国一战武器，维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%86%9B%E4%BA%8B%E8%A3%85%E5%A4%87" target="_blank" rel="noopener">第一次世界大战武器装备，维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8" target="_blank" rel="noopener">各国二战武器，维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/Category:%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8" target="_blank" rel="noopener">第二次世界大战武器装备，维基百科</a></li></ul><p><br><br><br></p><hr><p><br><br><br></p><p>最近玩<strong>battlefield I</strong>(一战)有感，一时兴起，顺带在<strong>battlefield V</strong>(二战)发布前夕做一个一战二战各国使用的武器装备归纳总结。</p><p>玩了战地1，才体会到战争的残酷性，使我对战争的感觉从光辉转变为厌恶。没有什么英雄在我心中，你不知道自己何时会死去，或即将死去。<br>战场上每个人都一样，都是一条鲜活的生命，有家人有朋友。从战争游戏来反思战争，这点DICE studio做的不错。</p><p><br></p><p><strong>衷心祝愿世界和平！</strong></p><p><br><br><br></p><a id="more"></a><hr><p><br><br><br></p><h1 id="一战"><a href="#一战" class="headerlink" title="一战"></a>一战</h1><p>第一次世界大战（简称一次大战、一战，或称欧战；英语：World War I、WWI、Great War、First World War；法语：la première Guerre Mondiale、la Grande Guerre）是一场于1914年7月28日至1918年11月11日主要发生在欧洲的大战，然而战火最终延烧至全球，当时世界上大多数国家都被卷入这场战争，史称“第一次世界大战”。</p><p><br></p><p>主要介绍国家：</p><ul><li>德国</li><li>法国</li><li>俄国</li><li>英国</li><li>美国</li></ul><p><br></p><p>主要武器分类：</p><ul><li>枪械</li><li>大炮</li><li>坦克</li><li>飞机</li><li>船舰</li></ul><p><br><br><br></p><h2 id="德国"><a href="#德国" class="headerlink" title="德国"></a>德国</h2><p>第一次世界大战德国主要武器</p><p><br></p><h3 id="手榴弹"><a href="#手榴弹" class="headerlink" title="手榴弹"></a>手榴弹</h3><p>hand grenade</p><p><br></p><ul><li><strong>柄式手榴弹</strong></li></ul><p>柄式手榴弹（德语：Stielhandgranate）为德国陆军自第一次世界大战中期至第二次世界大战末期所使用之手榴弹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重量595克</span><br><span class="line">长度365毫米</span><br><span class="line">直径70毫米</span><br><span class="line">填充三硝基甲苯（TNT）</span><br><span class="line">引爆机制5秒</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Stielhandgranate.png" alt=""></p><p><br><br><br></p><h3 id="手枪"><a href="#手枪" class="headerlink" title="手枪"></a>手枪</h3><p>pistol</p><p><br></p><ul><li><strong>毛瑟C96(Mauser C96)</strong></li></ul><p>由毛瑟在1896年推出的手枪，在中国还有驳壳枪、快慢机、自来得、大镜面等别称。<br>毛瑟（德语：Mauser）是一个德国的枪械制造商。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">重量        1.130公斤（空枪）</span><br><span class="line">长度        288毫米</span><br><span class="line">枪管长度     140毫米</span><br><span class="line">子弹        7.63×25mm毛瑟弹</span><br><span class="line">           9×19mm鲁格弹</span><br><span class="line">           .45 ACP</span><br><span class="line">           9×25mm毛瑟弹</span><br><span class="line">枪机      枪管短行程后座作用</span><br><span class="line">           单动</span><br><span class="line">发射模式    C96：半自动</span><br><span class="line">           M712速射型：半自动、全自动</span><br><span class="line">枪口初速    425米/秒</span><br><span class="line">有效射程100米</span><br><span class="line">最大射程200米</span><br><span class="line">供弹方式C96：10发内置弹仓</span><br><span class="line">M712速射型：10发或20发弹匣</span><br><span class="line">瞄具V型照门上刻度最大可调至1000米</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mauser_C96.png" alt="毛瑟C96"></p><p><br></p><ul><li><strong>鲁格手枪（Pistole 08 Luger)</strong></li></ul><p>简称P08<br>该枪由奥地利人格奥尔格·鲁格于1898年设计，并由以德国武器及弹药兵工厂及毛瑟为首等多间工厂于1900年投入生产。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量        1.92磅（871克）</span><br><span class="line">长度      8.75英寸（222毫米）</span><br><span class="line">枪管长度     98毫米–203毫米</span><br><span class="line">           （3.9 -8.02英寸）</span><br><span class="line">子弹        7.65×21毫米帕拉贝伦弹</span><br><span class="line">           9毫米鲁格弹</span><br><span class="line">           .45 ACP（相当罕见）</span><br><span class="line">枪机     枪管短行程后座作用，肘节式起落闭锁（Toggle Lock）</span><br><span class="line">枪口初速    350 - 400米/秒</span><br><span class="line">有效射程    50米</span><br><span class="line">供弹方式    8发弹匣、32发弹鼓</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/P08.png" alt="P08"></p><p><br></p><ul><li><strong>帝国转轮手枪（Reichsrevolver）</strong></li></ul><p>该枪后来被著名的鲁格P08半自动手枪所取代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量1040克</span><br><span class="line">长度310毫米</span><br><span class="line">子弹10.6×25mmR</span><br><span class="line">口径10.6mm</span><br><span class="line">射速单动式</span><br><span class="line">枪口初速205米/秒</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具V型缺口及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1879.png" alt="帝国轮转手枪"></p><p><br></p><ul><li><strong>贝格曼1896型手枪</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量1.13 kg</span><br><span class="line">长度254 mm</span><br><span class="line">枪管长度102 mm</span><br><span class="line">子弹5毫米贝格曼弹</span><br><span class="line">6.5毫米贝格曼弹</span><br><span class="line">8×22毫米贝格曼弹</span><br><span class="line">枪机反冲作用</span><br><span class="line">枪口初速380米/秒</span><br><span class="line">供弹方式5发载入内置弹仓内</span><br><span class="line">瞄具固定式瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Bergmann1896.png" alt="贝格曼1896型"></p><p><br></p><ul><li><strong>费罗梅尔停止手枪()Frommer Stop</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量610 g（22 oz）</span><br><span class="line">长度165 mm（6.5英寸）</span><br><span class="line">枪管长度95毫米（3.7英寸）</span><br><span class="line">子弹.32 ACP</span><br><span class="line">.380 ACP</span><br><span class="line">枪机长行程后座作用</span><br><span class="line">枪口初速280 m/s（919 ft/s）</span><br><span class="line">供弹方式7发弹匣</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FrommerStop.png" alt=""></p><p><br><br><br></p><h3 id="冲锋枪"><a href="#冲锋枪" class="headerlink" title="冲锋枪"></a>冲锋枪</h3><p>Submachine Guns</p><p><br></p><ul><li><strong>MP18</strong></li></ul><p>MP18冲锋枪是第一次世界大战时期由德国的胡戈·施梅瑟所开发的冲锋枪。MP18冲锋枪因其生产厂Bergmann也被称为伯格曼冲锋枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量4.18公斤</span><br><span class="line">长度832毫米</span><br><span class="line">枪管长度200 毫米</span><br><span class="line">子弹9毫米鲁格弹</span><br><span class="line">7.63×25毫米毛瑟弹</span><br><span class="line">枪机反冲作用、开放式枪机</span><br><span class="line">发射模式MP18：全自动</span><br><span class="line">MP28：半自动、全自动</span><br><span class="line">射速500发/分</span><br><span class="line">枪口初速380米/秒</span><br><span class="line">供弹方式32发弹匣 TM 08 （一战）；20，30 和 50 发弹匣（二战前）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MP18.png" alt="MP18"></p><p><br><br><br></p><h3 id="机枪"><a href="#机枪" class="headerlink" title="机枪"></a>机枪</h3><p>machine gun</p><p><br></p><ul><li><strong>MG08重机枪</strong></li></ul><p>Maschinengewehr 08（也称MG08，Maschinengewehr意为机枪）由海勒姆·马克沁1884年开发的马克沁机枪发展而来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量     连冷却水一共 69 kg ，除去冷却水65 kg 枪身26.5 kg 4 kg水 三脚架38.5 kg</span><br><span class="line">        MG08/15：连同两脚架17.8kg 水 3KG</span><br><span class="line">        MG08/18：不含两脚架14.5KG</span><br><span class="line">长度   1175 mm</span><br><span class="line">        MG08/15、MG08/18：1445 mm</span><br><span class="line">枪管长度720mm</span><br><span class="line">操作人数4人班组</span><br><span class="line">子弹7.92×57毫米毛瑟</span><br><span class="line">枪机枪管短后座，肘节式起落闭锁</span><br><span class="line">射速450-500 发/分</span><br><span class="line">枪口初速900米每秒（3,000英尺每秒）</span><br><span class="line">有效射程2,000米（2,200码）</span><br><span class="line">最大射程3,500米（3,800码）</span><br><span class="line">供弹方式250 发弹链</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MG08.png" alt=""></p><p><br></p><ul><li><strong>麦德森轻机枪(Madsen machine gun)</strong></li></ul><p>这也是全世界上第一种大量生产的真正实用化的轻机枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">重量空枪：9.07 千克（20 磅）</span><br><span class="line">长度1,143 毫米（45 英寸）</span><br><span class="line">枪管长度584.2 毫米（23 英寸）</span><br><span class="line">子弹</span><br><span class="line">6.5×55毫米瑞典子弹</span><br><span class="line">7×57毫米毛瑟子弹</span><br><span class="line">7.65×53毫米阿根廷子弹</span><br><span class="line">7.62×51毫米NATO</span><br><span class="line">7.62×54毫米R</span><br><span class="line">.303英式子弹[1]</span><br><span class="line">7.92×57毫米毛瑟子弹</span><br><span class="line">枪管1 根，膛线4 条，右旋，枪管装上风冷式枪管套和消焰器</span><br><span class="line">枪机枪管长行程后座作用</span><br><span class="line">发射模式全自动</span><br><span class="line">射速450发／分钟</span><br><span class="line">枪口初速6.5×55毫米瑞典子弹：700—870米／秒（2,296.59—2,854.33英尺／秒）</span><br><span class="line">供弹方式25、30、40发可拆卸式弹匣</span><br><span class="line">瞄具机械瞄具：Ｖ型缺口式照门及柱状准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Madsen_MachineGun.png" alt=""></p><p><br><br><br></p><h3 id="步枪"><a href="#步枪" class="headerlink" title="步枪"></a>步枪</h3><p>rifle</p><p><br></p><ul><li><strong>Gewehr 98步枪</strong></li></ul><p>Gewehr 98步枪（又称：G98、Gew 98、毛瑟M1898或M98）是德国毛瑟枪厂在德国军方采用Gewehr 88步枪后，为了夺回在德国枪械市场的地位而研制的步枪。Gew 98在1898年到1935年间为德国军队的制式步枪，直到它在1935年被毛瑟Kar98k步枪取代为止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量4.09千克（9.0磅） Gewehr 98（空枪）</span><br><span class="line">        3.50千克（7.7磅） Karabiner 98a</span><br><span class="line">长度1,250 mm（49.2英寸） Gewehr 98</span><br><span class="line">        1,090 mm（42.9英寸） Karabiner 98a</span><br><span class="line">枪管长度740 mm（29.1英寸） Gewehr 98</span><br><span class="line">        590 mm（23.2英寸） Karabiner 98a</span><br><span class="line">子弹7.92×57mm毛瑟</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速878 m/s（2,881 ft/s）</span><br><span class="line">有效射程500米（550 yd） （机械瞄具）</span><br><span class="line">        ≥800米（870 yd）（瞄准镜）</span><br><span class="line">供弹方式5发内置弹仓（能够以弹夹条压入）</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Gewehr98.png" alt=""></p><p><br></p><ul><li><strong>蒙德拉贡步枪</strong></li></ul><p>蒙德拉贡步枪（西班牙语：Fusil Mondragón）是一种由墨西哥上将曼努埃尔·蒙德拉贡(Manuel Mondragón)设计，瑞士工业公司（SIG）生产的半自动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4.18 公斤</span><br><span class="line">长度1105 毫米</span><br><span class="line">枪管长度577 毫米</span><br><span class="line">子弹7 × 57 毫米毛瑟弹/7.92 × 57 毫米毛瑟弹</span><br><span class="line">枪机气动式</span><br><span class="line">        转拴式枪机</span><br><span class="line">枪口初速760 米/秒</span><br><span class="line">有效射程800 米</span><br><span class="line">最大射程2,000 米</span><br><span class="line">供弹方式8、10、20、30 发可拆式弹匣</span><br><span class="line">        100 发弹鼓</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mondragon_rifle.png" alt=""></p><p><br></p><ul><li><strong>毛瑟13.2毫米反坦克步枪</strong></li></ul><p>毛瑟13.2毫米反坦克步枪为德意志帝国陆军于第一次世界大战中针对协约国（主要是英国）的装甲车辆所研发生产的反装甲武器，初次登场时间是1918年2月。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量15.8公斤</span><br><span class="line">长度1.68米</span><br><span class="line">枪管长度0.98米</span><br><span class="line">子弹13.2mm TuF</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速805米/秒</span><br><span class="line">供弹方式单发装填</span><br><span class="line">瞄具传统铁制照门</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/AntiTank_132mm.png" alt=""></p><p><br><br><br></p><h3 id="装甲车"><a href="#装甲车" class="headerlink" title="装甲车"></a>装甲车</h3><ul><li><strong>埃尔哈特E-V/4装甲车</strong></li></ul><p>埃尔哈特E-V/4装甲车是德国二战前研发用于轻度战斗和警务的装甲车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量7.12 - 7.75 吨</span><br><span class="line">长度5.3 m</span><br><span class="line">宽度2 m</span><br><span class="line">高度2.85 m</span><br><span class="line">操作人数8 - 9人</span><br><span class="line">装甲约9 mm</span><br><span class="line">主武器三挺机枪</span><br><span class="line">发动机汽油</span><br><span class="line">80 hp (59 kw)</span><br><span class="line">功率/重量10.3 hp/tonne</span><br><span class="line">悬挂四轮驱动</span><br><span class="line">作战范围250 km</span><br><span class="line">速度61.3 km/h</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Panzer_EV4.png" alt=""></p><p><br><br><br></p><h3 id="坦克"><a href="#坦克" class="headerlink" title="坦克"></a>坦克</h3><p>Tank</p><p><br></p><ul><li><strong>A7V坦克</strong></li></ul><p>A7V（Sturmpanzerwagen A7V）是德意志帝国在第一次世界大战时开发的坦克。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量30 至33 吨</span><br><span class="line">长度7.34 米（24 尺 1 寸）</span><br><span class="line">宽度3.1 米（10 尺）</span><br><span class="line">高度3.3 米（10 尺 10 寸）</span><br><span class="line">操作人数18人</span><br><span class="line">装甲侧面20 毫米，正面50 毫米</span><br><span class="line">主武器57 毫米主炮</span><br><span class="line">副武器6挺7.92毫米机枪</span><br><span class="line">发动机2具戴姆勒4汽缸汽油引擎</span><br><span class="line">100匹／800-900转（149 千瓦）x2</span><br><span class="line">功率/重量6.5 匹／吨</span><br><span class="line">悬挂履带、立式弹簧</span><br><span class="line">作战范围30-80 公里（20-50 英里）</span><br><span class="line">速度9 公里／小时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/A7V.png" alt=""></p><p><br></p><ul><li><strong>LK I</strong></li></ul><p>Leichter Kampfwagen (中文：轻型战斗车辆) 或“LK I”是第一次世界大战期间德国制造的原型轻型坦克。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量6.9 吨</span><br><span class="line">长度5.1 米</span><br><span class="line">宽度1.9 米</span><br><span class="line">高度2.5 米</span><br><span class="line">操作人数3 人</span><br><span class="line">装甲8-14 毫米</span><br><span class="line">主武器7.92 毫米 机枪</span><br><span class="line">发动机戴姆勒-奔驰4缸发动机</span><br><span class="line">60 匹/44.7 千瓦</span><br><span class="line">悬挂非悬挂</span><br><span class="line">作战范围70 千米</span><br><span class="line">速度14-18 千米/小时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LK1.png" alt=""></p><p><br><br><br></p><h3 id="飞机"><a href="#飞机" class="headerlink" title="飞机"></a>飞机</h3><p>aircraft</p><p><br></p><ul><li><strong>AEG B.I侦察机</strong></li></ul><p>AEG B.I侦察机是德国的双座双翼侦察机，于1914年小批量生产。它为AEG公司更成功的后继机型——B型和C型的设计提供了基础。</p><p><img src="/images/Weapons/AEG_BI.png" alt=""></p><p><br></p><ul><li><strong>J.I攻击机</strong></li></ul><p>J.I攻击机（制造厂商将其定为“J 4”，以防止与1915年开发的“J 1”机混淆）是德意志帝国陆军航空队于第一次世界大战所使用的一款地面攻击机、侦察机和连络机，由容克斯所研制，属德国“J系列”装甲航空机之一。</p><p><img src="/images/Weapons/JI.png" alt=""></p><p><br></p><ul><li><strong>信天翁C侦察机</strong></li></ul><p>信天翁C侦察机是由信天翁飞机公司研制的双翼侦察机，在第一次世界大战期间不单作为侦察机，还以其机载机枪件为战斗机和对地攻击机，信天翁飞机公司以此为基础推出信天翁D战斗机。</p><p><img src="/images/Weapons/C-VII.png" alt=""></p><p><br></p><ul><li><strong>信天翁D战斗机</strong></li></ul><p>信天翁D战斗机是由信天翁飞机公司以信天翁C侦察机的基础和参考了法国纽波特11战斗机而研制的双翼战斗机，在第一次世界大战期间是继福克E单翼战斗机后德国空军的主力战斗机。</p><p><img src="/images/Weapons/D-Va.png" alt=""></p><p><br></p><ul><li><strong>戈塔G轰炸机</strong></li></ul><p>戈塔G轰炸机是德国在第一次世界大战时的重型轰炸机，在大战期间主要用于轰炸英国，把死亡和恐惧带给英国民众。</p><p><img src="/images/Weapons/G-IV.png" alt=""></p><p><br></p><ul><li><strong>巨人机</strong></li></ul><p>巨人机（德语：Riesenflugzeug，複數時寫作：Riesenflugzeuge），英语有时简称为R型飞机，是指一次世界大战中德意志帝国所使用的重型轰炸机。</p><p><br></p><ul><li><strong>柏法茨战斗机</strong></li></ul><p>柏法茨双翼战斗机是在第一次世界大战时由德国柏法茨飞机公司(德文:Pfalz Flugzeugwerke)研制的双翼战斗机。</p><p><img src="/images/Weapons/D-IIIa.png" alt=""></p><p><img src="/images/Weapons/D-XII.png" alt=""></p><p><br></p><ul><li><strong>汉诺威CL攻击机</strong></li></ul><p>汉诺威CL攻击机是在第一次世界大战时由德国汉诺威飞机公司(德文:Hannoversche Waggonfabrik)研制的双翼攻击机，CL原本是指比一般侦察机（代号为C）轻巧的双座机，原本是用作为侦察机提供直接的护航，但后来发展成为对地攻击机尤其以其后座机枪作为居高临下的机枪火力点。</p><p><img src="/images/Weapons/CL-III.png" alt=""></p><p><br></p><ul><li><strong>福克战斗机</strong></li></ul><p>是福克飞机公司为了参加德国空军的“新型战斗机比赛”而提出的战斗机设计。</p><p><img src="/images/Weapons/D-VIII.png" alt=""></p><p><img src="/images/Weapons/D-VII.png" alt=""></p><p><img src="/images/Weapons/E-III.png" alt=""></p><p><br></p><ul><li><strong>罗兰C-II侦察机</strong></li></ul><p>罗兰C-II侦察机是由LFG公司（Luft-Fahrzeug-Gesellschaft）研制的双翼侦察机，它被誉为第一次世界大战当中最漂亮的德国侦察机，它也因此被称为“鲸鱼”。</p><p><img src="/images/Weapons/C-II.png" alt=""></p><p><br></p><ul><li><strong>齐柏林-斯塔肯R-VI轰炸机</strong></li></ul><p>齐柏林-斯塔肯R-VI轰炸机是德国在第一次世界大战时的重型轰炸机，在大战期间主要和戈塔G轰炸机一起轰炸英国，把死亡和恐惧带给英国民众。</p><p><img src="/images/Weapons/R-VI.png" alt=""></p><p><br></p><ul><li><strong>鸽式单翼机</strong></li></ul><p>鸽式单翼机是由奥地利(当时的“奥匈帝国)飞机工程师埃高．艾垂奇发明的，在第一次世界大战期间除了奥匈帝国，其同盟国盟友德意志帝国也大量采用作为侦察机、轰炸机和教练机等多种用途，虽然在1914年此机已算落伍，但毫无疑问的此后德国所有震惊世界的优秀军用飞机都是从鸽式单翼机开始的。</p><p><img src="/images/Weapons/geshi.png" alt=""></p><p><br><br><br></p><h3 id="巡洋舰"><a href="#巡洋舰" class="headerlink" title="巡洋舰"></a>巡洋舰</h3><p>一次世界大战德国巡洋舰： <a href="https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%B0%E5%BE%B7%E5%9C%8B%E5%B7%A1%E6%B4%8B%E8%89%A6" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%B0%E5%BE%B7%E5%9C%8B%E5%B7%A1%E6%B4%8B%E8%89%A6</a></p><p><br></p><p>巡洋舰（英语：Cruiser）指在排水量、火力、装甲防护等方面仅次于战列舰的大型水面舰艇，拥有同时对付多个作战目标的能力，以及能胜任多种任务的多样性。历史上，巡洋舰由于吨位大、火力强、性能佳，一开始是指可以独立行动的战舰 ; 而与此相对的驱逐舰则需要其它船只（比如补给船只）的协助，才能执行任务。不过随着现今驱逐舰被大型化后的综合作战能力的提升，何潬吨位其实超过早年的巡洋舰，所以这个区分已经不明显了，很多新式的大型军舰都不再冠以巡洋舰之名了。</p><p>巡洋舰的用途顾名思义确实是用来巡逻的。</p><p><br><br><br></p><h3 id="战列舰"><a href="#战列舰" class="headerlink" title="战列舰"></a>战列舰</h3><p>一次大战德国战列舰: <a href="https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%BE%B7%E5%9B%BD%E6%88%98%E5%88%97%E8%88%B0" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%BE%B7%E5%9B%BD%E6%88%98%E5%88%97%E8%88%B0</a></p><p><br></p><p>战列舰（英语：Battleship），是装有厚重装甲和大口径主炮的大型军舰，是人类创造的最庞大和复杂的武器系统之一，大舰巨炮主义时代的极致产物。</p><p><br><br><br></p><hr><p><br></p><h2 id="法国"><a href="#法国" class="headerlink" title="法国"></a>法国</h2><h3 id="手枪-1"><a href="#手枪-1" class="headerlink" title="手枪"></a>手枪</h3><ul><li><strong>FN M1900手枪(勃朗宁)</strong></li></ul><p>FN M1900是一款由著名枪械设计师约翰·勃朗宁于1896年设计，交由比利时Fabrique Nationale生产的单动式半自动手枪。该枪亦是史上第一款使用套筒设计的手枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">重量625克（空枪）</span><br><span class="line">长度172亳米</span><br><span class="line">枪管长度102亳米</span><br><span class="line">子弹.32 ACP（7.65×17亳米）</span><br><span class="line">枪机反冲作用，单动</span><br><span class="line">供弹方式7 + 1发弹匣</span><br><span class="line">瞄具固定式瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FN_M1900.jpg" alt=""></p><p><br></p><ul><li><strong>M1892转轮手枪</strong></li></ul><p>M1892转轮手枪（或称：勒贝尔转轮手枪或圣埃蒂安8毫米）是法国采用的一种制式手枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量0.85公斤（空枪）</span><br><span class="line">长度24厘米</span><br><span class="line">子弹8毫米法国军械弹</span><br><span class="line">口径8毫米</span><br><span class="line">枪机双动式</span><br><span class="line">枪口初速220米/秒</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1892.jpg" alt=""></p><p><br></p><ul><li><strong>M1911手枪</strong></li></ul><p>M1911（45手枪）是一种在1911年起生产的.45 ACP口径半自动手枪，由约翰·勃朗宁设计。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量空枪连弹匣：2.437磅（1,105克）[1]</span><br><span class="line">长度8.25吋（210毫米）</span><br><span class="line">枪管长度</span><br><span class="line">政府型：5.03吋（127毫米）</span><br><span class="line">指挥官型：4.25吋（108毫米）</span><br><span class="line">军官ACP型：3.5吋（89毫米）</span><br><span class="line">子弹.45 ACP</span><br><span class="line">枪机枪管短行程后座作用、单动式板机</span><br><span class="line">枪口初速251.46米/秒、〔825英尺/秒〕</span><br><span class="line">有效射程50米</span><br><span class="line">供弹方式7发（标准弹匣），膛室1发</span><br><span class="line">瞄具机械瞄具：金属缺口式照门及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1911.png" alt=""></p><p><br></p><ul><li><strong>MAS 1873转轮手枪</strong></li></ul><p>MAS 1873（或称：Chamelot-Delvigne）是法国军队采用的第一种双动式转轮手枪，此枪不久便被更新的M1892转轮手枪所取代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量1.04 kg</span><br><span class="line">长度240 mm</span><br><span class="line">枪管长度115 mm</span><br><span class="line">子弹11毫米M1873</span><br><span class="line">口径11 mm</span><br><span class="line">枪机双动式</span><br><span class="line">射速20 - 30发/分钟</span><br><span class="line">最大射程50米</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具V型缺口及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MAS1873.png" alt=""></p><p><br><br><br></p><h3 id="冲锋枪-1"><a href="#冲锋枪-1" class="headerlink" title="冲锋枪"></a>冲锋枪</h3><p><br><br><br></p><h3 id="机枪-1"><a href="#机枪-1" class="headerlink" title="机枪"></a>机枪</h3><ul><li><strong>圣艾蒂安M1907中型机枪</strong></li></ul><p>圣艾蒂安M1907（法语：St. Étienne Mle 1907）是法国军队于第一次世界大战及第二次世界大战期间所装备的一种中型机枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量26公斤</span><br><span class="line">长度1,180毫米</span><br><span class="line">枪管长度710毫米</span><br><span class="line">子弹8×50毫米勒贝尔弹</span><br><span class="line">枪管1根</span><br><span class="line">枪机气动式</span><br><span class="line">射速可调整：8 - 650发/分钟</span><br><span class="line">枪口初速724米/秒</span><br><span class="line">供弹方式25、30发金属弹链</span><br><span class="line">300发布制弹链（1916年）</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1907.png" alt=""></p><p><br></p><ul><li><strong>绍沙轻机枪</strong></li></ul><p>绍沙轻机枪，是在一战（1914年–1918年）时法国军队装备的制式轻机枪。官方名”Fusil Mitrailleur Modele 1915 CSRG”（机关步枪1915年型CSRG）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量9.07千克（20.0英磅）</span><br><span class="line">长度1,143毫米（45.0英寸）</span><br><span class="line">枪管长度470毫米（19英寸）</span><br><span class="line">子弹8×50毫米勒贝尔弹</span><br><span class="line">其他</span><br><span class="line">枪机长行程后座作用、气动式、开放式枪机</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速约240发/分钟</span><br><span class="line">枪口初速630米/秒</span><br><span class="line">有效射程200米</span><br><span class="line">最大射程2,000米</span><br><span class="line">供弹方式20发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/CSRG1915.png" alt=""></p><p><br></p><ul><li><strong>刘易斯机枪</strong></li></ul><p>刘易斯机枪（Lewis Gun）由美国陆军上校艾萨克·牛顿·刘易斯发明，但美国陆军并未采用，而是在英国发扬光大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量12公斤（空枪）</span><br><span class="line">长度1,125 mm</span><br><span class="line">枪管长度660 mm</span><br><span class="line">子弹.303英式弹</span><br><span class="line">口径7.7 mm</span><br><span class="line">枪机气动式、开放式枪机</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速500 - 600发/分钟</span><br><span class="line">枪口初速747米/秒</span><br><span class="line">有效射程800 m</span><br><span class="line">最大射程3,200 m</span><br><span class="line">供弹方式47发、97发弹鼓</span><br><span class="line">瞄具刀片式瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LewisGun.png" alt=""></p><p><br></p><ul><li><strong>霍奇克斯M1914重机枪</strong></li></ul><p>霍奇克斯M1914重机枪（法语：Hotchkiss Mle 1914）由美国人班杰明·霍奇克斯所开设的霍奇克斯公司研发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量24.4公斤</span><br><span class="line">46.8公斤（连三脚架）</span><br><span class="line">长度1,390毫米</span><br><span class="line">枪管长度800毫米</span><br><span class="line">子弹8×50毫米勒贝尔子弹</span><br><span class="line">7×57毫米毛瑟子弹</span><br><span class="line">6.5×50毫米有坂子弹</span><br><span class="line">11毫米Gras子弹</span><br><span class="line">6.5×55毫米</span><br><span class="line">枪机导气式</span><br><span class="line">射速450发/分钟</span><br><span class="line">枪口初速724米/秒</span><br><span class="line">供弹方式24发保弹板</span><br><span class="line">250发铰接式弹链</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1914.png" alt=""></p><p><br><br><br></p><h3 id="步枪-1"><a href="#步枪-1" class="headerlink" title="步枪"></a>步枪</h3><ul><li><strong>M1917RSC半自动步枪</strong></li></ul><p>M1917式RSC半自动步枪（法语：Fusil Automatique Modèle 1917，别名RSC M1917）是一种半自动气动式军用步枪，于第一次世界大战末期（1918年）装备法国军队。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">重量5,25公斤（11,6磅）</span><br><span class="line">长度1331毫米（52,4英寸）</span><br><span class="line">枪管长度798毫米（31,4英寸）</span><br><span class="line">子弹8×50mm勒贝尔弹</span><br><span class="line">枪机长行程导气式活塞，滚转式枪机</span><br><span class="line">枪口初速701米/秒</span><br><span class="line">有效射程标尺最低射程250米，最大有效1200米</span><br><span class="line">供弹方式5发内装漏夹供弹</span><br><span class="line">瞄具铁质标尺，标尺直立射程2400米</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1917RSC.png" alt=""></p><p><br></p><ul><li><strong>Mle 1918 全自动卡宾枪</strong></li></ul><p>Mle 1918 利贝罗勒全自动卡宾枪（英语：Ribeyrolles 1918 automatic carbine ，法语：Carabine Mitrailleuse 1918）是法国的一款自动步枪，亦是世界首型应用突击步枪概念的枪械。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量5.1公斤（空枪）</span><br><span class="line">长度1090毫米</span><br><span class="line">枪管长度450毫米</span><br><span class="line">子弹8 × 35 毫米利贝罗勒弹</span><br><span class="line">口径8 毫米</span><br><span class="line">枪机直接反冲</span><br><span class="line">射速550~600发/分钟</span><br><span class="line">枪口初速570 米/秒</span><br><span class="line">有效射程400 米</span><br><span class="line">供弹方式25 发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mle1918.jpg" alt=""></p><p><br></p><ul><li><strong>勒贝尔M1886步枪</strong></li></ul><p>勒贝尔M1886（法语：Fusil Lebel Modèle 1886）或勒贝尔步枪（法语：Fusil Lebel）是法国于1886年推出的栓式步枪，由尼古拉斯·勒贝尔上校研制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4.41 kg（上弹）</span><br><span class="line">4.18 kg（空枪）</span><br><span class="line">长度130 cm</span><br><span class="line">枪管长度80 cm</span><br><span class="line">子弹8×50毫米勒贝尔弹</span><br><span class="line">口径8 mm</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速610 - 700米/秒</span><br><span class="line">有效射程400米</span><br><span class="line">最大射程1,800米</span><br><span class="line">供弹方式8发管状弹仓（若算上托弹板上和膛室内的额外两发子弹为10发）</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1886.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特1907型半自动步枪</strong></li></ul><p>温彻斯特1907型是由美国枪械设计师托马斯·克罗斯利.约翰逊设计的一种半自动步枪，它在1906年到1958年期间由温彻斯特连发武器公司生产。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重量3.6 kg - 4.1 kg</span><br><span class="line">长度1,000 mm</span><br><span class="line">枪管长度510 mm</span><br><span class="line">子弹.351 Winchester Self-Loading</span><br><span class="line">口径.351</span><br><span class="line">枪机后座作用</span><br><span class="line">供弹方式5 发、10 发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Winchester1907.png" alt=""></p><p><br></p><ul><li><strong>双管霰弹枪</strong></li></ul><p>双管霰弹枪（英语：Double-barreled shotgun，或称双管猎枪），是一种有两根枪管的猎枪，可分为水平排列或上下排列，可算是最早期的猎枪之一，前身为镇暴枪。</p><p><img src="/images/Weapons/Double-barreled_shotgun.png" alt=""></p><p><br><br><br></p><h3 id="炮"><a href="#炮" class="headerlink" title="炮"></a>炮</h3><ul><li><strong>皮托SA-18坦克炮</strong></li></ul><p>皮托SA-18坦克炮是法国在一战期间由设计的一种战车炮，主要装备于雷诺FT-17坦克上。</p><p><img src="/images/Weapons/SA18.png" alt=""></p><p><br><br><br></p><h3 id="坦克-1"><a href="#坦克-1" class="headerlink" title="坦克"></a>坦克</h3><ul><li><strong>2C超级重战车</strong></li></ul><p>2C超重型坦克，又名Char 2C，是法国于一战时设计的超重型坦克。但是，它并没有参加一战。不过，这辆坦克是所有被正式量产的坦克中吨位第二大的，仅次于猎虎式驱逐战车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量69 t（68 long ton；76 short ton）</span><br><span class="line">长度10.27米（33英尺8英寸）</span><br><span class="line">宽度3米（9英尺10英寸）</span><br><span class="line">高度4.09米（13英尺5英寸）</span><br><span class="line">操作人数11人[注 1]</span><br><span class="line">装甲45 mm（1.8英寸） max.</span><br><span class="line">主武器75 mm 火炮</span><br><span class="line">副武器4挺8 mm 机枪 (有一门在后炮塔上)</span><br><span class="line">发动机双引擎</span><br><span class="line">        2 x 250 马力</span><br><span class="line">作战范围150 km（93 mi）</span><br><span class="line">速度15 km/h（9.3 mph）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/2C.png" alt=""></p><p><br></p><ul><li><strong>施耐德CA1坦克</strong></li></ul><p>施耐德CA1坦克（法语：Char Schneider CA1）是法国研制的第一种坦克，研发的主要目的是破坏战场上的铁丝网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量13.6 吨</span><br><span class="line">长度6.32 米</span><br><span class="line">宽度2.05 米</span><br><span class="line">高度2.30 米</span><br><span class="line">操作人数6人</span><br><span class="line">装甲5.5-11毫米钢板</span><br><span class="line">主武器施耐德75mm迫击炮</span><br><span class="line">副武器2门8mm霍奇基斯M1914机枪</span><br><span class="line">发动机施耐德4缸55hp汽油引擎</span><br><span class="line">悬挂弹簧</span><br><span class="line">作战范围45 公里</span><br><span class="line">速度8.1 公里／小时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/CA1.png" alt=""></p><p><br></p><ul><li><strong>雷诺FT-17坦克</strong></li></ul><p>雷诺FT-17，是一款法国轻型坦克。它于一战时由法国研发，是世界上第一款安装旋转炮塔的坦克。截至一战结束时，一共生产了3187辆。甚至在二战爆发时，还有1800辆FT-17坦克在法国军队中服役。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量7吨</span><br><span class="line">长度5米</span><br><span class="line">宽度1.74米</span><br><span class="line">高度2.14米</span><br><span class="line">操作人数2（车长及驾驶员）</span><br><span class="line">装甲6-22毫米</span><br><span class="line">主武器皮托SA-18 37mmL/21战车炮</span><br><span class="line">或8mm哈奇开斯M1914机枪</span><br><span class="line">发动机雷诺直立式4缸水冷汽油机</span><br><span class="line">35匹</span><br><span class="line">功率/重量6马力/吨</span><br><span class="line">变速机械式（4前进档，1倒车档）</span><br><span class="line">悬挂垂直弹簧</span><br><span class="line">作战范围35公里</span><br><span class="line">速度7.7公里/时</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FT-17.png" alt=""></p><p><br><br><br></p><h3 id="飞机-1"><a href="#飞机-1" class="headerlink" title="飞机"></a>飞机</h3><ul><li><strong>纽波特战斗机</strong></li></ul><p>纽波特11战斗机是法国在第一次世界大战早期推出的双翼战斗机，因其机体细小而被称为“婴儿”，它是由纽波特飞机公司研制的，成立于1902年的纽波特飞机公司由1909年开始造飞机，该公司由纽波特兄弟创立但两兄弟后来都在飞行事故当中死去，公司由他人接手，而在推出纽波特11战斗机后该公司才在航空界打响名堂并开创了“纽波特皇朝”。</p><p><img src="/images/Weapons/NBT11.png" alt=""></p><p><img src="/images/Weapons/NBT17.png" alt=""></p><p><img src="/images/Weapons/NBT28.png" alt=""></p><p><br></p><ul><li><em>莫兰-索尼耶L单翼机**</em></li></ul><p>莫兰-索尼耶L单翼机是法国莫兰-索尼耶飞机公司在1913年研制的单翼多用途飞机，该型机在当年12月的就在巴黎的航空展览上公开，在第一次世界大战爆发后就成为法国空军的侦察机，也是第一种在螺旋桨上加上钢铁制子弹偏导片而实现机枪安装在机头并开火，估计这样有大约1/4的子弹会被它挡住不伤到螺旋桨，其余3/4可穿过螺旋桨射击目标，此种做法是在同步射击系统出现前唯一的可行办法。<br>莫兰-索尼耶L单翼机也因此被称为“历史上第一种战斗机”。</p><p><img src="/images/Weapons/MS-L.png" alt=""></p><p><br><br><br></p><hr><p><br></p><h2 id="俄国"><a href="#俄国" class="headerlink" title="俄国"></a>俄国</h2><ul><li><strong>M1911手枪</strong></li></ul><p><br></p><ul><li><strong>毛瑟C96手枪</strong></li></ul><p><br></p><ul><li><strong>纳甘M1895转轮手枪</strong></li></ul><p>纳甘M1895（俄语：Револьвер системы Нагана，意为：纳甘系统转轮手枪）是由比利时工业家莱昂·纳甘为俄罗斯帝国所研发的7发双动式转轮手枪，发射7.62×38mmR弹药。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量0.8 kg（空枪）</span><br><span class="line">长度235 mm</span><br><span class="line">枪管长度114 mm</span><br><span class="line">子弹7.62×38mmR</span><br><span class="line">口径7.62 mm</span><br><span class="line">枪机单动式、双动式</span><br><span class="line">射速14 - 21发/分钟</span><br><span class="line">枪口初速272米/秒</span><br><span class="line">有效射程22米</span><br><span class="line">供弹方式7发转轮式弹巢</span><br><span class="line">瞄具V型照门及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1895.png" alt=""></p><p><br></p><ul><li><strong>三八式步枪</strong></li></ul><p>三八式步枪（日语：三八式歩兵銃；さんぱちしきほへいじゅう，Sanpachi-shiki hohei-juu）为手动步枪，日本陆军于日俄战争同年（1905年，明治38年）正式采用为制式武器，一直到第二次世界大战。三八式步枪在中国一向俗称为三八大盖，由于其枪机上有一个随枪机连动的防尘盖以及机匣上刻有“三八式”字样而得名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量3,730g（加上刺刀重4,100g）</span><br><span class="line">长度127.6cm（上刺刀可达166.3cm）</span><br><span class="line">枪管长度797毫米</span><br><span class="line">子弹6.5×50mm有阪（Arisaka）</span><br><span class="line">口径6.5毫米</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速765米／秒</span><br><span class="line">有效射程460米</span><br><span class="line">供弹方式5发弹匣，内置弹仓</span><br><span class="line">瞄具铁制直立式表尺</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/38shi.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特步枪</strong></li></ul><p>温彻斯特步枪（Winchester Rifle），有时亦称温彻斯特连发步枪（Winchester Repeating Rifle），是由美国温彻斯特连发武器公司研制及生产的一系列步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4.3 kg</span><br><span class="line">长度125.2 cm</span><br><span class="line">枪管长度76.2 cm</span><br><span class="line">子弹.44-40温彻斯特</span><br><span class="line">.38-40温彻斯特</span><br><span class="line">.32-20温彻斯特</span><br><span class="line">.30-30温彻斯特</span><br><span class="line">.22 LR</span><br><span class="line">其他</span><br><span class="line">枪机杠杆式</span><br><span class="line">供弹方式8（M1894）、10（M1866）、13（M1866）、15发内置管状弹仓</span><br><span class="line">瞄具后方缺口及前准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/WinchesterRifle.png" alt=""></p><p><br></p><ul><li><strong>莫辛-纳甘步枪</strong></li></ul><p>莫辛-纳甘（法文：Mosin-Nagant）步枪是由设计者俄国陆军上校谢尔盖·伊凡诺维奇·莫辛和比利时枪械设计师李昂·纳甘共同命名的手动步枪，在俄语圈国家也被普遍的称为莫辛步枪 （俄文：Винтовка Мосина），官方名称为”三线M1891步枪”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量4.22公斤（空枪），各型号不同</span><br><span class="line">长度1306毫米，各型号不同</span><br><span class="line">枪管长度800毫米，各型号不同</span><br><span class="line">子弹7.62×54毫米R枪弹</span><br><span class="line">口径7.62毫米</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速615米/秒（M1891）</span><br><span class="line">860米/秒（M1891/30）</span><br><span class="line">有效射程548.64米（600码）</span><br><span class="line">最大射程1828.8米（2000码）</span><br><span class="line">供弹方式5发内置弹仓</span><br><span class="line">10发可拆式弹匣（现代化改版限定）</span><br><span class="line">瞄具机械瞄具：后方可调式缺口表尺及前方柱状准星</span><br><span class="line">PU 3.5倍光学瞄准镜</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MosinNagant.png" alt=""></p><p><br></p><ul><li><strong>费德洛夫M1916自动步枪</strong></li></ul><p>费德洛夫M1916 （俄语：Автомат Фёдорова）是一种战斗步枪，由弗拉基米尔·格里高利耶维奇·费德洛夫（Vladimir Grigoryevich Fyodorov）设计，1916年在沙俄境内生产。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量4.4公斤 (全重：5.2公斤)</span><br><span class="line">长度1,045毫米</span><br><span class="line">枪管长度520 毫米</span><br><span class="line">子弹6.5×50毫米有坂子弹</span><br><span class="line">口径6.5毫米</span><br><span class="line">枪机枪管短行程后座作用</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速600发/分钟[1]</span><br><span class="line">枪口初速654米每秒（2,150英尺每秒）[1]</span><br><span class="line">供弹方式25发可拆卸式弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/FyodorovM1916.png" alt=""></p><p><br></p><ul><li><strong>绍沙轻机枪</strong></li></ul><p><br></p><ul><li><strong>麦德森轻机枪</strong></li></ul><p><br></p><ul><li><strong>刘易斯机枪</strong></li></ul><p><br></p><ul><li><strong>维克斯机枪</strong></li></ul><p>维克斯机枪（Vickers），是第一次世界大战与第二次世界大战期间英国军队所使用的中型机枪。基于维克斯机枪优异的设计，使它成为世界上著名的战争武器之一。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量15 kg</span><br><span class="line">长度1,100 mm</span><br><span class="line">枪管长度720 mm</span><br><span class="line">操作人数3人</span><br><span class="line">子弹.303英式弹</span><br><span class="line">口径7.7毫米</span><br><span class="line">枪机后坐式，水冷却</span><br><span class="line">射速450 - 500发/分钟</span><br><span class="line">枪口初速744米/秒</span><br><span class="line">有效射程2,000米</span><br><span class="line">最大射程4,100米</span><br><span class="line">供弹方式250发布制弹链</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Vickers.png" alt=""></p><p><br></p><ul><li><strong>马克沁M1910重机枪</strong></li></ul><p>马克沁M1910重机枪（Пулемёт Максима на станке Соколова）又名PM M1910马克沁，是海勒姆·马克沁开发的马克沁机枪之衍生型，发射7.62×54毫米R弹药，配有轮式射架。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">重量64.3公斤（139.6磅）</span><br><span class="line">长度1067毫米</span><br><span class="line">枪管长度721毫米</span><br><span class="line">子弹7.62×54毫米R</span><br><span class="line">口径7.62毫米</span><br><span class="line">枪机后座作用</span><br><span class="line">射速600发/分</span><br><span class="line">枪口初速740米/秒（2,427.2尺/秒）</span><br><span class="line">供弹方式250发布制弹链</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PM_M1910.png" alt=""></p><p><br><br><br></p><hr><p><br></p><h2 id="英国"><a href="#英国" class="headerlink" title="英国"></a>英国</h2><ul><li><strong>M1911手槍</strong></li></ul><p><br></p><ul><li><strong>毛瑟C96手槍</strong></li></ul><p><br></p><ul><li><strong>M1917左轮手枪</strong></li></ul><p>M1917左轮手枪（M1917 Revolver），官方正式名称为M1917 .45英寸美国左轮手枪（英语：United States Revolver, Caliber .45, M1917）是一把美国六发式左轮手枪，主要发射.45 ACP口径手枪子弹。</p><p><img src="/images/Weapons/M1917Revolver.png" alt=""></p><p><br></p><ul><li><strong>史密斯威森军警型左轮手枪</strong></li></ul><p>史密斯威森军警型（Smith &amp; Wesson Military &amp; Police，缩写：S&amp;W MP；简称：点三八），是一种.38口径的美国制左轮手枪。</p><p><img src="/images/Weapons/SW_MP.png" alt=""></p><p><br></p><ul><li><strong>韦伯利转轮手枪</strong></li></ul><p>韦伯利转轮手枪（英语：Webley Revolver）是由英国生产的一系列军用和警用转轮手枪。当中最著名的版本为韦伯利MK VI， 它在一次大战期间成为了英国军队以及其殖民地军队的制式手枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量1.1公斤（空枪）</span><br><span class="line">长度286毫米</span><br><span class="line">枪管长度106毫米</span><br><span class="line">子弹.455韦伯利</span><br><span class="line">.38/200</span><br><span class="line">口径.455英寸（11.6×19毫米）、.38英寸</span><br><span class="line">枪机单/双动式板机</span><br><span class="line">射速20-30发/分钟</span><br><span class="line">枪口初速190米/秒</span><br><span class="line">有效射程50码</span><br><span class="line">供弹方式6发弹巢</span><br><span class="line">瞄具缺口式机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MK_VI.png" alt=""></p><p><br></p><ul><li><p><strong>三八步枪</strong></p></li><li><p><strong>温彻斯特步枪</strong></p></li></ul><p><br></p><ul><li><strong>恩菲尔德M1917步枪</strong></li></ul><p>恩菲尔德M1917步枪（M1917 Enfield，又名P17、P1917或Pattern 1917）是“美国恩菲尔德”（American Enfield）于1917至1918年间生产的.30-06口径手动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">重量4.17 公斤（9磅3安士）</span><br><span class="line">长度1175 毫米（3尺10.25寸）</span><br><span class="line">枪管长度26 寸（660毫米）</span><br><span class="line">子弹.30-06（7.62 x 63毫米）</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速823 米/秒（2700尺/秒）</span><br><span class="line">供弹方式5发弹夹、6发内置弹仓</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/M1917_Enfield.jpg" alt=""></p><p><br></p><ul><li><strong>李-恩菲尔德步枪</strong></li></ul><p>李-恩菲尔德步枪（Lee-Enfield）也译李恩飞步枪是1895年至1956年英军的制式手动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">重量4.19公斤（MLE Mk.I）</span><br><span class="line">3.96公斤（SMLE No.1 Mk.III）</span><br><span class="line">长度1257毫米（MLE Mk.I）</span><br><span class="line">        1138毫米（SMLE No.1 Mk.III）</span><br><span class="line">        1130毫米（No.4 Mk.I）</span><br><span class="line">枪管长度767毫米（MLE Mk.I）</span><br><span class="line">        640毫米（SMLE No.1 Mk.III）</span><br><span class="line">子弹.303 British（7.7×56mm R）</span><br><span class="line">        7.92×57毫米尖头弹(为适应中国战场所改膛的)</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速744米／秒</span><br><span class="line">有效射程914米（1000码）</span><br><span class="line">最大射程1828米（2000码）</span><br><span class="line">供弹方式10发内置弹仓（两个5发弹夹）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Lee-Enfield.png" alt=""></p><p><br></p><ul><li><strong>马提尼-亨利步枪</strong></li></ul><p>马提尼-亨利”（Martini-Henry）是一种英国陆军曾经装备的起落式枪机步枪。它于1871年首度投入服役，最终取代了原有的史奈德步枪，一款改良至发射定装弹的前装枪。马提尼-亨利的衍生型在大英帝国中一共服役了三十年。它采用了由亨利·O·皮博迪为其皮博迪步枪设计的起落式枪机，并由瑞士设计师里德里希·冯·马提尼进行改良，结合由苏格兰人亚历山大·亨利设计的多边形膛线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量3.827 kg（空枪）</span><br><span class="line">长度1245 mm</span><br><span class="line">子弹.577/450 Boxer-Henry</span><br><span class="line">        .577/450马提尼-亨利</span><br><span class="line">        .303英式弹</span><br><span class="line">        11.43×55R（奥斯曼帝国）</span><br><span class="line">        11.43×59R（罗马尼亚）</span><br><span class="line">        7.65×53毫米（奥斯曼帝国）</span><br><span class="line">枪机起落式枪机（Martini Falling Block）</span><br><span class="line">射速12发/分钟</span><br><span class="line">枪口初速400米/秒</span><br><span class="line">有效射程370米</span><br><span class="line">最大射程1,700米</span><br><span class="line">供弹方式1发装在膛室内</span><br><span class="line">瞄具可滑动式表尺及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Martini-Henry.png" alt=""></p><p><br></p><ul><li><p><strong>维克斯机枪</strong></p></li><li><p><strong>刘易斯机枪</strong></p></li><li><p><strong>马克沁机枪</strong></p></li><li><p><strong>双管霰弹枪</strong></p></li></ul><p><br></p><ul><li><strong>勃朗宁M1917重机枪</strong></li></ul><p>M1917重机枪是由约翰·勃朗宁设计，美军在一战，二战及韩战中采用的重机枪，并有限延伸至越战，同时它也被其他国家使用。这是一种班组操作，弹链供弹的水冷重机枪，与同时期的M1919风冷中型机枪共同服役。该型机枪以营为单位配发同时也经常装备于各种载具之上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量47公斤</span><br><span class="line">长度980毫米</span><br><span class="line">枪管长度609毫米</span><br><span class="line">子弹.30-06春田</span><br><span class="line">口径7.62毫米</span><br><span class="line">枪机短行程后座作用式</span><br><span class="line">射速450发/分钟</span><br><span class="line">        600发/分钟（M1917A1）</span><br><span class="line">枪口初速853.6米/秒</span><br><span class="line">最大射程900米</span><br><span class="line">供弹方式250发布制弹链</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Browning_M1917.png" alt=""></p><p><br></p><ul><li><strong>Template:V及W級驱逐舰</strong></li></ul><p><br></p><ul><li><strong>步行者号驱逐舰</strong></li></ul><p>步行者号驱逐舰（舷号D27）是一艘英国皇家海军建造的驱逐舰，为W级驱逐舰的3号舰。她是英军第一艘以步行者（Walker）为名的军舰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标准排水量设计：1,100吨</span><br><span class="line">全长整体：300呎</span><br><span class="line">全宽水线：26.75呎</span><br><span class="line">吃水9呎</span><br><span class="line">最高速度34节</span><br><span class="line">武器装备4门4吋Mk V速射炮</span><br><span class="line">        2门单装2磅砰砰炮</span><br><span class="line">        2座3联装鱼雷发射管</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Walker_D27.jpg" alt=""></p><p><br></p><ul><li><strong>范诺克号驱逐舰</strong></li></ul><p>范诺克号驱逐舰（舷号H33）是一艘英国皇家海军建造的驱逐舰，为V级驱逐舰的1号舰。她是英军第一艘以范诺克（Vanoc）为名的军舰，舰名取自圆桌骑士团的范诺克骑士。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标准排水量设计：1,272吨至1,339吨</span><br><span class="line">全长整体：300呎</span><br><span class="line">全宽水线：26呎9吋</span><br><span class="line">吃水9呎</span><br><span class="line">最高速度34节</span><br><span class="line">武器装备4门4吋Mk V速射炮</span><br><span class="line">        2门单装2磅砰砰炮</span><br><span class="line">        2座双联装鱼雷发射管</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Vanoc_H33.png" alt=""></p><p><br></p><ul><li><strong>Mark I 坦克</strong></li></ul><p>Mark I 坦克由英国研制并在第一次世界大战于英国军队服役，是世界上第一种正式参与战争的坦克。[1] Mark I 坦克在1916年8月开始服役，并于1916年9月15日首次应用在索姆河战役上。它的主要作用是破坏战场上的铁丝网、越过战壕、亦能抵御小型武器的射击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">重量雄性：28.4公吨（28.0长吨）</span><br><span class="line">雌性：27.4公吨（27.0长吨）</span><br><span class="line">长度9.94米（32英尺7英寸）</span><br><span class="line">宽度4.33米（14英尺2英寸）</span><br><span class="line">高度2.44米（8英尺0英寸）</span><br><span class="line">操作人数8人</span><br><span class="line">装甲6-12 毫米</span><br><span class="line">主武器雄性：2 × 霍奇基斯QF 6磅炮</span><br><span class="line">        雌性：4 × 维克斯机枪</span><br><span class="line">副武器雄性：3 × 霍奇基斯轻机枪</span><br><span class="line">        雌性：1 × 霍奇基斯轻机枪</span><br><span class="line">发动机戴姆勒-奈特6缸 13升 汽油引擎</span><br><span class="line">        105匹马力（78千瓦特）</span><br><span class="line">功率/重量雄性：3.7匹马力每公吨（2.8千瓦每公吨）</span><br><span class="line">        雌性：4.0匹马力每公吨（3.0千瓦每公吨）</span><br><span class="line">悬挂履带</span><br><span class="line">作战范围23.6英里（38.0千米），巡航6.2小时</span><br><span class="line">速度5.9千米每小时（3.7英里每小时）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mark-I.png" alt=""></p><p><br><br><br></p><hr><p><br></p><h2 id="美国"><a href="#美国" class="headerlink" title="美国"></a>美国</h2><ul><li><strong>Mk 2手榴弹</strong></li></ul><p>Mk 2手榴弹（或写作Mk II）是一种反人员破片手榴弹，美军于1918年导入，用以取代Mk 1手榴弹，在二战、韩战至越战中所使用。由于外型相似凤梨又名凤梨手榴弹，因保险片的形状被称为“鸭嘴手榴弹”，因外观被称为“卵形手榴弹”、“凤梨手榴弹”或“癞瓜手榴弹”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重量595克</span><br><span class="line">长度111毫米</span><br><span class="line">填充TNT</span><br><span class="line">填充量2安士</span><br><span class="line">引爆机制4-5秒</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MK2.png" alt=""></p><p><br></p><ul><li><p><strong>M1911手枪</strong></p></li><li><p><strong>M1917左轮手枪</strong></p></li><li><p><strong>史密斯威森军警型左轮手枪</strong></p></li></ul><p><br></p><ul><li><p><strong>恩菲尔德M1917步枪</strong></p></li><li><p><strong>李-恩菲尔德步枪</strong></p></li><li><p><strong>温彻斯特步枪</strong></p></li><li><p><strong>温彻斯特1907型半自动步枪</strong></p></li><li><p><strong>莫辛-纳甘步枪</strong></p></li></ul><p><br></p><ul><li><strong>M1903春田步枪</strong></li></ul><p>M1903春田步枪是一种旋转后拉式枪机弹仓式手动步枪，1903年定型称为“0.30口径M1903式步枪”，因其由春田（Springfield）兵工厂研制而得名M1903春田步枪（Springfield rifle）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量3.95公斤</span><br><span class="line">长度1,098毫米（44.9寸）</span><br><span class="line">枪管长度610毫米（24寸）</span><br><span class="line">子弹.30-03</span><br><span class="line">       .30-06（7.62×63毫米）</span><br><span class="line">        7.92×57毫米尖头弹(为适应中国与欧洲战场所改膛的)</span><br><span class="line">枪机旋转后拉式枪机</span><br><span class="line">枪口初速823 - 853米／秒</span><br><span class="line">有效射程550米</span><br><span class="line">供弹方式5发弹夹，内置弹仓</span><br><span class="line">瞄具片状准星；带&quot;U&quot;形缺口折叠式框形表尺</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/SpringField_M1903.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特M1897泵动式霰弹枪</strong></li></ul><p>温彻斯特M1897（英语：Winchester Model (M) 1897，俗称：Model 97或M97）是一枝由著名的美国枪械设计师约翰·勃朗宁设计、美国温彻斯特连发武器公司生产的泵动式及外置击锤型设计霰弹枪。</p><p><img src="/images/Weapons/Winchester_M1897.png" alt=""></p><p><br></p><ul><li><strong>温彻斯特M1912泵动式霰弹枪</strong></li></ul><p>温彻斯特M1912（英语：Winchester Model（M） 1912，俗称：Model 12或M12）是一枝由美国温彻斯特连发武器公司生产的泵动式、内置式击锤设计及外部管式弹仓供弹的霰弹枪。此枪在推出后不久被流行地命名为完美的连发枪（英语：Perfect Repeater），基本奠定了此枪对泵动霰弹枪超过51年的高效率生产的生涯的标准。</p><p><img src="/images/Weapons/Winchester_M1912.png" alt=""></p><p><br></p><ul><li><strong>勃朗宁Auto-5半自动霰彈槍</strong></li></ul><p>勃朗宁Auto-5（英语：Browning Automatic 5，简称：Auto-5、A-5，意为：勃朗宁自动五发式霰弹枪）是一枝由美国著名轻兵器设计家约翰·勃朗宁所研制、后座作用操作的半自动霰弹枪，可发射12铅径霰弹、16铅径霰弹或20铅径霰弹。</p><p><img src="/images/Weapons/Auto-5.png" alt=""></p><p><br></p><ul><li><strong>勃朗宁自动步枪</strong></li></ul><p>勃朗宁自动步枪（英语：Browning Automatic Rifle，简称：BAR），是美军在20世纪上半叶使用的一种自动步枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">重量空枪重：7.2公斤（A1）</span><br><span class="line">空枪重：8.8公斤（A2）</span><br><span class="line">长度1,214毫米（47.8寸）</span><br><span class="line">枪管长度610毫米（24寸）</span><br><span class="line">子弹.30-06 Springfield </span><br><span class="line">       （7.62×63毫米）</span><br><span class="line">        7.92×57毫米尖头弹(为适应中国战场所改膛的)</span><br><span class="line">口径7.62毫米（.30寸）</span><br><span class="line">枪机长行程导气式活塞、开放式枪机</span><br><span class="line">发射模式半自动、全自动</span><br><span class="line">射速300-450发/分；</span><br><span class="line">        500-650发/分（A2）</span><br><span class="line">枪口初速805米/秒</span><br><span class="line">有效射程548米</span><br><span class="line">供弹方式20发弹匣</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/BAR.png" alt=""></p><p><br></p><ul><li><p><strong>刘易斯机枪</strong></p></li><li><p><strong>勃朗宁机枪</strong></p></li><li><p><strong>绍沙轻机枪</strong></p></li><li><p><strong>霍奇科斯重机枪</strong></p></li></ul><p><br></p><ul><li><strong>勃朗宁M1919中型机枪</strong></li></ul><p>勃朗宁M1919（M1919 Browning machine gun），俗称（Browning Machine Gun，30 Cal ），是由约翰·勃朗宁在一战后设计的机枪，主要是把水冷式M1917改为风冷式，采用.30-06 Springfield 步枪弹药。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量14公斤</span><br><span class="line">长度964毫米（37.94英寸）</span><br><span class="line">操作人数2至3名</span><br><span class="line">子弹.30-06 Springfield（U.S.）</span><br><span class="line">        7.62×51mm NATO（U.S.）</span><br><span class="line">        .303 British</span><br><span class="line">口径7.62毫米/7.7毫米</span><br><span class="line">枪机后坐作用</span><br><span class="line">射速400–600发／分</span><br><span class="line">枪口初速853米／秒</span><br><span class="line">有效射程1,400米</span><br><span class="line">供弹方式M9弹链供弹</span><br><span class="line">瞄具可调机械照门</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Browning_M1919.png" alt=""></p><p><br></p><ul><li><strong>D级潜艇</strong></li></ul><p>D级潜艇是美国海军一战中建造的潜艇级，子合约由格罗昆的电船公司签订，由昆西的佛尔河船厂建造。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">舰型Submarine</span><br><span class="line">排水量288 long ton（293 t） surfaced</span><br><span class="line">        337 long ton（342 t） submerged</span><br><span class="line">全长134英尺10英寸（41.10米）</span><br><span class="line">全宽13英尺11英寸（4.24米）</span><br><span class="line">吃水11英尺8英寸（3.56米）</span><br><span class="line">动力来源2 x NELSECO gasoline engines, 600 hp（450 kW） total[1]</span><br><span class="line">        2 x electric motors, 260 hp（190 kW） total</span><br><span class="line">        2 x 60-cell batteries</span><br><span class="line">        2 shafts</span><br><span class="line">速度12节（22千米每小时；14英里每小时） surfaced, 9.5节（17.6千米每小时；10.9英里每小时） submerged</span><br><span class="line">续航距离1,240海里（2,300千米；1,430英里） (surfaced)</span><br><span class="line">潜航深度200英尺（61米）</span><br><span class="line">乘员15 officers and men</span><br><span class="line">武器装备4 × 18 inch (457 mm) bow torpedo tubes, (4 torpedoes)[3]</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/USS_D1.png" alt=""></p><p><br></p><ul><li><strong>美国一战驱逐舰</strong></li></ul><p>维基百科： <a href="https://zh.wikipedia.org/wiki/Category:%E7%BE%8E%E5%9B%BD%E4%B8%80%E6%88%98%E9%A9%B1%E9%80%90%E8%88%B0" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Category:%E7%BE%8E%E5%9B%BD%E4%B8%80%E6%88%98%E9%A9%B1%E9%80%90%E8%88%B0</a></p><p>驱逐舰（英语：destroyer）是一种多用途的军舰。驱逐舰的用途是保护舰队，驱逐和消灭鱼雷艇和潜艇等以鱼雷为主要武器的舰只，为舰队提供保护。</p><p><br><br><br></p><hr><p><br></p><h2 id="化学武器"><a href="#化学武器" class="headerlink" title="化学武器"></a>化学武器</h2><ul><li><strong>三氯硝基甲烷</strong></li></ul><p>三氯硝基甲烷，俗称氯化苦（英语：Chloropicrin），是一种化学式为Cl3CNO2的有机氯化合物。这种高毒性的物质曾被用作代号为PS的化学武器；现在则主要用作熏蒸剂和杀线虫剂。</p><p><br></p><ul><li><strong>二氯甲基胂</strong></li></ul><p>二氯甲基胂，亦可简写为MD，是一种有机化合物，化学式为CH3AsCl2。它是一种无色、易挥发的液体，具有很强的毒性，是一种糜烂性毒剂，可作为化学武器使用。</p><p><br></p><ul><li><strong>氯丙酮</strong></li></ul><p>氯丙酮，结构式ClCH2COCH3。无色有极强刺激性臭味液体，对生物体有强刺激性，在日光下分解产生强催泪性气体。见光变为暗黄的琥珀色。</p><p><br></p><ul><li><strong>溴乙酸乙酯</strong></li></ul><p>溴乙酸乙酯是一种有机化合物，化学式为CH2BrCO2C2H5。它可由乙酸为原料合成。它是一种催泪剂，具有果味和刺激性气味。它是毒性很高的烷基化试剂。吸入、吞咽或与皮肤接触可能致命。</p><p><br></p><ul><li><strong>绿十字毒气</strong></li></ul><p>绿十字毒气（德语：Grünkreuz)是在第一次世界大战时使用的化学武器，属于窒息性毒剂，是由三氯硝基甲烷，光气或/和双光气的混合物。</p><p><br></p><ul><li><strong>芥子毒气</strong></li></ul><p>芥子毒气（英语：mustard gas），亦简称为芥子气，学名二氯二乙硫醚，是一种重要的糜烂性毒剂，因味道与芥末相似而得名。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="二战"><a href="#二战" class="headerlink" title="二战"></a>二战</h1><p>第二次世界大战（又简称二次大战、二战、WWII等；英语：World War II；法语：Seconde Guerre mondiale；德语：Zweiter Weltkrieg；俄语：Вторая мировая война；日语：第二次世界大戰）是一次自1939年至1945年所爆发的全球军事冲突，整场战争涉及到全球绝大多数的国家，包括所有的大国，并最终分成两个彼此对立的军事同盟─同盟国和轴心国。这次战争是人类史上最大的战争，动员了1亿多名军人参与这次军事冲突。主要的参战国纷纷宣布进入总体战状态，几乎将自身国家的全部经济、工业和科学技术用于战争之上，同时将民用和军用的资源合并以便规划。包括有犹太人大屠杀、南京大屠杀、战争中日军对中国军民进行细菌战、以及最终美国对日本首次使用原子弹等事件，使第二次世界大战也是有纪录以来最多大规模民众死亡的军事冲突，全部将近有5,000万至7,000万人因而死亡，这让第二次世界大战成了人类历史上死伤人数最多的战争[2]。第二次世界大战改变了世界局势，英国、法国等欧洲殖民帝国衰落，美国和苏联取代了欧洲殖民帝国的地位成了新的超级大国并在战后形成了两极格局直到1991年。</p><p><br></p><p>二战装备比一战更加多样化，如坦克、飞机、潜艇、航空母舰…</p><p><br><br><br></p><h2 id="德国-1"><a href="#德国-1" class="headerlink" title="德国"></a>德国</h2><p>此列表将列出所有纳粹德国在二次大战中使用过的武器（包括在占领地生产和缴获的武器，但从盟军缴获的武器除外）。</p><p><br></p><h3 id="坦克-2"><a href="#坦克-2" class="headerlink" title="坦克"></a>坦克</h3><p>德国第二次世界大战装甲战斗车辆:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">輕型坦克一号坦克 二号坦克 35(t)坦克 38(t)坦克</span><br><span class="line">中型坦克三号坦克 四号坦克 五号坦克豹式</span><br><span class="line">重型坦克六号坦克 虎I 虎II</span><br><span class="line">突击炮三号突击炮 四号突击炮 10.5厘米突击榴弹炮42 33B突击步兵炮 灰熊式 突击虎式</span><br><span class="line">驅逐戰車／坦克驱逐车一号反坦克自走炮 黄鼠狼I式／II式／III式 追猎者式 四号驅逐戰車 犀牛式 猎豹式 猎虎式 象式</span><br><span class="line">自走炮一号自走重步兵炮 二号自走重步兵炮 黄蜂式 野蜂式 蟋蟀式 装甲机动车 40型发射架 卡尔自走臼炮</span><br><span class="line">防空坦克38(t)防空坦克 一号防空坦克 四号防空坦克 家具车式 旋风式 东风式 球状闪电</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>LT-35坦克</strong></li></ul><p>LT-35或LT vz. 35是捷克斯洛伐克制造的轻型坦克，在二战中被纳粹德国采用，德军称为Panzerkampfwagen 35(t)（Pz.Kpfw. 35(t)）或Panzer 35(t)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">乘员4人</span><br><span class="line">长度4.9米</span><br><span class="line">宽度2.16米</span><br><span class="line">高度2.2米</span><br><span class="line">重量11吨</span><br><span class="line">发动机斯科达汽油T11</span><br><span class="line">功率120匹 ( 89千瓦)</span><br><span class="line">功率重量比10.9匹/吨</span><br><span class="line">悬挂系统leaf spring bogie</span><br><span class="line">速度34公里/小时</span><br><span class="line">最大行程193公里</span><br><span class="line"></span><br><span class="line">装甲25毫米</span><br><span class="line">主要武器1 x Skoda 37毫米M1934炮</span><br><span class="line">辅助武器2 x 7.92毫米MG34机枪</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LT-35.png" alt=""></p><p><br></p><ul><li><strong>LT-38坦克</strong></li></ul><p>LT-38是捷克斯洛伐克斯柯达厂制造的LTvz-38轻型坦克，德军编号Sd.Kfz140 Pz.38(t)，由著名的斯科达（Skoda）兵工厂所制造，于1938年末起服役于捷军，1939年3月德国并吞捷克之后，鉴于此车设计优良，遂以Pz.38(t)的名号继续使用，一直到大战后期都还能看到此车的变种继续为德国在各地奋战。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">乘员4人</span><br><span class="line">长度4.61 米</span><br><span class="line">宽度2.14 米</span><br><span class="line">高度2.40 米</span><br><span class="line">重量9.5吨</span><br><span class="line">发动机汽油Praga EPA 6-cylinder</span><br><span class="line">功率126匹 ( 95千瓦)</span><br><span class="line">功率重量比13匹/吨</span><br><span class="line">悬挂系统钢板弹簧</span><br><span class="line">速度42公里/小时（公路）</span><br><span class="line">15公里/小时（非公路）</span><br><span class="line">最大行程160至250公里</span><br><span class="line"></span><br><span class="line">装甲A-D型：8-30毫米</span><br><span class="line">E型：50毫米</span><br><span class="line">主要武器1 x 37毫米 L/47.8炮</span><br><span class="line">辅助武器2 x 7.92毫米ZB53机枪</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LT-38.png" alt=""></p><p><br></p><ul><li><strong>一号坦克</strong></li></ul><p>一号坦克（德语：Panzerkampfwagen I，意为一号装甲战斗车辆）是德国于1930年代研制的一款轻型坦克，缩写为“PzKpfw I”，其官方军械署赋予的编号为SdKfz 101（“第101号特殊用途车辆”）。一号坦克自1932年开始设计，并于1934年开始大量生产，它原先仅作为德军建构新一代的装甲战斗与技术时所使用的训练车辆，但后来将其投入了西班牙内战、二战的波兰、法国、苏联、北非战场以及中国在抗日战争中使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">重量5.4(A型)/5.8(B型)吨</span><br><span class="line">长度4.02(A型)/4.42(B型)米</span><br><span class="line">宽度2.06米</span><br><span class="line">高度1.72米</span><br><span class="line">操作人数2人；车长及驾驶员</span><br><span class="line">装甲7至13毫米</span><br><span class="line">主武器两门7.92毫米MG13机枪（A型和B型）</span><br><span class="line">发动机克虏伯M 305 4汽缸气冷汽油引擎（A型）</span><br><span class="line">梅巴赫NL 38 TR 6汽缸液冷汽油引擎（B型以后）</span><br><span class="line">60PS（59匹，44千瓦）</span><br><span class="line">100PS（98匹马力、73千瓦）</span><br><span class="line">功率/重量11.1PS／吨</span><br><span class="line">悬挂椭圆钢板弹簧</span><br><span class="line">作战范围140千米（A型）</span><br><span class="line">170千米（B型）</span><br><span class="line">速度37千米／小时（A型）</span><br><span class="line">40千米／小时（B型）</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PzKpfw-I.png" alt=""></p><p><br></p><ul><li><strong>二号坦克</strong></li></ul><p>二号坦克（德语：Panzer II）是第二次世界大战纳粹德国的坦克，这型坦克是用来填补其他设计中坦克的空隙, 它在第二次世界大战中的波兰战役与法国战役扮演了一个很重要的角色。到1942年底前绝大多数二号坦克已经离开第一线单位，生产线到1943年终止，然而车体继续被改良回其他种类装甲车辆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">乘员3人</span><br><span class="line">(车长/炮手、装填手、驾驶)</span><br><span class="line">长度4.8米</span><br><span class="line">宽度2.2米</span><br><span class="line">高度2.0米</span><br><span class="line">重量7.2吨</span><br><span class="line">发动机6-cyl汽油梅巴赫HL</span><br><span class="line">功率140匹 (105千瓦)</span><br><span class="line">功率重量比15匹/吨</span><br><span class="line">悬挂系统钢板弹簧</span><br><span class="line">速度40千米/小时</span><br><span class="line">最大行程200千米</span><br><span class="line"></span><br><span class="line">装甲5-14.5毫米</span><br><span class="line">主要武器20毫米 KwK 30 L/55 Ausf.A-f</span><br><span class="line">20毫米 KwK 38 L/55 Ausf.J-L</span><br><span class="line">辅助武器7.92毫米MG34机枪</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Panzer-II.png" alt=""></p><p><br></p><ul><li><strong>三号坦克</strong></li></ul><p>三号坦克（德语：Panzerkampfwagen III），是一款德军二战坦克。三号坦克拥有多种衍生及改进型，并由德军在二战中广泛使用，其改进和衍生型号一直服役到二战结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">重量19.5 吨</span><br><span class="line">长度5.38米 17ft 8in</span><br><span class="line">宽度2.91米 9ft 7in</span><br><span class="line">高度2.59米 8ft</span><br><span class="line">操作人数5名</span><br><span class="line"></span><br><span class="line">装甲30mm</span><br><span class="line">主武器37mm KwK L/46.5（A、B、C、D、E型、部分F、G型）</span><br><span class="line">50mm KwK L/42（部分F、G、J型，H型）</span><br><span class="line">50mm KwK L/60（部分J型、L型）</span><br><span class="line">75mm L/24（部分L型，M型，N型）</span><br><span class="line">副武器3挺MG34（A-H型）</span><br><span class="line">2挺MG34（G型以后）</span><br><span class="line">发动机迈巴赫HL108TR（A、B、C、D型）</span><br><span class="line">迈巴赫HL120TR V形12缸（E型以后）</span><br><span class="line">320匹（迈巴赫HL120TR）</span><br><span class="line">变速SRG 328-145型（E-G型）</span><br><span class="line">迈巴赫SSG77（H型）</span><br><span class="line">悬挂扭力杆悬挂[2]</span><br><span class="line">作战范围200公里[6]</span><br><span class="line">速度42公里/时[6]</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PzKpfw-III.png" alt=""></p><p><br></p><ul><li><strong>四号坦克</strong></li></ul><p>四号坦克（德语：Panzerkampfwagen IV，或称IV号坦克）为纳粹德国在第二次世界大战中生产的一款中型坦克。它原本设计目的是支援步兵，并且与专门执行反坦克任务的三号坦克协同作战。在三号坦克的整体性能逐渐不敷二次大战中期装甲战斗需要时，四号坦克因所使用的技术较为成熟而比三号坦克有更大的改良空间，因此在不断改进的过程中，四号坦克逐渐成为装甲师装备的主力车种。四号坦克较大的改良空间亦使其较为容易改装，既有改造为突击炮、自行反坦克炮，也有改造为弹药运送车、架桥坦克等，成为用途最广泛的坦克。从投产至二战结束，德国共制造了逾8,800辆四号坦克或其改造型。四号坦克参加了几乎所有战役，而且表现出相当的可靠性，没有像豹式坦克初期型号有大量的技术问题，就数量、服役时间来看，这型坦克才是德国装甲兵的主力，因此被德军装甲兵昵称为“军马”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">乘员5人（车长、炮手、装填手、驾驶员及无线电操作员）</span><br><span class="line">长度7.02米</span><br><span class="line">宽度2.88米</span><br><span class="line">高度2.68米</span><br><span class="line">重量B型：16吨；C型：18.14吨</span><br><span class="line">D型：20吨；F型：22.3吨</span><br><span class="line">G型：23.6吨；H型：25吨</span><br><span class="line">发动机梅巴赫A型：HL108TR 12缸汽油引擎</span><br><span class="line">B型：HL120TR 12缸汽油引擎</span><br><span class="line">C型：HL120TRM 12缸汽油引擎</span><br><span class="line">功率A型：250hp；B型：300hp</span><br><span class="line">功率重量比12匹/吨</span><br><span class="line">悬挂系统弹簧悬挂（C型开始使用板簧悬挂系统）</span><br><span class="line">速度A型：31公里/小时〔道路〕</span><br><span class="line">B型：39公里/小时〔道路〕</span><br><span class="line">42公里/小时（道路）</span><br><span class="line">16公里/小时（越野）</span><br><span class="line">最大行程200公里</span><br><span class="line">J型：320公里</span><br><span class="line"></span><br><span class="line">装甲炮塔正面50毫米/10°</span><br><span class="line">炮塔两侧30毫米/26°</span><br><span class="line">炮塔后方30毫米/10°</span><br><span class="line">炮塔顶10毫米</span><br><span class="line">车体正面80毫米/11°</span><br><span class="line">车体侧面30毫米（后期型号加5毫米裙甲）</span><br><span class="line">车体后面20毫米</span><br><span class="line">主要武器坦克炮-KwK40 75毫米43倍径炮（KwK-40 75mm）</span><br><span class="line">辅助武器2×7.92毫米MG34</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/PzKpfw-IV.png" alt=""></p><p><br></p><ul><li><strong>五号坦克 </strong></li></ul><p>五号坦克 黑豹式（德语：Panzerkampfwagen V Panther）是第二次世界大战中纳粹德国所制造的中型坦克。制式编号为Sd.Kfz.171。其后，由于“五号坦克（V号坦克）”这个名称被废除，所以在后来以“黑豹式坦克（Pz.Kpfw. Panther）”作为制式名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">乘员5人</span><br><span class="line">车长、炮手、驾驶、通讯员、装填手[3]</span><br><span class="line">长度6.87米（车身）</span><br><span class="line">8.66米（全长）</span><br><span class="line">宽度3.27米</span><br><span class="line">高度2.995米</span><br><span class="line">重量44.8吨（战斗重量）</span><br><span class="line">发动机梅巴赫230P30</span><br><span class="line">水冷V型12汽缸汽油引擎</span><br><span class="line">功率700匹</span><br><span class="line">功率重量比15.625匹／吨</span><br><span class="line">悬挂系统双扭力杆</span><br><span class="line">速度55公里／小时（平地）</span><br><span class="line">30公里／小时（越野）</span><br><span class="line">最大行程250公里（平地）、100公里（越野）</span><br><span class="line"></span><br><span class="line">装甲前方80毫米，倾斜装甲139.48毫米</span><br><span class="line">侧面及后方40毫米</span><br><span class="line">主要武器7.5厘米Kwk42L/70炮（炮弹79发后期81发）</span><br><span class="line">辅助武器7.92毫米MG34机枪 ×2</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Panther.png" alt=""></p><p><br></p><ul><li><strong>六号坦克</strong></li></ul><p>六号坦克（德语：Panzerkampfwagen VI）是纳粹德国在第二次世界大战期间所使用的重坦克。<br>被称为六号坦克的坦克共有2款，分别是I型与II型，即为“虎I”与“虎II”。在当时被评为其中一系列世界上最强的坦克。一般称其为“虎式坦克”，或者以英文“Tiger Tank”来称呼。</p><p><br></p><ul><li><strong>虎I坦克</strong></li></ul><p>虎I坦克（德语：Panzerkampfwagen VI Ausf. E (Sd Kfz 181) Tiger），是第二次世界大战中德意志国防军及武装党卫队所使用的坦克，正式名称为六号坦克（VI号坦克）。一般称为虎式坦克，简称“虎式”或“Tiger”。从1942年下半年服役起至1945年纳粹德国投降为止，一直是活跃于第一线的重型坦克。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">乘员5人</span><br><span class="line">车长、炮手、装填手、驾驶员、通讯员</span><br><span class="line">长度8.45米（全长）</span><br><span class="line">6.316米（车身）</span><br><span class="line">宽度3.705米</span><br><span class="line">高度3米</span><br><span class="line">重量57吨（战斗重量）</span><br><span class="line">发动机梅巴赫HL230 P45</span><br><span class="line">水冷4冲程V型12汽缸汽油引擎[2]</span><br><span class="line">功率700匹</span><br><span class="line">功率重量比12.3匹／吨</span><br><span class="line">悬挂系统扭力杆</span><br><span class="line">速度40公里／小时（平地）</span><br><span class="line">20-25公里／小时（越野）</span><br><span class="line">最大行程100公里（平地）、60公里（越野）</span><br><span class="line"></span><br><span class="line">装甲前方100毫米</span><br><span class="line">侧面及后方80毫米</span><br><span class="line">车顶25毫米</span><br><span class="line">主要武器8.8厘米Kwk 36 L/56炮（炮弹92发）</span><br><span class="line">辅助武器7.92毫米MG34机枪 ×2</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Tiger-I.png" alt=""></p><p><br></p><ul><li><strong>虎II坦克</strong></li></ul><p>六号坦克B型 （德语：Panzerkampfwagen VI Ausf.B Tiger II，通称“虎王坦克”或“虎II坦克”），是一款纳粹德国在二战期间研发的重型坦克。<br>虎王坦克是虎I坦克的继任者，它继承了虎I坦克的重装甲风格，还有着豹式坦克那样的倾斜装甲。虎王坦克重达70公吨，前装甲有100到180毫米厚，装配一门88毫米KwK 43 L/71式坦克炮。没有炮塔的猎虎式坦克歼击车与虎王坦克共用同一种底盘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">重量68.5公吨（装备保时捷炮塔）</span><br><span class="line">69.8公吨（装备亨舍尔炮塔）</span><br><span class="line">长度7.38米（车体）</span><br><span class="line">10.286米（33英尺9英寸）（炮向前）</span><br><span class="line">宽度3.755米</span><br><span class="line">高度3.09米</span><br><span class="line">操作人数五人（车长、炮手、装填手、通信兵、驾驶员）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">装甲25～185毫米（1～7英寸）</span><br><span class="line">主武器1门KwK43 88毫米坦克炮</span><br><span class="line">保时捷型炮塔可携带80发炮弹</span><br><span class="line">亨舍尔型炮塔可携带86发炮弹</span><br><span class="line">副武器2挺7.92毫米MG 34 携带5850发弹药</span><br><span class="line">发动机V-12 迈巴赫HL 230 P30汽油机 690匹</span><br><span class="line">功率/重量8.97匹/公吨</span><br><span class="line">变速迈巴赫OLVAR EG 40 12 16 B（8个前进档、4个倒车档）</span><br><span class="line">悬挂扭力杆悬挂</span><br><span class="line">底盘高度495至510毫米</span><br><span class="line">燃料容量860升（190英制加仑）</span><br><span class="line">作战范围于公路上行驶：170千米</span><br><span class="line">越野时：120千米</span><br><span class="line">速度公路上最大速度：41.5千米/时</span><br><span class="line">能允许持续行进：38千米/时</span><br><span class="line">越野时：15-20千米/时</span><br></pre></td></tr></table></figure><p>!()[/images/Weapons/Tiger-II.png]</p><p><br></p><ul><li><strong>七号狮式坦克</strong></li></ul><p>七号狮式超重型坦克（Panzerkampfwagen VII Löwe）为二战纳粹德国研发的一款超重型坦克。<br>制造数量    从未被制造出来。</p><p><br></p><ul><li><strong>八号坦克鼠式</strong></li></ul><p>八号坦克鼠式（Panzerkampfwagen VIII Maus），是德国在第二次世界大战设计并制造的超重型坦克。<br>产量    2（原型车，其中只有一台完工）。</p><p><br></p><ul><li><strong>九/十号坦克</strong></li></ul><p>九号坦克（Panzerkampfwagen IX）及十号坦克（Panzerkampfwagen X），为纳粹德国在第二次世界大战晚期故意散布欺敌的虚构坦克开发计划。</p><p><br></p><ul><li><strong>陆地巡航者P. 1000老鼠</strong></li></ul><p>P. 1000 巨鼠重型巡航坦克（Landkreuzer P. 1000 Ratte）是纳粹德国计划开发的一种重量达1000吨的超重型坦克，由德国的克虏伯公司研制，但计划在1943年被放弃，没有一辆P-1000被生产出来。此超重型坦克非常巨大，高度有11米，炮台也有两个平常人的高度。<br>制造数量    0（完全从未实际投产）</p><p><br></p><ul><li><strong>陆地巡航者P.1500怪物</strong></li></ul><p>P. 1500 怪物陆行舰（Landkreuzer P. 1500 Monster）外型和古斯塔夫超重型铁道炮相似，是纳粹德国计划开发的一种重量达1,500吨的超重型坦克。<br>制造数量    0（完全从未实际投产）</p><p><br><br><br></p><h3 id="潜艇"><a href="#潜艇" class="headerlink" title="潜艇"></a>潜艇</h3><p>submarine</p><p><br></p><ul><li><strong>U-47潜艇</strong></li></ul><p>U-47号潜艇是一艘于第二次世界大战时于纳粹德国海军服役的VIIB型U-潜艇。它在1937年2月25日开始建造并于1938年10月29日在基尔的克虏伯造船厂下水。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">舰型VIIB型</span><br><span class="line">排水量761吨</span><br><span class="line">865吨（潜入海底）</span><br><span class="line">全长66.6米（219英尺）</span><br><span class="line">全宽6.2米（20英尺）</span><br><span class="line">深度220米（720英尺）</span><br><span class="line">动力来源2 × 1400 马力的柴油机</span><br><span class="line">2 × 375 PS （280 kW） 的电动马达</span><br><span class="line">速度</span><br><span class="line">最大17.7节（海面）</span><br><span class="line">最大7.6节（潜入海底）</span><br><span class="line">续航距离6,500海里（12,000千米）</span><br><span class="line">乘员44-48</span><br><span class="line">船员47</span><br><span class="line">武器装备</span><br><span class="line">鱼雷发射管：前4后1，共5个533mm发射管</span><br><span class="line">8.8厘米 SK C/35舰炮（虽同为88毫米口径但是与8.8 cm Flak 18/36/37高射炮不同），2厘米 MG C/30 机炮</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/U-47.png" alt=""></p><p><br></p><ul><li><strong>U-2365</strong></li></ul><p>U-2365号潜艇为纳粹德国海军XXIII级潜艇（德语：Klasse XXIII、或称Typ XXIII）的一艘，属于近海小型攻击潜艇。<br>U-2365号潜艇于1945年3月2日服役。由于服役时已临近战争尾声，该艇并未取得任何战果，最终于1945年5月8日中被凿沉在卡特加特海峡。</p><p><br><br><br></p><h3 id="火炮"><a href="#火炮" class="headerlink" title="火炮"></a>火炮</h3><p>第二次世界大战期间德国陆军所用火炮:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">坦克主炮</span><br><span class="line">2厘米KwK 30炮 3.7厘米KwK 36炮 3.7厘米KwK 38炮(t) 5厘米KwK 38炮 5厘米KwK 39炮 7.5厘米KwK 37炮 7.5厘米KwK 40炮 7.5厘米KwK 42炮 8.8厘米 KwK 36炮 8.8厘米 KwK 43炮</span><br><span class="line"></span><br><span class="line">反坦克炮</span><br><span class="line">sPzB 41反坦克炮 PaK 36反坦克炮 4.2厘米Pak 41反坦克炮 Pak 38反坦克炮 Pak 97/38反坦克炮 Pak 39反坦克炮 Pak 40反坦克炮 7.5厘米Pak 41反坦克炮 7.5厘米Pak 42反坦克炮 7.62厘米PaK 36反坦克炮(r) 8公分PAW 600反坦克炮 Pak 43反坦克炮 PaK 44反坦克炮</span><br><span class="line"></span><br><span class="line">步兵支援火炮</span><br><span class="line">le.IG 1步兵支援火炮 IG 37步兵支援火炮 IG 42步兵支援火炮 sIG 33步兵支援火炮 GebH 34步兵支援火炮 GebG 36步兵支援火炮 GebH 40步兵支援火炮</span><br><span class="line"></span><br><span class="line">无后座力炮</span><br><span class="line">7.5厘米LG 40无后座力炮 105毫米LG 40无后座力炮 LG 42无后座力炮</span><br><span class="line"></span><br><span class="line">重型迫击炮</span><br><span class="line">10公分35年式喷烟者 10公分40年式喷烟者 leLdgW迫击炮 GrW 69迫击炮 schwerer Ladungswerfer迫击炮</span><br><span class="line"></span><br><span class="line">火箭炮</span><br><span class="line">7.3厘米Föhn-Gerät 7.3厘米41年式Propagandawerfer 8厘米Raketen-Vielfachwerfer 15厘米Do-Gerät 15公分41年式喷烟者 21公分42年式喷烟者 28/32公分41年式喷烟者 30公分42年式喷烟者 30 cm Raketenwerfer 56 Wurfrahmen 40多管火箭炮</span><br><span class="line"></span><br><span class="line">中重型野战炮</span><br><span class="line">FK 16 nA野战炮 FK 18野战炮 FK 38野战炮 FK 7M85野战炮 10 cm K 17野战炮 sK 18野战炮 leFH 16榴弹炮 leFH 18榴弹炮 leFH 18M榴弹炮 leFH 18/40榴弹炮 sK 18/40野战炮 sFH 13榴弹炮 SFH 18榴弹炮 K 16野战炮 K 18重炮 K 39重炮 SK C/28重炮 K 18重榴弹炮 Mrs 16重榴弹炮 Mrs 18重榴弹炮</span><br><span class="line"></span><br><span class="line">超重炮及攻城武器</span><br><span class="line">K 38重炮 K 39重炮 H 39攻城榴弹炮 K(t)超重型攻城炮 Kanone L/46 K 3重型攻城炮 H L/12重型攻城榴弹炮 Haubitze M1攻城榴弹炮 Gamma Mörser攻城榴弹炮 卡尔臼炮 古斯塔夫超重型铁道炮</span><br><span class="line"></span><br><span class="line">列车炮</span><br><span class="line">15厘米K列车炮 17厘米K列车炮 20.3厘米K列车炮 21厘米K 12列车炮 24厘米Th K列车炮 24厘米ThBr K列车炮 28厘米kzBr K列车炮 28厘米lgBr K列车炮 28厘米sBr K列车炮 28厘米Br NK列车炮 K5列车炮 38厘米Siegfried K列车炮 古斯塔夫超重型铁道炮</span><br><span class="line"></span><br><span class="line">防空炮</span><br><span class="line">2厘米30/38年式高射炮 2厘米Gebirgsflak 38高射炮 3.7厘米18/36/37/43年式高射炮 5厘米41年式高射炮 8.8厘米18/36/37年式高射炮 8.8厘米41年式高射炮 10.5厘米38年式高射炮 12.8厘米40年式高射炮</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>Mrs 18重榴弹炮</strong></li></ul><p>Mrs 18重榴弹炮（21公分Mrs 18式）是纳粹德国于第二次世界大战中所使用的一种重型榴弹炮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重量16,700 公斤（36,817 磅）</span><br><span class="line">枪管长度6.51米L/30（30倍径）</span><br><span class="line">炮弹分离装填式弹药</span><br><span class="line">炮弹重量113公斤（高爆弹）</span><br><span class="line">口径211 毫米</span><br><span class="line">后膛水平滑契式炮栓</span><br><span class="line">后坐力液压机械复合式</span><br><span class="line">载具box trail</span><br><span class="line">射击仰角-6° to +70°</span><br><span class="line">回旋角度16°（于轮上）</span><br><span class="line">360°（于平台上）</span><br><span class="line">枪口初速550 米/秒</span><br><span class="line">有效射程14,500 米</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/Mrs-18.png" alt=""></p><p><br></p><ul><li><strong>3.7厘米KwK 36炮</strong></li></ul><p>3.7 cm KwK 36 L/45 (3.7 公分战车炮36 45倍径)是第二次世界大战时由德国所生产的3.7cm火炮，主要用做三号战车的主炮，亦见于其他德军装甲车辆上。</p><p><br></p><ul><li><strong>5厘米KwK 38炮</strong></li></ul><p>5 cm KwK 38 L/42(5公分战车炮 42倍径)是二战时德军所用的50毫米火炮，仅见于三号战车上使用。</p><p><br></p><ul><li><strong>5厘米KwK 39炮</strong></li></ul><p>5 cm KwK 39 L/60 (5公分战车炮 60倍径)是二战时德军所用的50毫米火炮，主要作为1941年以后，三号战车后续型号的主炮。</p><p><br></p><ul><li><strong>7.5厘米KwK 37炮</strong></li></ul><p>7.5 cm KwK 37 L/24(7.5公分战车炮24倍径)是一种二战时，德军所使用的75mm，类似榴弹炮的短管战车炮。主要用于四号战车的早期型号和三号突击炮的早期型号。</p><p><br></p><ul><li><strong>7.5厘米KwK 40炮</strong></li></ul><p>7.5 cm KwK 40是在二战时，德军所使用的战车炮。主要搭载于于四号战车（F2型以后）、三号突击炮以及四号突击炮上。</p><p><br></p><ul><li><strong>7.5厘米LG 40无后座力炮</strong></li></ul><p>7.5厘米LG 40无后座力炮是由德国军队在第二次世界大战期间使用的无后座力炮。</p><p><br></p><ul><li><strong>7.5厘米Pak 41反坦克炮</strong></li></ul><p>7.5 cm Pak 41是第二次世界大战后期进入服役，由德国制造的反坦克炮。</p><p><br></p><ul><li><strong>7.5厘米 Pak 39炮</strong></li></ul><p>7.5厘米Pak39(L/48)（德语：7.5 cm Panzerjägerkanone 39），是一款德国于第二次世界大战期间所使用的反坦克火炮。该火炮于1942年1月开始装备于四号驱逐战车和追猎者式驱逐战车等驱逐战车。</p><p><br></p><ul><li><strong>KwK36 88毫米战车炮</strong></li></ul><p>88 mm KwK 36 L/56 (德语：8.8 cm KampfwagenKanone 36 L/56) 是在第二次世界大战中德意志国防军所使用的88毫米坦克炮。由克鲁伯所研制，是虎I坦克的主武器。</p><p><br></p><ul><li><strong>KwK43 88毫米战车炮</strong></li></ul><p>8.8 cm KwK 43 L/71 (德语：KampfWagenKanone—坦克炮) 是在第二次世界大战中，克鲁伯公司所设计，德意志国防军所使用的一门坦克炮。它是虎II坦克的主武器，并且是在第二次世界大战中作为放在拥有可转动炮塔的战车上最具威力的一门炮。</p><p><br><br><br></p><h3 id="装甲战斗车"><a href="#装甲战斗车" class="headerlink" title="装甲战斗车"></a>装甲战斗车</h3><p><br><br><br></p><h3 id="飞机-2"><a href="#飞机-2" class="headerlink" title="飞机"></a>飞机</h3><p><br><br><br></p><h3 id="船舰"><a href="#船舰" class="headerlink" title="船舰"></a>船舰</h3><p><br><br><br></p><h3 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h3><ul><li><strong>39型卵状手榴弹</strong></li></ul><p>39型卵状手榴弹（德语：Eihandgranate 39）是第二次世界大战期间德军所产的手榴弹。</p><p><br></p><ul><li><strong>柄式手榴弹</strong></li></ul><p>柄式手榴弹（德语：Stielhandgranate）为德国陆军自第一次世界大战中期至第二次世界大战末期所使用之手榴弹。</p><p><br></p><ul><li><strong>铁拳</strong></li></ul><p>铁拳（德语：Panzerfaust）又称作装甲拳或反坦克榴弹发射器，是第二次世界大战时由德国研发与制造的火药推进无后座力反装甲武器。</p><p><img src="/images/Weapons/Panzerfaust.png" alt=""></p><p><br></p><ul><li><strong>防空铁拳</strong></li></ul><p>防空铁拳(德文:Fliegerfaust)是第二次世界大战末期德国士兵使用的手提防空火箭弹，由于在二战末期，德军失去制空权(尤其在西线)，而研制出来的步兵手提防空火箭弹。</p><p><img src="/images/Weapons/Fliegerfaust.png" alt=""></p><p><br></p><ul><li><strong>装甲投掷雷</strong></li></ul><p>装甲投掷雷（德语：Panzerwurfmine，也缩写为PWM）是一种由纳粹德国开发并在二战中生产使用的反坦克碰炸手榴弹。</p><p><br></p><ul><li><strong>坦克杀手</strong></li></ul><p>Panzerschreck（德语）是二战中，纳粹德国的Raketenpanzerbüchse（“反战车火箭步枪”，缩写为RPzB）的昵称，它是一种口径为88毫米，可重复使用的反战车火箭发射器。</p><p><img src="/images/Weapons/Panzerschreck.png" alt=""></p><p><br></p><ul><li><strong>LeGrW 36型50毫米迫击炮</strong></li></ul><p>LeGrW 36型50毫米迫击炮（德语：5cm leichter Granatenwerfer 36 ）是纳粹德国在第二次世界大战中使用的一种轻型迫击炮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量14 kg (31 lb)</span><br><span class="line">枪管长度465 mm (18 in)</span><br><span class="line">操作人数2</span><br><span class="line">炮弹0.9 kg (2 lb) TNT 装药</span><br><span class="line">口径50 mm (1.97 in)</span><br><span class="line">射击仰角42°到 90°</span><br><span class="line">回旋角度33°到 45°</span><br><span class="line">射速15-25 发/每分钟</span><br><span class="line">枪口初速75 m/s (246 ft/s)</span><br><span class="line">有效射程50 m (54.7 yd) 最小</span><br><span class="line">510 m (557.7 yd) 最大</span><br><span class="line">最大射程520 m (568.7 yd)</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/LeGrW-36.png" alt=""></p><p><br></p><ul><li><strong>GrW 34型81毫米迫击炮</strong></li></ul><p>GrW 34型81毫米迫击炮（德语：8 cm Granatwerfer 34）是纳粹德国陆军在第二次世界大战使用的一种迫击炮，这种迫击炮的射速和射程都颇为优秀，在训练有素的士兵手中可以发挥出更大的威力。在单兵携带时，这种迫击炮可以分解为炮筒、底座和支架三个部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重量62 kg (136.6 lbs) 钢炮筒</span><br><span class="line">57 kg (125.6 lbs)合金炮筒</span><br><span class="line">枪管长度1,143 mm (45 in)</span><br><span class="line">操作人数8</span><br><span class="line">炮弹3.5 kg (7.71 lbs)</span><br><span class="line">口径81.4 mm (3.20 in)</span><br><span class="line">射击仰角45°到90°</span><br><span class="line">回旋角度10°到23°</span><br><span class="line">射速15-25 发/每分钟</span><br><span class="line">枪口初速174 m/s (571 ft/s)</span><br><span class="line">最大射程2,400 m (2,624 yds)</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/GrW-34.png" alt=""></p><p><br></p><ul><li><strong>GrW 42型81毫米迫击炮</strong></li></ul><p>GrW 42型81毫米迫击炮（德语：kurzer 8 cm Granatwerfer 42 ）是纳粹德国在第二次世界大战中使用的一种前装式滑膛迫击炮。是GrW 34型81毫米迫击炮使用短炮筒后的轻量化版本，最初计划是供伞兵使用的。然而由于50毫米口径的LeGrW 36型50毫米迫击炮射程太近，此款迫击炮也常被用来替换前者。GrW 42发射的炮弹重量是前者的3.5倍，射程则为两倍，迫击炮的重量则不到前者两倍，同时还可分解为三个部分携带。</p><p><br></p><ul><li><p><strong>鲁格手枪</strong></p></li><li><p><strong>M1879帝国转轮手枪</strong></p></li><li><p><strong>毛瑟C96手枪</strong></p></li></ul><p><br></p><ul><li><strong>瓦尔特P38手枪</strong></li></ul><p>瓦尔特P38（德语：Walther P38）是由德国瓦尔特武器公司在1930年代为德意志国防军研制的一种9毫米口径半自动手枪，此枪在二战期间被广泛采用。尽管该枪的出现原先是为了取代成本昂贵的鲁格P08手枪，然而直到二战结束时也没有完全取代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量800克</span><br><span class="line">长度216毫米</span><br><span class="line">枪管长度125毫米</span><br><span class="line">子弹9毫米鲁格弹</span><br><span class="line">枪机短行程后座</span><br><span class="line">单动/双动</span><br><span class="line">枪口初速365米/秒</span><br><span class="line">有效射程50米</span><br><span class="line">供弹方式8发可拆式单排弹匣</span><br><span class="line">瞄具凹形照门，刀片形准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/P38.png" alt=""></p><p><br></p><ul><li><strong>ViS wz. 35手枪</strong></li></ul><p>Pistolet ViS wz. 35是由波兰枪工Piotr Wilniewczyc研制的一款半自动手枪，于1935年成为波兰军队的制式手枪。ViS wz. 35一直都被认为是有史以来最好的手枪之一，更是一些枪械收藏家的珍藏之一。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量1.123 kg（上弹）</span><br><span class="line">0.950 kg（空枪）</span><br><span class="line">长度205 mm</span><br><span class="line">枪管长度115 mm</span><br><span class="line">子弹9毫米鲁格弹</span><br><span class="line">口径9×19毫米</span><br><span class="line">枪机枪管短行程后座作用、单动</span><br><span class="line">枪口初速345米/秒</span><br><span class="line">供弹方式8发弹匣</span><br><span class="line">瞄具金属缺口式照门及准星</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/ViSwz-35.png" alt=""></p><p><br></p><ul><li><p><strong>MP18冲锋枪</strong></p></li><li><p><strong>MP28冲锋枪</strong></p></li></ul><p><br></p><ul><li><strong>MP3008冲锋枪</strong></li></ul><p>MP 3008是纳粹德国在1945年二战末期制造的冲锋枪。主要目的是提供给在战争末期扩编的国民突击队使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重量3.18公斤</span><br><span class="line">长度760毫米</span><br><span class="line">枪管长度196毫米</span><br><span class="line">子弹9×19毫米</span><br><span class="line">口径9毫米</span><br><span class="line">枪机反冲作用，开放式枪机</span><br><span class="line">发射模式全自动</span><br><span class="line">射速450发/分锺</span><br><span class="line">枪口初速365米/秒</span><br><span class="line">供弹方式32发MP40可拆卸式弹匣</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MP3008.png" alt=""></p><p><br></p><ul><li><strong>MP34冲锋枪</strong></li></ul><p>MP34（德语：Maschinenpistole 34，意为：34型冲锋枪）是一枝由奥地利斯泰尔兵工厂生产的冲锋枪，在1930年代至二战期间被奥地利警察以及随后的德国国防军和武装党卫队所采用。</p><p><img src="/images/Weapons/MP34.png" alt=""></p><p><br></p><ul><li><strong>MP35冲锋枪</strong></li></ul><p>MP35（德语：Maschinenpistole 35，意为：35型冲锋枪）是一枝由纳粹德国生产的冲锋枪，在二战以前和期间被德国国防军、武装党卫队和德国警察所采用。</p><p><img src="/images/Weapons/MP35.png" alt=""></p><p><br></p><ul><li><strong>MP40冲锋枪</strong></li></ul><p>MP40冲锋枪（Maschinenpistole 40），常被称为“施迈瑟冲锋枪”，是一种为方便大量生产而设计，与传统枪械制造观念不同的冲锋枪，亦是第二次世界大战期间德国军队使用最广泛、性能最优良的冲锋枪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">重量4公斤（8.82磅）</span><br><span class="line">长度收起枪托：630毫米</span><br><span class="line">展开枪托：833毫米</span><br><span class="line">枪管长度251毫米</span><br><span class="line">子弹9×19毫米鲁格弹</span><br><span class="line">枪机提前击发底火式反冲作用及开放式枪机</span><br><span class="line">发射模式全自动</span><br><span class="line">射速500发／分钟</span><br><span class="line">枪口初速约380米／秒</span><br><span class="line">有效射程约100米</span><br><span class="line">供弹方式32发弹匣</span><br><span class="line">瞄具机械瞄具</span><br></pre></td></tr></table></figure><p><img src="/images/Weapons/MP40.png" alt=""></p><p><br></p><ul><li><strong>MP41冲锋枪</strong></li></ul><p>MP41（德语：Maschinenpistole 41，意为：41型冲锋枪）是一款由纳粹德国枪械设计师胡戈·施迈瑟所研发、黑内尔公司生产的冲锋枪，外观而言是MP40冲锋枪改用MP28冲锋枪的木制枪托的修改型，发射9×19毫米鲁格手枪子弹。<br>MP41是专门为出口和警察部门而生产。</p><p><img src="/images/Weapons/MP41.png" alt=""></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%B8%80%E6%88%98%E6%AD%A6%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;各国一战武器，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98%E5%86%9B%E4%BA%8B%E8%A3%85%E5%A4%87&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第一次世界大战武器装备，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E5%90%84%E5%9B%BD%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;各国二战武器，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Category:%E4%BA%8C%E6%88%98%E6%AD%A6%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第二次世界大战武器装备，维基百科&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;最近玩&lt;strong&gt;battlefield I&lt;/strong&gt;(一战)有感，一时兴起，顺带在&lt;strong&gt;battlefield V&lt;/strong&gt;(二战)发布前夕做一个一战二战各国使用的武器装备归纳总结。&lt;/p&gt;
&lt;p&gt;玩了战地1，才体会到战争的残酷性，使我对战争的感觉从光辉转变为厌恶。没有什么英雄在我心中，你不知道自己何时会死去，或即将死去。&lt;br&gt;战场上每个人都一样，都是一条鲜活的生命，有家人有朋友。从战争游戏来反思战争，这点DICE studio做的不错。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;衷心祝愿世界和平！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weapon" scheme="https://zhang21.github.io/categories/Weapon/"/>
    
    
      <category term="武器" scheme="https://zhang21.github.io/tags/%E6%AD%A6%E5%99%A8/"/>
    
      <category term="战争" scheme="https://zhang21.github.io/tags/%E6%88%98%E4%BA%89/"/>
    
  </entry>
  
  <entry>
    <title>国际音标</title>
    <link href="https://zhang21.github.io/2018/11/13/%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87/"/>
    <id>https://zhang21.github.io/2018/11/13/国际音标/</id>
    <published>2018-11-13T03:25:44.000Z</published>
    <updated>2018-11-13T10:02:31.590Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99" target="_blank" rel="noopener">国际音标维基</a></li><li>巴士英语网: <a href="https://en-yinbiao.xiao84.com/yinbiaofayin/" target="_blank" rel="noopener">https://en-yinbiao.xiao84.com/yinbiaofayin/</a></li><li>知乎<code>@姜枣茶茶母</code>的回答: <a href="https://www.zhihu.com/question/19913374" target="_blank" rel="noopener">https://www.zhihu.com/question/19913374</a></li></ul><p><br><br><br></p><a id="more"></a><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>英语发音有多个国家的区别，我们重点了解两个：</p><ul><li>公认发音，英国标准（Received pronunciation, RP）</li><li>通用美式英语（General American, GA）</li></ul><p><br></p><p>国际音标(International Phonetic Alphabet，缩写：IPA)旁边的分隔号和括号并非音标的一部分，它们是语言专家用以分辨两个主要标音方法：音位标音和语音学标音。</p><p>48个国际音标通常是国内学生学习英语、学好英语发音必须掌握的发音基础，48个国际音标表也被称作48个音标表、48个英语音标表、48个英语国际英标表，48个国际英语音标表，这些称呼通常都是指48个英语国际英标表。<br>48个国际音标中有20个元音、28个辅音。</p><p><br></p><p><strong>元音</strong>，又称母音。</p><p>元音是在发音过程中由气流通过口腔而不受阻碍发出的音。<br>按前后分类为高 、中、低元音。<br>按音节分，可分为单元音和双元音。</p><p><br></p><p>气流在口腔或咽头受到阻碍而形成的音叫做<strong>辅音</strong>，辅音又叫子音。</p><p>共分为清辅音、浊辅音、鼻音、舌侧音 、半元音五种不同类型。<br>其中鼻音、舌侧音 、半元音为浊辅音。</p><p><br></p><p>英语元音和辅音在英语发音中扮演着重要的角色，英语元音和辅音组合起来就成为英语音标，共48个音位，是英语发音的基础。</p><p><br></p><p><img src="/images/English/IPA.jpg" alt="国际音标"></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="发音与技巧"><a href="#发音与技巧" class="headerlink" title="发音与技巧"></a>发音与技巧</h1><p>巴士英语网有每个音标的发音: <a href="https://en-yinbiao.xiao84.com/yinbiaofayin/" target="_blank" rel="noopener">https://en-yinbiao.xiao84.com/yinbiaofayin/</a></p><p><br></p><p>国际音标：</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>元音</td><td>单元音 <br><br> 双元音</td><td>前元音 <br> 中元音 <br> 后元音 <br> 开合双元音 <br> 集中双元音</td><td><code>/iː/</code>, <code>/ɪ/</code>, <code>/e/</code>, <code>/æ/</code> <br> <code>/ɜː/</code>, <code>/ə/</code>, <code>/ʌ/</code> <br> <code>/uː/</code>, <code>/ʊ/</code>, <code>/ɔː/</code>, <code>/ɒ/</code>, <code>/ɑː/</code> <br> <code>/eɪ/</code>, <code>/aɪ/</code>, <code>/ɔɪ/</code>, <code>/aʊ/</code>, <code>/əʊ/</code> <br> <code>/ɪə/</code>, <code>/eə/</code>, <code>/ʊə/</code></td></tr><tr><td>辅音</td><td>爆破音 <br><br> 摩擦音 <br><br> 破擦音 <br><br> 鼻音 <br> 舌则音 <br> 半元音</td><td>清辅音 <br> 浊辅音 <br> 清辅音 <br> 浊辅音 <br> 清辅音 <br> 浊辅音 <br> 浊辅音 <br> 浊辅音 <br> 浊辅音 <br></td><td><code>/p/</code>, <code>/t/</code>, <code>/k/</code> <br> <code>/b/</code>, <code>/d/</code>, <code>/ɡ/</code> <br> <code>/f/</code>, <code>/s/</code>, <code>/ʃ/</code>, <code>/θ/</code>, <code>/h/</code> <br> <code>/v/</code>, <code>/z/</code>, <code>/ʒ/</code>, <code>/ð/</code>, <code>/r/</code> <br> <code>/tʃ/</code>, <code>/tr/</code>, <code>/ts/</code> <br> <code>/dʒ/</code>, <code>/dr/</code>, <code>/dz/</code> <br> <code>/m/</code>, <code>/n/</code>, <code>/ŋ/</code> <br> <code>/l/</code> <br> <code>/j/</code>, <code>/w/</code></td></tr></tbody></table><p><br></p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>元音20个</td><td>长元音 <br> 短元音 <br> 双元音</td><td><code>/iː/</code>, <code>/ɑː/</code>, <code>/ɔː/</code>, <code>/uː/</code>, <code>/ɜː/</code> <br> <code>/ɪ/</code>, <code>/ʌ/</code>, <code>/ɒ/</code>, <code>/ʊ/</code>, <code>/ə/</code>, <code>/æ/</code>, <code>/e/</code> <br> <code>/eɪ/</code>, <code>/aɪ/</code>, <code>/ɔɪ/</code>, <code>/ɪə/</code>, <code>/eə/</code>, <code>/ʊə/</code>, <code>/aʊ/</code>, <code>/əʊ/</code></td></tr><tr><td>辅音28个</td><td>轻辅音 <br> 浊辅音 <br> 轻辅音 <br> 浊辅音 <br> 鼻音 <br> 半元音 <br> 边音</td><td><code>/p/</code>, <code>/t/</code>, <code>/k/</code>, <code>/f/</code>, <code>/θ/</code>, <code>/s/</code> <br> <code>/b/</code>, <code>/d/</code>, <code>/ɡ/</code>, <code>/v/</code>, <code>/ð/</code>, <code>/z/</code> <br> <code>/ʃ/</code>, <code>/h/</code>, <code>/ts/</code>, <code>/tʃ/</code>, <code>/tr/</code> <br> <code>/ʒ/</code>, <code>/r/</code>, <code>/dz/</code>, <code>/dʒ/</code>, <code>/dr/</code> <br> <code>/m/</code>, <code>/n/</code>, <code>/ŋ/</code> <br> <code>/j/</code>, <code>/w/</code> <br> <code>/l/</code></td></tr></tbody></table><p><br><br><br><br><br></p><h2 id="知识点讲解"><a href="#知识点讲解" class="headerlink" title="知识点讲解"></a>知识点讲解</h2><p><strong>长短元音的区别在于——是否有<code>:</code></strong></p><ul><li>有，则拖长音节</li><li>无，则短促音结尾</li></ul><p><br></p><p><strong>双元音就是把两个单元音拼到一起</strong></p><p>发音也是两个拼到一起的，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/iə/= /i/ + /ə/</span><br><span class="line"></span><br><span class="line">/uə/= /u/ + /ə/</span><br><span class="line"></span><br><span class="line">/εə/= /e/ + /ə/</span><br></pre></td></tr></table></figure><p><br></p><p><strong>清浊辅音的区别在于——喉结是否震动</strong></p><ul><li>震动，浊辅音</li><li>不震动，清辅音</li></ul><p><br></p><p><strong>鼻音–鼻腔发出</strong></p><p><br><br><br><br><br></p><h2 id="难读的音标"><a href="#难读的音标" class="headerlink" title="难读的音标"></a>难读的音标</h2><p>易出问题的地方：</p><p><img src="/images/English/IPA_difficulty.jpg" alt=""></p><p><br></p><p><strong>核心技巧：</strong></p><ul><li>用中文的<strong>音近字</strong>代替</li><li>用简单的<strong>英文字母或单词</strong>进行备注</li></ul><p>中文字很挫，两种方法结合使用，哪个好记用哪个。</p><p><br><br><br></p><p><strong>元音</strong>部分发音讲解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ei/ ：A</span><br><span class="line">/ai/ ：I</span><br><span class="line">/ɔi/ ：“噢一”</span><br><span class="line">/iə/ : /i/ + /ə/ = ear</span><br><span class="line">/eə/ : /e/ + /ə/ = air</span><br><span class="line">/uə/ : /u/ + /ə/ = 污饿</span><br><span class="line">/əu/ ：O</span><br><span class="line">/au/ ：嗷（张大嘴）</span><br></pre></td></tr></table></figure><p><br><br><br></p><p><strong>辅音</strong>部分发音讲解：</p><p>第一组：<code>/s/, /z/</code> 和 <code>/θ/, /ð/</code><br>这两组发音听起来差不多，唯一的区别在于：舌头是否看得见</p><ul><li>看不见，<code>/s/, /z/</code></li><li>看得见，<code>/θ/, /ð/</code></li></ul><p><br></p><p>第二组：<code>/ʃ/, /ʒ/</code> <strong>“屎” “日”</strong></p><p>第三组：<code>/h/, /r/</code> <strong>“喝” “弱”</strong></p><p>第四组：<code>/ts/, /dz/</code> <strong>“此” “滋”</strong></p><p>第五组：<code>/tʃ/, /dʒ/</code> <strong>“尺” “之”</strong></p><p>第六组：<code>/tr/, /dr/</code> <strong>“戳” “捉”</strong></p><p>第七组：<code>/m/, /n/, /ŋ/</code> 都是发<strong>“嗯”</strong>的音，只是嘴型大小不一样。</p><ul><li><code>/m/</code>, 闭紧</li><li><code>/n/</code>, 半张开</li><li><code>/ŋ/</code>, 张大嘴</li></ul><p><br></p><p>第八组：<code>/l/</code><br>这个音最难发，因为声音有点奇怪，像大舌头。发音技巧在于，把舌尖抵在上门牙底端，然后自然发出声音，就是这个音标啦。</p><p><br><br><br></p><p><strong>知识点讲解</strong></p><p><code>/m/, /n/, /l/</code> 分别有两个发音，一个是上面讲解的发音，另一个是他们的本来音，即英文字母m/n/l的发音（么，讷，勒）。</p><ul><li>本身发音： 出现在每个音节的开头</li><li>奇怪音： 出现在每个音节的中间</li></ul><p><br><br><br><br><br></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>自己找单词书进行测试和练习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;国际音标维基&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;巴士英语网: &lt;a href=&quot;https://en-yinbiao.xiao84.com/yinbiaofayin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en-yinbiao.xiao84.com/yinbiaofayin/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;知乎&lt;code&gt;@姜枣茶茶母&lt;/code&gt;的回答: &lt;a href=&quot;https://www.zhihu.com/question/19913374&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/19913374&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="https://zhang21.github.io/categories/English/"/>
    
    
      <category term="English" scheme="https://zhang21.github.io/tags/English/"/>
    
      <category term="国际音标" scheme="https://zhang21.github.io/tags/%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>劳动法</title>
    <link href="https://zhang21.github.io/2018/10/26/%E5%8A%B3%E5%8A%A8%E6%B3%95/"/>
    <id>https://zhang21.github.io/2018/10/26/劳动法/</id>
    <published>2018-10-25T17:01:44.000Z</published>
    <updated>2018-10-25T18:39:34.264Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>中华人民共和国劳动法（2009年修正本）</li></ul><p><br><br><br></p><a id="more"></a><p><br><br><br></p><p>《中华人民共和国劳动法》是为了保护劳动者的合法权益，调整劳动关系，建立和维护适应社会主义市场经济的劳动制度，促进经济发展和社会进步，根据宪法，制定本法。1994年7月5日第八届全国人民代表大会常务委员会第八次会议通过，自1995年1月1日起施行。</p><p>（1994年7年5日第八届全国人民代表大会常务委员会第八次会议通过　1994年7月5日中华人民共和国主席令第28号公布 根据2009年8月27日中华人民共和国主席令第18号《全国人民代表大会常务委员会关于修改部分法律的决定》修正 自公布之日起施行）</p><p><br><br><br></p><h1 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h1><p>第一条： 为了保护劳动者的合法权益，调整劳动关系，建立和维护适应社会主义市场经济的劳动制度，促进经济发展和社会进步，根据宪法，制定本法。</p><p><br></p><p>第二条： 在中华人民共和国境内的企业、个体经济组织（以下统称用人单位）和与之形成劳动关系的劳动者，适用本法。</p><p>国家机关、事业组织、社会团体和与之建立劳动合同关系的劳动者，依照本法执行。</p><p><br></p><p>第三条: 劳动者享有平等就业和选择职业的权利、取得劳动报酬的权利、休息休假的权利、获得劳动安全卫生保护的权利、接受职业技能培训的权利、享受社会保险和福利的权利、提请劳动争议处理的权利以及法律规定的其他劳动权利。</p><p>劳动者应当完成劳动任务，提高职业技能，执行劳动安全卫生规程，遵守劳动纪律和职业道德。</p><p><br></p><p>第四条: 用人单位应当依法建立和完善规章制度，保障劳动者享有劳动权利和履行劳动义务。</p><p><br></p><p>第五条: 国家采取各种措施，促进劳动就业，发展职业教育，制定劳动标准，调节社会收人，完善社会保险，协调劳动关系，逐步提高劳动者的生活水平。</p><p><br></p><p>第六条: 国家提倡劳动者参加社会义务劳动，开展劳动竞赛和合理化建议活动，鼓励和保护劳动者进行科学研究、技术革新和发明创造，表彰和奖励劳动模范和先进工作者。</p><p><br></p><p>第七条: 劳动者有权依法参加和组织工会。</p><p>工会代表和维护劳动者的合法权益，依法独立自主地开展活动。</p><p><br></p><p>第八条: 劳动者依照法律规定，通过职工大会、职工代表大会或者其他形式，参与民主管理或者就保护劳动者合法权益与用人单位进行平等协商。</p><p><br></p><p>第九条: 国务院劳动行政部门主管全国劳动工作。</p><p>县级以上地方人民政府劳动行政部门主管本行政区域内的劳动工作。</p><p><br><br><br><br><br></p><h1 id="促进就业"><a href="#促进就业" class="headerlink" title="促进就业"></a>促进就业</h1><p>第十条: 国家通过促进经济和社会发展，创造就业条件，扩大就业机会。</p><p>国家鼓励企业、事业组织、社会团体在法律、行政法规规定的范围内兴办产业或者拓展经营，增加就业。<br>国家支持劳动者自愿组织起来就业和从事个体经营实现就业。</p><p><br></p><p>第十一条: 地方各级人民政府应当采取措施，发展多种类型的职业介绍机构，提供就业服务。</p><p><br></p><p>第十二条: 劳动者就业，不因民族、种族、性别、宗教信仰不同而受歧视。</p><p><br></p><p>第十三条: 妇女享有与男子平等的就业权利，在录用职工时，除国家规定的不适合妇女的工种或者岗位外，不得以性别为由拒绝录用妇女或者提高对妇女的录用标准。</p><p><br></p><p>第十四条: 残疾人、少数民族人员、退出现役的军人的就业，法律、法规有特别规定的，从其规定。</p><p><br></p><p>第十五条: 禁止用人单位招用未满十六周岁的未成年人。</p><p>文艺、体育和特种工艺单位招用未满十六周岁的未成年人，必须依照国家有关规定，履行审批手续，并保障其接受义务教育的权利。</p><p><br><br><br><br><br></p><h1 id="劳动合同和集体合同"><a href="#劳动合同和集体合同" class="headerlink" title="劳动合同和集体合同"></a>劳动合同和集体合同</h1><p>第十六条: 劳动合同是劳动者与用人单位确立劳动关系、明确双方权利和义务的协议。</p><p>建立劳动关系应当订立劳动合同。</p><p><br></p><p>第十七条: 订立和变更劳动合同，应当遵循平等自愿、协商一致的原则，不得违反法律、行政法规的规定。</p><p>劳动合同依法订立即具有法律约束力，当事人必须履行劳动合同规定的义务。</p><p><br></p><p>第十八条: 下列劳动合同无效：<br>（一）违反法律、行政法规的劳动合同；<br>（二）采取欺诈、威胁等手段订立的劳动合同。</p><p>无效的劳动合同，从订立的时候起，就没有法律约束力。确认劳动合同部分无效的，如果不影响其余部分的效力，其余部分仍然有效。<br>劳动合同的无效，由劳动争仪仲裁委员会或者人民法院确认。</p><p><br></p><p>第十九条: 劳动合同应当以书面形式订立，并具备以下条款：<br>（一）劳动合同期限；<br>（二）工作内容；<br>（三）劳动保护和劳动条件；<br>（四）劳动报酬；<br>（五）劳动纪律；<br>（六）劳动合同终止的条件；<br>（七）违反劳动合同的责任。</p><p>劳动合同除前款规定的必备条款外，当事人可以协商约定其他内容。</p><p><br></p><p>第二十条: 劳动合同的期限分为有固定期限、无固定期限和以完成一定的工作为期限。</p><p>劳动者在同一用人单位连续工作满十年以上，当事人双方同意续延劳动合同的，如果劳动者提出订立无固定期限的劳动合同，应当订立无固定期限的劳动合同。</p><p><br></p><p>第二十一条: 劳动合同可以约定试用期。试用期最长不得超过六个月。</p><p><br></p><p>第二十二条: 劳动合同当事人可以在劳动合同中约定保守用人单位商业秘密的有关事项。</p><p><br></p><p>第二十三条: 劳动合同期满或者当事人约定的劳动合同终止条件出现，劳动合同即行终止。</p><p><br></p><p>第二十四条: 经劳动合同当事人协商一致，劳动合同可以解除。</p><p><br></p><p>第二十五条: 劳动者有下列情形之一的，用人单位可以解除劳动合同：<br>（一）试用期间被证明不符合录用条件的；<br>（二）严重违反劳动纪律或者用人单位规章制度的；<br>（三）严重失职，营私舞弊，对用人单位利益造成重大损害的；<br>（四）被依法追究刑事责任的。</p><p><br></p><p>第二十六条： 有下列情形之一的，用人单位可以解除劳动合同，但是应当提前三十日以书面形式通知劳动者本人：<br>（一）劳动者患病或者非因工负伤，医疗期满后，不能从事原工作也不能从事由用人单位另行安排的工作的；<br>（二）劳动者不能胜任工作，经过培训或者调整工作岗位，仍不能胜任工作的。<br>（三）劳动合同订立时所依据的客观情况发生重大变化，致使原劳动合同无法履行，经当事人协商不能就变更劳动合同达成协议的。</p><p><br></p><p>第二十七条: 用人单位濒临破产进行法定整顿期间或者生产经营状况发生严重困难，确需裁减人员的，应当提前三十日向工会或者全体职工说明情况，听取工会或者职工的意见，经向劳动行政部门报告后，可以裁减人员。</p><p>用人单位依据本条规定裁减人员，在六个月内录用人员的，应当优先录用被裁减的人员。</p><p><br></p><p>第二十八条: 用人单位依据本法第二十四条、第二十六条、第二十七条的规定解除劳动合同的，应当依照国家有关规定给予经济补偿。</p><p><br></p><p>第二十九条: 劳动者有下列情形之一的，用人单位不得依据本法第二十六条、第二十七条的规定解除劳动合同：<br>（一）患职业病或者因工负伤并被确认丧失或者部分丧失劳动能力的；<br>（二）患病或者负伤，在规定的医疗期内的；<br>（三）女职工在孕期、产期、哺乳期内的；<br>（四）法律、行政法规规定的其他情形。</p><p><br></p><p>第三十条: 用人单位解除劳动合同，工会认为不适当的，有权提出意见。如果用人单位违反法律、法规或者劳动合同，工会有权要求重新处理；劳动者申请仲裁或者提起诉讼的，工会应当依法给予支持和帮助。</p><p><br></p><p>第三十一条: 劳动者解除劳动合同，应当提前三十日以书面形式通知用人单位。</p><p><br></p><p>第三十二条: 有下列情形之一的，劳动者可以随时通知用人单位解除劳动合同：<br>（一）在试用期内的；<br>（二）用人单位以暴力、威胁或者非法限制人身自由的手段强迫劳动的；<br>（三）用人单位未按照劳动合同约定支付劳动报酬或者提供劳动条件的。</p><p><br></p><p>第三十三条: 企业职工一方与企业可以就劳动报酬、工作时间、休息休假、劳动安全卫生、保险福利等事项，签订集体合同。集体合同草案应当提交职工代表大会或者全体职工讨论通过。</p><p>集体合同由工会代表职工与企业签订；没有建立工会的企业，由职工推举的代表与企业签订。</p><p><br></p><p>第三十四条: 集体合同签订后应当报送劳动行政部门；劳动行政部门自收到集体合同文本之日起十五日内未提出异议的，集体合同即行生效。</p><p><br></p><p>第三十五条: 依法签订的集体合同对企业和企业全体职工具有约束力，职工个人与企业订立的劳动合同中劳动条件和劳动报酬等标准不得低于集体合同的规定。</p><h1 id="工资"><a href="#工资" class="headerlink" title="工资"></a>工资</h1><p>第三十六条: 国家实行劳动者每日工作时间不超过八小时、平均每周工作时间不超过四十四小时的工时制度。</p><p><br></p><p>第三十七条: 对实行计件工作的劳动者，用人单位应当根据本法第三十六条规定的工时制度合理确定其劳动定额和计件报酬标准。</p><p><br></p><p>第三十八条: 用人单位应当保证劳动者每周至少休息一日。</p><p><br></p><p>第三十九条: 企业因生产特点不能实行本法第三十六条、第三十八条规定的，经劳动部门批准，可以实行其他工作和休息办法。</p><p><br></p><p>第四十条: 用人单位在下列节日期间应当依法安排劳动者休假：<br>（一）元旦；<br>（二）春节；<br>（三）国际劳动节；<br>（四）国庆节；<br>（五）法律、法规规定的其他休假节日。</p><p><br></p><p>第四十一条: 用人单位由于生产经营需要，经与工会和劳动者协商后可以延长工作时间，一般每日不得超过一小时；因特殊原因需要延长工作时间的，在保障劳动者身体健康的条件下延长工作时间每日不得超过三小时，但是每月不得超过三十六小时。</p><p><br></p><p>第四十二条: 有下列情形之一的，延长工作时间不受本法第四十一条规定的限制：<br>（一）发生自然灾害、事故或者因其他原因，威胁劳动者生命健康和财产安全，需要紧急处理的；<br>（二）生产设备、交通运输线路、公共设施发生故障，影响生产和公众利益，必须及时抢修的；<br>（三）法律、行政法规规定的其他情形。</p><p><br></p><p>第四十三条: 用人单位不得违反本法规定延长劳动者的工作时间。</p><p><br></p><p>第四十四条: 有下列情形之一的，用人单位应当按照下列标准支付高于劳动者正常工作时间工资的工资报酬；<br>（一）安排劳动者延长工作时间的，支付不低于工资的百分之一百五十的工资报酬；<br>（二）休息日安排劳动者工作又不能安排补休的，支付不低于工资的百分之二百的工资报酬；<br>（三）法定休假日安排劳动者工作的，支付不低于工资的百分之三百的工资报酬。</p><p><br></p><p>第四十五条: 国家实行带薪年休假制度。</p><p>劳动者连续工作一年以上的，享受带薪年休假。具体办法由国务院规定。</p><p><br></p><p>第四十六条: 工资分配应当遵循按劳分配原则，实行同工同酬。</p><p>工资水平在经济发展的基础上逐步提高。国家对工资总量实行宏观调控。</p><p><br></p><p>第四十七条: 用人单位根据本单位的生产经营特点和经济效益，依法自主确定本单位的工资分配方式和工资水平。</p><p><br></p><p>第四十八条: 国家实行最低工资保障制度。最低工资的具体标准由各省、自治区直辖市人民政府规定，报国务院备案。</p><p>用人单位支付劳动者的工资不得低于当地最低工资标准。</p><p><br></p><p>第四十九条: 确定和调整最低工资标准应当综合参考下列因素：<br>（一）劳动者本人及平均赡养人口的最低生活费用；<br>（二）社会平均工资水平；<br>（三）劳动生产率；<br>（四）就业状况；<br>（五）地区之间经济发展水平的差异。</p><p><br></p><p>第五十条: 工资应当以货币形式按月支付给劳动者本人。不得克扣或者无故拖欠劳动者的工资。</p><p><br></p><p>第五十一条: 劳动者在法定休假日和婚丧假期间以及依法参加社会活动期间，用人单位应当依法支付工资。</p><p><br><br><br><br><br></p><h1 id="劳动安全卫生"><a href="#劳动安全卫生" class="headerlink" title="劳动安全卫生"></a>劳动安全卫生</h1><p>第五十二条: 用人单位必须建立、健全劳动安全卫生制度，严格执行国家劳动安全卫生规程和标准，对劳动者进行劳动安全卫生教育，防止劳动过程中的事故，减少职业危害。</p><p><br></p><p>第五十三条: 劳动安全卫生设施必须符合国家规定的标准。</p><p>新建、改建、扩建工程的劳动安全卫生设施必须与主体工程同时设计、同时施工、同时投入生产和使用。</p><p><br></p><p>第五十四条: 用人单位必须为劳动者提供符合国家规定的劳动安全卫生条件和必要的劳动防护用品，对从事有职业危害作业的劳动者应当定期进行健康检查。</p><p><br></p><p>第五十五条: 从事特种作业的劳动者必须经过专门培训并取得特种作业资格。</p><p><br></p><p>第五十六条: 劳动者在劳动过程中必须严格遵守安全操作规程。</p><p>劳动者对用人单位管理人员违章指挥、强令冒险作业，有权拒绝执行；对危害生命安全和身体健康的行为，有权提出批评、检举和控告。</p><p><br></p><p>第五十七条: 国家建立伤亡事故和职业病统计报告和处理制度。县级以上各级人民政府劳动行政部门、有关部门和用人单位应当依法对劳动者在劳动过程中发生的伤亡事故和劳动者　的职业病状况，进行统计、报告和处理。</p><p><br><br><br><br><br></p><h1 id="女职工和未成年工特殊保护"><a href="#女职工和未成年工特殊保护" class="headerlink" title="女职工和未成年工特殊保护"></a>女职工和未成年工特殊保护</h1><p>第五十八条: 国家对女职工和未成年工实行特殊劳动保护。</p><p>未成年工是指年满十六周岁未满十八周岁的劳动者。</p><p><br></p><p>第五十九条: 禁止安排女职工从事矿山井下、国家规定的第四级体力劳动强度的劳动和其他禁忌从事的劳动。</p><p><br></p><p>第六十条: 不得安排女职工在经期从事高处、低温、冷水作业和国家规定的第三级体力劳动强度的劳动。</p><p><br></p><p>第六十一条: 不得安排女职工在怀孕期间从事国家规定的第三级体力劳动强度的劳动和孕期禁忌从事的劳动，对怀孕七个月以上的女职工，不得安排其延长工作时间和夜班劳动。</p><p><br></p><p>第六十二条: 女职工生育享受不少于九十天的产假。</p><p><br></p><p>第六十三条: 不得安排女职工在哺乳未满一周岁的婴儿期间从事国家规定的第三级体力劳动强度的劳动和哺乳期禁忌从事的其他劳动，不得安排其延长工作时间和夜班劳动。</p><p><br></p><p>第六十四条: 不得安排未成年工从事矿山井下、有毒有害、国家规定的第四级体力劳动强度的劳动和其他禁忌从事的劳动。</p><p><br></p><p>第六十五条: 用人单位应当对未成年工定期进行健康检查。</p><p><br><br><br><br><br></p><h1 id="职业培训"><a href="#职业培训" class="headerlink" title="职业培训"></a>职业培训</h1><p>第六十六条: 国家通过各种途径，采取各种措施，发展职业培训事业，开发劳动者的职业技能，提高劳动者素质，增强劳动者的就业能力和工作能力。</p><p><br></p><p>第六十七条: 各级人民政府应当把发展职业培训纳入社会经济发展的规划，鼓励和支持有条件的企业、事业组织、社会团体和个人进行各种形式的职业培训。</p><p><br></p><p>第六十八条: 用人单位应建立职业培训制度，按照国家规定提取和使用职业培训经费，根据本单位实际，有计划地对劳动者进行职业培训。</p><p>从事技术工种的劳动者，上岗前必须经过培训。</p><p><br></p><p>第六十九条: 国家确定职业分类，对规定的职业制定职业技能标准，实行职业资格证书制度，由经过政府批准的考核鉴定机构负责对劳动者实施职业技能考核鉴定。</p><p><br><br><br><br><br></p><h1 id="社会保险和福利"><a href="#社会保险和福利" class="headerlink" title="社会保险和福利"></a>社会保险和福利</h1><p>第七十条: 国家发展社会保险事业，建立社会保险制度，设立社会保险基金，使劳动者在年老、患病、工伤、失业、生育等情况下获得帮助和补偿。</p><p><br></p><p>第七十一条: 社会保险水平应当与社会经济发展水平和社会承受能力相适应。</p><p><br></p><p>第七十二条: 社会保险基金按照保险类型确定资金来源，逐步实行社会统筹。用人单位和劳动者必须依法参加社会保险，缴纳社会保险费。</p><p><br></p><p>第七十三条: 劳动者在下列情形下，依法享受社会保险待遇：<br>（一）退休；<br>（二）患病、负伤；<br>（三）因工伤残或者患职业病；<br>（四）失业；<br>（五）生育。</p><p>劳动者死亡后，其遗属依法享受遗属津贴。<br>劳动者享受社会保险待遇的条件和标准由法律、法规规定。<br>劳动者享受的社会保险金必须按时足额支付。</p><p><br></p><p>第七十四条: 社会保险基金经办机构依照法律规定收支、管理和运营社会保险基金，并负有使社会保险基金保值增值的责任。</p><p>社会保险基金监督机构依照法律规定、对社会保险基金的收支、管理和运营实施监督。<br>社会保险基金经办机构和社会保险基金监督机构的设立和职能由法律规定。<br>任何组织和个人不得挪用社会保险基金。</p><p><br></p><p>第七十五条: 国家鼓励用人单位根据本单位实际情况为劳动者建立补充保险。</p><p>国家提倡劳动者个人进行储蓄性保险。</p><p><br></p><p>第七十六条: 国家发展社会福利事业，兴建公共福利设施、为劳动者休息、休养和疗养提供条件。</p><p>用人单位应当创造条件，改善集体福利，提高劳动者的福利待遇。</p><p><br><br><br><br><br></p><h1 id="劳动争议"><a href="#劳动争议" class="headerlink" title="劳动争议"></a>劳动争议</h1><p>第七十七条: 用人单位与劳动者发生劳动争议，当事人可以依法申请调解、仲裁、提起诉讼，也可以协商解决。</p><p>调解原则适用于仲裁和诉讼程序。</p><p><br></p><p>第七十八条: 解决劳动争议、应当根据合法、公正、及时处理的原则，依法维护劳动争议当事人的合法权益。</p><p><br></p><p>第七十九条: 劳动争议发生后，当事人可以向本单位劳动争议调解委员会申请调解；调解不成，当事人一方要求仲裁的，可以向劳动争议仲裁委员会申请仲裁。当事人一方也可以直接向劳动争议仲裁委员会申请仲裁。对仲裁裁决不服的，可以向人民法院提起诉讼。</p><p><br></p><p>第八十条: 在用人单位内，可以设立劳动争议调解委员会。劳动争议调解委员会由职工代表、用人单位代表和工会代表组成。劳动争议调解委员会主任由工会代表担任。</p><p>劳动争议经调解达成协议的，当事人应当履行。</p><p><br></p><p>第八十一条: 劳动争议仲裁委员会由劳动行政部门代表、同级工会代表、用人单位方面的代表组成，劳动争议仲裁委员会主任由劳动行政部门代表担任。</p><p><br></p><p>第八十二条: 提出仲裁要求的一方应当自劳动争议发生之日起六十日内向劳动争议仲裁委员会提出书面申请。仲裁裁决一般应在收到仲裁申请的六十日内作出。对仲裁裁决无异议的，当事人必须履行。</p><p><br></p><p>第八十三条: 劳动争议当事人对仲裁裁决不服的，可以自收到仲裁裁决书之日起十五日内向人民法院提起诉讼。一方当事人在法定期限内不起诉又不履行仲裁裁决的，另一方当事人可以申请人民法院强制执行。</p><p><br></p><p>第八十四条: 因签订集体合同发生争议，当事人协商解决不成的，当地人民政府劳动行政部门可以组织有关各方协调处理。</p><p>因履行集体合同发生争议，当事人协商解决不成的，可以向劳动争议仲裁委员会申请仲裁；对仲裁裁决不服的，可以自收到仲裁裁决书之日起十五日内向人民法院提起诉讼。</p><p><br><br><br><br><br></p><h1 id="监督检查"><a href="#监督检查" class="headerlink" title="监督检查"></a>监督检查</h1><p>第八十五条: 县级以上各级人民政府劳动行政部门依法对用人单位遵守劳动法律、法规的情况进行监督检查，对违反劳动法律、法规的行为有权制止，并责令改正。</p><p><br></p><p>第八十六条: 县级以上各级人民政府劳动行政部门监督检查人员执行公务，有权进入用人单位了解执行劳动法律、法规的情况，查阅必要的资料，并对劳动场所进行检查。</p><p>县级以上各级人民政府劳动行政部门监督检查人员执行公务，必须出示证件，秉公执法并遵守有关规定。</p><p><br></p><p>第八十七条: 县级以上各级人民政府有关部门在各自职责范围内，对用人单位遵守劳动法律、法规的情况进行监督。</p><p><br></p><p>第八十八条: 各级工会依法维护劳动者的合法权益，对用人单位遵守劳动法律、法规的情况进行监督。</p><p>任何组织和个人对于违反劳动法律、法规的行为有权检举和控告。</p><p><br><br><br><br><br></p><h1 id="法律责任"><a href="#法律责任" class="headerlink" title="法律责任"></a>法律责任</h1><p>第八十九条: 用人单位制定的劳动规章制度违反法律、法规规定的，由劳动行政部门给予警告，责令改正；对劳动者造成损害的，应当承担赔偿责任。</p><p><br></p><p>第九十条: 用人单位违反本法规定，延长劳动者工作时间的，由劳动行政部门给予警告，责令改正，并可以处以罚款。</p><p><br></p><p>第九十一条: 用人单位有下列侵害劳动者合法权益情形之一的，由劳动行政部门责令支付劳动者的工资报酬、经济补偿，并可以责令支付赔偿金：<br>（一）克扣或者无故拖欠劳动者工资的；<br>（二）拒不支付劳动者延长工作时间工资报酬的；<br>（三）低于当地最低工资标准支付劳动者工资的；<br>（四）解除劳动合同后，未依照本法规定给予劳动者经济补偿的。</p><p><br></p><p>第九十二条: 用人单位的劳动安全设施和劳动卫生条件不符合国家规定或者未向劳动者提供必要的劳动防护用品和劳动保护设施的，由劳动行政部门或者有关部门责令改正，可以处以罚款；情节严重的，提请县级以上人民政府决定责令停产整顿；对事故隐患不采取措施，致使发生重大事故，造成劳动者生命和财产损失的，对责任人员比照刑法第一百八十七条的规定追究刑事责任。</p><p><br></p><p>第九十三条: 用人单位强令劳动者违章冒险作业、发生重大伤亡事故，造成严重后果的，对责任人员依法追究刑事责任。</p><p><br></p><p>第九十四条: 用人单位非法招用未满十六周岁的未成年人的，由劳动行政部门责令改正，处以罚款；情节严重的，由工商行政管理部门吊销营业执照。</p><p><br></p><p>第九十五条: 用人单位违反本法对女职工和未成年工的保护规定，侵害其合法权益的，由劳动行政部门责令改正，处以罚款；对女职工或者未成年工造成损害的，应当承担赔偿责任。</p><p><br></p><p>第九十六条: 用人单位有下列行为之一，由公安机关对责任人员处以十五日以下拘留、罚款或者警告；构成犯罪的，对责任人员依法追究刑事责任：</p><p>（一）以暴力、威胁或者非法限制人身自由的手段强迫劳动的。<br>（二）侮辱、体罚、殴打、非法搜查和拘禁劳动者的。</p><p><br></p><p>第九十七条: 由于用人单位的原因订立的无效合同，对劳动者造成损害的，应当承担赔偿责任。</p><p><br></p><p>第九十八条: 用人单位违反本法规定的条件解除劳动合同或者故意拖延不订立劳动合同的，由劳动行政部门责令改正；对劳动者造成损害的，应当承担赔偿责任。</p><p><br></p><p>第九十九条: 用人单位招用尚未解除劳动合同的劳动者，对原用人单位造成经济损失的，该用人单位应当依法承担连带赔偿责任。</p><p><br></p><p>第一百条: 用人单位无故不缴纳社会保险费的，由劳动行政部门责令其限期缴纳，逾期不缴的，可以加收滞纳金。</p><p><br></p><p>第一百零一条: 用人单位无理阻挠劳动行政部门、有关部门及其工作人员行使监督检查权，打击报复举报人员的，由劳动行政部门或者有关部门处以罚款；构成犯罪的，对责任人员依法追究刑事责任。</p><p><br></p><p>第一百零二条: 劳动者违反本法规定的条件解除劳动合同或者违反劳动合同中约定的保密事项，对用人单位造成经济损失的，应当依法承担赔偿责任。</p><p><br></p><p>第一百零三条: 劳动行政部门或者有关部门的工作人员滥用职权、玩忽职守、徇私舞弊、构成犯罪的，依法追究刑事责任；不构成犯罪的，给予行政处分。</p><p><br></p><p>第一百零四条:国家工作人员和社会保险基金经办机构的工作人员挪用社会保险基金，构成犯罪的，依法追究刑事责任。</p><p><br></p><p>第一百零五条: 违反本法规定侵害劳动者合法权益，其他法律、行政法规已规定处罚的，依照该法律、行政法规的规定处罚。</p><p><br><br><br><br><br></p><h1 id="附则"><a href="#附则" class="headerlink" title="附则"></a>附则</h1><p>第一百零六条: 省、自治区、直辖市人民政府根据本法和本地区的实际情况，规定劳动合同制度的实施步骤，报国务院备案。</p><p><br></p><p>第一百零七条: 本法自1995年1月1日起施行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中华人民共和国劳动法（2009年修正本）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="法律" scheme="https://zhang21.github.io/categories/%E6%B3%95%E5%BE%8B/"/>
    
    
      <category term="劳动法" scheme="https://zhang21.github.io/tags/%E5%8A%B3%E5%8A%A8%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>劳动合同法</title>
    <link href="https://zhang21.github.io/2018/10/26/%E5%8A%B3%E5%8A%A8%E5%90%88%E5%90%8C%E6%B3%95/"/>
    <id>https://zhang21.github.io/2018/10/26/劳动合同法/</id>
    <published>2018-10-25T17:01:33.000Z</published>
    <updated>2018-10-25T18:45:25.204Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>全国人民代表大会常务委员会关于修改《中华人民共和国劳动合同法》的决定（附2012年修正本）</li></ul><p><br></p><p>网址：</p><ul><li>中华人民共和国中央人民政府： <a href="http://www.gov.cn/" target="_blank" rel="noopener">http://www.gov.cn/</a></li><li>中国政府法制信息网： <a href="http://www.chinalaw.gov.cn" target="_blank" rel="noopener">http://www.chinalaw.gov.cn</a></li><li>百度百科</li></ul><p><br><br><br></p><a id="more"></a><p><br><br><br></p><p>《中华人民共和国劳动合同法》是为了完善劳动合同制度，明确劳动合同双方当事人的权利和义务，保护劳动者的合法权益，构建和发展和谐稳定的劳动关系，制定本法。由第十届全国人民代表大会常务委员会第二十八次会议于2007年6月29日修订通过，自2008年1月1日起施行。（2012年12月28日第十一届全国人民代表大会常务委员会第三十次会议通过 2012年12月28日中华人民共和国主席令第73号公布 自2013年7月1日起施行）</p><p><br><br><br></p><h1 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h1><p>第一条： 为了完善劳动合同制度，明确劳动合同双方当事人的权利和义务，保护劳动者的合法权益，构建和发展和谐稳定的劳动关系，制定本法。</p><p><br></p><p>第二条： 中华人民共和国境内的企业、个体经济组织、民办非企业单位等组织（以下称用人单位）与劳动者建立劳动关系，订立、履行、变更、解除或者终止劳动合同，适用本法。</p><p>国家机关、事业单位、社会团体和与其建立劳动关系的劳动者，订立、履行、变更、解除或者终止劳动合同，依照本法执行。</p><p><br></p><p>第三条：　订立劳动合同，应当遵循合法、公平、平等自愿、协商一致、诚实信用的原则。</p><p>依法订立的劳动合同具有约束力，用人单位与劳动者应当履行劳动合同约定的义务。</p><p><br></p><p>第四条　用人单位应当依法建立和完善劳动规章制度，保障劳动者享有劳动权利、履行劳动义务。</p><p>用人单位在制定、修改或者决定有关劳动报酬、工作时间、休息休假、劳动安全卫生、保险福利、职工培训、劳动纪律以及劳动定额管理等直接涉及劳动者切身利益的规章制度或者重大事项时，应当经职工代表大会或者全体职工讨论，提出方案和意见，与工会或者职工代表平等协商确定。<br>在规章制度和重大事项决定实施过程中，工会或者职工认为不适当的，有权向用人单位提出，通过协商予以修改完善。<br>用人单位应当将直接涉及劳动者切身利益的规章制度和重大事项决定公示，或者告知劳动者。</p><p><br></p><p>第五条：　县级以上人民政府劳动行政部门会同工会和企业方面代表，建立健全协调劳动关系三方机制，共同研究解决有关劳动关系的重大问题。</p><p><br></p><p>第六条：　工会应当帮助、指导劳动者与用人单位依法订立和履行劳动合同，并与用人单位建立集体协商机制，维护劳动者的合法权益。</p><p><br><br><br><br><br></p><h1 id="劳动合同的订立"><a href="#劳动合同的订立" class="headerlink" title="劳动合同的订立"></a>劳动合同的订立</h1><p>第七条:　用人单位自用工之日起即与劳动者建立劳动关系。用人单位应当建立职工名册备查。</p><p><br></p><p>第八条:　用人单位招用劳动者时，应当如实告知劳动者工作内容、工作条件、工作地点、职业危害、安全生产状况、劳动报酬，以及劳动者要求了解的其他情况；用人单位有权了解劳动者与劳动合同直接相关的基本情况，劳动者应当如实说明。</p><p><br></p><p>第九条：　用人单位招用劳动者，不得扣押劳动者的居民身份证和其他证件，不得要求劳动者提供担保或者以其他名义向劳动者收取财物。</p><p><br></p><p>第十条：　建立劳动关系，应当订立书面劳动合同。</p><p>已建立劳动关系，未同时订立书面劳动合同的，应当自用工之日起一个月内订立书面劳动合同。<br>用人单位与劳动者在用工前订立劳动合同的，劳动关系自用工之日起建立。</p><p><br></p><p>第十一条：　用人单位未在用工的同时订立书面劳动合同，与劳动者约定的劳动报酬不明确的，新招用的劳动者的劳动报酬按照集体合同规定的标准执行；没有集体合同或者集体合同未规定的，实行同工同酬。</p><p><br></p><p>第十二条　劳动合同分为固定期限劳动合同、无固定期限劳动合同和以完成一定工作任务为期限的劳动合同。</p><p><br></p><p>第十三条　固定期限劳动合同，是指用人单位与劳动者约定合同终止时间的劳动合同。</p><p>用人单位与劳动者协商一致，可以订立固定期限劳动合同。</p><p><br></p><p>第十四条　无固定期限劳动合同，是指用人单位与劳动者约定无确定终止时间的劳动合同。</p><p>用人单位与劳动者协商一致，可以订立无固定期限劳动合同。有下列情形之一，劳动者提出或者同意续订、订立劳动合同的，除劳动者提出订立固定期限劳动合同外，应当订立无固定期限劳动合同：<br>（一）劳动者在该用人单位连续工作满十年的；<br>（二）用人单位初次实行劳动合同制度或者国有企业改制重新订立劳动合同时，劳动者在该用人单位连续工作满十年且距法定退休年龄不足十年的；<br>（三）连续订立二次固定期限劳动合同，且劳动者没有本法第三十九条和第四十条第一项、第二项规定的情形，续订劳动合同的。</p><p>用人单位自用工之日起满一年不与劳动者订立书面劳动合同的，视为用人单位与劳动者已订立无固定期限劳动合同。</p><p><br></p><p>第十五条：　以完成一定工作任务为期限的劳动合同，是指用人单位与劳动者约定以某项工作的完成为合同期限的劳动合同。</p><p>用人单位与劳动者协商一致，可以订立以完成一定工作任务为期限的劳动合同。</p><p><br></p><p>第十六条： 劳动合同由用人单位与劳动者协商一致，并经用人单位与劳动者在劳动合同文本上签字或者盖章生效。</p><p>劳动合同文本由用人单位和劳动者各执一份。</p><p><br></p><p>第十七条：　劳动合同应当具备以下条款：<br>（一）用人单位的名称、住所和法定代表人或者主要负责人；<br>（二）劳动者的姓名、住址和居民身份证或者其他有效身份证件号码；<br>（三）劳动合同期限；<br>（四）工作内容和工作地点；<br>（五）工作时间和休息休假；<br>（六）劳动报酬；<br>（七）社会保险；<br>（八）劳动保护、劳动条件和职业危害防护；<br>（九）法律、法规规定应当纳入劳动合同的其他事项。</p><p>劳动合同除前款规定的必备条款外，用人单位与劳动者可以约定试用期、培训、保守秘密、补充保险和福利待遇等其他事项。</p><p><br></p><p>第十八条：　劳动合同对劳动报酬和劳动条件等标准约定不明确，引发争议的，用人单位与劳动者可以重新协商；协商不成的，适用集体合同规定；没有集体合同或者集体合同未规定劳动报酬的，实行同工同酬；没有集体合同或者集体合同未规定劳动条件等标准的，适用国家有关规定。</p><p><br></p><p>第十九条：　劳动合同期限三个月以上不满一年的，试用期不得超过一个月；劳动合同期限一年以上不满三年的，试用期不得超过二个月；三年以上固定期限和无固定期限的劳动合同，试用期不得超过六个月。</p><p>同一用人单位与同一劳动者只能约定一次试用期。<br>以完成一定工作任务为期限的劳动合同或者劳动合同期限不满三个月的，不得约定试用期。<br>试用期包含在劳动合同期限内。劳动合同仅约定试用期的，试用期不成立，该期限为劳动合同期限。</p><p><br></p><p>第二十条：　劳动者在试用期的工资不得低于本单位相同岗位最低档工资或者劳动合同约定工资的百分之八十，并不得低于用人单位所在地的最低工资标准。</p><p><br></p><p>第二十一条：　在试用期中，除劳动者有本法第三十九条和第四十条第一项、第二项规定的情形外，用人单位不得解除劳动合同。用人单位在试用期解除劳动合同的，应当向劳动者说明理由。</p><p><br></p><p>第二十二条：　用人单位为劳动者提供专项培训费用，对其进行专业技术培训的，可以与该劳动者订立协议，约定服务期。</p><p>劳动者违反服务期约定的，应当按照约定向用人单位支付违约金。违约金的数额不得超过用人单位提供的培训费用。用人单位要求劳动者支付的违约金不得超过服务期尚未履行部分所应分摊的培训费用。<br>用人单位与劳动者约定服务期的，不影响按照正常的工资调整机制提高劳动者在服务期期间的劳动报酬。</p><p><br></p><p>第二十三条：　用人单位与劳动者可以在劳动合同中约定保守用人单位的商业秘密和与知识产权相关的保密事项。</p><p>对负有保密义务的劳动者，用人单位可以在劳动合同或者保密协议中与劳动者约定竞业限制条款，并约定在解除或者终止劳动合同后，在竞业限制期限内按月给予劳动者经济补偿。劳动者违反竞业限制约定的，应当按照约定向用人单位支付违约金。</p><p><br></p><p>第二十四条：　竞业限制的人员限于用人单位的高级管理人员、高级技术人员和其他负有保密义务的人员。竞业限制的范围、地域、期限由用人单位与劳动者约定，竞业限制的约定不得违反法律、法规的规定。</p><p>在解除或者终止劳动合同后，前款规定的人员到与本单位生产或者经营同类产品、从事同类业务的有竞争关系的其他用人单位，或者自己开业生产或者经营同类产品、从事同类业务的竞业限制期限，不得超过二年。</p><p><br></p><p>第二十五条：　除本法第二十二条和第二十三条规定的情形外，用人单位不得与劳动者约定由劳动者承担违约金。</p><p><br></p><p>第二十六条：　下列劳动合同无效或者部分无效：</p><p>（一）以欺诈、胁迫的手段或者乘人之危，使对方在违背真实意思的情况下订立或者变更劳动合同的；<br>（二）用人单位免除自己的法定责任、排除劳动者权利的；<br>（三）违反法律、行政法规强制性规定的。</p><p>对劳动合同的无效或者部分无效有争议的，由劳动争议仲裁机构或者人民法院确认。</p><p><br></p><p>第二十七条：　劳动合同部分无效，不影响其他部分效力的，其他部分仍然有效。</p><p><br></p><p>第二十八条：　劳动合同被确认无效，劳动者已付出劳动的，用人单位应当向劳动者支付劳动报酬。劳动报酬的数额，参照本单位相同或者相近岗位劳动者的劳动报酬确定。</p><p><br><br><br></p><h1 id="劳动合同的履行和变更"><a href="#劳动合同的履行和变更" class="headerlink" title="劳动合同的履行和变更"></a>劳动合同的履行和变更</h1><p>第二十九条：　用人单位与劳动者应当按照劳动合同的约定，全面履行各自的义务。</p><p><br></p><p>第三十条：　用人单位应当按照劳动合同约定和国家规定，向劳动者及时足额支付劳动报酬。</p><p>用人单位拖欠或者未足额支付劳动报酬的，劳动者可以依法向当地人民法院申请支付令，人民法院应当依法发出支付令。</p><p><br></p><p>第三十一条：　用人单位应当严格执行劳动定额标准，不得强迫或者变相强迫劳动者加班。用人单位安排加班的，应当按照国家有关规定向劳动者支付加班费。</p><p><br></p><p>第三十二条：　劳动者拒绝用人单位管理人员违章指挥、强令冒险作业的，不视为违反劳动合同。</p><p>劳动者对危害生命安全和身体健康的劳动条件，有权对用人单位提出批评、检举和控告。</p><p><br></p><p>第三十三条：　用人单位变更名称、法定代表人、主要负责人或者投资人等事项，不影响劳动合同的履行。</p><p><br></p><p>第三十四条：　用人单位发生合并或者分立等情况，原劳动合同继续有效，劳动合同由承继其权利和义务的用人单位继续履行。</p><p><br></p><p>第三十五条：　用人单位与劳动者协商一致，可以变更劳动合同约定的内容。变更劳动合同，应当采用书面形式。</p><p>变更后的劳动合同文本由用人单位和劳动者各执一份。</p><h1 id="劳动合同的解除和终止"><a href="#劳动合同的解除和终止" class="headerlink" title="劳动合同的解除和终止"></a>劳动合同的解除和终止</h1><p>第三十六条：　用人单位与劳动者协商一致，可以解除劳动合同。</p><p><br></p><p>第三十七条：　劳动者提前三十日以书面形式通知用人单位，可以解除劳动合同。劳动者在试用期内提前三日通知用人单位，可以解除劳动合同。</p><p><br></p><p>第三十八条：　用人单位有下列情形之一的，劳动者可以解除劳动合同：<br>（一）未按照劳动合同约定提供劳动保护或者劳动条件的；<br>（二）未及时足额支付劳动报酬的；<br>（三）未依法为劳动者缴纳社会保险费的；<br>（四）用人单位的规章制度违反法律、法规的规定，损害劳动者权益的；<br>（五）因本法第二十六条第一款规定的情形致使劳动合同无效的；<br>（六）法律、行政法规规定劳动者可以解除劳动合同的其他情形。</p><p>用人单位以暴力、威胁或者非法限制人身自由的手段强迫劳动者劳动的，或者用人单位违章指挥、强令冒险作业危及劳动者人身安全的，劳动者可以立即解除劳动合同，不需事先告知用人单位。</p><p><br></p><p>第三十九条：　劳动者有下列情形之一的，用人单位可以解除劳动合同：<br>（一）在试用期间被证明不符合录用条件的；<br>（二）严重违反用人单位的规章制度的；<br>（三）严重失职，营私舞弊，给用人单位造成重大损害的；<br>（四）劳动者同时与其他用人单位建立劳动关系，对完成本单位的工作任务造成严重影响，或者经用人单位提出，拒不改正的；<br>（五）因本法第二十六条第一款第一项规定的情形致使劳动合同无效的；<br>（六）被依法追究刑事责任的。</p><p><br></p><p>第四十条：　有下列情形之一的，用人单位提前三十日以书面形式通知劳动者本人或者额外支付劳动者一个月工资后，可以解除劳动合同：<br>（一）劳动者患病或者非因工负伤，在规定的医疗期满后不能从事原工作，也不能从事由用人单位另行安排的工作的；<br>（二）劳动者不能胜任工作，经过培训或者调整工作岗位，仍不能胜任工作的；<br>（三）劳动合同订立时所依据的客观情况发生重大变化，致使劳动合同无法履行，经用人单位与劳动者协商，未能就变更劳动合同内容达成协议的。</p><p><br></p><p>第四十一条：　有下列情形之一，需要裁减人员二十人以上或者裁减不足二十人但占企业职工总数百分之十以上的，用人单位提前三十日向工会或者全体职工说明情况，听取工会或者职工的意见后，裁减人员方案经向劳动行政部门报告，可以裁减人员：<br>（一）依照企业破产法规定进行重整的；<br>（二）生产经营发生严重困难的；<br>（三）企业转产、重大技术革新或者经营方式调整，经变更劳动合同后，仍需裁减人员的；<br>（四）其他因劳动合同订立时所依据的客观经济情况发生重大变化，致使劳动合同无法履行的。</p><p>裁减人员时，应当优先留用下列人员：<br>（一）与本单位订立较长期限的固定期限劳动合同的；<br>（二）与本单位订立无固定期限劳动合同的；<br>（三）家庭无其他就业人员，有需要扶养的老人或者未成年人的。</p><p>用人单位依照本条第一款规定裁减人员，在六个月内重新招用人员的，应当通知被裁减的人员，并在同等条件下优先招用被裁减的人员。</p><p><br></p><p>第四十二条：　劳动者有下列情形之一的，用人单位不得依照本法第四十条、第四十一条的规定解除劳动合同：<br>（一）从事接触职业病危害作业的劳动者未进行离岗前职业健康检查，或者疑似职业病病人在诊断或者医学观察期间的；<br>（二）在本单位患职业病或者因工负伤并被确认丧失或者部分丧失劳动能力的；<br>（三）患病或者非因工负伤，在规定的医疗期内的；<br>（四）女职工在孕期、产期、哺乳期的；<br>（五）在本单位连续工作满十五年，且距法定退休年龄不足五年的；<br>（六）法律、行政法规规定的其他情形。</p><p><br></p><p>第四十三条：　用人单位单方解除劳动合同，应当事先将理由通知工会。用人单位违反法律、行政法规规定或者劳动合同约定的，工会有权要求用人单位纠正。用人单位应当研究工会的意见，并将处理结果书面通知工会。</p><p><br></p><p>第四十四条：　有下列情形之一的，劳动合同终止：<br>（一）劳动合同期满的；<br>（二）劳动者开始依法享受基本养老保险待遇的；<br>（三）劳动者死亡，或者被人民法院宣告死亡或者宣告失踪的；<br>（四）用人单位被依法宣告破产的；<br>（五）用人单位被吊销营业执照、责令关闭、撤销或者用人单位决定提前解散的；<br>（六）法律、行政法规规定的其他情形。</p><p><br></p><p>第四十五条：　劳动合同期满，有本法第四十二条规定情形之一的，劳动合同应当续延至相应的情形消失时终止。但是，本法第四十二条第二项规定丧失或者部分丧失劳动能力劳动者的劳动合同的终止，按照国家有关工伤保险的规定执行。</p><p><br></p><p>第四十六条：　有下列情形之一的，用人单位应当向劳动者支付经济补偿：<br>（一）劳动者依照本法第三十八条规定解除劳动合同的；<br>（二）用人单位依照本法第三十六条规定向劳动者提出解除劳动合同并与劳动者协商一致解除劳动合同的；<br>（三）用人单位依照本法第四十条规定解除劳动合同的；<br>（四）用人单位依照本法第四十一条第一款规定解除劳动合同的；<br>（五）除用人单位维持或者提高劳动合同约定条件续订劳动合同，劳动者不同意续订的情形外，依照本法第四十四条第一项规定终止固定期限劳动合同的；<br>（六）依照本法第四十四条第四项、第五项规定终止劳动合同的；<br>（七）法律、行政法规规定的其他情形。</p><p><br></p><p>第四十七条：　经济补偿按劳动者在本单位工作的年限，每满一年支付一个月工资的标准向劳动者支付。六个月以上不满一年的，按一年计算；不满六个月的，向劳动者支付半个月工资的经济补偿。</p><p>劳动者月工资高于用人单位所在直辖市、设区的市级人民政府公布的本地区上年度职工月平均工资三倍的，向其支付经济补偿的标准按职工月平均工资三倍的数额支付，向其支付经济补偿的年限最高不超过十二年。<br>本条所称月工资是指劳动者在劳动合同解除或者终止前十二个月的平均工资。</p><p><br></p><p>第四十八条：　用人单位违反本法规定解除或者终止劳动合同，劳动者要求继续履行劳动合同的，用人单位应当继续履行；劳动者不要求继续履行劳动合同或者劳动合同已经不能继续履行的，用人单位应当依照本法第八十七条规定支付赔偿金。</p><p><br></p><p>第四十九条：　国家采取措施，建立健全劳动者社会保险关系跨地区转移接续制度。</p><p><br></p><p>第五十条：　用人单位应当在解除或者终止劳动合同时出具解除或者终止劳动合同的证明，并在十五日内为劳动者办理档案和社会保险关系转移手续。</p><p>劳动者应当按照双方约定，办理工作交接。用人单位依照本法有关规定应当向劳动者支付经济补偿的，在办结工作交接时支付。<br>用人单位对已经解除或者终止的劳动合同的文本，至少保存二年备查。</p><p><br><br><br><br><br></p><h1 id="特别规定"><a href="#特别规定" class="headerlink" title="特别规定"></a>特别规定</h1><h2 id="第一节-集体合同"><a href="#第一节-集体合同" class="headerlink" title="第一节　集体合同"></a>第一节　集体合同</h2><p>第五十一条：　企业职工一方与用人单位通过平等协商，可以就劳动报酬、工作时间、休息休假、劳动安全卫生、保险福利等事项订立集体合同。集体合同草案应当提交职工代表大会或者全体职工讨论通过。</p><p>集体合同由工会代表企业职工一方与用人单位订立；尚未建立工会的用人单位，由上级工会指导劳动者推举的代表与用人单位订立。</p><p><br></p><p>第五十二条：　企业职工一方与用人单位可以订立劳动安全卫生、女职工权益保护、工资调整机制等专项集体合同。</p><p><br></p><p>第五十三条：　在县级以下区域内，建筑业、采矿业、餐饮服务业等行业可以由工会与企业方面代表订立行业性集体合同，或者订立区域性集体合同。</p><p><br></p><p>第五十四条：　集体合同订立后，应当报送劳动行政部门；劳动行政部门自收到集体合同文本之日起十五日内未提出异议的，集体合同即行生效。</p><p>依法订立的集体合同对用人单位和劳动者具有约束力。行业性、区域性集体合同对当地本行业、本区域的用人单位和劳动者具有约束力。</p><p><br></p><p>第五十五条：　集体合同中劳动报酬和劳动条件等标准不得低于当地人民政府规定的最低标准；用人单位与劳动者订立的劳动合同中劳动报酬和劳动条件等标准不得低于集体合同规定的标准。</p><p><br></p><p>第五十六条：　用人单位违反集体合同，侵犯职工劳动权益的，工会可以依法要求用人单位承担责任；因履行集体合同发生争议，经协商解决不成的，工会可以依法申请仲裁、提起诉讼。</p><p><br><br><br></p><p>##　第二节　劳务派遣</p><p>第五十七条：　经营劳务派遣业务应当具备下列条件：<br>（一）注册资本不得少于人民币二百万元；<br>（二）有与开展业务相适应的固定的经营场所和设施；<br>（三）有符合法律、行政法规规定的劳务派遣管理制度；<br>（四）法律、行政法规规定的其他条件。</p><p>经营劳务派遣业务，应当向劳动行政部门依法申请行政许可；经许可的，依法办理相应的公司登记。未经许可，任何单位和个人不得经营劳务派遣业务。</p><p><br></p><p>第五十八条：　劳务派遣单位是本法所称用人单位，应当履行用人单位对劳动者的义务。劳务派遣单位与被派遣劳动者订立的劳动合同，除应当载明本法第十七条规定的事项外，还应当载明被派遣劳动者的用工单位以及派遣期限、工作岗位等情况。</p><p>劳务派遣单位应当与被派遣劳动者订立二年以上的固定期限劳动合同，按月支付劳动报酬；被派遣劳动者在无工作期间，劳务派遣单位应当按照所在地人民政府规定的最低工资标准，向其按月支付报酬。</p><p><br></p><p>第五十九条：　劳务派遣单位派遣劳动者应当与接受以劳务派遣形式用工的单位（以下称用工单位）订立劳务派遣协议。劳务派遣协议应当约定派遣岗位和人员数量、派遣期限、劳动报酬和社会保险费的数额与支付方式以及违反协议的责任。</p><p>用工单位应当根据工作岗位的实际需要与劳务派遣单位确定派遣期限，不得将连续用工期限分割订立数个短期劳务派遣协议。</p><p><br></p><p>第六十条：　劳务派遣单位应当将劳务派遣协议的内容告知被派遣劳动者。</p><p>劳务派遣单位不得克扣用工单位按照劳务派遣协议支付给被派遣劳动者的劳动报酬。<br>劳务派遣单位和用工单位不得向被派遣劳动者收取费用。</p><p><br></p><p>第六十一条：　劳务派遣单位跨地区派遣劳动者的，被派遣劳动者享有的劳动报酬和劳动条件，按照用工单位所在地的标准执行。</p><p><br></p><p>第六十二条　用工单位应当履行下列义务：<br>（一）执行国家劳动标准，提供相应的劳动条件和劳动保护；<br>（二）告知被派遣劳动者的工作要求和劳动报酬；<br>（三）支付加班费、绩效奖金，提供与工作岗位相关的福利待遇；<br>（四）对在岗被派遣劳动者进行工作岗位所必需的培训；<br>（五）连续用工的，实行正常的工资调整机制。</p><p>用工单位不得将被派遣劳动者再派遣到其他用人单位。</p><p><br></p><p>第六十三条：　被派遣劳动者享有与用工单位的劳动者同工同酬的权利。用工单位应当按照同工同酬原则，对被派遣劳动者与本单位同类岗位的劳动者实行相同的劳动报酬分配办法。用工单位无同类岗位劳动者的，参照用工单位所在地相同或者相近岗位劳动者的劳动报酬确定。</p><p>劳务派遣单位与被派遣劳动者订立的劳动合同和与用工单位订立的劳务派遣协议，载明或者约定的向被派遣劳动者支付的劳动报酬应当符合前款规定。</p><p><br></p><p>第六十四条：　被派遣劳动者有权在劳务派遣单位或者用工单位依法参加或者组织工会，维护自身的合法权益。</p><p><br></p><p>第六十五条：　被派遣劳动者可以依照本法第三十六条、第三十八条的规定与劳务派遣单位解除劳动合同。</p><p>被派遣劳动者有本法第三十九条和第四十条第一项、第二项规定情形的，用工单位可以将劳动者退回劳务派遣单位，劳务派遣单位依照本法有关规定，可以与劳动者解除劳动合同。</p><p><br></p><p>第六十六条：　劳动合同用工是我国的企业基本用工形式。劳务派遣用工是补充形式，只能在临时性、辅助性或者替代性的工作岗位上实施。</p><p>前款规定的临时性工作岗位是指存续时间不超过六个月的岗位；辅助性工作岗位是指为主营业务岗位提供服务的非主营业务岗位；替代性工作岗位是指用工单位的劳动者因脱产学习、休假等原因无法工作的一定期间内，可以由其他劳动者替代工作的岗位。<br>用工单位应当严格控制劳务派遣用工数量，不得超过其用工总量的一定比例，具体比例由国务院劳动行政部门规定。</p><p><br></p><p>第六十七条：　用人单位不得设立劳务派遣单位向本单位或者所属单位派遣劳动者。</p><p><br><br><br></p><p>##　第三节　非全日制用工</p><p>第六十八条:　非全日制用工，是指以小时计酬为主，劳动者在同一用人单位一般平均每日工作时间不超过四小时，每周工作时间累计不超过二十四小时的用工形式。</p><p><br></p><p>第六十九条:　非全日制用工双方当事人可以订立口头协议。</p><p>从事非全日制用工的劳动者可以与一个或者一个以上用人单位订立劳动合同；但是，后订立的劳动合同不得影响先订立的劳动合同的履行。</p><p><br></p><p>第七十条:　非全日制用工双方当事人不得约定试用期。</p><p><br></p><p>第七十一条:　非全日制用工双方当事人任何一方都可以随时通知对方终止用工。终止用工，用人单位不向劳动者支付经济补偿。</p><p><br></p><p>第七十二条:　非全日制用工小时计酬标准不得低于用人单位所在地人民政府规定的最低小时工资标准。</p><p>非全日制用工劳动报酬结算支付周期最长不得超过十五日。</p><p><br><br><br><br><br></p><p>#　监督检查</p><p>第七十三条：　国务院劳动行政部门负责全国劳动合同制度实施的监督管理。</p><p>县级以上地方人民政府劳动行政部门负责本行政区域内劳动合同制度实施的监督管理。<br>县级以上各级人民政府劳动行政部门在劳动合同制度实施的监督管理工作中，应当听取工会、企业方面代表以及有关行业主管部门的意见。</p><p><br></p><p>第七十四条：　县级以上地方人民政府劳动行政部门依法对下列实施劳动合同制度的情况进行监督检查：<br>（一）用人单位制定直接涉及劳动者切身利益的规章制度及其执行的情况；<br>（二）用人单位与劳动者订立和解除劳动合同的情况；<br>（三）劳务派遣单位和用工单位遵守劳务派遣有关规定的情况；<br>（四）用人单位遵守国家关于劳动者工作时间和休息休假规定的情况；<br>（五）用人单位支付劳动合同约定的劳动报酬和执行最低工资标准的情况；<br>（六）用人单位参加各项社会保险和缴纳社会保险费的情况；<br>（七）法律、法规规定的其他劳动监察事项。</p><p><br></p><p>第七十五条：　县级以上地方人民政府劳动行政部门实施监督检查时，有权查阅与劳动合同、集体合同有关的材料，有权对劳动场所进行实地检查，用人单位和劳动者都应当如实提供有关情况和材料。</p><p>劳动行政部门的工作人员进行监督检查，应当出示证件，依法行使职权，文明执法。</p><p><br></p><p>第七十六条：　县级以上人民政府建设、卫生、安全生产监督管理等有关主管部门在各自职责范围内，对用人单位执行劳动合同制度的情况进行监督管理。</p><p><br></p><p>第七十七条：　劳动者合法权益受到侵害的，有权要求有关部门依法处理，或者依法申请仲裁、提起诉讼。</p><p><br></p><p>第七十八条：　工会依法维护劳动者的合法权益，对用人单位履行劳动合同、集体合同的情况进行监督。用人单位违反劳动法律、法规和劳动合同、集体合同的，工会有权提出意见或者要求纠正；劳动者申请仲裁、提起诉讼的，工会依法给予支持和帮助。</p><p><br></p><p>第七十九条：　任何组织或者个人对违反本法的行为都有权举报，县级以上人民政府劳动行政部门应当及时核实、处理，并对举报有功人员给予奖励。</p><p><br><br><br><br><br></p><p>#　法律责任</p><p>第八十条：　用人单位直接涉及劳动者切身利益的规章制度违反法律、法规规定的，由劳动行政部门责令改正，给予警告；给劳动者造成损害的，应当承担赔偿责任。</p><p><br></p><p>第八十一条：　用人单位提供的劳动合同文本未载明本法规定的劳动合同必备条款或者用人单位未将劳动合同文本交付劳动者的，由劳动行政部门责令改正；给劳动者造成损害的，应当承担赔偿责任。</p><p><br></p><p>第八十二条：　用人单位自用工之日起超过一个月不满一年未与劳动者订立书面劳动合同的，应当向劳动者每月支付二倍的工资。</p><p>用人单位违反本法规定不与劳动者订立无固定期限劳动合同的，自应当订立无固定期限劳动合同之日起向劳动者每月支付二倍的工资。</p><p><br></p><p>第八十三条：　用人单位违反本法规定与劳动者约定试用期的，由劳动行政部门责令改正；违法约定的试用期已经履行的，由用人单位以劳动者试用期满月工资为标准，按已经履行的超过法定试用期的期间向劳动者支付赔偿金。</p><p><br></p><p>第八十四条：　用人单位违反本法规定，扣押劳动者居民身份证等证件的，由劳动行政部门责令限期退还劳动者本人，并依照有关法律规定给予处罚。</p><p>用人单位违反本法规定，以担保或者其他名义向劳动者收取财物的，由劳动行政部门责令限期退还劳动者本人，并以每人五百元以上二千元以下的标准处以罚款；给劳动者造成损害的，应当承担赔偿责任。<br>劳动者依法解除或者终止劳动合同，用人单位扣押劳动者档案或者其他物品的，依照前款规定处罚。</p><p><br></p><p>第八十五条：　用人单位有下列情形之一的，由劳动行政部门责令限期支付劳动报酬、加班费或者经济补偿；劳动报酬低于当地最低工资标准的，应当支付其差额部分；逾期不支付的，责令用人单位按应付金额百分之五十以上百分之一百以下的标准向劳动者加付赔偿金：<br>（一）未按照劳动合同的约定或者国家规定及时足额支付劳动者劳动报酬的；<br>（二）低于当地最低工资标准支付劳动者工资的；<br>（三）安排加班不支付加班费的；<br>（四）解除或者终止劳动合同，未依照本法规定向劳动者支付经济补偿的。</p><p><br></p><p>第八十六条：　劳动合同依照本法第二十六条规定被确认无效，给对方造成损害的，有过错的一方应当承担赔偿责任。</p><p><br></p><p>第八十七条：　用人单位违反本法规定解除或者终止劳动合同的，应当依照本法第四十七条规定的经济补偿标准的二倍向劳动者支付赔偿金。</p><p><br></p><p>第八十八条：　用人单位有下列情形之一的，依法给予行政处罚；构成犯罪的，依法追究刑事责任；给劳动者造成损害的，应当承担赔偿责任：<br>（一）以暴力、威胁或者非法限制人身自由的手段强迫劳动的；<br>（二）违章指挥或者强令冒险作业危及劳动者人身安全的；<br>（三）侮辱、体罚、殴打、非法搜查或者拘禁劳动者的；<br>（四）劳动条件恶劣、环境污染严重，给劳动者身心健康造成严重损害的。</p><p><br></p><p>第八十九条：　用人单位违反本法规定未向劳动者出具解除或者终止劳动合同的书面证明，由劳动行政部门责令改正；给劳动者造成损害的，应当承担赔偿责任。</p><p><br></p><p>第九十条：　劳动者违反本法规定解除劳动合同，或者违反劳动合同中约定的保密义务或者竞业限制，给用人单位造成损失的，应当承担赔偿责任。</p><p><br></p><p>第九十一条：　用人单位招用与其他用人单位尚未解除或者终止劳动合同的劳动者，给其他用人单位造成损失的，应当承担连带赔偿责任。</p><p><br></p><p>第九十二条：　违反本法规定，未经许可，擅自经营劳务派遣业务的，由劳动行政部门责令停止违法行为，没收违法所得，并处违法所得一倍以上五倍以下的罚款；没有违法所得的，可以处五万元以下的罚款。</p><p>劳务派遣单位、用工单位违反本法有关劳务派遣规定的，由劳动行政部门责令限期改正；逾期不改正的，以每人五千元以上一万元以下的标准处以罚款，对劳务派遣单位，吊销其劳务派遣业务经营许可证。用工单位给被派遣劳动者造成损害的，劳务派遣单位与用工单位承担连带赔偿责任。</p><p><br></p><p>第九十三条：　对不具备合法经营资格的用人单位的违法犯罪行为，依法追究法律责任；劳动者已经付出劳动的，该单位或者其出资人应当依照本法有关规定向劳动者支付劳动报酬、经济补偿、赔偿金；给劳动者造成损害的，应当承担赔偿责任。</p><p><br></p><p>第九十四条：　个人承包经营违反本法规定招用劳动者，给劳动者造成损害的，发包的组织与个人承包经营者承担连带赔偿责任。</p><p><br></p><p>第九十五条：　劳动行政部门和其他有关主管部门及其工作人员玩忽职守、不履行法定职责，或者违法行使职权，给劳动者或者用人单位造成损害的，应当承担赔偿责任；对直接负责的主管人员和其他直接责任人员，依法给予行政处分；构成犯罪的，依法追究刑事责任。</p><p><br><br><br><br><br></p><p>#　附则</p><p>第九十六条：　事业单位与实行聘用制的工作人员订立、履行、变更、解除或者终止劳动合同，法律、行政法规或者国务院另有规定的，依照其规定；未作规定的，依照本法有关规定执行。</p><p><br></p><p>第九十七条：　本法施行前已依法订立且在本法施行之日存续的劳动合同，继续履行；本法第十四条第二款第三项规定连续订立固定期限劳动合同的次数，自本法施行后续订固定期限劳动合同时开始计算。</p><p>本法施行前已建立劳动关系，尚未订立书面劳动合同的，应当自本法施行之日起一个月内订立。<br>本法施行之日存续的劳动合同在本法施行后解除或者终止，依照本法第四十六条规定应当支付经济补偿的，经济补偿年限自本法施行之日起计算；本法施行前按照当时有关规定，用人单位应当向劳动者支付经济补偿的，按照当时有关规定执行。</p><p><br></p><p>第九十八条：　本法自2008年1月1日起施行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全国人民代表大会常务委员会关于修改《中华人民共和国劳动合同法》的决定（附2012年修正本）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;网址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中华人民共和国中央人民政府： &lt;a href=&quot;http://www.gov.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.gov.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中国政府法制信息网： &lt;a href=&quot;http://www.chinalaw.gov.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.chinalaw.gov.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;百度百科&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="法律" scheme="https://zhang21.github.io/categories/%E6%B3%95%E5%BE%8B/"/>
    
    
      <category term="劳动合同法" scheme="https://zhang21.github.io/tags/%E5%8A%B3%E5%8A%A8%E5%90%88%E5%90%8C%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>文体格式</title>
    <link href="https://zhang21.github.io/2018/10/12/%E6%96%87%E4%BD%93%E6%A0%BC%E5%BC%8F/"/>
    <id>https://zhang21.github.io/2018/10/12/文体格式/</id>
    <published>2018-10-12T09:44:22.000Z</published>
    <updated>2018-10-12T09:44:22.922Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Grafana</title>
    <link href="https://zhang21.github.io/2018/09/13/Grafana/"/>
    <id>https://zhang21.github.io/2018/09/13/Grafana/</id>
    <published>2018-09-13T08:01:12.000Z</published>
    <updated>2018-09-14T08:58:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>Grafana 文档: <a href="http://docs.grafana.org/" target="_blank" rel="noopener">http://docs.grafana.org/</a></li><li>GitHub: <a href="https://github.com/grafana/" target="_blank" rel="noopener">https://github.com/grafana/</a></li></ul><p>环境：</p><ul><li>CentOS7x86_64</li><li>Grafana v5.2</li></ul><p><br></p><a id="more"></a><p><br><br><br></p><hr><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grafana 文档: &lt;a href=&quot;http://docs.grafana.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://docs.grafana.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/grafana/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/grafana/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7x86_64&lt;/li&gt;
&lt;li&gt;Grafana v5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Grafana" scheme="https://zhang21.github.io/tags/Grafana/"/>
    
      <category term="Monitoring" scheme="https://zhang21.github.io/tags/Monitoring/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus</title>
    <link href="https://zhang21.github.io/2018/09/11/Prometheus/"/>
    <id>https://zhang21.github.io/2018/09/11/Prometheus/</id>
    <published>2018-09-11T03:01:12.000Z</published>
    <updated>2018-09-14T09:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>Prometheus文档： <a href="https://prometheus.io/docs" target="_blank" rel="noopener">https://prometheus.io/docs</a></li><li>GitHub: <a href="https://github.com/prometheus/" target="_blank" rel="noopener">https://github.com/prometheus/</a></li></ul><p>环境：</p><ul><li>CentOS7x86_64</li><li>Prometheus v2.3</li></ul><p><br></p><a id="more"></a><p><img src="/images/Prometheus/prometheus.jpg" alt="Prometheus"></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Introduction</p><p><br></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><br></p><h3 id="Prometheus是什么"><a href="#Prometheus是什么" class="headerlink" title="Prometheus是什么"></a>Prometheus是什么</h3><p>What is Prometheus?</p><p>Prometheus是一个最初在SoundCloud上构建的<strong>开源监控系统和报警工具包</strong>。现在是一个独立的开源项目，由社区进行维护。</p><p><br></p><p><strong>功能(Features)</strong><br>Prometheus的主要特点：</p><ul><li>具有由度量名称(metric name)和键值对(key-value)标识的时间序列(time series)数据的多维(multi-dimensional)数据模型</li><li>灵活的查询语言，以利用此维度</li><li>不依赖分布式存储(distributed storage)，单个服务器节点是自治的(autonomous)</li><li>时间序列集合通过HTPP的<code>pull model</code>发生</li><li><code>push</code>时间序列通过中间网关(intermediary gateway)的支持</li><li>通过服务发现或静态配置来发现目标</li><li>图形和仪表盘支持多种模式</li></ul><p><br></p><p><strong>组件(Components)</strong><br>Prometheus系统由多个组件构成，其中某些组件是可选的：</p><ul><li>主要的<strong>Prometheus Server</strong>，用于存储时间序列数据</li><li><strong>client libraries</strong>，用于检测应用程序代码</li><li><strong>push gateway</strong>，用于支持短暂的(short-lived)工作</li><li><strong>exporters</strong>，用于服务的特殊目的</li><li><strong>alertmanager</strong>，用于处理报警</li><li>各种支持工具</li></ul><p><br></p><p><strong>架构(Architecture)</strong><br>Prometheus的体系结构和系统组件图：</p><p><img src="/images/Prometheus/architecture.png" alt="Prometheus架构图"></p><p><br><br><br></p><h3 id="什么时候适合"><a href="#什么时候适合" class="headerlink" title="什么时候适合"></a>什么时候适合</h3><p>When does it fit?</p><p>Prometheus适用于记录任何纯数字时间序列。它既适用于以机器为中心的监控，也适用于高度动态的面向服务架构的监控。在微服务的世界中，它对多维数据收集和查询的支持是一种特殊的优势。<br>Prometheus专为提高可靠性而设计，是你在断电期间可以快速诊断问题的系统。每个Prometheus Server都是独立的，不依赖于网络存储或其它远程服务。当基础架构其它部分损坏时，你仍可以依赖它，并且你不需要设置大量的基础架构来使用它。</p><p><br><br><br></p><h3 id="什么时候不适合"><a href="#什么时候不适合" class="headerlink" title="什么时候不适合"></a>什么时候不适合</h3><p>When does it not fit?</p><p>Prometheus重视可靠性。即使在系统故障情况下，你也可以随时查看有关系统的可用统计信息。如果你需要100%的准确度，Prometheus不是一个好的选择，你可能需要使用其它系统。</p><p><br><br><br><br><br></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>步骤：</p><ul><li>下载</li><li>配置</li><li>运行</li><li>使用表达式浏览器</li><li>使用图形接口</li><li>监控其它目标</li></ul><p><br><br><br><br><br></p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>GLOSSARY</p><ul><li><p><strong>Alert</strong><br>是Prometheus正在开火的警报规则的结果。警报从Prometheus发送到AlterManger。</p></li><li><p><strong>Alertmanager</strong><br>接收警报，将它们聚合成组，删除重复数据，应用静音、限制，然后发送电子邮件等通知。</p></li><li><p><strong>Bridge</strong><br>是一个从Client Library中获取样本并将它们暴露给 non-Prometheus 监控系统的组件。例如，Python、Java、Go…客户端可将指标导出到Graphite。</p></li><li><p><strong>Client library</strong><br>是某种语言的库(Go, Java, Python…)，可以直接检测代码，编写自定义收集器以从其它系统中收集指标并将指标公开给Prometheus。</p></li><li><p><strong>Collector</strong><br>是表示一组度量标准的 exporter 的一部分。如果它是直接检测的一部分，则可以是单个度量，如果是从另一个系统提取度量，则可以是许多度量。</p></li><li><p><strong>Direct instrumentation</strong><br>作为源代码程序的一部分内联添加的检测。</p></li><li><p><strong>Endpoint</strong></p></li><li><p><strong>Exporter</strong><br>是一个公开Prometheus指标的程序，通常将 non-prometheus 格式的指标转换为 Prometheus 支持的格式。</p></li><li><p><strong>Instance</strong><br>唯一标识作业中目标的标签</p></li><li><p><strong>Job</strong><br>具有相同目的的目标集合</p></li><li><p><strong>Notification</strong><br>代表一组多个警报</p></li><li><p><strong>Promdash</strong><br>原生Prometheus仪表盘构建器。它已被弃用，并被 Grafana 取代</p></li><li><p><strong>Prometheus</strong><br>通常指的是Prometheus System的核心程序，也可指整个监控系统。</p></li><li><p><strong>PromQL</strong><br>Prometheus Query Language</p></li><li><p><strong>Pushgateway</strong><br>持续从批量作业中最新推出的指标</p></li><li><p><strong>Remote Read</strong><br>允许从其它系统透明读取时间序列作为查询的一部分</p></li><li><p><strong>Remote Read Adapter</strong><br>并非所有系统都支持远程读取。远程读取适配器便是用于此。</p></li><li><p><strong>Remote Read Endpoint</strong><br>Prometheus进行远程读取时的对象</p></li><li><p><strong>Remote Write</strong><br>允许动态地将采集的样本发送到其它系统</p></li><li><p><strong>Remote Write Adapter</strong></p></li><li><p><strong>Remote Write Endpoint</strong></p></li><li><p><strong>Sample</strong><br>时间序列中某个时间点的单个值，Prometheus中，每个样本都包含一个<code>float64</code>和<code>ms</code>精度的时间戳。</p></li><li><p><strong>Silence</strong><br>防止报警</p></li><li><p><strong>Target</strong><br>抓取对象的定义</p></li></ul><p><br><br><br><br><br></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>faq: <a href="https://prometheus.io/docs/introduction/faq/" target="_blank" rel="noopener">https://prometheus.io/docs/introduction/faq/</a></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>CONCEPTS</p><p><br></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Data model</p><p>Prometheus从根本上将所有数据存储为<strong>时间序列(time series)</strong>: 属于同一指标和同一标记维度的带时间戳值的流。除了存储时间序列，Prometheus还可以临时生成时间序列作为查询的结果。</p><p><br><br><br></p><h3 id="指标名称和标签"><a href="#指标名称和标签" class="headerlink" title="指标名称和标签"></a>指标名称和标签</h3><p>Metric names and labels</p><p>每个时间序列都是有<strong>指标名称(metric name)</strong>和一组键值对(也称为<strong>标签(label)</strong>)来唯一标识。</p><p>指标名称： 可能包含ASCII字母，下划线，冒号。它必须匹配正则: <code>[a-zA-Z_:][a-zA-Z0-9_:]*</code>。<br>标签启用Prometheus的维度数据模型：</p><p><br><br><br><br><br></p><h2 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h2><p>metric types</p><p><br><br><br><br><br></p><h2 id="工作和实例"><a href="#工作和实例" class="headerlink" title="工作和实例"></a>工作和实例</h2><p>Job and Instance</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h1><p><br></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>GETTING STARTED</p><p>本节介绍如何安装，配置，使用Prometheus的简单例子。你将在本地安装和运行Prometheus，将其配置为自我填充和示例应用程序，然后使用查询，规则和图表来使用收集的序列数据。</p><p><br></p><p><strong>下载</strong></p><p>下载地址: <a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xvfz prometheus-*.tar.gz</span><br><span class="line"></span><br><span class="line">cd prometheus-*</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置和监控</strong><br>Prometheus通过在目标上通过HTTP endPoints来抓取指标，来收集受监控目标的指标。由于Prometheus也以相同的方式公开自身数据，它也可以获取和监测自身的健康状况。<br>虽然Prometheus Server只收集有关自身的数据在实践中不是很有用，但它是一个很好的示例。如<code>prometheus.yml</code>示例配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">15</span><span class="string">s</span> <span class="comment"># By default, scrape targets every 15 seconds.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Attach these labels to any time series or alerts when communicating with</span></span><br><span class="line">  <span class="comment"># external systems (federation, remote storage, Alertmanager).</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Override the global default and scrape targets from this job every 5 seconds.</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>启动</strong><br>启动后，可访问9090端口查看状态。可访问<code>localhost:9090/metrics</code>查看有关自身的相关指标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd prometheus-2.3.2.linux-amd64</span><br><span class="line">./prometheus --config.file=&quot;prometheus.yml&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/Prometheus/9090.png" alt="9090"></p><p><br></p><p><strong>使用表达式浏览器</strong><br>让我们看一下Prometheus收集的一些数据。要使用Prometheus的内建表达式浏览器(expression browser)，请跳转到<code>http://localhost:9090/graph</code>并选择<code>Graph -&gt; Console</code>，在其中输入表达式。<br>绘制表达式图形同样在此操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#表达式</span><br><span class="line">prometheus_target_interval_length_seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#表达式</span><br><span class="line">prometheus_target_interval_length_seconds&#123;quantile=&quot;0.99&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#计算返回的时间序列数</span><br><span class="line">count(prometheus_target_interval_length_seconds)</span><br></pre></td></tr></table></figure><p><img src="/images/Prometheus/expression01.png" alt="表达式结果"></p><p><img src="/images/Prometheus/expression02.png" alt="表达式图形"></p><p><br></p><p><strong>启动简单的目标</strong><br>启动一些示例目标让Prometheus获取。<br>确保已安装Go表一起并设置了正常的GO PATH。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mkdir ./sample &amp;&amp; cd sample</span><br><span class="line"></span><br><span class="line">git clone https://github.com/prometheus/client_golang.git</span><br><span class="line">cd client_golang/examples/random</span><br><span class="line">go get -d</span><br><span class="line">go build</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Start 3 example targets in separate terminals:</span><br><span class="line">./random -listen-address=:9091</span><br><span class="line">./random -listen-address=:9092</span><br><span class="line">./random -listen-address=:9093</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#访问</span><br><span class="line">http://localhost:9091/metrices</span><br><span class="line">http://localhost:9092/metrices</span><br><span class="line">http://localhost:9093/metrices</span><br></pre></td></tr></table></figure><p><br></p><p><strong>监控示例目标</strong><br>现在需要配置Prometheus来抓取目标。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span>       <span class="string">'example-random'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Override the global default and scrape targets from this job every 5 seconds.</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['localhost:8080',</span> <span class="string">'localhost:8081'</span><span class="string">]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          group:</span> <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['localhost:8082']</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          group:</span> <span class="string">'canary'</span></span><br></pre></td></tr></table></figure><p>重启Prometheus，检测<code>rpc_durations_seconds</code> metric来验证。</p><p><br></p><p><strong>配置规则</strong><br>Configure rules for aggregating scraped data into new time series</p><p>聚合超过数千个时间序列的查询在计算<code>ad-hoc</code>时会变慢。为了提高效率，Prometheus允许你通过配置的规则将预录表达式预先记录到全新的持久时间序列中。</p><p>创建规则文件<code>prometheus.rules.yml</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#job_service:rpc_durations_seconds_count:avg_rate5m</span><br><span class="line">groups:</span><br><span class="line">- name: example</span><br><span class="line">  rules:</span><br><span class="line">  - record: job_service:rpc_durations_seconds_count:avg_rate5m</span><br><span class="line">    expr: avg(rate(rpc_durations_seconds_count[5m])) by (job, service)</span><br></pre></td></tr></table></figure></p><p>要是Prometheus选择此新规则，需要修改Prometheus配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # By default, scrape targets every 15 seconds.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds.</span><br><span class="line"></span><br><span class="line">  # Attach these extra labels to all timeseries collected by this Prometheus instance.</span><br><span class="line">  external_labels:</span><br><span class="line">    monitor: &apos;codelab-monitor&apos;</span><br><span class="line"></span><br><span class="line">rule_files:</span><br><span class="line">  - &apos;prometheus.rules.yml&apos;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line"></span><br><span class="line">    # Override the global default and scrape targets from this job every 5 seconds.</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9090&apos;]</span><br><span class="line"></span><br><span class="line">  - job_name:       &apos;example-random&apos;</span><br><span class="line"></span><br><span class="line">    # Override the global default and scrape targets from this job every 5 seconds.</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:8091&apos;, &apos;localhost:8092&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          group: &apos;production&apos;</span><br><span class="line"></span><br><span class="line">      - targets: [&apos;localhost:9093&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          group: &apos;canary&apos;</span><br></pre></td></tr></table></figure><p>重启Prometheus，使用<code>job_service:rpc_durations_seconds_count:avg_rate5m</code> metric验证。</p><p><br><br><br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><br></p><h3 id="使用预编译的二进制文件"><a href="#使用预编译的二进制文件" class="headerlink" title="使用预编译的二进制文件"></a>使用预编译的二进制文件</h3><p><br><br><br></p><h3 id="使用源码"><a href="#使用源码" class="headerlink" title="使用源码"></a>使用源码</h3><p><br><br><br></p><h3 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h3><p>所有的Prometheus服务都可以作为 Docker image 来使用。<br>Prometheus image 使用 volume 来存储实际的指标。对于生产部署，强烈建议使用 Data Volume Container 来升级数据的管理。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#bind-mount</span><br><span class="line">docker run -p 9090:9090 -v /tmp/prometheus.yml:/etc/prometheus.yml  prom/prometheus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#volume</span><br><span class="line">docker run -p 9090:9090 -v /promethe-data  prom/prometheus  --config.file=/prometheus-data/prometheus.yml</span><br></pre></td></tr></table></figure><p><br></p><p><strong>自定义镜像</strong></p><p>Dockerfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM prom/prometheus</span><br><span class="line">ADD prometheus.yml /etc/prometheus/</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><p>构建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-prometheus .</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="使用配置管理系统"><a href="#使用配置管理系统" class="headerlink" title="使用配置管理系统"></a>使用配置管理系统</h3><ul><li>Ansible</li><li>Chef</li><li>Puppet</li><li>SaltStack</li></ul><p><br><br><br><br><br></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Configuration</p><p>Prometheus通过命令行标志(flag)和配置文件进行配置。使用<code>./prometheus -h</code>查看所有命令行标志。<br>Prometheus可在运行时重新加载配置。</p><p><br></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>configuration file: <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener">https://prometheus.io/docs/prometheus/latest/configuration/configuration/</a></p><p>使用<code>--config.file</code>标志指定配置文件。配置文件使用<code>YAML</code>格式。</p><p>一个配置文件栗子:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment"># How frequently to scrape targets by default.</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 1m ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # How long until a scrape request times out.</span></span><br><span class="line"><span class="string">  [ scrape_timeout: &lt;duration&gt; | default = 10s ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # How frequently to evaluate rules.</span></span><br><span class="line"><span class="string">  [ evaluation_interval: &lt;duration&gt; | default = 1m ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # The labels to add to any time series or alerts when communicating with</span></span><br><span class="line"><span class="string">  # external systems (federation, remote storage, Alertmanager).</span></span><br><span class="line"><span class="string"></span><span class="attr">  external_labels:</span></span><br><span class="line">    <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rule files specifies a list of globs. Rules and alerts are read from</span></span><br><span class="line"><span class="comment"># all matching files.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;filepath_glob&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A list of scrape configurations.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;scrape_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alerting specifies settings related to the Alertmanager.</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alert_relabel_configs:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;alertmanager_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings related to the remote write feature.</span></span><br><span class="line"><span class="attr">remote_write:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_write&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings related to the remote read feature.</span></span><br><span class="line"><span class="attr">remote_read:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_read&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p><br></p><p>各个配置项：</p><ul><li><code>scrape_config</code></li><li><code>tls_config</code></li><li><code>azure_sd_config</code></li><li><code>consul_sd_config</code></li><li><code>dns_sd_config</code></li><li><code>ec2_sd_config</code></li><li><code>openstack_sd_config</code></li><li><code>file_sd_config</code></li><li><code>gce_sd_config</code></li><li><code>kubernetes_sd_config</code></li><li><code>marathon_sd_config</code></li><li><code>nerve_sd_config</code></li><li><code>serverset_sd_config</code></li><li><code>triton_sd_config</code></li><li><code>static_config</code></li><li><code>relabel_config</code></li><li><code>metric_relabel_configs</code></li><li><code>alert_relabel_configs</code></li><li><code>alertmanager_config</code></li><li><code>remote_write</code></li><li><code>remote_read</code></li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><p>Visualization</p><p><br></p><h2 id="表达式浏览器"><a href="#表达式浏览器" class="headerlink" title="表达式浏览器"></a>表达式浏览器</h2><p>Expression browser</p><p>表达其浏览器在 Prometheus Server 的 <code>/graph</code> 处。<br>对于图形，请使用 Grafana 或 Console template。</p><p><br><br><br><br><br></p><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p>Grafana: <a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></p><p>Grafana，美丽的分析和监控的开放平台，时序分析的开源那软件。</p><p>Grafana 支持查询 Prometheus。如下是一个Grafana仪表盘，用于查询Prometheus的数据：</p><p><img src="/images/Prometheus/grafana_prometheus.png" alt=""></p><p><br></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>完整的安装说明，请查看Grafana Docs。</p><p><br></p><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><p><strong>RPM</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#sudo yum install &lt;rpm package url&gt;</span><br><span class="line">sudo yum install https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.1.4-1.x86_64.rpm</span><br></pre></td></tr></table></figure><p><strong>repo</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packagecloud.io/grafana/stable/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packagecloud.io/gpg.key https://grafanarel.s3.amazonaws.com/RPM-GPG-KEY-grafana</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo yum install -y grafana</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">systemctl start grafana-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#命令行工具</span><br><span class="line">grafana-cli</span><br></pre></td></tr></table></figure><p><strong>包详情</strong></p><ul><li>Installs binary to <code>/usr/sbin/grafana-server</code></li><li>Copies init.d script to <code>/etc/init.d/grafana-server</code></li><li>Installs default file (environment vars) to <code>/etc/sysconfig/grafana-server</code></li><li>Copies configuration file to <code>/etc/grafana/grafana.ini</code></li><li>Installs systemd service (if systemd is available) name <code>grafana-server.service</code></li><li>The default configuration uses a log file at <code>/var/log/grafana/grafana.log</code></li><li>The default configuration specifies an sqlite3 database at <code>/var/lib/grafana/grafana.db</code></li></ul><p><br></p><p><strong>二进制tar文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Download and unpack Grafana from binary tar (adjust version as appropriate).</span><br><span class="line">curl -L -O https://grafanarel.s3.amazonaws.com/builds/grafana-2.5.0.linux-x64.tar.gz</span><br><span class="line">tar zxf grafana-2.5.0.linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"># Start Grafana.</span><br><span class="line">cd grafana-2.5.0/</span><br><span class="line">./bin/grafana-server web</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#基础栗子</span><br><span class="line">docker run -d -p 3000:3000 grafana/grafana</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置化</span><br><span class="line">docker run \</span><br><span class="line">  -d \</span><br><span class="line">  -p 3000:3000 \</span><br><span class="line">  --name=grafana \</span><br><span class="line">  -e &quot;GF_SERVER_ROOT_URL=http://grafana.server.name&quot; \</span><br><span class="line">  -e &quot;GF_SECURITY_ADMIN_PASSWORD=secret&quot; \</span><br><span class="line">  grafana/grafana:version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#默认环境变量值</span><br><span class="line">GF_PATHS_CONFIG/etc/grafana/grafana.ini</span><br><span class="line">GF_PATHS_DATA/var/lib/grafana</span><br><span class="line">GF_PATHS_HOME/usr/share/grafana</span><br><span class="line">GF_PATHS_LOGS/var/log/grafana</span><br><span class="line">GF_PATHS_PLUGINS/var/lib/grafana/plugins</span><br><span class="line">GF_PATHS_PROVISIONING/etc/grafana/provisioning</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>默认情况下，访问<code>http://localhost:3000</code>来访问Grafana。默认登录的用户名和密码： <code>admin/admin</code>。</p><p><img src="/images/Prometheus/grafana_login.png" alt="Grafana"></p><p><br></p><p><strong>创建Prometheus数据源</strong></p><p><img src="/images/Prometheus/add_prometheus_datasource.png" alt=""></p><p><br></p><p><strong>创建Prometheus图表</strong></p><p><br><br><br><br><br></p><h2 id="Console-template"><a href="#Console-template" class="headerlink" title="Console template"></a>Console template</h2><p>控制台模板允许使用Go templating language创建任意控制台。这些都是从Prometheus Server提供的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus文档： &lt;a href=&quot;https://prometheus.io/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://prometheus.io/docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/prometheus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/prometheus/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7x86_64&lt;/li&gt;
&lt;li&gt;Prometheus v2.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Monitoring" scheme="https://zhang21.github.io/tags/Monitoring/"/>
    
      <category term="Prometheus" scheme="https://zhang21.github.io/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Fluentd</title>
    <link href="https://zhang21.github.io/2018/07/19/Fluentd/"/>
    <id>https://zhang21.github.io/2018/07/19/Fluentd/</id>
    <published>2018-07-19T08:38:33.000Z</published>
    <updated>2018-07-31T01:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>Fluentd文档: <a href="https://docs.fluentd.org/v1.0/articles/quickstart" target="_blank" rel="noopener">https://docs.fluentd.org/v1.0/articles/quickstart</a></li></ul><p><br></p><p>环境：</p><ul><li>CentOS7x86_64</li><li>Fluentd v1.0</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p><img src="/images/Fluentd/fluentd.png" alt="Fluentd"></p><p><br></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>getting started</p><p>Fluentd是一个完全免费且开源的日志收集器，支持多种事件类型。<br>Fluentd将日志视为JSON(一种机器可读格式)，它主要用C语言编写，扩展部分使用Ruby。</p><p><br><br><br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于我使用CentOS7，所以查看了此平台文档。</p><p><br></p><h3 id="安装前"><a href="#安装前" class="headerlink" title="安装前"></a>安装前</h3><p>在安装Fluentd前，请配置环境，避免一些问题。</p><ul><li>设置ntp</li><li>增加<code>max file descriptors</code></li><li>优化网络内核参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#ntp</span><br><span class="line">/sbin/ntpdate 1.cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#文件描述符</span><br><span class="line">ulimit -n</span><br><span class="line">#1024</span><br><span class="line">#LimitNOFILE=65536</span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line">root    soft    nofile  65536</span><br><span class="line">root    hard    nofile  65536</span><br><span class="line">*       soft    nofile  65536</span><br><span class="line">*       hard    nofile  65536</span><br><span class="line">#之后重启机器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#优化网络内核参数</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">net.core.somaxconn = 1024</span><br><span class="line">net.core.netdev_max_backlog = 5000</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.ipv4.tcp_wmem = 4096 12582912 16777216</span><br><span class="line">net.ipv4.tcp_rmem = 4096 12582912 16777216</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8096</span><br><span class="line">net.ipv4.tcp_slow_start_after_idle = 0</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.ip_local_port_range = 10240 65535</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p><br></p><h3 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此脚本会自动安装td.repo，并安装td-agent</span></span><br><span class="line"><span class="comment">#non-root</span></span><br><span class="line">curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent3.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#你也可以将脚本内容复制下来执行</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="启动daemon"><a href="#启动daemon" class="headerlink" title="启动daemon"></a>启动daemon</h3><p>自动支持systemd:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/lib/systemd/system/td-agent.service</span><br><span class="line"></span><br><span class="line">#默认配置文件</span><br><span class="line">ls /etc/td-agent/td-agent.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start|stop|status td-agent</span><br></pre></td></tr></table></figure><p><br></p><h3 id="通过HTTP发送示例日志"><a href="#通过HTTP发送示例日志" class="headerlink" title="通过HTTP发送示例日志"></a>通过HTTP发送示例日志</h3><p>我们可通过POST发送日志栗子。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d <span class="string">'json=&#123;"json": "message"&#125;'</span> http://localhost:8888/debug.txt</span><br></pre></td></tr></table></figure><p><br></p><h3 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h3><ul><li>系统管理<ul><li>配置文件</li><li>日志</li></ul></li><li>连接到其它服务<ul><li>如何工作</li><li>插件管理</li></ul></li><li>配置语法<ul><li>数据源</li><li>输出点</li></ul></li></ul><p><br></p><p><strong>系统管理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#配置文件</span><br><span class="line">ls /etc/td-agent/td-agent.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#日志</span><br><span class="line">ls /var/log/td-agent/td-agent.log</span><br></pre></td></tr></table></figure><p><br></p><p><strong>连接到其它服务</strong><br>在Fluentd中，数据 input/output 最重要的部分由插件来管理。每个插件都知道如何与外部端点连接，并负责管理传输数据流的通道。<br>插件以某种约定命名。如<code>in_kafka</code>, <code>out_mongo</code>。</p><p>配置栗子：<br><code>in_forward</code>插件作为输入源，<code>out_file</code>插件作为输出点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">  port 9999</span><br><span class="line">&lt;/source&gt;</span><br><span class="line">&lt;match app.**&gt;</span><br><span class="line">  @type file</span><br><span class="line">  path /var/log/app/data.log</span><br><span class="line">  compress gzip</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure><p>插件管理：<br>Fluentd将插件作为Ruby gems来管理。所以你需要使用<code>td-agent-gem</code>来管理Fluentd插件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装s3插件</span></span><br><span class="line"><span class="comment">#查看插件: &lt;https://www.fluentd.org/plugins&gt;</span></span><br><span class="line">sudo /usr/sbin/td-agent-gem install fluent-plugin-s3</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置语法</strong><br>配置文件由许多块组成，每个块包含一组特定数据端点设置。</p><p>数据源:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type syslog</span><br><span class="line">  port 5140</span><br><span class="line">  tag system</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">#@type确定要使用的插件，你就不需要再去加上前缀in</span><br></pre></td></tr></table></figure><p>输出点：<br>添加一个数据流输出端点，你需要定义一个<code>&lt;match&gt;</code>块。<br>你可在过滤器汇表达式中使用通配符<code>*</code>来匹配多个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;match debug.log&gt;</span><br><span class="line">  @type syslog</span><br><span class="line">  prot 5140</span><br><span class="line">  tag system</span><br><span class="line">&lt;/source&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Fluentd事件的生命"><a href="#Fluentd事件的生命" class="headerlink" title="Fluentd事件的生命"></a>Fluentd事件的生命</h2><p>Life of a Fluentd event</p><p><br></p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>使用<code>in_http</code>和<code>out_stdout</code>插件作为示例，来描述事件周期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  port 8888</span><br><span class="line">  bind 0.0.0.0</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match test.cycle&gt;</span><br><span class="line">  @type stdout</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -i -X POST -d &apos;json=&#123;&apos;action&apos;: &apos;login&apos;, &apos;user&apos;: 2&#125;&apos; http://localhost:8888/test.cycle</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><br></p><h3 id="事件结构"><a href="#事件结构" class="headerlink" title="事件结构"></a>事件结构</h3><p>Event structure</p><p>Fluentd事件结构：</p><ul><li>tag: 事件来自何处</li><li>time: 事件发生事件(原子时间)</li><li>record: log内容(json)</li></ul><p><br><br><br></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>Processing Events</p><ul><li>Filters</li><li>Labels</li><li>Buffers</li></ul><p><br></p><p>定义好配置时，路由引擎对输入数据应用配置规则。</p><p><strong>Filters</strong><br>过滤的目的在于传递(pass)或拒绝(reject)事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#栗子过滤 排除任何logout操作</span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  port 8888</span><br><span class="line">  bind 0.0.0.0</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter test.cycle&gt;</span><br><span class="line">  @type grep</span><br><span class="line">  &lt;exclude&gt;</span><br><span class="line">    key action</span><br><span class="line">    pattern ^logout$</span><br><span class="line">  &lt;/exclude&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;match test.cycle&gt;</span><br><span class="line">  @type stdout</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -i -X POST -d &apos;json=&#123;&quot;action&quot;:&quot;login&quot;,&quot;user&quot;:2&#125;&apos; http://localhost:8888/test.cycle</span><br><span class="line">curl -i -X POST -d &apos;json=&#123;&quot;action&quot;:&quot;logout&quot;,&quot;user&quot;:2&#125;&apos; http://localhost:8888/test.cycle</span><br><span class="line"></span><br><span class="line">#查看fluentd日志的过滤情况</span><br><span class="line">vim /var/log/td-agent/td-agent.log</span><br></pre></td></tr></table></figure><p>Fluentd允许继承许多过滤器，同时考虑到配置文件的增长会让读者觉得有点复杂。所以添加了一个Label功能，用于解决这个问题。</p><p><br></p><p><strong>Labels</strong><br>Label这个功能，用于解决配置文件的复杂性，并允许定义不遵循从上到下的新路由部分，而是像链接引用一样。</p><p>栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  bind 0.0.0.0</span><br><span class="line">  port 8888</span><br><span class="line">  @label @STAGING</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter test.cycle&gt;</span><br><span class="line">  @type grep</span><br><span class="line">  &lt;exclude&gt;</span><br><span class="line">    key action</span><br><span class="line">    pattern ^login$</span><br><span class="line">  &lt;/exclude&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;label @STAGING&gt;</span><br><span class="line">  &lt;filter test.cycle&gt;</span><br><span class="line">    @type grep</span><br><span class="line">    &lt;exclude&gt;</span><br><span class="line">      key action</span><br><span class="line">      pattern ^logout$</span><br><span class="line">    &lt;/exclude&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">  &lt;match test.cycle&gt;</span><br><span class="line">    @type stdout</span><br><span class="line">  &lt;/match&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Buffers</strong><br>前面的栗子中，我们使用<code>non-buffered stdout</code>。但是在生产环境中，会使用<code>outputs in buffered</code>。<br>缓冲模式下的输出插件首先将接收到的事件存储到缓冲区，并通过满足刷新条件将缓冲区写入目标。</p><p>缓冲区对可靠性和吞吐量都很重要。</p><p><br></p><p><strong>结论</strong><br>一旦事件由源上的Fluentd引擎所上报，就可逐步处理或引用Label内部处理，任何事件都有可能被过滤。新的路由引擎旨在提供更多灵活性，并在输出前使处理更容易。</p><p><br><br><br></p><hr><p><br></p><h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><p>Use cases</p><h2 id="集中式应用程序日志"><a href="#集中式应用程序日志" class="headerlink" title="集中式应用程序日志"></a>集中式应用程序日志</h2><p>Centralized App Logging</p><p><br></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><br></p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p><br></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><br></p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><br></p><h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><p><br></p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><br></p><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><p><br><br><br></p><h2 id="监控服务日志"><a href="#监控服务日志" class="headerlink" title="监控服务日志"></a>监控服务日志</h2><p>Monitoring Service Logs</p><h3 id="FEK"><a href="#FEK" class="headerlink" title="FEK"></a>FEK</h3><p>Splunk是一个检索日志的好工具，但它的高成本对很对团队来说便不可取了。我们通过结合三个开源项目: Elasticsearch， Kiban， Fluentd来免费替代Splunk。</p><p><img src="/images/Fluentd/fluentd-elasticsearch-kibana.png" alt="FEK"></p><p><br></p><p><strong>请自行安装Elasticsearch和Kibana。</strong></p><p>安装Fluentd的Elasticsearch插件:<br>fluent-plugin-elasticsearch: <a href="https://github.com/uken/fluent-plugin-elasticsearch" target="_blank" rel="noopener">https://github.com/uken/fluent-plugin-elasticsearch</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">td-agent-gem install fluent-plugin-elasticsearch --no-document</span><br><span class="line"></span><br><span class="line">td-agent-gem list</span><br></pre></td></tr></table></figure><p><br></p><p>修改配置文件: <code>/etc/td-agent/td-agent.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># get logs from syslog</span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type syslog</span><br><span class="line">  port 42185</span><br><span class="line">  tag syslog</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line"># get logs from fluent-logger, fluent-cat or other fluentd instances</span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match syslog.**&gt;</span><br><span class="line">  @type elasticsearch</span><br><span class="line">  logstash_format true</span><br><span class="line">  &lt;buffer&gt;</span><br><span class="line">    flush_interval 10s # for testing</span><br><span class="line">  &lt;/buffer&gt;</span><br><span class="line">&lt;/match&gt;</span><br><span class="line">#fluent-plugin-elasticsearch插件附带一个logstash_format选项</span><br></pre></td></tr></table></figure><p>Elasticsearch用户和密码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;match my.logs&gt;</span><br><span class="line">  @type elasticsearch</span><br><span class="line">  host localhost</span><br><span class="line">  port 9200</span><br><span class="line">  user elastic</span><br><span class="line">  password xxxxx</span><br><span class="line">  index_name fluentd</span><br><span class="line">  type_name fluentd</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line">#hosts host1:port1,host2:port2...</span><br></pre></td></tr></table></figure><p>具体详情请参考GitHub的README。</p><p><br></p><p><strong>配置rsyslogd:</strong><br>将日志从rsyslogd转发到Fluentd。修改<code>/etc/syslog.conf</code>并重启rsyslogd。这将本地syslog转发到Fluentd，而Fluentd会将日志转发给Elasticsearch。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*.* @127.0.0.1:42185</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemcrl restart rsyslog</span><br></pre></td></tr></table></figure><p><br></p><p>存储和查询事件日志：<br>访问Kibana配置索引<code>logstash-*</code>进行查看日志。</p><p>使用<code>logger</code>命令手动发送日志到Elasticsearch。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#logger - a shell command interface to the syslog(3) system log module</span><br><span class="line">logger -t test foobar</span><br><span class="line"></span><br><span class="line">#之后可在kibana索引中查看到ident为test, message为foobar的两个文档</span><br></pre></td></tr></table></figure></p><p><br><br><br></p><h3 id="邮件报警"><a href="#邮件报警" class="headerlink" title="邮件报警"></a>邮件报警</h3><p>Splunk-like Grep-and-Alert-Email System Using Fluentd</p><p>Splunk的一个主要功能便是能够满足日志在某些条件时发送报警电子邮件。<br>我们将使用Fluentd构建一个类似的系统。例如，当检测到Apache日志中的<code>5xx</code> HTTP status code时编发送报警邮件。</p><p><br></p><p><strong>安装依赖</strong><br>安装两个插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">td-agent-gem install fluent-plugin-grepcounter</span><br><span class="line">td-agent-gem install fluent-plugin-mail</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/etc/td-agent/td-agent.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type tail</span><br><span class="line">  path /var/log/apache2/access.log</span><br><span class="line">  &lt;parse&gt;</span><br><span class="line">    @type apache2</span><br><span class="line">  &lt;/parse&gt;</span><br><span class="line">  tag apache.access</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match apache.access&gt;</span><br><span class="line">  @type grepcounter</span><br><span class="line">  count_interval 3  # The time window for counting errors (in secs)</span><br><span class="line">  input_key code    # The field to apply the regular expression</span><br><span class="line">  regexp ^5\d\d$    # The regular expression to be applied</span><br><span class="line">  threshold 1       # The minimum number of erros to trigger an alert</span><br><span class="line">  add_tag_prefix error_5xx  # Generate tags like &quot;error_5xx.apache.access&quot;</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line">&lt;match error_5xx.apache.access&gt;</span><br><span class="line">  @type copy</span><br><span class="line">  &lt;store&gt;</span><br><span class="line">    @type stdout  # Print to stdout for debugging</span><br><span class="line">  &lt;/store&gt;</span><br><span class="line">  &lt;store&gt;</span><br><span class="line">    @type mail</span><br><span class="line">    host smtp.gmail.com        # Change this to your SMTP server host</span><br><span class="line">    port 587                   # Normally 25/587/465 are used for submission</span><br><span class="line">    user USERNAME              # Use your username to log in</span><br><span class="line">    password PASSWORD          # Use your login password</span><br><span class="line">    enable_starttls_auto true  # Use this option to enable STARTTLS</span><br><span class="line">    from example@gmail.com     # Set the sender address</span><br><span class="line">    to alert@example.com       # Set the recipient address</span><br><span class="line">    subject &apos;HTTP SERVER ERROR&apos;</span><br><span class="line">    message Total 5xx error count: %s\n\nPlease check your Apache webserver ASAP</span><br><span class="line">    message_out_keys count     # Use the &quot;count&quot; field to replace &quot;%s&quot; above</span><br><span class="line">  &lt;/store&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure><p>请确认：</p><ul><li>smtp配置正确</li><li><code>td-agent daemon</code>具有适当权限访问log</li></ul><p><br></p><p><strong>测试配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart td-agent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果安装了standalone的Fluentd</span></span><br><span class="line">fluentd -c alert-email.conf</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>Data Analytics</p><p><br></p><h3 id="将数据收集到Hadoop"><a href="#将数据收集到Hadoop" class="headerlink" title="将数据收集到Hadoop"></a>将数据收集到Hadoop</h3><p>Fluentd + HDFS: Instant Big Data Collection</p><p><strong>背景</strong><br>Fluentd专门用于解决大数据日志收集问题。</p><p>HDFS(Hadoop)是一个存储和处理大量数据的选择，但直到最近它才拥有了除Java库之外的可访问的API。<br>本节将展示如何使用Fluentd从HTTP接收数据流并传输到HDFS。</p><p><br></p><p><strong>架构</strong></p><p><img src="/images/Fluentd/http-to-hdfs.png" alt="HDFS"></p><p><br></p><p><strong>安装</strong><br>本节配置一个单节点用于示例。请在同一节点安装如下软件：</p><ul><li>Fluentd</li><li>WebHDFS Output Plug</li><li>HDFS</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装插件</span></span><br><span class="line">sudo td-agent-gem install fluent-plugin-webhdfs</span><br><span class="line">td-agent-gem list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装Hadoop</span></span><br><span class="line"><span class="comment">#http://hadoop.apache.org/releases.html</span></span><br><span class="line"><span class="comment">#在官网上下载对应二进制</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Fluentd配置</strong></p><p>http input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  port 8888</span><br><span class="line">&lt;/source&gt;</span><br></pre></td></tr></table></figure><p>webHDFS output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;match hdfs.*.*&gt;</span><br><span class="line">  @type webhdfs</span><br><span class="line">  host namenode.your.cluster.local</span><br><span class="line">  port 50070</span><br><span class="line">  path &quot;/log/%Y%m%d_%H/access.log.#&#123;Socket.gethostname&#125;&quot;</span><br><span class="line">  &lt;buffer&gt;</span><br><span class="line">    flush_interval 10s</span><br><span class="line">  &lt;/buffer&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>HDFS 配置</strong></p><p><code>hdfs-site.xml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.support.append&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.support.broken.append&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d &apos;json=&#123;&quot;action&quot;:&quot;login&quot;,&quot;user&quot;:2&#125;&apos; \</span><br><span class="line">  http://localhost:8888/hdfs.access.test</span><br><span class="line">kill -USR1 `cat /var/run/td-agent/td-agent.pid`</span><br><span class="line"></span><br><span class="line">sudo -u hdfs hadoop fs -lsr /log/</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="连接到数据存储"><a href="#连接到数据存储" class="headerlink" title="连接到数据存储"></a>连接到数据存储</h2><p>Connecting to Data Storages</p><p><br></p><h3 id="将Apache-logs存储到MongoDB"><a href="#将Apache-logs存储到MongoDB" class="headerlink" title="将Apache logs存储到MongoDB"></a>将Apache logs存储到MongoDB</h3><p>本节使用Fluentd MongoDB Output plugin实时聚合半结构化日志。</p><p><br></p><p><strong>安装插件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo td-agent-gem install fluent-plugin-mongo</span><br><span class="line">td-agent list</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置</strong></p><p>tail input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type tail</span><br><span class="line">  path /var/log/apache2/access_log</span><br><span class="line">  pos_file /var/log/td-agent/apache2.access_log.pos</span><br><span class="line">  &lt;parse&gt;</span><br><span class="line">    @type apache2</span><br><span class="line">  &lt;/parse&gt;</span><br><span class="line">  tag mongo.apache.access</span><br><span class="line">&lt;/source&gt;</span><br></pre></td></tr></table></figure><p>mongodb output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;match mongo.**&gt;</span><br><span class="line">  # plugin type</span><br><span class="line">  @type mongo</span><br><span class="line"></span><br><span class="line">  # mongodb db + collection</span><br><span class="line">  database apache</span><br><span class="line">  collection access</span><br><span class="line"></span><br><span class="line">  # mongodb host + port</span><br><span class="line">  host localhost</span><br><span class="line">  port 27017</span><br><span class="line"></span><br><span class="line">  # interval</span><br><span class="line">  &lt;buffer&gt;</span><br><span class="line">    flush_interval 10s</span><br><span class="line">  &lt;/buffer&gt;</span><br><span class="line"></span><br><span class="line">  # make sure to include the time key</span><br><span class="line">  &lt;inject&gt;</span><br><span class="line">    time_key time</span><br><span class="line">  &lt;/inject&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="流处理"><a href="#流处理" class="headerlink" title="流处理"></a>流处理</h2><p>Stream Processing</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fluentd文档: &lt;a href=&quot;https://docs.fluentd.org/v1.0/articles/quickstart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.fluentd.org/v1.0/articles/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7x86_64&lt;/li&gt;
&lt;li&gt;Fluentd v1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Fluentd" scheme="https://zhang21.github.io/tags/Fluentd/"/>
    
      <category term="日志处理" scheme="https://zhang21.github.io/tags/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="https://zhang21.github.io/2018/06/26/Kubernetes/"/>
    <id>https://zhang21.github.io/2018/06/26/Kubernetes/</id>
    <published>2018-06-26T03:38:33.000Z</published>
    <updated>2018-09-26T06:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>Kubernetes: <a href="https://zh.wikipedia.org/wiki/Kubernetes" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Kubernetes</a></li><li>官方文档: <a href="https://kubernetes.io/docs/" target="_blank" rel="noopener">https://kubernetes.io/docs/</a></li><li>中文文档: <a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/</a></li><li>GitHub: <a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes</a></li><li>etcd: <a href="https://coreos.com/etcd/docs/latest/" target="_blank" rel="noopener">https://coreos.com/etcd/docs/latest/</a></li><li>flannel: <a href="https://coreos.com/flannel/docs/latest/" target="_blank" rel="noopener">https://coreos.com/flannel/docs/latest/</a></li></ul><p>环境：</p><ul><li>CentOS7x86_64</li><li>Kubernetes v1.11</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><p><img src="/images/K8s/Kubernetes_logo.png" alt="Kubernetes"></p><p><br></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>此章节提供了有关安装k8s和配置k8s集群的相关说明。</p><p><br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>有几种方式创建k8s集群：</p><ul><li>minikube(自动部署)</li><li>kubeadm(自动部署)</li><li>软件包(建议初学者使用此方式)</li></ul><p><br></p><h3 id="使用minikube创建集群"><a href="#使用minikube创建集群" class="headerlink" title="使用minikube创建集群"></a>使用minikube创建集群</h3><p>Using Minikube to Create a Cluster</p><p>目标：</p><ul><li>了解k8s集群是什么</li><li>了解Minikube是什么</li><li>启动一个k8s集群</li></ul><p><br></p><p><strong>k8s 集群</strong><br>k8s协调一个高度可用的计算机集群，它们连接起来作为一个单元工作 。<br>k8s以更有效的方式自动化跨集群分发和调整应用程序容器。</p><p>k8s集群包含两种类型的资源：</p><ul><li>Master</li><li>Nodes</li></ul><p>Master负责管理集群。它协调集群中的所有活动。<br>Node是工作主机。每个节点有一个Kubelet的Agent，负责管理节点并与Master(API)通信。此外，节点上还应有处理容器操作的工具(如Docker)。生成环境的k8s集群至少有三个节点。<br>用户可通过k8s API直接与集群进行交互。</p><p><br></p><p>使用Minikube部署集群: <a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">https://github.com/kubernetes/minikube</a><br>Minikube是一个工具，它运行一个单节点的k8s集群供开发用户使用。</p><p><strong>Linux平台</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &amp;&amp; \</span><br><span class="line">chmod +x minikube &amp;&amp; \</span><br><span class="line">sudo mv minikube /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装kubectl</span></span><br><span class="line">curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl &amp;&amp; \</span><br><span class="line">chmod +x kubectl &amp;&amp; \</span><br><span class="line">sudo mv kubectl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">minikube version</span><br><span class="line">minikube start</span><br><span class="line"></span><br><span class="line">kubectl version</span><br><span class="line">kubectl cluster-info</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="kubeadm创建集群"><a href="#kubeadm创建集群" class="headerlink" title="kubeadm创建集群"></a>kubeadm创建集群</h3><h4 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h4><p>本节介绍了如何安装<strong>kubeadm</strong>工具。</p><p><strong>安装前</strong></p><ul><li>2GB RAM+</li><li>2 cpus+</li><li>集群主机网络互通</li><li>node上唯一的主机名，MAC，UUID</li><li>开放特定端口(防火墙)</li><li>Swap disabled。必须关闭swap才能使kubelet正常工作。</li></ul><p><br></p><p><strong>验证MAC或UUID对每个node都是唯一的</strong></p><ul><li><code>ifconfig -a</code>获取MAC</li><li><code>cat /sys/class/dmi/id/product_uuid</code>查看UUID</li></ul><p><br></p><p><strong>检查网络适配器</strong></p><p>如果k8s组件不可达，请手动添加路由。</p><p><br></p><p><strong>检查需要的端口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#master</span><br><span class="line">Protocol    DirectionPort RangePurposeUsed By</span><br><span class="line">TCP    Inbound6443*Kubernetes API serverAll</span><br><span class="line">TCP    Inbound2379-2380etcd server client APIkube-apiserver, etcd</span><br><span class="line">TCP    Inbound10250Kubelet APISelf, Control plane</span><br><span class="line">TCP    Inbound10251kube-schedulerSelf</span><br><span class="line">TCP   Inbound10252kube-controller-managerSelf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#worker</span><br><span class="line">ProtocolDirectionPort RangePurposeUsed By</span><br><span class="line">TCPInbound10250Kubelet APISelf, Control plane</span><br><span class="line">TCPInbound30000-32767NodePort Services**All</span><br></pre></td></tr></table></figure><p><br></p><p><strong>安装docker</strong><br>使用阿里云镜像。<br><code>kubeadm v1.11.1</code>最高支持<code>Docker 17.03</code>，请注意。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">mv docker-ce.repo /etc/yum.repos.d</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce.x84_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于kubeadm不支持最新版的docker，所以需要安装指定版本</span></span><br><span class="line">yum list docker-ce --showduplicates</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce-17.03.2.ce</span><br></pre></td></tr></table></figure><p><br></p><p><strong>安装kubeadm, kubelet, kubectl</strong></p><ul><li>kubeadm: 引导集群</li><li>kubelet: k8s agent</li><li>kubectl: command line</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建repo</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#国外镜像凉凉，所以换用阿里云</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">"s/^SELINUX=permissive/SELINUX=disabled/g"</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭swap，否则kubelet无法正常使用</span></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment">#将/etc/fstab中swap注释掉</span></span><br><span class="line">sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y epel-release ebtables ethtool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#系统配置，开启网络桥接</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class="line">sysctl --system</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#各主机时区，时间同步</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment">#crontab -e</span></span><br><span class="line"><span class="comment">#ntp</span></span><br><span class="line">*/30 * * * * /sbin/ntpdate 1.cn.pool.ntp.org &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#hosts</span></span><br><span class="line">&lt;master-ip&gt; master</span><br><span class="line">&lt;node-ip&gt; node</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置cgroup driver</strong><br>使用docker时，kubelet会将其驱动设置与Docker相同。kubeadm会自动检查kubelet的cgroup驱动，并在运行时将其设置到<code>/var/lib/kubelet/kubeadm-flags.env</code>文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep -i <span class="string">'cgroup driver'</span></span><br><span class="line">Cgroup Driver: systemd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#此文件是kubeadm init生成的</span></span><br><span class="line">cat /var/lib/kubelet/kubeadm-flags.env</span><br><span class="line">KUBELET_KUBEADM_ARGS=--cgroup-driver=systemd --cni-bin-dir=/opt/cni/bin --cni-conf-dir=/etc/cni/net.d --network-plugin=cni</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果此文件未配置此信息，我们手动添加</span></span><br><span class="line"><span class="built_in">cd</span> /etc/systemd/system/kubelet.service.d</span><br><span class="line">vim 10-kubeadm.conf</span><br><span class="line">KUBELET_KUBEADM_ARGS=--cgroup-driver=systemd --cni-bin-dir=/opt/cni/bin --cni-conf-dir=/etc/cni/net.d --network-plugin=cni</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="拉取k8s-gcr-io镜像"><a href="#拉取k8s-gcr-io镜像" class="headerlink" title="拉取k8s.gcr.io镜像"></a>拉取k8s.gcr.io镜像</h4><p>链接: <a href="https://console.cloud.google.com/gcr/images/google-containers/GLOBAL?location=GLOBAL&amp;project=google-containers" target="_blank" rel="noopener">https://console.cloud.google.com/gcr/images/google-containers/GLOBAL?location=GLOBAL&amp;project=google-containers</a></p><p>利用某台能上网的主机，拉取Google上kubeadm需要的<code>k8s.gcr.io/image</code>镜像。</p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">#查看kubeadm需要使用的image</span><br><span class="line">kubeadm config images list</span><br><span class="line"></span><br><span class="line">k8s.gcr.io/kube-apiserver-amd64:v1.11.1</span><br><span class="line">k8s.gcr.io/kube-controller-manager-amd64:v1.11.1</span><br><span class="line">k8s.gcr.io/kube-scheduler-amd64:v1.11.1</span><br><span class="line">k8s.gcr.io/kube-proxy-amd64:v1.11.1</span><br><span class="line">k8s.gcr.io/pause-amd64:3.1</span><br><span class="line">k8s.gcr.io/etcd-amd64:3.2.18</span><br><span class="line">k8s.gcr.io/coredns:1.1.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#最好把所有镜像都拉下来，否则后面初始化的时候容易报错</span><br><span class="line">#在gcr.io上查找镜像</span><br><span class="line">#浏览器访问: &lt;https://console.cloud.google.com/gcr/images/google-containers/GLOBAL?location=GLOBAL&amp;project=google-containers&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#找一台能用的服务器，将这些image拉下来，推到自己的repo上再在kubeadm机器上拉取镜像，之后tag成kubeadm需要的格式</span><br><span class="line">#写一个脚本自动拉取镜像，更名镜像，推送镜像</span><br><span class="line">#我基本上把全部镜像都拉了</span><br><span class="line">vim k8sImages.sh</span><br><span class="line"></span><br><span class="line">images=(</span><br><span class="line">coredns:1.1.3</span><br><span class="line">etcd-amd64:3.1.15</span><br><span class="line">etcd-amd64:3.1.16</span><br><span class="line">etcd-amd64:3.1.17</span><br><span class="line">etcd-amd64:3.2.17</span><br><span class="line">etcd-amd64:3.2.18</span><br><span class="line">flannel-amd64:0.5.5</span><br><span class="line">heapster-amd64:v1.4.0</span><br><span class="line">heapster-amd64:v1.4.1</span><br><span class="line">heapster-amd64:v1.4.2</span><br><span class="line">heapster-amd64:v1.4.3</span><br><span class="line">heapster-amd64:v1.5.0</span><br><span class="line">heapster-amd64:v1.5.1</span><br><span class="line">heapster-amd64:v1.5.2</span><br><span class="line">heapster-amd64:v1.5.3</span><br><span class="line">heapster-amd64:v1.5.4</span><br><span class="line">heapster-grafana-amd64:v4.4.3</span><br><span class="line">heapster-grafana-amd64:v5.0.4</span><br><span class="line">heapster-influxdb-amd64:v1.3.3</span><br><span class="line">heapster-influxdb-amd64:v1.5.2</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.10</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.6</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.7</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.8</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.9</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.10</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.5</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.6</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.7</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.8</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.9</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.10</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.5</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.6</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.7</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.8</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.9</span><br><span class="line">kube-apiserver-amd64:v1.10.5</span><br><span class="line">kube-apiserver-amd64:v1.10.6</span><br><span class="line">kube-apiserver-amd64:v1.11.0</span><br><span class="line">kube-apiserver-amd64:v1.11.1</span><br><span class="line">kube-apiserver-amd64:v1.9.10</span><br><span class="line">kube-controller-manager-amd64:v1.10.5</span><br><span class="line">kube-controller-manager-amd64:v1.10.6</span><br><span class="line">kube-controller-manager-amd64:v1.11.0</span><br><span class="line">kube-controller-manager-amd64:v1.11.1</span><br><span class="line">kube-controller-manager-amd64:v1.9.10</span><br><span class="line">kube-proxy-amd64:v1.10.6</span><br><span class="line">kube-proxy-amd64:v1.11.0</span><br><span class="line">kube-proxy-amd64:v1.11.1</span><br><span class="line">kube-proxy-amd64:v1.9.10</span><br><span class="line">kubernetes-dashboard-amd64:v1.6.2</span><br><span class="line">kubernetes-dashboard-amd64:v1.6.3</span><br><span class="line">kubernetes-dashboard-amd64:v1.7.0</span><br><span class="line">kubernetes-dashboard-amd64:v1.7.1</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.0</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.1</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.2</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.3</span><br><span class="line">kube-scheduler-amd64:v1.10.6</span><br><span class="line">kube-scheduler-amd64:v1.11.0</span><br><span class="line">kube-scheduler-amd64:v1.11.1</span><br><span class="line">kube-scheduler-amd64:v1.9.10</span><br><span class="line">pause-amd64:3.0</span><br><span class="line">pause-amd64:3.1</span><br><span class="line">pause:3.1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#可能pause与pause-amd64是一个，到时只需拉一个，然后tag</span><br><span class="line"></span><br><span class="line">for image in $&#123;images[@]&#125;</span><br><span class="line">do</span><br><span class="line">    docker pull k8s.gcr.io/$&#123;image&#125;</span><br><span class="line">    docker tag k8s.gcr.io/$&#123;image&#125; zhang21/$&#123;image&#125;</span><br><span class="line">    docker image rm k8s.gcr.io/$&#123;image&#125;</span><br><span class="line">    docker push zhang21/$&#123;image&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line">#到我的docker-hub中查看</span><br><span class="line">#https://hub.docker.com/u/zhang21/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#现在在kubeadm集群机器上操作</span><br><span class="line">#还是写一个脚本来拉取镜像，更名镜像，删除镜像</span><br><span class="line">vim k8sImage.sh</span><br><span class="line"></span><br><span class="line">images=(</span><br><span class="line">coredns:1.1.3</span><br><span class="line">etcd-amd64:3.1.15</span><br><span class="line">etcd-amd64:3.1.16</span><br><span class="line">etcd-amd64:3.1.17</span><br><span class="line">etcd-amd64:3.2.17</span><br><span class="line">etcd-amd64:3.2.18</span><br><span class="line">flannel-amd64:0.5.5</span><br><span class="line">heapster-amd64:v1.4.0</span><br><span class="line">heapster-amd64:v1.4.1</span><br><span class="line">heapster-amd64:v1.4.2</span><br><span class="line">heapster-amd64:v1.4.3</span><br><span class="line">heapster-amd64:v1.5.0</span><br><span class="line">heapster-amd64:v1.5.1</span><br><span class="line">heapster-amd64:v1.5.2</span><br><span class="line">heapster-amd64:v1.5.3</span><br><span class="line">heapster-amd64:v1.5.4</span><br><span class="line">heapster-grafana-amd64:v4.4.3</span><br><span class="line">heapster-grafana-amd64:v5.0.4</span><br><span class="line">heapster-influxdb-amd64:v1.3.3</span><br><span class="line">heapster-influxdb-amd64:v1.5.2</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.10</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.6</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.7</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.8</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.9</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.10</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.5</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.6</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.7</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.8</span><br><span class="line">k8s-dns-kube-dns-amd64:1.14.9</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.10</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.5</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.6</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.7</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.8</span><br><span class="line">k8s-dns-sidecar-amd64:1.14.9</span><br><span class="line">kube-apiserver-amd64:v1.10.5</span><br><span class="line">kube-apiserver-amd64:v1.10.6</span><br><span class="line">kube-apiserver-amd64:v1.11.0</span><br><span class="line">kube-apiserver-amd64:v1.11.1</span><br><span class="line">kube-apiserver-amd64:v1.9.10</span><br><span class="line">kube-controller-manager-amd64:v1.10.5</span><br><span class="line">kube-controller-manager-amd64:v1.10.6</span><br><span class="line">kube-controller-manager-amd64:v1.11.0</span><br><span class="line">kube-controller-manager-amd64:v1.11.1</span><br><span class="line">kube-controller-manager-amd64:v1.9.10</span><br><span class="line">kube-proxy-amd64:v1.10.6</span><br><span class="line">kube-proxy-amd64:v1.11.0</span><br><span class="line">kube-proxy-amd64:v1.11.1</span><br><span class="line">kube-proxy-amd64:v1.9.10</span><br><span class="line">kubernetes-dashboard-amd64:v1.6.2</span><br><span class="line">kubernetes-dashboard-amd64:v1.6.3</span><br><span class="line">kubernetes-dashboard-amd64:v1.7.0</span><br><span class="line">kubernetes-dashboard-amd64:v1.7.1</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.0</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.1</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.2</span><br><span class="line">kubernetes-dashboard-amd64:v1.8.3</span><br><span class="line">kube-scheduler-amd64:v1.10.6</span><br><span class="line">kube-scheduler-amd64:v1.11.0</span><br><span class="line">kube-scheduler-amd64:v1.11.1</span><br><span class="line">kube-scheduler-amd64:v1.9.10</span><br><span class="line">pause-amd64:3.0</span><br><span class="line">pause-amd64:3.1</span><br><span class="line">pause:3.1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for image in $&#123;images[@]&#125;</span><br><span class="line">do</span><br><span class="line">    docker pull zhang21/$&#123;image&#125;</span><br><span class="line">    docker tag zhang21/$&#123;image&#125; k8s.gcr.io/$&#123;image&#125;</span><br><span class="line">    docker image rm zhang21/$&#123;image&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="创建单master集群"><a href="#创建单master集群" class="headerlink" title="创建单master集群"></a>创建单master集群</h4><p><code>kubeadm</code>可帮助你引导符合最佳实践的最小化可行的k8s集群。使用<code>kubeadm</code>，你的集群应通过k8s一致性测试。<code>kubeadm</code>还支持其它集群生命周期功能，如升级、降级和管理引导令牌(bootstrap token)。<br><code>kubeadm</code>旨在成为新用户开始尝试k8s的一种简单方法。可使用deb/rpm软件包在系统上轻松安装<code>kubeadm</code>。<br>因为你可在各种类型的机器上安装<code>kubeadm</code>，所以它非常适合于Ansible/Salt等配置系统集成。</p><p><code>kubeadm</code>的简单性意味着它可以服务于各种用例：</p><ul><li>新用户可以从<code>kubeadm</code>开始，第一次尝试k8s</li><li>熟悉k8s的用户可以使用<code>kubeadm</code>启动集群，并测试他们的应用程序</li><li>较大的项目可以包括<code>kubeadm</code>作为更复杂系统中的构件，也可以包括其它安装程序工具</li></ul><p>kubeadm Maturity(成熟度)</p><table><thead><tr><th>Area</th><th>Maturity Level</th></tr></thead><tbody><tr><td>Command line UX</td><td>beta</td></tr><tr><td>Implementation</td><td>beta</td></tr><tr><td>Config file API</td><td>alpha</td></tr><tr><td>Self-hosting</td><td>alpha</td></tr><tr><td>kubeadm alpha subcommands</td><td>alpha</td></tr><tr><td>CoreDNS</td><td>GA</td></tr><tr><td>DynamicKubeletConfig</td><td>alpha</td></tr></tbody></table><p>kubeadm的整体功能状态为Beta，并将很快添加到GA(General Availability)。一些子功能，如自托管(self-hosting)和配置文件API仍在积极开发中。</p><p>k8s版本通常支持九个月，这也适用于kubeadm。</p><table><thead><tr><th>Kubernetes version</th><th>Release month</th><th>End-of-life-month</th></tr></thead><tbody><tr><td>v1.6.x</td><td>March 2017</td><td>December 2017</td></tr><tr><td>v1.7.x</td><td>June 2017</td><td>March 2018</td></tr><tr><td>v1.8.x</td><td>September 2017</td><td>June 2018</td></tr><tr><td>v1.9.x</td><td>December 2017</td><td>September 2018</td></tr><tr><td>v1.10.x</td><td>March 2018</td><td>December 2018</td></tr><tr><td>v1.11.x</td><td>June 2018</td><td>March 2019</td></tr></tbody></table><p><br></p><p><strong>开始前</strong></p><ul><li>一台或多台主机</li><li>2GB+ RAM(每台机器)</li><li>2CPUs+(master)</li><li>网络互通</li></ul><p><br></p><p><strong>目标</strong></p><ul><li>安装 <strong>单master/高可用性</strong> 的k8s集群</li><li>在集群上安装pod-network，以便pod间可互相通信</li></ul><p><br></p><p><strong>组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#Master</span><br><span class="line">etcd</span><br><span class="line">kube-apisever</span><br><span class="line">kube-controller-manager</span><br><span class="line">kube-scheduler</span><br><span class="line">kube-flannel</span><br><span class="line">kube-proxy</span><br><span class="line">kube-dns</span><br><span class="line">kubectl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Node</span><br><span class="line">kube-flannel</span><br><span class="line">kube-proxy</span><br><span class="line">kubectl</span><br></pre></td></tr></table></figure><p><br></p><p><strong>说明</strong></p><ul><li>安装kubeadm<br>如已安装，可升级到最新版。</li></ul><p><br></p><ul><li>初始化集群<br>master主机是控制组件运行的地方，包括<code>etcd</code>, <code>API server</code>…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#1</span><br><span class="line">#选择一个 pod network add-on，并验证是够需要将任何参数传递给kubeadm初始化。你可以使用--pod-network-cidr来指定特定值</span><br><span class="line">#这里使用flannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2，可选</span><br><span class="line">#除非另有说明，否则kubeadm使用与默认网关关联的网络接口来通告master</span><br><span class="line">#使用kubeadm init --apiserver-advertise-address=&lt;ip-addr&gt;来使用不同网络接口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3，可选</span><br><span class="line">#在kubeadm init之前运行kubeadm config images pull以验证与gcr.io的连接</span><br><span class="line">#或kubeadm config images list查看需要的镜像</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#运行</span><br><span class="line">kubeadm init &lt;args&gt;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>更多信息<br><code>kubeadm init</code>首先运行一系列检查，以确保机器 已准备好运行k8s。这些预检查会显示警告并退出错误。然后<code>kubeadm init</code>下载并安装集群控制组件。这可能需要一些时间。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">kubeadm --help</span><br><span class="line">kubeadm init --help</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#k8s底层环境依赖于Docker</span><br><span class="line">#on master</span><br><span class="line">systemctl enable docker kubelet &amp;&amp; systemctl start docker</span><br><span class="line">kubeadm init</span><br><span class="line"></span><br><span class="line">I0806 14:04:54.415853    2191 feature_gate.go:230] feature gates: &amp;&#123;map[]&#125;</span><br><span class="line">[init] using Kubernetes version: v1.11.1</span><br><span class="line">[preflight] running pre-flight checks</span><br><span class="line">        [WARNING Service-Docker]: docker service is not enabled, please run &apos;systemctl enable docker.service&apos;</span><br><span class="line">I0806 14:04:54.433879    2191 kernel_validator.go:81] Validating kernel version</span><br><span class="line">I0806 14:04:54.433934    2191 kernel_validator.go:96] Validating kernel config</span><br><span class="line">[preflight/images] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight/images] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight/images] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR ImagePull]: failed to pull image [k8s.gcr.io/kube-apiserver-amd64:v1.11.1]: exit status 1</span><br><span class="line">        [ERROR ImagePull]: failed to pull image [k8s.gcr.io/kube-controller-manager-amd64:v1.11.1]: exit status 1</span><br><span class="line">        [ERROR ImagePull]: failed to pull image [k8s.gcr.io/kube-scheduler-amd64:v1.11.1]: exit status 1</span><br><span class="line">        [ERROR ImagePull]: failed to pull image [k8s.gcr.io/kube-proxy-amd64:v1.11.1]: exit status 1</span><br><span class="line">        [ERROR ImagePull]: failed to pull image [k8s.gcr.io/pause-amd64:3.1]: exit status 1</span><br><span class="line">        [ERROR ImagePull]: failed to pull image [k8s.gcr.io/etcd-amd64:3.2.18]: exit status 1</span><br><span class="line">        [ERROR ImagePull]: failed to pull image [k8s.gcr.io/coredns:1.1.3]: exit status 1</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#此处错误，由于镜像在Google，国内访问会超时。因此需要额外准备镜像。</span><br><span class="line">#需要做上面一步操作来拉取镜像</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#初始化</span><br><span class="line">#请确保资源满足条件，我就是由于VM内存为1GB而导致初始化失败，找了很久才找到这个错误</span><br><span class="line"></span><br><span class="line">kubeadm init --kubernetes-version=v1.11.1 --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line">[init] using Kubernetes version: v1.11.1</span><br><span class="line">[preflight] running pre-flight checks</span><br><span class="line">I0807 14:47:10.658405   10612 kernel_validator.go:81] Validating kernel version</span><br><span class="line">I0807 14:47:10.658484   10612 kernel_validator.go:96] Validating kernel config</span><br><span class="line">[preflight/images] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight/images] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight/images] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class="line">[kubelet] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[preflight] Activating the kubelet service</span><br><span class="line">[certificates] Generated ca certificate and key.</span><br><span class="line">[certificates] Generated apiserver certificate and key.</span><br><span class="line">[certificates] apiserver serving cert is signed for DNS names [master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.31.49]</span><br><span class="line">[certificates] Generated apiserver-kubelet-client certificate and key.</span><br><span class="line">[certificates] Generated sa key and public key.</span><br><span class="line">[certificates] Generated front-proxy-ca certificate and key.</span><br><span class="line">[certificates] Generated front-proxy-client certificate and key.</span><br><span class="line">[certificates] Generated etcd/ca certificate and key.</span><br><span class="line">[certificates] Generated etcd/server certificate and key.</span><br><span class="line">[certificates] etcd/server serving cert is signed for DNS names [master localhost] and IPs [127.0.0.1 ::1]</span><br><span class="line">[certificates] Generated etcd/peer certificate and key.</span><br><span class="line">[certificates] etcd/peer serving cert is signed for DNS names [master localhost] and IPs [192.168.31.49 127.0.0.1 ::1]</span><br><span class="line">[certificates] Generated etcd/healthcheck-client certificate and key.</span><br><span class="line">[certificates] Generated apiserver-etcd-client certificate and key.</span><br><span class="line">[certificates] valid certificates and keys now exist in &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/admin.conf&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/kubelet.conf&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/controller-manager.conf&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/scheduler.conf&quot;</span><br><span class="line">[controlplane] wrote Static Pod manifest for component kube-apiserver to &quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot;</span><br><span class="line">[controlplane] wrote Static Pod manifest for component kube-controller-manager to &quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot;</span><br><span class="line">[controlplane] wrote Static Pod manifest for component kube-scheduler to &quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot;</span><br><span class="line">[etcd] Wrote Static Pod manifest for a local etcd instance to &quot;/etc/kubernetes/manifests/etcd.yaml&quot;</span><br><span class="line">[init] waiting for the kubelet to boot up the control plane as Static Pods from directory &quot;/etc/kubernetes/manifests&quot; </span><br><span class="line">[init] this might take a minute or longer if the control plane images have to be pulled</span><br><span class="line">[apiclient] All control plane components are healthy after 42.001662 seconds</span><br><span class="line">[uploadconfig] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.11&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[markmaster] Marking the node master as master by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;</span><br><span class="line">[markmaster] Marking the node master as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[patchnode] Uploading the CRI Socket information &quot;/var/run/dockershim.sock&quot; to the Node API object &quot;master&quot; as an annotation</span><br><span class="line">[bootstraptoken] using token: uzdl9x.91uu2p155jczkgb3</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstraptoken] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 192.168.31.49:6443 --token uzdl9x.91uu2p155jczkgb3 --discovery-token-ca-cert-hash sha256:bc5af0f4fbee0d0500c9d6782a279ee172ed45547a006136bfbad93d61ad39c7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#root用户</span><br><span class="line">#一定要记得做此步骤，由于kubeadm设置的apiserver的监听端口为6443，而不是8080，所以执行会报错。</span><br><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line">#之后，可将其写入/etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#安装pod-network</span><br><span class="line">#你必须先安装pod network add-on，才能和pod相互通信。</span><br><span class="line">#必须在应用程序之前部署网络。</span><br><span class="line">#配置flannel</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line">#如果无法访问，可将此文件下载到本地</span><br><span class="line">#kubectl apply -f /etc/kubernetes/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.extensions/kube-flannel-ds created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#token用于master与node之间相互认证，它是加密的。</span><br><span class="line">#使用kubeadm token列出、创建和删除token</span><br><span class="line">#kubeadm token create</span><br><span class="line">#kubeadm token list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#on node</span><br><span class="line">#kubeadm join</span><br><span class="line">#kubeadm join --token xxxxxxxxxxx host:port</span><br><span class="line">systemctl enable kubelet docker &amp;&amp; systemctl start docker</span><br><span class="line">kubeadm join 192.168.31.49:6443 --token uzdl9x.91uu2p155jczkgb3 --discovery-token-ca-cert-hash sha256:bc5af0f4fbee0d0500c9d6782a279ee172ed45547a006136bfbad93d61ad39c7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line">NAME      STATUS    ROLES     AGE       VERSION</span><br><span class="line">master    Ready     master    48m       v1.11.1</span><br><span class="line">node      Ready     &lt;none&gt;    15m       v1.11.1</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get pods --all-namespaces -o wide</span><br><span class="line">NAMESPACE     NAME                             READY     STATUS    RESTARTS   AGE       IP               NODE</span><br><span class="line">kube-system   coredns-78fcdf6894-hn46d         1/1       Running   0          52m       10.244.0.3       master</span><br><span class="line">kube-system   coredns-78fcdf6894-wqxbx         1/1       Running   0          52m       10.244.0.2       master</span><br><span class="line">kube-system   etcd-master                      1/1       Running   0          41m       192.168.31.49    master</span><br><span class="line">kube-system   kube-apiserver-master            1/1       Running   0          41m       192.168.31.49    master</span><br><span class="line">kube-system   kube-controller-manager-master   1/1       Running   0          41m       192.168.31.49    master</span><br><span class="line">kube-system   kube-flannel-ds-7gbvd            1/1       Running   0          41m       192.168.31.49    master</span><br><span class="line">kube-system   kube-flannel-ds-ktkxp            1/1       Running   0          19m       192.168.31.174   node</span><br><span class="line">kube-system   kube-proxy-pw7gz                 1/1       Running   0          19m       192.168.31.174   node</span><br><span class="line">kube-system   kube-proxy-rhrks                 1/1       Running   0          52m       192.168.31.49    master</span><br><span class="line">kube-system   kube-scheduler-master            1/1       Running   0          41m       192.168.31.49    master</span><br></pre></td></tr></table></figure><p><br></p><ul><li>master isolation<br>默认情况下，出于安全原因，你的集群不会在master上调度pod。如果你想在master上调度pod，对于单master的k8s集群，执行如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#从拥有它的节点删除node-role.kubernetes.io/master污染</span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><p><br></p><ul><li>加入节点<br>要向集群添加新节点，请为每台计算机执行以下操作：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#node</span><br><span class="line"></span><br><span class="line">#root/sudo</span><br><span class="line"></span><br><span class="line">#kubeadm init后执行下命令</span><br><span class="line">#kubeadm token list</span><br><span class="line">kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>从master之外控制集群(可选)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp root@&lt;master-ip&gt;:/etc/kubernetes/admin.conf .</span><br><span class="line">kubeclt --kubeconfig ./admin.conf get nodes</span><br></pre></td></tr></table></figure><p><br></p><p><strong>局限性</strong><br>此处创建的集群只有一个master，其上运行一个etcd数据库。这意味着如果master出现故障，你的集群可能会丢失数据。可考虑向k8s添加高可用支持。</p><p><br><br><br></p><h4 id="使用kubeadm配置kubelet"><a href="#使用kubeadm配置kubelet" class="headerlink" title="使用kubeadm配置kubelet"></a>使用kubeadm配置kubelet</h4><p>Configuring each kubelet in your cluster using kubeadm</p><p><code>kubeadm CLI</code>工具的生命周期与<code>Kubernetes Node  Agent(kubelet)</code>相分离，kubelet是运行在k8s集群master/node上的守护进程，它始终在后台运行。而<code>kubeadm CLI</code>工具由用户执行。<br>由于<code>kubelet</code>是一个守护进程，它需要由<code>init system</code>或服务管理器来维护。Redhat7上使用<code>systemd</code>来进行管理。<br>在集群设计的kubelet中，一些kubelet配置细节需相同；而其它方面则需要在每台机器的kubelet上单独配置。你可以手动管理kubelet配置，但kubeadm现在提供了一个<code>MaterConfig API</code>来集中管理kubelet配置。</p><p>注意，本节是利用<code>kubeadm</code>来配置<code>kubelet</code>，而不是手动配置<code>kubelet</code>。</p><p><br></p><p><strong>kubelet配置模式</strong></p><ul><li>将集群级别配置传播到每个kubelet<br>kubelet提供了一个版本化、结构化的API对象，可配置kubelet中大多数参数，并将此配置推送到集群中所有正在运行的kubelet。它被称为  the kubelet’s ComponentConfig(组件配置)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#为kubelet提供默认值。</span><br><span class="line">kubeadm init</span><br><span class="line">kubeadm join</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改服务默认子网</span><br><span class="line">kubeadm init --service-cidr 10.96.0.0/12</span><br><span class="line">#现在服务的VIP由此子网分配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#还需要设置kubelet使用的DNS地址，每个kubelet必须相同</span><br><span class="line">--cluster-dns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#componentConfig</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">clusterDNS:</span><br><span class="line">  - 10.96.0.10</span><br></pre></td></tr></table></figure><p><br></p><ul><li>提供特定实例的配置细节<br>由于不同硬件、操作系统、网络…，一些主机需要特定的kubelet配置。<br>由于我是使用<code>systemd</code>管理kubelet，所以可相应的修改对应的值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#DNS解析文件路径，如果路径错误，则在kubelet配置错误的节点上DNS将解析失败</span><br><span class="line">--resolve-conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#节点API对象，默认被设置为主机名</span><br><span class="line">.metadata.name</span><br><span class="line">#使用如下标志指定节点名来服务默认值</span><br><span class="line">--hostname-overide</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#目前，kubelet无法自动检查CRI runtime的cgroup driver</span><br><span class="line">#指定的驱动请与docker保持一致</span><br><span class="line">--cgroup-driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#根据集群使用的CRI runtime，可能需要为kubelet指定不同的标志</span><br><span class="line">#如，当使用Docker时，你需要指定如 --network-plugin=cni</span><br><span class="line">#但，当使用额外runtime，你需要指定 --container-runtime=remote, --container-runtime-path-endpoint=&lt;path&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#systemd</span><br><span class="line">cd /etc/systemd/system/kubelet.service.d/</span><br><span class="line">vim 10-kubeadm.conf</span><br><span class="line">#修改具体配置项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#EnvFile</span><br><span class="line">vim /var/lib/kubelet/kubeadm-flags.env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用kubeadm配置kubelet</strong><br><code>kubeadm config API</code>的<code>MasterConfiguration</code>类型，嵌入了<code>kubelet&#39;s ComponentConfig</code>到<code>.kubeletConfiguration.baseConfig</code>键下面。任何用户都可编写<code>MasterConfiguration</code>文件使用此配置键为集群中的所有kubelet设置基本配置。</p><ul><li>使用<code>kubeadm init</code>的工作流程(workflow)<br>当调用<code>kubeadm init</code>时，<code>.kubeletConfiguration.baseConfig</code>结构被整理到磁盘<code>/var/lib/kubelet/config.yaml</code>，并且上传到集群中的<code>ConfigMap</code>。ConfigMap名为<code>kubelet-config-1.x</code>，<code>.x</code>表示k8s的次要版本。kubelet配置文件同样被写入<code>/etc/kubernetes/kubelet.conf</code>。此配置文件指向允许kubelet与API server通信的客户端证书。</li></ul><p>为了解决特定实例的配置细节的模式，<code>kubeadm</code>将环境文件写入<code>/var/lib/kubelet/kubeadm-flags.env</code>，它包含了在启动时传递给kubelet的许多标志。它还包含许多动态参数(如cgroup driver)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#标志栗子</span><br><span class="line">KUBELET_KUBEADM_ARGS=&quot;--flag1=value1, --flag2=value2 ...&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在将这两个文件整理到磁盘后，kubeadm会尝试运行如下两个命令</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br><span class="line"></span><br><span class="line">#在上面两个命令执行成功后，初始化会继续</span><br></pre></td></tr></table></figure><p><br></p><ul><li>使用<code>kubeadm join</code>的工作流程<br>当运行<code>kubeadm join</code>命令时，kubeadm使用Bootstrap Token凭据执行TLS bootstrap，它下载<code>kubelet-config-1.x</code> ConfigMap并将其写入<code>/var/lib/kubelet/config.yaml</code>。动态环境文件<code>/vat/lib/kubelet/kubeadm-flags.env</code>的生成方式与<code>kubeadm init</code>完成相同。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#同样，执行这两条命令</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>在kubelet载入新的配置文件后，kubeadm会写入<code>/etc/kubernetes/bootstrap-kubelet.conf</code> KubeConfig文件，该文件包含CA证书和Bootstrap Token。这些由kubelet用于执行TLS Bootstrap并获得唯一的凭证，该凭证存储在<code>/etc/kubernetes/kubelet.conf</code>中。<br>写入文件后，kubelet完成执行TLS Bootstrap.</p><p><br></p><p><strong>systemd的kubelet管理文件</strong><br>此配置文件在RPM包安装的时候写入<code>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code>，它由<code>systemd</code>使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Note: This dropin only works with kubeadm and kubelet v1.11+</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;</span><br><span class="line">Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;</span><br><span class="line"># This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span><br><span class="line">EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env</span><br><span class="line"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span><br><span class="line"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/kubelet</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#此文件指定kubeadm为kubelet管理的所有文件的默认位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#TLS Bootstrap</span><br><span class="line">/etc/kubernetes/bootstrap-kubelet.conf</span><br><span class="line"></span><br><span class="line">#unique kubelet identity</span><br><span class="line">/etc/kubernetes/kubelet.conf</span><br><span class="line"></span><br><span class="line">#kubelet&apos;s ComponentConfig</span><br><span class="line">/var/lib/kubelet/config.yaml</span><br><span class="line"></span><br><span class="line">#dynamic env file, KUBELET_KUBEADM_ARGS</span><br><span class="line">/var/lib/kubelt/kubeadm-flags.env</span><br><span class="line"></span><br><span class="line">#user-specified  flag overrides, KUBELET_EXTRA_ARGS, 它具有最高优先级</span><br><span class="line">/etc/sysconfig/kubelet</span><br></pre></td></tr></table></figure><p><br></p><p><strong>k8s 二进制文件和包内容</strong></p><p>k8s release附带的DEB和RPM包：</p><table><thead><tr><th>Package name</th><th>Description</th></tr></thead><tbody><tr><td>kubeadm</td><td>Installs the /usr/bin/kubeadm CLI tool and [The kubelet drop-in file(#the-kubelet-drop-in-file-for-systemd) for the kubelet.</td></tr><tr><td>kubelet</td><td>Installs the /usr/bin/kubelet binary.</td></tr><tr><td>kubectl</td><td>Installs the /usr/bin/kubectl binary.</td></tr><tr><td>kubernetes-cni</td><td>Installs the official CNI binaries into the /opt/cni/bin directory.</td></tr><tr><td>cri-tools</td><td>Installs the /usr/bin/crictl binary from <a href="https://github.com/kubernetes-incubator/cri-tools" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/cri-tools</a>.</td></tr></tbody></table><p><br><br><br></p><h4 id="使用kubeadm自定义控制面板配置"><a href="#使用kubeadm自定义控制面板配置" class="headerlink" title="使用kubeadm自定义控制面板配置"></a>使用kubeadm自定义控制面板配置</h4><p>Customizing control plane configuration with kubeadm</p><p><code>kubeadm</code>配置公开以下字段，这些字段可覆盖传递给控制面板组件的默认标志：</p><ul><li>APIServerExtraArgs</li><li>ControllerManagerExtraArgs</li><li>SchedulerExtraArgs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#apiserver</span><br><span class="line">#栗子</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.0</span><br><span class="line">metadata:</span><br><span class="line">  name: 1.11-sample</span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  advertise-address: 192.168.0.103</span><br><span class="line">  anonymous-auth: false</span><br><span class="line">  enable-admission-plugins: AlwaysPullImages,DefaultStorageClass</span><br><span class="line">  audit-log-path: /home/johndoe/audit.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#controllermanager</span><br><span class="line">#栗子</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.0</span><br><span class="line">metadata:</span><br><span class="line">  name: 1.11-sample</span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  cluster-signing-key-file: /home/johndoe/keys/ca.key</span><br><span class="line">  bind-address: 0.0.0.0</span><br><span class="line">  deployment-controller-sync-period: 50</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#scheduler</span><br><span class="line">#栗子</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.0</span><br><span class="line">metadata:</span><br><span class="line">  name: 1.11-sample</span><br><span class="line">schedulerExtraArgs:</span><br><span class="line">  address: 0.0.0.0</span><br><span class="line">  config: /home/johndoe/schedconfig.yaml</span><br><span class="line">  kubeconfig: /home/johndoe/kubeconfig.yaml</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="使用kubeadm创建高可用集群"><a href="#使用kubeadm创建高可用集群" class="headerlink" title="使用kubeadm创建高可用集群"></a>使用kubeadm创建高可用集群</h4><p>Creating Highly Available Clusters with kubeadm</p><p><br><br><br></p><h4 id="使用kubeadm配置etcd高可用集群"><a href="#使用kubeadm配置etcd高可用集群" class="headerlink" title="使用kubeadm配置etcd高可用集群"></a>使用kubeadm配置etcd高可用集群</h4><p>Set up a Highly Availabile etcd Cluster With kubeadm</p><p><br><br><br></p><h4 id="Troubleshooting-kubeadm"><a href="#Troubleshooting-kubeadm" class="headerlink" title="Troubleshooting kubeadm"></a>Troubleshooting kubeadm</h4><p>官方Troubleshooting: <a href="https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/</a></p><p><br></p><p>此外，在我启动<code>kubelet</code>之后，<code>kubelet</code>频繁出现一个错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#错误信息</span><br><span class="line">#journal -u kubelet</span><br><span class="line">kubelet[10720]: E0810 14:32:14.748713   10720 summary.go:102] Failed to get system container stats for &quot;/system.slice/kubelet.service&quot;: failed to get cgroup stats for &quot;/system.slice/kubelet.service&quot;: failed to get container info for &quot;/system.slice/kubelet.service&quot;: unknown container &quot;/system.slice/kubelet.service&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#解决方法</span><br><span class="line">vim /etc/sysconfig/kubelet</span><br><span class="line"></span><br><span class="line">#添加额外参数</span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重启服务</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="使用软件包创建集群"><a href="#使用软件包创建集群" class="headerlink" title="使用软件包创建集群"></a>使用软件包创建集群</h3><p>请定义相应的防火墙规则！</p><p>我是CentOS7x86_64，所以只包含了RPM包。</p><p>自带的源安装的k8s可能版本比较老，如需较新版本，可以在网上搜索kubernetes rpm包进行手动安装。<br>Rpmfind: <a href="https://rpmfind.net/" target="_blank" rel="noopener">https://rpmfind.net/</a></p><p><br></p><p><strong>k8s集群组件</strong></p><ul><li>etcd</li><li>flannel</li><li>kube-apiserver</li><li>kube-controller-manager</li><li>kube-scheduler</li><li>kubelet</li><li>kube-proxy</li><li>kube-dns</li><li>kubectl</li></ul><p><br></p><p><strong>Master</strong></p><ul><li>etcd</li><li>flannel</li><li>kube-apiserver</li><li>kube-controller-manager</li><li>kube-scheduler</li><li>kubectl</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认镜像源安装</span></span><br><span class="line">yum install -y etcd flannel kubernetes-master kubernetes-client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置kubernetes-master</span></span><br><span class="line"><span class="comment">#cd /etc/kubernetes</span></span><br><span class="line"><span class="comment">#apiserver  config  controller-manager  scheduler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改监听地址</span></span><br><span class="line">vim apiserver</span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--insecure-bind-address=0.0.0.0"</span></span><br><span class="line"><span class="comment">#生成环境一定要加上认证，我由于是测试，并未做认证</span></span><br><span class="line"><span class="comment">#未添加认证，去掉 KUBE_ADMISSION_CONTROL中的SecurityContextDeny,ServiceAccount</span></span><br><span class="line"><span class="comment">#Flag --admission-control has been deprecated, Use --enable-admission-plugins or --disable-admission-plugins instead.</span></span><br><span class="line"><span class="comment">#KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota"</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--enable-admission-plugins=NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#此处我修改了cidr</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=172.16.0.0/16"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置etcd，可先使用默认值</span></span><br><span class="line"><span class="comment">#后面可创建etcd-cluster</span></span><br><span class="line">vim /etc/etcd/etcd.conf</span><br><span class="line"><span class="comment">#修改监听地址</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://0.0.0.0:2379"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建pod-network，cidr为kube-apiserver中的配置项</span></span><br><span class="line"><span class="comment">#/atomic.io/network为flannel_etcd前缀,之后再启动flannel</span></span><br><span class="line">etcdctl mk /atomic.io/network/config <span class="string">'&#123;"Network":"172.16.0.0/16"&#125;'</span></span><br><span class="line">etcdctl ls</span><br><span class="line">etcdctl get <span class="string">'/atomic.io/network/config'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置flannel</span></span><br><span class="line">vim /etc/sysconfig/flanneld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置后启动</span></span><br><span class="line">systemctl start etcd flannel kube-apiserver kube-controller-manager kube-scheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl get all</span></span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   172.16.0.1   &lt;none&gt;        443/TCP   4m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#具体参数请根据实际情况来配置</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Node</strong></p><ul><li>flannel</li><li>kubelet</li><li>kube-porxy</li><li>kubectl</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#epel</span></span><br><span class="line">yum install -y flannel kubernetes-node kubernetes-client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#ls /etc/kubertes</span></span><br><span class="line"><span class="comment">#config  kubelet  proxy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置etcd的地址</span></span><br><span class="line">vim /etc/sysconfig/flanneld</span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">"http://master:2379</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vim /etc/kubernertes/config</span></span><br><span class="line"><span class="string">KUBE_MASTER="</span>--master=http://master:8080<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#修改kubelet地址</span></span><br><span class="line"><span class="string">KUBELET_ADDRESS="</span>--address=node_addr<span class="string">"</span></span><br><span class="line"><span class="string">KUBELET_HOSTNAME="</span>--hostname-override=node_addr<span class="string">"</span></span><br><span class="line"><span class="string">KUBELET_API_SERVER="</span>--api-servers=http://master:8080<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#配置后启动</span></span><br><span class="line"><span class="string">systemctl start flanneld kube-proxy kubelet</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#具体参数请根据实际情况来配置</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>验证集群</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Master</span><br><span class="line">#kubectl安装如前</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p><br></p><p><strong>安装较新的k8s</strong><br>由于自带的源k8s版本比较低，可能我们需要较新的k8s版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#安装较新的Kubernetes</span><br><span class="line"></span><br><span class="line">浏览器访问 https://rpmfind.net/</span><br><span class="line"></span><br><span class="line">搜索：</span><br><span class="line">kubernetes-master(x86-64)</span><br><span class="line">kubernetes-node(x86-64)</span><br><span class="line">kubernetes-client(x86-64)</span><br><span class="line"></span><br><span class="line">选择合适的版本进行下载，三者版本请一致</span><br><span class="line">安装步骤和下面类似</span><br><span class="line"></span><br><span class="line">请注意，k8s组件安装好后，还需要安装额外组件。</span><br><span class="line">如docker, flannel, etcd...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#master</span><br><span class="line">yum install -y k8s-master k8s-client</span><br><span class="line"></span><br><span class="line">#node</span><br><span class="line">yum install -y k8s-node k8s-client</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="k8s-release生成rpm包"><a href="#k8s-release生成rpm包" class="headerlink" title="k8s-release生成rpm包"></a>k8s-release生成rpm包</h3><p>kubernetes-release: <a href="https://github.com/kubernetes/release" target="_blank" rel="noopener">https://github.com/kubernetes/release</a></p><p>使用k8s-release手动生成rpm/dep包。<br>由于yum源更不上k8s的更新速度，所以才需要我们手动制作。</p><p>需要安装并运行Docker，它要运行一个<code>rpm-builder</code>容器。</p><p>它生成一下rpm包：</p><ul><li>kubeadm</li><li>kubelet</li><li>kubectl</li></ul><p><br></p><p>官方说明：</p><p><img src="/images/K8s/buildingLinuxPackages.png" alt="官方"></p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kubernetes/release.git</span><br><span class="line"></span><br><span class="line">cd ./release/rpm</span><br><span class="line">./docker-build.sh</span><br><span class="line"></span><br><span class="line">#此处如果连接google下载超时的话，可以在其它主机上下载，然后复制到此目录下</span><br><span class="line"></span><br><span class="line">#成功</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line"></span><br><span class="line">RPMs written to:</span><br><span class="line">cri-tools-1.11.0-0.x86_64.rpm  kubectl-1.11.0-0.x86_64.rpm  kubernetes-cni-0.6.0-0.x86_64.rpm</span><br><span class="line">kubeadm-1.11.0-0.x86_64.rpm    kubelet-1.11.0-0.x86_64.rpm  repodata</span><br><span class="line"></span><br><span class="line">Yum repodata written to:</span><br><span class="line">5e470d3c1c28cdd798237a48172b46f753655edee30988f4fde7000fde859d5a-primary.xml.gz</span><br><span class="line">9497c84e5650b15bf6edcffb68900b4f59f7271fa6318d3c0336386c99afd2d8-other.xml.gz</span><br><span class="line">94da9da6abd2dc8364ef51b4ca135b804deef0a37f1f13e4abeee455a8b0e897-primary.sqlite.bz2</span><br><span class="line">971e5af9d861f5ba85b12bad481749aa26546051090fa4e21c2393c21590dd5a-filelists.xml.gz</span><br><span class="line">b752df67070ff5552bd3137f00fb217578f1d810084a3e42579a53eee2a26085-other.sqlite.bz2</span><br><span class="line">f0ec7692c0654c1ec5ad9c8576ebe5b8f135c45b5d5242066df6e2d631a3ef6f-filelists.sqlite.bz2</span><br><span class="line">repomd.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#会在./release/rpm/output/x86_64下生成特定版本的rpm包</span><br><span class="line">pwd</span><br><span class="line">#/root/release/rpm/output/x86_64</span><br><span class="line"></span><br><span class="line">ls -l</span><br><span class="line">total 47056</span><br><span class="line">-rw-r--r-- 1 root root  4383318 Aug  3 10:25 cri-tools-1.11.0-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 root root  7906382 Aug  3 10:25 kubeadm-1.11.0-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 root root  7859238 Aug  3 10:25 kubectl-1.11.0-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 root root 19012182 Aug  3 10:25 kubelet-1.11.0-0.x86_64.rpm</span><br><span class="line">-rw-r--r-- 1 root root  9008530 Aug  3 10:25 kubernetes-cni-0.6.0-0.x86_64.rpm</span><br><span class="line">drwxr-xr-x 2 root root     4096 Aug  3 10:25 repodata</span><br></pre></td></tr></table></figure><p>请注意，默认会自动编译所有平台。如果只需要<code>x84_64</code>，可以更改<code>entry.sh</code>文件，将其它平台去掉，以加快编译速度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim ./release/rpm/entry.sh</span><br><span class="line"></span><br><span class="line">  ARCHS=(</span><br><span class="line">    amd64/x86_64</span><br><span class="line">    #arm/armhfp</span><br><span class="line">    #arm64/aarch64</span><br><span class="line">    #ppc64le/ppc64le</span><br><span class="line">    #s390x/s390x</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>后面还是需要使用<code>kubeadm</code>来进行引导！</p><p><br><br><br></p><h3 id="编译源码生成rpm包"><a href="#编译源码生成rpm包" class="headerlink" title="编译源码生成rpm包"></a>编译源码生成rpm包</h3><p>参考：</p><ul><li>How to build Kubernetes RPM: <a href="https://mritd.me/2017/07/12/how-to-build-kubernetes-rpm/" target="_blank" rel="noopener">https://mritd.me/2017/07/12/how-to-build-kubernetes-rpm/</a></li></ul><p>由于墙的原因，使用kubeadm进行引导还是会timeout。使用自带的yum源或网上下载的k8s rpm可能也不是最新的版本。因此需要手动编译源码以生成rpm包。</p><p>生成如下rpm包：</p><ul><li>kubernetes-master</li><li>kubernetes-client</li><li>kubernetes-node</li></ul><p><br><br><br></p><h3 id="k8s-Dashboard"><a href="#k8s-Dashboard" class="headerlink" title="k8s Dashboard"></a>k8s Dashboard</h3><p>说明:</p><ul><li>GitHub: <a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a></li><li>image: kubernetes-dashboard-amd64:v1.8.3</li><li>FAQ: <a href="https://github.com/kubernetes/dashboard/wiki/FAQ" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/wiki/FAQ</a></li><li>Let’s Encrypt: <a href="https://letsencrypt.org/" target="_blank" rel="noopener">https://letsencrypt.org/</a></li></ul><p>Let’s Encrypt是一个免费，自动化和开放的证书颁发机构。</p><p><br></p><h4 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h4><p>Quick setup</p><p>快速部署<code>kubernetes-dashboard</code>的方法请参考README。它适用于k8s新手并希望快速开始使用Dashboard的人。其它配置适用于有一定经验的用户，详情在以下章节。</p><p>k8s Dashboard是k8s集群的基于Web的通用UI。它允许用户管理运行在集群中的应用程序，并对应用程序进行故障排除，以及管理集群本身。</p><p>请注意，Dashboard使用了安全设置。这意味着，默认情况下它具有最小的权限集，并且只能通过https访问。<br>建议在安装和执行Dashboard之前，先阅读<strong><a href="https://github.com/kubernetes/dashboard/wiki/Access-control" target="_blank" rel="noopener">Access Control</a></strong>指南。</p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">#wget https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line">#kubectl apply -f /path/kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get pods -n kube-system -o wide |grep dashboard</span><br><span class="line">kubernetes-dashboard-6948bdb78-rnnjp   1/1       Running   1          1d        10.244.1.2       node</span><br><span class="line"></span><br><span class="line"> kubectl get service -n kube-system -o wide |grep dashboard</span><br><span class="line">kubernetes-dashboard   ClusterIP   10.110.83.129   &lt;none&gt;        443/TCP         13m       k8s-app=kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#要从本地访问Dashboard，必须为k8s集群创建安全通道</span><br><span class="line">kubectl apply</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#访问Dashboard</span><br><span class="line">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</span><br><span class="line"></span><br><span class="line">#http://localhost:8001/ui已弃用</span><br><span class="line">#&lt;h3&gt;Unauthorized&lt;/h3&gt;</span><br><span class="line">#会直接报403，还需要做前面所说的操作。</span><br><span class="line"></span><br><span class="line">#Heapster必须在集群中运行才能使metric, graphs可用</span><br><span class="line">#Heapster已被弃用，请考虑使用metrics-server和第三方metrics pipeline收集Prometheus格式的指标</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>Installation</p><p><strong>官方版</strong><br>当从旧版Dashboard升级到 <code>v1.7+</code>，请确保删除<code>kubernetes-dashboard</code>服务账户的集群角色绑定，否则Dashboard将具有对集群的完全管理权限。</p><p><br></p><p><strong>快速配置</strong><br>快速部署<code>kubernetes-dashboard</code>的方法请参考README。它适用于k8s新手并希望快速开始使用Dashboard的人。</p><p><br></p><p><strong>推荐配置</strong><br>直接访问Dashboard(不是<code>kubectl proxy</code>)，应该使用有效的证书来建立安全的HTTPS连接。它们可由公共可信证书颁发机构(如<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a>)生成，使用它们替代Dashboard自动生成的证书。</p><p>此配置要求证书存储在<code>kube-system</code>命名空间中名为<code>kubernetes-dashboard-certs</code>的证书中。<br>假设你有存储在<code>$HOME/certs</code>目录下的<code>dashboard.crt</code>和<code>dashboard.key</code>文件。你应该使用这些文件创建<code>secret</code>。之后，便可以开始配置Dashboard。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看</span></span><br><span class="line">kubectl get secret -n kube-system | grep dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">kubectl describe secret/kubernetes-dashboard-certs -n kube-system</span><br><span class="line">Name:         kubernetes-dashboard-certs</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:</span><br><span class="line">Type:         Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=<span class="variable">$HOME</span>/certs -n kube-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#部署Dashboard</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p><br></p><p><strong>替代配置</strong><br>此配置并不安全。不使用证书，仅通过HTTP公开Dashboard。在此配置中，只能通过使用<code>Authorization Header</code>功能来确保访问控制。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/alternative/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p><br></p><p><strong>开发版</strong><br>不建议在线上环境使用开发版，请使用稳定的正式版。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard-head.yaml</span><br></pre></td></tr></table></figure><p><br></p><p><strong>升级</strong><br>安装后，Deployment不会自动更新。为了更新它，你需要删除部署的pod并等待它重新创建。重新创建之后，它会使用最新的镜像<code>image:latest</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除pod</span></span><br><span class="line">kubectl -n kube-system delete $(kubectl -n kube-system get pod -o name | grep dashboard)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="证书管理"><a href="#证书管理" class="headerlink" title="证书管理"></a>证书管理</h4><p>Certificate management</p><p>本节简短介绍了如何获取可在Dashboard中启用HTTPS的证书。有两个步骤要做：</p><ul><li>生成证书<ul><li>证书认证机构(Certificate Authority)</li><li>自签名证书(Self-signed certificate)</li></ul></li><li>将证书传递给Dashboard<ul><li>按照前面的推荐配置方法</li><li>其它情况，你需要修改Dashboard的YAML部署文件，并将<code>--tls-key-file</code>, <code>--tls-cert-file</code>传递给Dashboard</li></ul></li></ul><p><br></p><p><strong>公众信任的证书认证机构</strong><br>Public trusted Certificate Authority</p><p>有许多公共和免费的证书提供商可供选择。如前面提到的<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s encrypt</a>，具体操作查看此网站说明。</p><p><br></p><p><strong>自签名证书</strong><br>Self-signed certificate</p><p>如果你打算自己生成证书，你需要像<a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a>这样的库来帮助你。</p><ul><li>生成私钥(private key)和证书签名请求(certificate signing request)</li><li>生成SSL证书</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#Generate private key and certificate signing request</span><br><span class="line">#创建SSL证书需要私钥和证书签名请求</span><br><span class="line"></span><br><span class="line">openssl genrsa -des3 -passout pass:x -out dashboard.pass.key 2048</span><br><span class="line"></span><br><span class="line">openssl rsa -passin pass:x -in dashboard.pass.key -out dashboard.key</span><br><span class="line"></span><br><span class="line">rm dashboard.pass.key</span><br><span class="line"></span><br><span class="line">#需要填写一些信息</span><br><span class="line">#A challenge password []请直接按回车，不要填写内容</span><br><span class="line">openssl req -new -key dashboard.key -out dashboard.csr</span><br><span class="line"></span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:SC</span><br><span class="line">Locality Name (eg, city) [Default City]:CD</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:Student</span><br><span class="line">Organizational Unit Name (eg, section) []:HT</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:Zhang21</span><br><span class="line">Email Address []:reds@zhang21.cn</span><br><span class="line"></span><br><span class="line">Please enter the following &apos;extra&apos; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Generate SSL certificate</span><br><span class="line">#自签名SSL证书由 .key私钥 和 .csr生成</span><br><span class="line">openssl x509 -req -sha256 -days 1000 -in dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line"></span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=SC/L=CD/O=Student/OU=HT/CN=Zhang21/emailAddress=reds@zhang21.cn</span><br><span class="line">Getting Private key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">ls</span><br><span class="line">dashboard.crt  dashboard.csr  dashboard.key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#将密钥和证书移动到需要的目录下</span><br><span class="line">mv ./dashboard.* /etc/kubernetes/pki/dashboard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#接下来便可以创建secret了</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="访问Dashboard"><a href="#访问Dashboard" class="headerlink" title="访问Dashboard"></a>访问Dashboard</h4><p>Accessing Dashboard</p><p>在集群上安装Dashboard后，可通过几种不同的方式访问它。遇到什么问题，可查看FAQ。</p><ul><li>1.6.x and below</li><li>1.7.x and above</li></ul><p><br></p><h5 id="1-7-x-and-above"><a href="#1-7-x-and-above" class="headerlink" title="1.7.x and above"></a>1.7.x and above</h5><p>Accessing Dashboard 1.7.X and above</p><p>我的Dashboard v1.8.5.</p><p>前面的HTTP/HTTPs都不说了。<br>但请注意，不要把Dashboard使用HTTP公开展示。</p><p><br></p><p><strong>kubectl proxy</strong><br><code>kubectl proxy</code>在你的计算机和k8s APIserver之间创建代理服务器。默认情况下它只能在本地访问。</p><p>注意，不应该使用<code>kubectl proxy</code>命令公开Dashboard，因为它只允许HTTP连接。对于<code>localhost</code>和<code>127.0.0.1</code>以外的域，将无法登录。</p><p>首先让我们检查kubectl是否已正确配置并是否可访问集群:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment">#Kubernetes master is running at https://192.168.31.49:6443</span></span><br><span class="line"><span class="comment">#KubeDNS is running at https://192.168.31.49:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动代理服务器</span></span><br><span class="line">kubectl proxy</span><br><span class="line"></span><br><span class="line"><span class="comment">#Starting to serve on 127.0.0.1:8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#之后你便可以从浏览器访问Dashboard</span></span><br><span class="line"><span class="comment">#http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</span></span><br><span class="line"><span class="comment">#但我访问还是403，应该还需要创建Service Token之类。</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>NodePort</strong><br>这种访问Dashboard的方式，建议用于单节点设置的开发环境中。<br>请注意，此HTTPS方式需要安装前面生成的证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑 kubernetes-dashboard服务</span></span><br><span class="line">kubectl -n kube-system edit service/kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a '#' will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubectl.kubernetes.io/last-applied-configuration: |</span><br><span class="line">      &#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"kind"</span>:<span class="string">"Service"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"labels"</span>:&#123;<span class="string">"k8s-app"</span>:<span class="string">"kubernetes-dashboard"</span>&#125;,<span class="string">"name"</span>:<span class="string">"kubernetes-dashboard"</span>,<span class="string">"namespace"</span>:<span class="string">"kube-system"</span>&#125;,<span class="string">"spec"</span>:&#123;<span class="string">"ports"</span>:[&#123;<span class="string">"port"</span>:443,<span class="string">"targetPort"</span>:8443&#125;],<span class="string">"selector"</span>:&#123;<span class="string">"k8s-app"</span>:<span class="string">"kubernetes-dashboard"</span>&#125;&#125;&#125;</span><br><span class="line">  creationTimestamp: 2018-08-09T01:14:01Z</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">"200618"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/services/kubernetes-dashboard</span><br><span class="line">  uid: 80091845-9b71-11e8-a08a-000c298ee39f</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.110.83.129</span><br><span class="line">  ports:</span><br><span class="line">  - port: 443</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将 type: ClusterIP 修改为 type: NodePort</span></span><br><span class="line"><span class="built_in">type</span>: NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接保存退出(:wq)</span></span><br><span class="line"><span class="comment">#service/kubernetes-dashboard edited</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">kubectl -n kube-system get service/kubernetes-dashboard</span><br><span class="line">NAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.110.83.129   &lt;none&gt;        443:31965/TCP   6h</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看端口</span></span><br><span class="line">netstat -nltup | grep 31965</span><br><span class="line">tcp6       0      0 :::31965                :::*                    LISTEN      11280/kube-proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Dashboard展示在 31965(HTTPS) 端口上。</span></span><br><span class="line"><span class="comment">#现在可在浏览器访问 &lt;master-ip&gt;:31965</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可使用Nginx做前端代理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#此处注意，需要将dashboard.crt证书安装到你的电脑上</span></span><br><span class="line"><span class="comment">#不然浏览器会拒绝</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果你尝试在多节点集群上使用`NodePort`公开Dashboard，则必须找到运行Dashboard的节点的IP才能访问它。</span></span><br><span class="line">https://&lt;node-ip&gt;:&lt;nodeport&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/K8s/k8s_dashboard_nodeport.png" alt="Dashboard NodePort"></p><p><img src="/images/K8s/k8s_dashboard_forbidden.png" alt="没有权限"></p><p>由图可看出，还需要配置权限才能够正常访问Dashboard！</p><p><br></p><p><strong>API Server</strong><br>如果公开k8s API server并可以从外部访问，则你可直接访问url。<br>Dashboard: <a href="https://master-ip:apiserver-port/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/" target="_blank" rel="noopener">https://master-ip:apiserver-port/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a></p><p>注意，只有在浏览器中安装证书时，才能使用这用访问方式。</p><p><br></p><p><strong>Ingress</strong><br>Dashboard可以使用 <code>ingress</code> 进行公开。详情: <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/ingress/</a></p><p><br><br><br></p><h4 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h4><p>直接使用<code>NodePort</code>方式访问比较麻烦，所以配置使用Nginx反向代理来访问。</p><p>Nginx配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/k8sUI.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name k8s.ui;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/kubernetes/pki/dashboard/dashboard.crt;</span><br><span class="line">    ssl_certificate_key /etc/kubernetes/pki/dashboard/dashboard.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass https://127.0.0.1:31965;</span><br><span class="line">      proxy_read_timeout 60s;</span><br><span class="line">      proxy_send_timeout 60s;</span><br><span class="line">      proxy_connect_timeout 60s;</span><br><span class="line">      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_404;</span><br><span class="line"></span><br><span class="line">      proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">      proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_set_header X-Forwarded-Proto https;</span><br><span class="line"></span><br><span class="line">      proxy_buffer_size 64k;</span><br><span class="line">      proxy_buffers 4 64k;</span><br><span class="line">      proxy_busy_buffers_size 128k;</span><br><span class="line">      proxy_temp_file_write_size 128k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>之后解析DNS，就可直接通过域名访问了。</p><p><br><br><br></p><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>Access Control</p><p>安装Dashboard后，我们便可以专注于为用户配置对集群资源的访问控制。从 <code>v1.7</code> 开始，Dashboard默认不再具有完全管理权限(admin privilige)，所有权限都被撤销，并且只授予了Dashboard工作所需的最小权限。所以下面的介绍都只针对于 <code>v1.7+</code> 版本。<br>如果Dashboard只能由受信任的人员访问，你可能希望授予他们完全管理权限，则所有人都具有完全管理的权限。请注意，其它应用程序不应直接访问Dashboard，因为它可能导致权限升级。确保集群内的流量仅限于命名空间，或者只是撤销集群内应用程序对Dashboard的访问权限。</p><p>可查看<code>kubernetst-dashboard.yaml</code>配置文件，里面有<code>minimal</code>的权限。</p><p><br></p><p><strong>介绍</strong><br>k8s支持几种方法来认证(authenticating)和授权(authorizing)用户。授权由k8s API server处理。Dashboard仅充当代理并将所有认证信息传递给API server。在禁止访问的情况下，相应的警告信息会显示到Dashboard上。</p><p><br></p><p><strong>默认Dashboard权限</strong></p><ul><li><p><code>v1.7</code></p><ul><li><code>create</code> and <code>watch</code> permissions for secrets in <code>kube-system</code> namespace required to create and watch for changes of <code>kubernetes-dashboard-key-holder</code> secret.</li><li><code>get</code>, <code>update</code> and <code>delete</code> permissions for secrets named <code>kubernetes-dashboard-key-holder</code> and <code>kubernetes-dashboard-certs</code> in <code>kube-system</code> namespace.</li><li><code>proxy</code> permission to <code>heapster</code> service in <code>kube-system</code> namespace required to allow getting metrics from heapster.</li></ul></li><li><p><code>v1.8</code></p><ul><li><code>create</code> permission for secrets in <code>kube-system</code> namespace required to create <code>kubernetes-dashboard-key-holder</code> secret.</li><li><code>get</code>, <code>update</code> and <code>delete</code> permissions for secrets named <code>kubernetes-dashboard-key-holder</code> and <code>kubernetes-dashboard-certs</code> in <code>kube-system</code> namespace.</li><li><code>get</code> and <code>update</code> permissions for config map named <code>kubernetes-dashboard-settings</code> in <code>kube-system</code> namespace.</li><li><code>proxy</code> permission to <code>heapster</code> service in <code>kube-system</code> namespace required to allow getting metrics from heapster.</li></ul></li></ul><p><br></p><p><strong>Authentication</strong><br>从<code>v1.7</code>版本开始，Dashboard支持的用户认证基于：</p><ul><li><code>Authorization: Bearer &lt;token&gt;</code></li><li><code>Bearer Token</code></li><li><code>Username/password</code></li><li><code>Kubeconfig</code></li></ul><p><br></p><p><strong>Login view</strong><br>要使其显示在Dashboard中，你需要启用HTTPS访问Dashboard。</p><p>使用跳过选项将使Dashboard使用Service Account权限。</p><p><img src="/images/K8s/login_view.png" alt="Login view"></p><p><br></p><p><strong>Authorization header</strong><br>在通过HTTP访问Dashboard时，使用 <code>authorization header</code> 是使Dashboard充当用户的唯一方法。</p><p>要使Dashboard使用<code>authorization header</code>，你只需将每个请求中的<code>Authorization: Bearer &lt;token&gt;</code>传递给Dashboard。这可以通过在Dashboard前端配置反向代理来实现。代理将负责身份提供者的身份验证，并将请求头部中生成的token传递给Dashboard。注意，需要正确配置k8s API server才能接受这些token。</p><p>注意： 如果通过API server proxy访问Dashboard，则<code>authorization header</code>将不起作用。这是因为一旦请求到达API server，所有其它header都将被删除。</p><p><br></p><p><strong>Bearer Token</strong><br>建议先熟悉<a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/" target="_blank" rel="noopener">k8s authentication doc</a>，以了解如何获取可用于登录的token。例如，每个<code>Service Account</code>都有一个具有有效<code>Bearer token</code>，用于登录Dashboard。</p><p>推荐讲座，了解如何创建服务账户并对其进行授权：</p><ul><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#service-account-tokens" target="_blank" rel="noopener">Service Account Tokens</a></li><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole" target="_blank" rel="noopener">Role and  ClusterRole</a></li><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#service-account-permissions" target="_blank" rel="noopener">Service Account Permissions</a></li></ul><p><img src="/images/K8s/bearer_token.png" alt="Bearer Token"></p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#使用kubectl获取token</span><br><span class="line">#默认情况下，k8s创建了许多服务账号。所有都具有不同的访问权限</span><br><span class="line"></span><br><span class="line">kubectl -n kube-system get secret</span><br><span class="line"></span><br><span class="line">NAME                                             TYPE                                  DATA      AGE</span><br><span class="line">attachdetach-controller-token-bszq5              kubernetes.io/service-account-token   3         2d</span><br><span class="line">bootstrap-signer-token-bqv44                     kubernetes.io/service-account-token   3         2d</span><br><span class="line">bootstrap-token-uzdl9x                           bootstrap.kubernetes.io/token         7         2d</span><br><span class="line">certificate-controller-token-rsftn               kubernetes.io/service-account-token   3         2d</span><br><span class="line">clusterrole-aggregation-controller-token-x64f5   kubernetes.io/service-account-token   3         2d</span><br><span class="line">coredns-token-dfmpb                              kubernetes.io/service-account-token   3         2d</span><br><span class="line">cronjob-controller-token-xwtkc                   kubernetes.io/service-account-token   3         2d</span><br><span class="line">daemon-set-controller-token-vxzp4                kubernetes.io/service-account-token   3         2d</span><br><span class="line">default-token-5868t                              kubernetes.io/service-account-token   3         2d</span><br><span class="line">deployment-controller-token-jc6bs                kubernetes.io/service-account-token   3         2d</span><br><span class="line">disruption-controller-token-znghk                kubernetes.io/service-account-token   3         2d</span><br><span class="line">endpoint-controller-token-mnxfh                  kubernetes.io/service-account-token   3         2d</span><br><span class="line">expand-controller-token-6srzj                    kubernetes.io/service-account-token   3         2d</span><br><span class="line">flannel-token-7548k                              kubernetes.io/service-account-token   3         2d</span><br><span class="line">generic-garbage-collector-token-22qd2            kubernetes.io/service-account-token   3         2d</span><br><span class="line">horizontal-pod-autoscaler-token-zs8pj            kubernetes.io/service-account-token   3         2d</span><br><span class="line">job-controller-token-zbfhd                       kubernetes.io/service-account-token   3         2d</span><br><span class="line">kube-proxy-token-xxp9h                           kubernetes.io/service-account-token   3         2d</span><br><span class="line">kubernetes-dashboard-certs                       Opaque                                3         1h</span><br><span class="line">kubernetes-dashboard-key-holder                  Opaque                                2         2d</span><br><span class="line">kubernetes-dashboard-token-sgq5t                 kubernetes.io/service-account-token   3         2d</span><br><span class="line">namespace-controller-token-25n2k                 kubernetes.io/service-account-token   3         2d</span><br><span class="line">node-controller-token-289v8                      kubernetes.io/service-account-token   3         2d</span><br><span class="line">persistent-volume-binder-token-x7t7x             kubernetes.io/service-account-token   3         2d</span><br><span class="line">pod-garbage-collector-token-xxjqp                kubernetes.io/service-account-token   3         2d</span><br><span class="line">pv-protection-controller-token-9s4x7             kubernetes.io/service-account-token   3         2d</span><br><span class="line">pvc-protection-controller-token-l7m7j            kubernetes.io/service-account-token   3         2d</span><br><span class="line">replicaset-controller-token-mszv9                kubernetes.io/service-account-token   3         2d</span><br><span class="line">replication-controller-token-8gl9s               kubernetes.io/service-account-token   3         2d</span><br><span class="line">resourcequota-controller-token-whljw             kubernetes.io/service-account-token   3         2d</span><br><span class="line">service-account-controller-token-h87wp           kubernetes.io/service-account-token   3         2d</span><br><span class="line">service-controller-token-qn5jz                   kubernetes.io/service-account-token   3         2d</span><br><span class="line">statefulset-controller-token-zps2l               kubernetes.io/service-account-token   3         2d</span><br><span class="line">token-cleaner-token-nccrw                        kubernetes.io/service-account-token   3         2d</span><br><span class="line">ttl-controller-token-dmmb9                       kubernetes.io/service-account-token   3         2d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl -n kube-system describe secret/replicaset-controller-token-mszv9</span><br><span class="line">Name:         replicaset-controller-token-mszv9</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name=replicaset-controller</span><br><span class="line">              kubernetes.io/service-account.uid=d18a5f8f-9a0d-11e8-a08a-000c298ee39f</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJyZXBsaWNhc2V0LWNvbnRyb2xsZXItdG9rZW4tbXN6djkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoicmVwbGljYXNldC1jb250cm9sbGVyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiZDE4YTVmOGYtOWEwZC0xMWU4LWEwOGEtMDAwYzI5OGVlMzlmIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOnJlcGxpY2FzZXQtY29udHJvbGxlciJ9.O6hXQwsXdSXREsaao_V7pmeQkfWGEd4QLDxczxNZVcrT2yN9F1KFJ9IklYVlGSTo1cKA4OxkYqjKWzWPBEn6wVLhVbf6_WqTrFi4qEtj_nmhXwqcwkpioJzyXu7x7wljpH-H32bEaLW1l-y5kQBUztF9fAHZZyv0f9vaRK4u4zVzuq4JzauLB9aVBrgt6rSaOENdr8OGm1yjM_--gQtc1qoF8mLo3RK6qLpFjT70EZKgyys_GXpFrrnhG5maUmlFqCPZ6P0cl8d6SuDfkQIlFxNHxtJmOPSCIE6wjgkOncRtgWHRRVsRPnhDGOp0kbmdLTfpOx2zZEiCD5btXL0OkA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#我们可以使用显示的token登录Dashboard</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Basic</strong><br>默认情况下，禁用基本身份认证，也就是用户密码认证。原因是需要使用授权模式<code>RBAC</code>和<code>--basic-auth-file</code>标志配置k8s API server。没有的话，API server会自动回退到匿名用户(anonymous user)，并且无法检查提供的凭据是否有效。</p><p>修改<code>--authentication-mode=basic</code>标志在Dashboard中启用基本身份认证，默认值为<code>--authentication-mode=token</code>。</p><p><br></p><p><strong>kubeconfig</strong><br>这种登录方法是为了方便起见而提供的。<code>kubeconfig file</code>仅支持<code>--authentication-mode</code>标志指定认证选项。如果它配置为其它方式，Dashboard中将显示错误消息。</p><p><img src="/images/K8s/kubeconfig.png" alt="kubeconfig"></p><p><br></p><p><strong>Admin privileges</strong><br>注意： 在操作之前，请确保你知道自己在做什么。向Dashboard的服务账号赋予管理权限可能会存在安全风险。</p><p>你可以通过创建<code>ClusterRoleBinding</code>来授权Dashboard的服务账号完全的管理权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line">dashboard-admin.yaml</span><br><span class="line"></span><br><span class="line">#官方文档版</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#开发版</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard-head</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard-head</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kubernetes-dashboard-head</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><p><br></p><h4 id="创建示例用户"><a href="#创建示例用户" class="headerlink" title="创建示例用户"></a>创建示例用户</h4><p>Creating sample user</p><p>在本节中，我们将了解如何使用k8s Service Account机制创建新用户，授权用户管理权限并使用与此用户关联的<code>Bearer Token</code>进行登录。<br>关于<code>grant/deny</code>权限，请查看文档<a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/" target="_blank" rel="noopener">authentication</a>和<a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/" target="_blank" rel="noopener">authorization</a>以了解详情。</p><p>创建<code>xxx.yaml</code>文件，并使用<code>kubectl create -f xxx.yaml</code>命令创建它们。</p><p><br></p><p><strong>创建 Service Account</strong><br>在<code>kube-system</code>命名空间中创建名为<code>admin-user</code>的服务账户:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">kubectl create -f /etc/kubernetes/auth/admin-user_SA.yaml</span><br><span class="line"><span class="comment">#serviceaccount/admin-user created</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">kubectl -n kube-system get secret | grep admin-user</span><br><span class="line"><span class="comment">#admin-user-token-qj8hj                           kubernetes.io/service-account-token   3         56s</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>创建 ClusterRoleBinding</strong><br>在大多数情况下，在使用<code>kops</code>, <code>kubeadm</code>等管理配置集群后，<code>Role</code>都已存在于集群中。我们可使用它为<code>ServiceAccount</code>仅创建<code>RoleBinding</code>。</p><p>注意: <code>ClusterRoleBinding</code>的<code>apiVersion</code>资源可能不同于k8s version。从<code>v1.8</code>开始，它被提升为<code>rbac.authorization.k8s.io/v1</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">kubectl create -f /etc/kubernetes/Auth/cluster-admin_CRB.yaml </span><br><span class="line"><span class="comment">#clusterrolebinding.rbac.authorization.k8s.io/admin-user created</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Bearer Token</strong><br>现在我们需要去找到用于登录的Token。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line"></span><br><span class="line">Name:         admin-user-token-qj8hj</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name=admin-user</span><br><span class="line">              kubernetes.io/service-account.uid=58d39b31-9c40-11e8-a08a-000c298ee39f</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXFqOGhqIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1OGQzOWIzMS05YzQwLTExZTgtYTA4YS0wMDBjMjk4ZWUzOWYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.4hCqFj7R7CwAewnFxsy5QC91v6288T7aOCZXae7AbqXECiFb2yB5x7VQs0GjnUj8jbSZamBpI_D6D7p8PoRUmPZg2NOF46TEztsR9wcsEywUr6EHdXMGy6HUtvedy45K1j9h8oFp9nAqvxa6M7hrfV_yy-XlJdqTo7J06VlT_czpWNScCkjejIOlZXFvYL5f5ha0V4L5XCdlFkf7DYbsNV6odquIKavg270g4nAr1ZAJ14SjeFdfRVvimS4N-W7pb9vmOeZBnAmGuotKoqU1OlzZrMfpsPGIXy5GW3zD8PvsbGU9Xn6lyPHH08X0kXCUACQHx4UiaMFzlnhaC2XIMQ</span><br></pre></td></tr></table></figure><p>现在复制Token来登录.</p><p><img src="/images/K8s/admin_user_token.png" alt="Login"></p><p><img src="/images/K8s/admin_user_dashboard.png" alt="Dashboash"></p><p><br><br><br></p><h3 id="Heapster"><a href="#Heapster" class="headerlink" title="Heapster"></a>Heapster</h3><p>GitHub: <a href="https://github.com/kubernetes/heapster" target="_blank" rel="noopener">https://github.com/kubernetes/heapster</a></p><p>注意: Heapster已被启用，考虑使用<code>metric-server</code>和第三方<code>metric pipeline</code>来收集Prometheus格式的指标。</p><p><br></p><p><strong>Heapster 启用时间轴</strong></p><table><thead><tr><th>Kubernetes Release</th><th>Action</th><th>Policy/Support</th></tr></thead><tbody><tr><td>Kubernetes 1.11</td><td>Initial Deprecation</td><td>No new features or sinks are added. Bugfixes may be made.</td></tr><tr><td>Kubernetes 1.12</td><td>Setup Removal</td><td>The optional to install Heapster via the Kubernetes setup script is removed.</td></tr><tr><td>Kubernetes 1.13</td><td>Removal</td><td>No new bugfixes will be made. Move to kubernetes-retired organization.</td></tr></tbody></table><p><br><br><br></p><h3 id="metric-server"><a href="#metric-server" class="headerlink" title="metric-server"></a>metric-server</h3><p>GitHub: <a href="https://github.com/kubernetes-incubator/metrics-server" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/metrics-server</a></p><p>具体详情可参考README。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#下载到本地</span><br><span class="line">git clone https://github.com/kubernetes-incubator/metrics-server.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#移动到管理目录</span><br><span class="line">mv metrics-server/ /etc/kubernetes/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#k8s v1.8+</span><br><span class="line">ls /etc/kubernetes/metrics-server/deploy/v1.8+/</span><br><span class="line">auth-delegator.yaml  auth-reader.yaml  metrics-apiservice.yaml  metrics-server-deployment.yaml  metrics-server-service.yaml  resource-reader.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#注意metrics-server-deployment.yaml文件，需要一个镜像，请准备</span><br><span class="line">#gcr.io/google_containers/metrics-server-amd64:v0.2.1</span><br><span class="line"></span><br><span class="line">docker pull zhang21/metrics-server-amd64:v0.2.1</span><br><span class="line">docker tag zhang21/metrics-server-amd64:v0.2.1 gcr.io/google_containers/metrics-server-amd64:v0.2.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建</span><br><span class="line">#注意，在顶层进行创建</span><br><span class="line">cd /etc/kubernetes/metrics-server</span><br><span class="line">kubectl create -f deploy/v1.8+/</span><br><span class="line"></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created</span><br><span class="line">apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created</span><br><span class="line">serviceaccount/metrics-server created</span><br><span class="line">deployment.extensions/metrics-server created</span><br><span class="line">service/metrics-server created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl -n kube-system  get deployment</span><br><span class="line"></span><br><span class="line">NAME                   DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">coredns                2         2         2            2           2d</span><br><span class="line">kubernetes-dashboard   1         1         1            1           19h</span><br><span class="line">metrics-server         1         1         1            0           39s</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="pause容器"><a href="#pause容器" class="headerlink" title="pause容器"></a>pause容器</h2><p>参考:</p><ul><li>《Kubernetes之“暂停”容器》: <a href="http://dockone.io/article/2785" target="_blank" rel="noopener">http://dockone.io/article/2785</a></li><li>《Pause容器》: <a href="https://jimmysong.io/kubernetes-handbook/concepts/pause-container.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/concepts/pause-container.html</a></li><li>GitHub: <a href="https://github.com/kubernetes/kubernetes/tree/master/build/pause" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/tree/master/build/pause</a></li></ul><p><br></p><p>Pause容器，又叫Infra容器。它不是pod，而是一个容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker ps | grep pause</span><br><span class="line">35c9aaa68a06        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_coredns-78fcdf6894-hn46d_kube-system_daab8e60-9a0d-11e8-a08a-000c298ee39f_0</span><br><span class="line">d22a1baac736        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_coredns-78fcdf6894-wqxbx_kube-system_daac5838-9a0d-11e8-a08a-000c298ee39f_0</span><br><span class="line">4d0cdc392629        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_kube-flannel-ds-7gbvd_kube-system_59129dff-9a0f-11e8-a08a-000c298ee39f_0</span><br><span class="line">4f28747a2044        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_kube-proxy-rhrks_kube-system_da990e28-9a0d-11e8-a08a-000c298ee39f_0</span><br><span class="line">f2bd7bd47eb4        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_kube-scheduler-master_kube-system_537879acc30dd5eff5497cb2720a6d64_0</span><br><span class="line">d732ffba5530        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_kube-controller-manager-master_kube-system_01c36146e2c80849d7b6993e68aa5e67_0</span><br><span class="line">cd7636bac6df        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_kube-apiserver-master_kube-system_1bd24cc043a06bf7e71b96167946c220_0</span><br><span class="line">d4adb3504543        k8s.gcr.io/pause:3.1   &quot;/pause&quot;                 18 hours ago        Up 18 hours                             k8s_POD_etcd-master_kube-system_2cc1c8a24b68ab9b46bca47e153e74c6_0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#或者是这样</span><br><span class="line">#registry.access.redhat.com/rhel7/pod-infrastructure:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#rpm包安装kubelet的默认配置</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=&quot;--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest&quot;</span><br><span class="line"></span><br><span class="line">#kubeadm安装kubelet的默认配置</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=--pod-infra-container-image=k8s.gcr.io/pause:3.1</span><br></pre></td></tr></table></figure><p><br></p><p><strong>pause容器的作用</strong><br>k8s中的pause容器主要为每个业务提供以下功能：</p><ul><li>在<code>pod</code>中担任Linux命名空间共享的基础</li><li>启用<code>pid</code>命名空间，开启<code>init</code>进程</li></ul><p><img src="/images/K8s/pause-container.png" alt="pause容器"></p><p><br></p><p>使用<code>pause</code>容器和共享命名空间创建pod示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#启动pause，以便可以将容器添加到pod中</span><br><span class="line">docker run -d --name pause k8s.gcr.io/pause-amd64:3.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#nginx</span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; /tmp/nginx.conf</span><br><span class="line">&gt; error_log stderr;</span><br><span class="line">&gt; events &#123; worker_connections  1024; &#125;</span><br><span class="line">&gt; http &#123;</span><br><span class="line">&gt;     access_log /dev/stdout combined;</span><br><span class="line">&gt;     server &#123;</span><br><span class="line">&gt;         listen 80 default_server;</span><br><span class="line">&gt;         server_name example.com www.example.com;</span><br><span class="line">&gt;         location / &#123;</span><br><span class="line">&gt;             proxy_pass http://127.0.0.1:2368;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定网络和命名空间</span><br><span class="line"></span><br><span class="line">docker run -d --name nginx -v /tmp/nginx.conf:/etc/nginc/nginx.conf -p 8880:80 --net=container:pause --ipc=container:pause --pid=container:pause docker.io/nginx:lates</span><br><span class="line"></span><br><span class="line">#ghost博客</span><br><span class="line">docker run -d --name ghost --net=container:pause --ipc=container:pause --pid=container:pause docker.io/ghost:latest</span><br></pre></td></tr></table></figure><p>在这两种情况下，我们将<code>pasue</code>容器指定为我们要加入的<strong>命名空间</strong>容器。这将有效地创建我们的pod。</p><p>访问<localhost:8880>可以看到<code>ghost</code>通过<code>nginx</code>代理运行。因为网络命名空间在<code>pause</code>, <code>nginx</code>, <code>ghost</code>容器之间共享。<br>而这两个容器的<code>init</code>进程都是<code>pause</code>这个容器。</localhost:8880></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f nginx</span><br><span class="line"></span><br><span class="line">192.168.31.28 - - [08/Aug/2018:02:00:49 +0000] &quot;GET / HTTP/1.1&quot; 200 3195 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;</span><br><span class="line">192.168.31.28 - - [08/Aug/2018:02:00:49 +0000] &quot;GET /assets/built/screen.css?v=0bf822a279 HTTP/1.1&quot; 200 7360 &quot;http://node:8880/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker logs -f ghost</span><br><span class="line"></span><br><span class="line">[2018-08-08 02:00:30] INFO Creating table: posts</span><br><span class="line">[2018-08-08 02:00:30] INFO Creating table: users</span><br><span class="line">[2018-08-08 02:00:30] INFO Creating table: posts_authors</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看init</span><br><span class="line">docker exec -it ghost /bin/bash</span><br><span class="line"></span><br><span class="line">root@f12a374141a7:/var/lib/ghost# ps  -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 01:55 ?        00:00:00 /pause</span><br><span class="line">root         5     0  0 01:58 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class="line">systemd+     9     5  0 01:58 ?        00:00:00 nginx: worker process</span><br><span class="line">node        10     0  0 02:00 ?        00:00:03 node current/index.js</span><br><span class="line">root       127     0  0 02:37 ?        00:00:00 /bin/bash</span><br><span class="line">root       131   127  0 02:37 ?        00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="构建大型集群"><a href="#构建大型集群" class="headerlink" title="构建大型集群"></a>构建大型集群</h2><p>Building Large Clusters</p><p>在k8s v1.11，k8s支持做多5 000个节点的集群。更具体地说，支持满足以下条件的配置：</p><ul><li>不超过5 000个node</li><li>总量不超过150 000个pod</li><li>总量不超过300 000个container</li><li>每个节点不超过100个pod</li></ul><p><br><br><br></p><h2 id="使用salt配置k8s"><a href="#使用salt配置k8s" class="headerlink" title="使用salt配置k8s"></a>使用salt配置k8s</h2><p>Configuring Kubernetes with Salt</p><p>k8s集群能够使用salt进行配置。</p><p><br><br><br></p><h2 id="验证节点配置"><a href="#验证节点配置" class="headerlink" title="验证节点配置"></a>验证节点配置</h2><p>Validate Node Setup</p><p><br></p><p><strong>节点一致性测试</strong><br>Node Conformance Test</p><p>节点一致性测试是一种容器化测试框架，为节点提供系统验证和功能测试。<br>该测试验证节点是够满足k8s的最低要求，通过测试的节点有资格加入k8s集群。</p><p><br></p><p><strong>局限</strong><br>Limitations</p><p>在k8s v1.5中，节点一致性测试具有如下限制：</p><ul><li>节点一致性测试仅支持Docker作为容器runtime</li></ul><p><br></p><p><strong>节点先决条件</strong><br>Node Prerequisite</p><p>要运行节点一致性测试，节点必须满足与标准k8s节点相同的先决条件。该节点至少要安装一下守护进程:</p><ul><li>Container Runtime(Docker)</li><li>Kubelet</li></ul><p><br></p><p><strong>运行节点一致性测试</strong><br>Running Node Conformance Test</p><p>执行如下步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. 将kubelet执行localhost，测试框架启动一个master来测试kubelet</span><br><span class="line">#可使用 --pod-cidr, --cloud-provide标志</span><br><span class="line">--api-servers=&quot;http://localhost:8080&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 运行节点一致性测试</span><br><span class="line"># $CONFIG_DIR is the pod manifest path of your Kubelet.</span><br><span class="line"># $LOG_DIR is the test output path.</span><br><span class="line">sudo docker run -it --rm --privileged --net=host \</span><br><span class="line">  -v /:/rootfs -v $CONFIG_DIR:$CONFIG_DIR -v $LOG_DIR:/var/result \</span><br><span class="line">  k8s.gcr.io/node-test:0.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#一致性测试的架构支持</span><br><span class="line">node-test-adm64</span><br><span class="line">node-test-arm</span><br><span class="line">node-test-arm64</span><br></pre></td></tr></table></figure><p><br></p><p><strong>运行选定测试</strong><br>Running Selected Test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#运行指定测试，使用你想要运行的测试的正则表达式 覆盖环境变量FOCUS</span><br><span class="line">sudo docker run -it --rm --privileged --net=host \</span><br><span class="line">  -v /:/rootfs:ro -v $CONFIG_DIR:$CONFIG_DIR -v $LOG_DIR:/var/result \</span><br><span class="line">  -e FOCUS=MirrorPod \ # Only run MirrorPod test</span><br><span class="line">  k8s.gcr.io/node-test:0.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#跳过指定测试，覆盖环境变量SKIP</span><br><span class="line">sudo docker run -it --rm --privileged --net=host \</span><br><span class="line">  -v /:/rootfs:ro -v $CONFIG_DIR:$CONFIG_DIR -v $LOG_DIR:/var/result \</span><br><span class="line">  -e SKIP=MirrorPod \ # Run all conformance tests but skip MirrorPod test</span><br><span class="line">  k8s.gcr.io/node-test:0.2</span><br></pre></td></tr></table></figure><p>强烈建议仅运行一致性测试，因为它需要更复杂的配置来运行不一致性测试。</p><p><br><br><br></p><hr><p><br></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>concepts</p><p>概念部分可帮助你了解k8s系统的各个部分以及k8s用于表示集群的抽象，并帮助你更深入地了解k8s的工作原理。</p><p><br></p><h2 id="标准词汇"><a href="#标准词汇" class="headerlink" title="标准词汇"></a>标准词汇</h2><p>Standardized Glossary</p><p><br></p><ul><li><p><strong>Annotation</strong><br>用于将任意非标识元数据(metadata)附加到随想的键值对。</p></li><li><p><strong>Application Architect</strong><br>负责程序高级设计的人员。</p></li><li><p><strong>Application Developer</strong><br>编写在Kubernetes集群中运行的应用程序的人。</p></li><li><p><strong>Approver</strong><br>可以审批Kubernetes代码贡献的人。</p></li><li><p><strong>CLA(Contributor License Agreement)</strong><br>贡献者向开源项目授予其贡献许可的条款。</p></li><li><p><strong>Certificate</strong><br>一个加密安全文件，用于验证对Kubernetes集群的访问的加密。</p></li><li><p><strong>Cloud Controller Manager</strong></p></li><li><p><strong>Cloud Provider</strong></p></li><li><p><strong>Cluster</strong><br>一组称为节点(node)的机器，运行着由Kubernetes管理的容器化的应用程序。</p></li><li><p><strong>Cluster Architect</strong><br>设计一个或多个Kubernetes集群的基础架构的人。</p></li><li><p><strong>Cluster Operator</strong><br>配置，控制和监控集群的人。</p></li><li><p><strong>Code Contributor</strong><br>为Kubernetes开源代码库开发和共享代码的人。</p></li><li><p><strong>ConfigMap</strong><br>一个API对象，用于在键值对中存储非机密的数据。可认为是环境变量，命令行参数…</p></li><li><p><strong>Container</strong><br>一个轻量化和可移植的包含应用程序及其依赖项的可执行的镜像。</p></li><li><p><strong>Container Environment Variables</strong><br>容器环境变量是<code>name/value</code>对，为Pod中运行的容器提供有用的信息。</p></li><li><p><strong>Contributor</strong><br>捐赠代码，文档或时间来帮助Kubernetes项目或社区的人。</p></li><li><p><strong>Controller</strong><br>一个控制循环，通过APIServer监视集群的共享状态，并进行修改，尝试将当前状态移至理想(desired)状态。</p></li><li><p><strong>CronJob</strong><br>管理一个定期运行的工作。</p></li><li><p><strong>CustomResourceDefinition</strong><br>自定义码，用于定义要添加到Kubernetes APIServer的资源，而无需构建完整的自定义服务器。</p></li><li><p><strong>DaemonSet</strong><br>确保Pod的副本在集群的一组节点上运行。</p></li><li><p><strong>Deployment</strong><br>一个管理副本应用程序的API对象</p></li><li><p><strong>Dynamic Volume Provision</strong><br>允许用户请求自动创建存储卷。</p></li><li><p><strong>etcd</strong><br>一致且高度可用的键值存储，用作Kubernetes所有集群数据的备份存储。</p></li><li><p><strong>Helm Chart</strong><br>可以使用Helm工具管理的预配置Kubernetes资源包。</p></li><li><p><strong>Horizontal Pod Autoscaler</strong><br>一个API资源，可根据目标CPU利用率或自定义的指标自动调整Pod副本数。</p></li><li><p><strong>Image</strong><br>一个容器的存储实例，其中包含运行一个应用程序需要的一组软件。</p></li><li><p><strong>Ingress</strong><br>一个管理集群中服务的外部访问的API对象，通常是HTTP。</p></li><li><p><strong>Init Container</strong><br>一个或多个初始化容器，必须在任意应用程序容器运行之前完成运行。</p></li><li><p><strong>Istio</strong><br>一个开放平台，提供统一的方式来继承微服务，管理流量，实施策略和聚合遥测数据。</p></li><li><p><strong>Job</strong><br>运行完成的 有限/一批 任务。</p></li><li><p><strong>Kops</strong><br>一个命令行工具，可帮助你创建，销毁，升级和维护生产级、高可用性的Kubernetes集群。(仅支持AWS)</p></li><li><p><strong>Kubeadm</strong><br>一个快速安装Kubernetes和设置安全集群的工具。</p></li><li><p><strong>Kubectl</strong><br>用于与Kubernetes APIServer通信的命令行工具。</p></li><li><p><strong>Kubelet</strong><br>在集群的每个节点上运行的Agent。它确保容器运行在Pod中。</p></li><li><p><strong>Kubernetes API</strong><br>通过RESTful接口提供Kubernetes功能的应用程序，用于存储集群的状态。</p></li><li><p><strong>Label</strong><br>标记与用户有意义且相关的标识属性的对象。</p></li><li><p><strong>Minikube</strong><br>一个在本地运行Kubernetes的工具。</p></li><li><p><strong>Name</strong><br>客户端提供的字符串，用于引用资源URL中的对象。如<code>/api/vi/pods/some-name</code>.</p></li><li><p><strong>Namespace</strong><br>一个抽象概念，用于Kubernetes支持同一物理集群上的多个虚拟集群。</p></li><li><p><strong>Network Policy</strong><br>允许Pod组如何与其它网络端点进行通信的规范。</p></li><li><p><strong>Node</strong><br>节点是Kubernetes中的一个工作机器。</p></li><li><p><strong>Persistent Volume</strong><br>一个表示集群中一块存储的API对象。</p></li><li><p><strong>Persistent Volume Claim</strong><br>声明定义在一个PersistentVolume中的存储资源，以便可以作为一个volume挂载到容器中。</p></li><li><p><strong>Pod</strong><br>最小和最简单的Kubernetes对象。Pod表示集群上一组正在运行的容器。</p></li><li><p><strong>Pod Security Policy</strong><br>启用Pod创建和更新的细粒度授权。</p></li><li><p><strong>PodPreset</strong><br>一个API对象，在创建时将信息(secrets, volume, env var…)注入到Pod中。</p></li><li><p><strong>RBAC（role-basesd access control)</strong><br>管理授权决策，允许管理员通过Kubernetes API动态配置访问策略。</p></li><li><p><strong>ReplicaSet</strong><br>副本集是下一代副本控制器。</p></li><li><p><strong>Resource Quotas</strong><br>提供限制每个命名空间的聚合资源消耗的约束。</p></li><li><p><strong>Reviemer</strong><br>在项目的某些部分检查代码质量和正确性的人。</p></li><li><p><strong>Secret</strong><br>存储敏感信息，如密码，token…</p></li><li><p><strong>Security Context</strong><br><code>securityContext</code>字段定义Pod或容器的权限和访问控制设置，包括运行时UID和GID。</p></li><li><p><strong>Selector</strong><br>允许用户根据label过滤资源列表。</p></li><li><p><strong>Service</strong><br>一个API对象，描述如何访问应用程序，并可以描述端口和负载均衡器。</p></li><li><p><strong>Service Account</strong><br>为运行在Pod中的进程提供一个标识。</p></li><li><p><strong>Service Catalog</strong><br>一个扩展API，允许Kubernetes集群中运行的应用程序能够轻松使用外部托管软件，如数据库存储服务。</p></li><li><p><strong>StatefulSet</strong><br>管理一组Pods的部署和伸缩，并提供有关这些Pod的排序和唯一性的保证。</p></li><li><p><strong>UID</strong><br>Kubernetes系统生成的一个字符串，用于唯一标识对象。</p></li><li><p><strong>Volume</strong><br>一个包含数据的目录，可供Pod中的容器访问。</p></li><li><p><strong>Volume Plugin</strong><br>卷插件可在Pod中集成存储。</p></li><li><p><strong>kube-apiserver</strong><br>一个Master组件，用于暴露Kubernetes API。它是Kubernetes控制面的前端。</p></li><li><p><strong>kube-controller-manager</strong><br>一个Master组件，用于运行控制器。</p></li><li><p><strong>kube-proxy</strong><br>运行在集群中的每一个节点上的网络代理。</p></li><li><p><strong>kube-scheduler</strong><br>Master上的组件，用于监测未创建节点新创建的Pod，并选择一个节点供其运行。</p></li></ul><p><br><br><br></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="K8s是什么"><a href="#K8s是什么" class="headerlink" title="K8s是什么"></a>K8s是什么</h3><p>Kubernetes（常简称为K8s），Kubernetes的名字来自希腊语，意思是“舵手”或“领航员”。K8s是将8个字母“ubernete”替换为“8”的缩写。<br>它用于自动部署、扩展和管理容器化（containerized）应用程序的开源系统。它旨在提供“跨主机集群的自动部署、扩展以及运行应用程序容器的平台”。它支持一系列容器工具, 包括Docker等。</p><p>通过Kubernetes你可以：</p><ul><li>快速部署应用</li><li>快速扩展应用</li><li>无缝对接新的应用功能</li><li>优化硬件资源，降低成本</li></ul><p>Kubernetes特点：</p><ul><li>可移植(portable)</li><li>可扩展( extensible)</li><li>自动化(automatic)</li></ul><p>容器优点：</p><ul><li>快速创建/部署应用</li><li>持续开发、集成和部署(CI/CD)</li><li>开发和运维相分离</li><li>开发、测试、生产环境的一致性</li><li>可移植性</li><li>松耦合、分布式、弹性伸缩、微服务化</li><li>资源隔离</li><li>资源利用</li></ul><p><br></p><p><strong>Kubernetes能做什么</strong><br>Kubernetes还允许开发人员从物理和虚拟机脱离，从以主机为中心的基础架构转移到以容器为中心的基础架构。这样可以使用容器固有的全部优点。</p><p>Kubernetes满足的应用程序常见需求：</p><ul><li>Pod</li><li>挂载外部存储</li><li>分布式secrets</li><li>应用健康检查</li><li>副本应用实例</li><li>横向自动伸缩</li><li>服务发现</li><li>负载均衡</li><li>滚动更新</li><li>资源监控</li><li>日志采集和存储</li><li>自检和调试</li><li>认证和授权</li></ul><p>这提供了<strong>平台即服务(PAAS)</strong>的简单性以及<strong>基础架构即服务(IAAS)</strong>的灵活性，并促进基础设施供应商的可移植性。</p><p><br></p><p><strong>Kubernetes不是什么</strong><br>Kubernetes 不是一个传统意义上，包罗万象的PaaS(平台即服务)系统。</p><ul><li>不限制支持的应用程序类型，不限制应用程序框架</li><li>不提供中间件(如消息中间件)、数据处理框架(如spark)，数据库或集群存储系统</li><li>不提供点击即部署的服务市场</li><li>不部署代码不构建应用</li><li>允许用户选择日志、监控和报警</li><li>不提供或授权一个全面的应用程序配置系统/语言</li><li>不提供任何机器配置、维护、管理或自我修复系统</li></ul><p>你可以自定义你的PAAS，与你选择的CI系统集成，或与Kubernetes一起使用，将你的容器镜像部署到Kubernetes。<br>由于Kubernetes在应用级别而不仅仅在硬件级别上运行，因此它提供了PAAS产品通用的一些功能。如部署、扩展、负载均衡、日志记录、监控等。</p><p><br><br><br></p><h3 id="k8s组件"><a href="#k8s组件" class="headerlink" title="k8s组件"></a>k8s组件</h3><p>Kubernetes Components</p><p>Kubernetes 所需的各种二进制组件, 用于提供齐全的功能。</p><p><br></p><h4 id="Master组件"><a href="#Master组件" class="headerlink" title="Master组件"></a>Master组件</h4><p>Master组件提供的集群控制面(control plane)。Master作出集群的全局决策，以及检测和相应集群事件。<br>Master组件可在集群中任何节点上运行。然而，为了简单，通常在一台机器上启动所有Master组件，并且不会在此机器上运行用户容器。<br>可使用多个机器的设置来构建<strong>高可用性能集群</strong>。</p><p><br></p><p><strong>kube-apiserver</strong><br><code>kube-apiserver</code>对外展示Kubernetes API。它是Kubernetes前端控制层，任何的资源请求/调用都是通过它提供的接口进行。<br>它被设计为水平扩展，即通过部署更多实例来扩展。</p><p><br></p><p><strong>etcd</strong><br>持久化和高可用的K/V存储，用于Kubernetes所有集群数据的后端存储。<br>请始终为k8s集群的etcd数据做备份。</p><p><br></p><p><strong>kube-controller-manager</strong><br>Master上运行的控制器组件，它们是集群中处理常规任务的后台线程。<br>逻辑上讲，每个控制器都是一个单独的进程，但为了降低复杂性，它们都被编译为单个二进制文件并在单个进程中运行。</p><p>这些控制器包含：</p><ul><li>节点控制器(Node Controller): 负责在节点故障时通知和响应</li><li>副本控制器(Replication Controller): 负责维护系统中每个副本控制器对象正确的pod数</li><li>端点控制器(Endpoints Controller): 填入端点对象</li><li>服务账户(service accoute)和令牌控制器(token controller): 为新的命名空间(namespace)创建默认账户和API访问令牌</li></ul><p><br></p><p><strong>cloud-controller-manager</strong><br>云控制器管理器用于与底层云提供商进行交互。它仅运行云提供商特定的控制器循环。你必须在<code>kube-controller-manager</code>中禁用这些controller loops，将<code>--cloud-provider</code>标志设置为<code>external</code>来禁用。</p><p>以下控制器具有云提供商依赖关系：</p><ul><li>节点控制器: 用于检查云服务商提供的程序</li><li>路由控制器: 用于在底层云基础架构中设置路由</li><li>服务控制器: 用于创建，更新，删除云服务商提供的负载均衡器</li><li>数据卷控制器: 用于创建，附件和挂载卷，以及与云服务商提供的卷进行交互</li></ul><p><br></p><p><strong>kube-scheduler</strong><br>监视还未分配节点的新创建的pod，选择一个节点供pod运行。<br>调度决策所考虑的因素包括： 个体/集体的资源需求，硬件/软件/策略的约束，亲和力/反亲和性的规范，工作负载和期限。</p><p><br><br><br></p><h4 id="Node组件"><a href="#Node组件" class="headerlink" title="Node组件"></a>Node组件</h4><p>节点(node)组件运行在每个节点，维护运行的pod并提供Kubernetes运行时环境。</p><p><br></p><p><strong>kubelet</strong><br>在集群中每个节点上运行的Agent，它确保container运行在pod中。<br>kubelet采用通过各种机制提供的一组PodSpecs，并确保这些PodSpecs中描述的容器运行且健康。kubelet不管理不是由k8s创建的容器。</p><p>提供如下功能：</p><ul><li>挂载pod所需的数据卷</li><li>下载pod的secrets</li><li>pod中运行docker容器</li><li>周期性的容器健康检查</li><li>如有需要，通过创建<code>mirror pod</code>将pod的状态报告回系统的其余部分</li><li>将节点的状态报告回系统的其余部分</li></ul><p><br></p><p><strong>kube-proxy</strong><br>通过维护主机上的网络规则并执行连接转发，来实现Kubernetes服务抽象。</p><p><br></p><p><strong>container runtime</strong><br>负责运行容器的软件。k8s支持多种runtimes： docker, rkt, runc…</p><p><br></p><p><strong>docker, rkt, supervisord, fluentd…</strong></p><p><br><br><br></p><h4 id="Addons"><a href="#Addons" class="headerlink" title="Addons"></a>Addons</h4><p>扩展是实现集群功能的Pod和Service。pod可由Deployment， Replication等管理。命名空间扩展对象在<code>kube-system</code>命名空间中创建。</p><p><br></p><p><strong>DNS</strong><br>虽然其它插件并非严格要求，但所有k8s集群都应具有集群DNS，因为许多示例都依赖于它。<br>集群DNS是一个DNS服务器，除了你环境中的DNS服务器，它还为k8s服务提供DNS记录。<br>由k8s启动的容器会在DNS搜索中自动包含此DNS服务器。</p><p><br></p><p><strong>Web UI(dashboard)</strong><br>仪表盘。</p><p><br></p><p><strong>container resource monitoring</strong><br>记录有关中央数据库中容器的通用时间序列度量标准，并提供用于浏览该数据的UI。</p><p><br></p><p><strong>cluster-level logging</strong><br>集群级别的日志记录机制，复制将容器日志保存到具有<code>search/browse</code>界面的中央日志存储。</p><p><br><br><br></p><h3 id="k8s-API"><a href="#k8s-API" class="headerlink" title="k8s API"></a>k8s API</h3><p>k8s API还可作为系统声明性配置架构的基础。<code>kubectl</code>命令行工具可用于创建，更新，删除和获取API对象。<br>k8s还根据API资源存储其序列化状态(etcd中)。k8s自身被分解为多个组件，这些组件通过其API进行交互。</p><p><br></p><p><strong>OpenAPI和Swagger定义</strong><br>完整的API详细信息记录在<code>Swagger v1.2</code>和<code>OpenAPI</code>。k8s apiserver(master)公开了一个API，可用于检索位于<code>/swaggerapi</code>的<code>Swagger v1.2 k8s API</code>.<br>从k8s 1.10开始，OpenAPI规范在单个<code>/openapi/v2</code>端点中提供。单独格式的端点(如<code>swagger.json...</code>)已被弃用，后面会被移除。</p><p>通过设置HTTP header指定请求格式:</p><table><thead><tr><th>Header</th><th>Possible Values</th></tr></thead><tbody><tr><td>Accept</td><td>application/json, application/com.github.proto-openapi.spec.v2@v1.0+protobuf (the default content-type is application/json for <em>/</em> or not passing this header)</td></tr><tr><td>Accept-Encoding</td><td>gzip (not passing this header is acceptable)</td></tr></tbody></table><p>栗子：</p><table><thead><tr><th>Before 1.10</th><th>Starting with Kubernetes 1.10</th></tr></thead><tbody><tr><td>GET /swagger.json</td><td>GET /openapi/v2 Accept: application/json</td></tr><tr><td>GET /swagger-2.0.0.pb-v1</td><td>GET /openapi/v2 Accept: application/com.github.proto-openapi.spec.v2@v1.0+protobuf</td></tr><tr><td>GET /swagger-2.0.0.pb-v1.gz</td><td>GET /openapi/v2 Accept: application/com.github.proto-openapi.spec.v2@v1.0+protobuf Accept-Encoding: gzip</td></tr></tbody></table><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#查看</span><br><span class="line">curl localhost:8080</span><br><span class="line">&#123;</span><br><span class="line">  &quot;paths&quot;: [</span><br><span class="line">    &quot;/api&quot;,</span><br><span class="line">    &quot;/api/v1&quot;,</span><br><span class="line">    &quot;/apis&quot;,</span><br><span class="line">    &quot;/apis/apps&quot;,</span><br><span class="line">    &quot;/apis/apps/v1beta1&quot;,</span><br><span class="line">    &quot;/apis/authentication.k8s.io&quot;,</span><br><span class="line">    &quot;/apis/authentication.k8s.io/v1beta1&quot;,</span><br><span class="line">    &quot;/apis/authorization.k8s.io&quot;,</span><br><span class="line">    &quot;/apis/authorization.k8s.io/v1beta1&quot;,</span><br><span class="line">    &quot;/apis/autoscaling&quot;,</span><br><span class="line">    &quot;/apis/autoscaling/v1&quot;,</span><br><span class="line">    &quot;/apis/batch&quot;,</span><br><span class="line">    &quot;/apis/batch/v1&quot;,</span><br><span class="line">    &quot;/apis/batch/v2alpha1&quot;,</span><br><span class="line">    &quot;/apis/certificates.k8s.io&quot;,</span><br><span class="line">    &quot;/apis/certificates.k8s.io/v1alpha1&quot;,</span><br><span class="line">    &quot;/apis/extensions&quot;,</span><br><span class="line">    &quot;/apis/extensions/v1beta1&quot;,</span><br><span class="line">    &quot;/apis/policy&quot;,</span><br><span class="line">    &quot;/apis/policy/v1beta1&quot;,</span><br><span class="line">    &quot;/apis/rbac.authorization.k8s.io&quot;,</span><br><span class="line">    &quot;/apis/rbac.authorization.k8s.io/v1alpha1&quot;,</span><br><span class="line">    &quot;/apis/storage.k8s.io&quot;,</span><br><span class="line">    &quot;/apis/storage.k8s.io/v1beta1&quot;,</span><br><span class="line">    &quot;/healthz&quot;,</span><br><span class="line">    &quot;/healthz/ping&quot;,</span><br><span class="line">    &quot;/healthz/poststarthook/bootstrap-controller&quot;,</span><br><span class="line">    &quot;/healthz/poststarthook/extensions/third-party-resources&quot;,</span><br><span class="line">    &quot;/healthz/poststarthook/rbac/bootstrap-roles&quot;,</span><br><span class="line">    &quot;/logs&quot;,</span><br><span class="line">    &quot;/metrics&quot;,</span><br><span class="line">    &quot;/swaggerapi/&quot;,</span><br><span class="line">    &quot;/ui/&quot;,</span><br><span class="line">    &quot;/version&quot;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p><br></p><p><strong>API 版本</strong><br>为了更容易消除字段或重构资源表示，k8s支持多个API版本，每个版本位于不同的API路径。如<code>/api/vi</code>或<code>/apis/extensions/v1beta1</code>.</p><p>我们选择在API级别，而不是资源级别/字段级别进行版本控制，以确保API提供干净、一致的系统资源和行为视图，并允许控制对生命末端和实验性API的访问。json和protobuf序列化模式都遵循相同的模式更改指南。请注意，API版本和软件版本仅间接相关。</p><p>不同的API版本意味着不同级别的稳定性和支持：</p><ul><li>Alpha level<ul><li>版本名包含alpha(如 v1aplha1)</li><li>启用该功能可能会暴露bug，默认禁用</li><li>可随时删除对功能的支持，恕不另行通知</li><li>可能会在以后软件版本中以不兼容的方式更改，恕不另行通知</li><li>由于错误风险和缺乏长期支持，建议仅在短期测试集群中使用</li></ul></li><li>Beta level<ul><li>版本名包含beta(如 v2beta3)</li><li>代码经过充分测试，启用该功能被认为是安全的。默认启用</li><li>虽然细节会有所变化，但不会删除对整体功能的支持</li><li>建议仅用于非关键业务，因为后续版本可能会发生不兼容的更改</li><li>请尝试我们测试版功能并提供反馈</li></ul></li><li>Stable level<ul><li>版本名是vx，x为整数</li><li>许多后续版本的软件将出现稳定版的功能</li></ul></li></ul><p><br></p><p><strong>API groups</strong><br>为了更容易扩展k8s API，我们实施了<code>API Groups</code>，它在REST path和序列化对象的apiVersion字段中指定。</p><p>目前在使用的几个API groups:</p><ul><li>核心组(core group)，又称遗留组，位于REST path的<code>/api/v1</code>，并使用<code>apiVersion: v1</code></li><li>命名组(named group)，位于REST path的<code>/apis/$GROUP_NAME/$VERSION</code>，并使用<code>apiVersion: $GROUP_NAME/$VERSION</code></li></ul><p>两种受支持的自定义资源扩展API的路径：</p><ul><li>自定义资源(CustomResourceDefiniton) 适用于具有非常基本CRUD需求的用户</li><li>需要完整k8s API语义的用户可以实现自己的apiserver，并使用聚合器使其无缝连接到客户端</li></ul><p><br></p><p><strong>启用 API groups</strong><br>默认情况下启用某些资源和API groups。通过在apiserver设置<code>--runtime-config</code>可启用/禁用它。此配置接收逗号分隔的KV，描述了apiserver运行时配置。</p><p><br></p><p><strong>在API groups中启用资源</strong><br>默认情况下启动 DeamonSets, Deployments, HorizontalPodAutoscalers, Ingress, Jobs, ReplicaSets。其它扩展资源可通过在apiserver上设置<code>--runtime-config</code>启用或禁用。</p><p><br><br><br></p><h3 id="k8s-对象"><a href="#k8s-对象" class="headerlink" title="k8s 对象"></a>k8s 对象</h3><p>本节解释了如何在k8s API中表示k8s对象，以及如何以<code>.yaml</code>格式表示它们。</p><p><br></p><h4 id="理解k8s对象"><a href="#理解k8s对象" class="headerlink" title="理解k8s对象"></a>理解k8s对象</h4><p>在k8s系统中，k8s对象是持久化的实体。k8s使用这些实体来表示整个集群的状态。特别地，它们描述了如下信息：</p><ul><li>哪些容器化应用程序正在运行(以及运行在哪个节点上)</li><li>可以被这些应用程序使用的资源</li><li>应用程序行为方式的策略(重启、升级、容错)</li></ul><p>k8s 对象是一个<strong>意图记录(record of intent)</strong> —— 一旦创建了对象，k8s系统将持续工作以确保对象存在。通过创建一个对象，你可以有效地告诉k8s系统你希望集群的工作负载看起来像什么，这是你的集群的<strong>期望状态(desired state)</strong>。<br>要使用k8s对象(创建, 修改, 删除)，需要使用k8s API。当你使用<code>kubectl</code>命令行接口时，CLI会为你进行必要的k8s API调用。</p><p><br></p><p><strong>对象规约与状态</strong><br>Object Spec and Status</p><p>每个k8s 对象都包含了两个嵌套的对象字段，用于控制对象的配置：<strong>对象规约</strong>和<strong>对象状态</strong>。<br>在任何时刻，k8s controller plane都会主动管理对象的实际状态，以匹配你提供的期望状态。</p><ul><li>规约(spec)，必须提供。描述了对象的期望状态(diresed state)——你希望对象具有的特征。</li><li>状态(status)，描述对象的实际状态，由k8s系统提供和更新。</li></ul><p>例如，k8s Deployment是一个可以表示你集群上运行的应用程序的对象。当你创建一个Deployment，你可以设置部署规约以指定你希望应用程序运行三个副本。k8s系统读取部署规约并启动应用程序所需的三个实例——更新状态以符合你的规范。如果这些事例中的任何一个失败(状态改变)，k8s系统通过进行校正来响应规约和状态之间的差异。在这种情况下，启动替换实例。</p><p><br></p><p><strong>描述k8s 对象</strong><br>在k8s中创建对象时，必须提供描述其期望状态的对象规约，以及有关对象的一些基本信息(如 名称)。当你使用k8s API来创建对象时，API请求必须在请求正文中将信息作为JSON格式。通常，你在<code>.yaml</code>文件中向<code>kubectl</code>提供信息，<code>kubectl</code>在发出API请求时将信息转换为JSON格式。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># for versions before 1.9.0 use apps/v1beta2</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>使用类似上面的<code>.yaml</code>文件创建部署的方法，是在<code>kubectl</code>命令行工具中使用<code>kubectl create</code>命令，将<code>.yaml</code>文件作为参数传递。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://k8s.io/examples/application/deployment.yaml --record</span><br><span class="line">#deployment &quot;nginx-deployment&quot; created</span><br></pre></td></tr></table></figure><p><br></p><p><strong>必填字段</strong><br>在要创建k8s 对象的<code>.yaml</code>文件中，必须配置一下字段：</p><ul><li><code>apiVersion</code>： 创建对象的k8s API版本</li><li><code>kind</code>： 创建的对象类型</li><li><code>metadata</code>： 有助于识别对象唯一性的数据，包括name, uid, namespace…</li></ul><p>你还需要提供<code>spec</code>字段。对于每个k8s对象，对象规约的精确格式是不同的，并且包含特定于该对象的嵌套字段。</p><p><br><br><br></p><h4 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h4><p>Kubernetes REST API中所有对象都用<strong>Name</strong>和<strong>UID</strong>来明确标识。<br>对于用户提供的非唯一的属性，k8s提供<strong>labels</strong>和<strong>annotations</strong>。</p><p><br></p><p><strong>Names</strong><br>客户端提供的字符串，用于引用资源URL中的对象。如<code>/api/v1/pods/some-name</code>.<br>一个给定<code>kind</code>的对象同时只能有一个<code>name</code>。但如果你删除了此对象，便可以为新对象赋予此名字。<br>按照惯例，k8s资源的名称的最大长度应为253个字符，并由<code>小写字母,数字, -, .</code>字符组成。但某些资源可能具有更过限制。</p><p><br></p><p><strong>UIDs</strong><br>k8s 系统生成的字符串，用于唯一标识对象。<br>在k8s集群的整个生命周期中创建的每个对象都具有一个唯一的UID。它旨在区分类似实体的历史事件。</p><p><br><br><br></p><h4 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h4><p>k8s支持在物理集群中创建多个虚拟集群，这些虚拟机群称为<code>namespaces</code>。命名空间是一种将集群资源划分为多个用途的方法。<br>命名空间名称满足正则表达式，最大长度为63位。</p><p><br></p><p><strong>什么时候使用多个命名空间</strong><br>命名空间旨在用于多个用户分布在多个团队/多个项目的环境中。对于具有几个到几十个用户的集群，你根本不需要创建和考虑命名空间。<br>命名空间提供名称范围。资源名称在命名空间中必须唯一，但不能跨命名空间。<br>命名空间是一种在多个用户之间划分集群资源的方法。<br>在k8s的未来版本中，默认情况下，同一命名空间中的对象将具有相同的访问控制策略(ACP)。<br>没有必要使用多个命名空间仅来分隔略有不同的资源。如同一软件的不同版本，使用<code>labels</code>来区分同一命名空间内的资源。</p><p><br></p><p><strong>操作命名空间</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看</span></span><br><span class="line">kubectl get ns</span><br><span class="line">NAME          STATUS    AGE</span><br><span class="line">default       Active    13d</span><br><span class="line">kube-system   Active    13d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过命令创建</span></span><br><span class="line">kubectl create namespace my-namespace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#或通过文件创建</span></span><br><span class="line">vim my-namespace.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: my-namespace</span><br><span class="line"></span><br><span class="line">kubectl create -f ./my-namespace.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">kubectl get namespace</span><br><span class="line">NAME           STATUS    AGE</span><br><span class="line">default        Active    13d</span><br><span class="line">kube-system    Active    13d</span><br><span class="line">my-namespace   Active    4s</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">kubectl delete namespace my-namespace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置请求的命名空间</span></span><br><span class="line"><span class="comment">#使用--namespace标志临时设置请求的命名空间</span></span><br><span class="line">kubectl kubectl get pods --namespace=default</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置命名空间首选项</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context $(kubectl config current-context) --namespace=my-namespace</span><br><span class="line">kubectl config view</span><br></pre></td></tr></table></figure><p>Kubernetes有三个初始的命名空间：</p><ul><li><code>default</code>: 没有其它命名空间时，对象的默认命名空间</li><li><code>kube-system</code>: k8s系统创建的对象的命名空间</li><li><code>kube-public</code>: 此命名空间是自动创建的，可供所有用户读取(包括未认证用户)。此命名空间主要用于集群使用，以防止某些资源在整个集群中可见且可公开读取。此命名空间的公共方面只是一个约定，而非要求。</li></ul><p>注意：</p><ul><li>删除一个命名空间会自动删除所有属于该命名空间的资源</li><li>k8s初始化的两个命名空间无法删除</li><li>持久化卷(persistent volume)不属于任何命名空间，但持久化卷声明(persistent volume claim)是属于某个特定命名空间的</li><li>事件(event)是否属于命名空间取决于产生事件的对象</li></ul><p><br></p><p><strong>命名空间和DNS</strong><br>当你创建一个服务(service)，它会创建相应的DNS条目(dns entry)。此条目的格式为<code>&lt;service-name&gt;.&lt;namespace-name&gt;.svc.cluster.local</code>，这表示如果一个容器只是用<code>&lt;service-name&gt;</code>，它将会解析为命名空间本地的服务。这对于在多个命名空间(如 开发/测试/生产)中使用相同的配置非常有用。如果想要扩命名空间访问，则需要使用完全限定的域名(fully qualified domain name)。</p><p><br></p><p><strong>不是所有对象都在命名空间中</strong><br>大多数k8s资源(pods, services, replication controller…)都在某些命名空间中。然而，命名空间资源本身并不在命名空间中。并且，低级资源(node, persistentVolumes)并不在任何命名空间中。</p><p>查看k8s资源是否在命名空间中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl api-resources --namespaced=true</span><br><span class="line">kubectl api-resources --namespaced=false</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Labels和Selectors"><a href="#Labels和Selectors" class="headerlink" title="Labels和Selectors"></a>Labels和Selectors</h4><p>标签是被关联到对象上的<code>key/value</code>对。标签旨在用于指定对用户有意义且相关的对象的标识属性，但不直接按时核心系统的语义。标签可用于组织和选择对象的子集。标签可在创建时附加到对象，随时可以添加和修改。每个对象可拥有多个标签，对于给定的对象，<code>key</code>必须唯一。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">"metadata": &#123;</span><br><span class="line">  "labels": &#123;</span><br><span class="line">    "key1" : "value1",</span><br><span class="line">    "key2" : "value2",</span><br><span class="line">    "keyN" : "valueN"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">"labels": &#123;</span><br><span class="line">  "release" : "stable",</span><br><span class="line">  "environment" : "dev",</span><br><span class="line">  "track" : "daily"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们最终将<strong>索引(index)</strong>和<strong>反向索引(reverse-index)</strong>标签，用于高效查询和监视，使用它们在UI和CLI中进行排序和分组。我们不希望对非标识(non-identifying)信息使用标签，特别是大型结构化数据。非标识信息应该记录到<code>annorations</code>。</p><p>标签使用户能够以松散耦合的方式将自己的组织结构映射到系统对象中，而无需客户端存储这些映射。</p><p><br></p><p><strong>语法和字符集</strong><br>有效的label key有两个字段: 可选前缀和名称，用斜杆分隔。<br>名字字段是必须的，小于等于63个字符，以字母数字开头和结尾，还可使用<code>-, _, .</code>三个字符。<br>前缀可选。如果指定，前缀必须是DNS子域，不超过253个字符，后跟斜杆<code>/</code>。如果省略，则假定label key对用户是私有的。向最终用户对象添加标签的自动系统组件(kube-scheduler, kube-apserver…)必须制定前缀。<code>kuberneter.io/</code>前缀保留个k8s核心组件。</p><p>有效的label value必须小于等于63个字符，可为空，或以字母数字开头和结尾，还可使用<code>-, _, .</code>三个字符。</p><p><br></p><p><strong>label selectors</strong><br>标签不提供唯一性。通常，我们希望许多对象携带相同的标签。<br>通过<code>label selector</code>，客户端/用户 可以识别一组对象。标签选择器是k8s中的核心分组原语。</p><p>API目前支持两种类型的选择器: <code>equality-based</code>和<code>set-based</code>。标签选择器可由逗号<code>,</code>分隔的多个要求组成。<br>一个空(empty)标签选择器(zero requirements)，选择集合中的每个对象。<br>一个空(null)标签选择器(仅可用于选择器字段)不选择任何对象。</p><p><strong>equality-based requirement</strong><br>基于平等/不平等的要求允许按标签键和值进行过滤。匹配对象必须满足所有指定的标签约束，尽管它们也可能具有其它标签。<br>允许三种运算符:<code>=, ==, !=</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environment = production</span><br><span class="line">tier != frontend</span><br></pre></td></tr></table></figure><p><strong>set-based requirement</strong><br>基于集合的标签的要求允许根据一组值过滤键。<br>支持三种操作符: <code>in, notin, exists</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">environment in (production, qa)</span><br><span class="line">tier notin (frontend, backend)</span><br><span class="line">partition</span><br><span class="line">!partition</span><br></pre></td></tr></table></figure><p><br></p><p><strong>API</strong></p><p>LIST and WATCH filtering<br><code>LIST</code>和<code>WATCH</code>操作可以指定标签选择器来过滤使用查询参数返回的对象集。两个要求都是允许的。<br>两种标签选择器的样式都可使用通过TEST客户端列出或查看资源。</p><ul><li>equality-based requirements: <code>?labelSelector=environment%3Dproduction,tier%3Dfrontend</code></li><li>set-based requirements: <code>?labelSelector=environment+in+%28production%2Cqa%29%2Ctier+in+%28frontend%29</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#equality-based</span></span><br><span class="line">kubectl get pods -l environment=production,tier=frontend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#set-based</span></span><br><span class="line">kubectl get pods -l <span class="string">'environment in (production),tier in (frontend)'</span></span><br><span class="line">kubectl get pods -l <span class="string">'environment in (production, qa)'</span></span><br><span class="line">kubectl get pods -l <span class="string">'environment,environment notin (frontend)'</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Service and ReplicationController</strong><br>服务所针对的一组pod使用标签选择器进行定义。类似地，副本控制器应该管理的pod数量也使用标签选择器定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#json格式</span><br><span class="line">&quot;selector&quot;: &#123;</span><br><span class="line">  &quot;component&quot;: &quot;redis&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#yaml格式</span><br><span class="line">selector:</span><br><span class="line">  component: redis</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h4><p>你可使用k8s <code>annotation</code>(注释)将任意非标识(non-identifying)元数据附加到对象。工具和库等客户端可以检索此元数据。它也是<code>key/value</code>对。<br>Annotations不会被k8s直接使用，其主要目的是方便用户阅读查找。</p><p><br></p><p><strong>将元数据追加到对象</strong><br>你可使用<code>label</code>或<code>annotations</code>将原数据追加到k8s对象。<br>标签用于选择对象和查找满足特定条件的对象集合。<br>相反，注释不用于识别和选择对象。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"metadata": &#123;</span><br><span class="line">  "annotations": &#123;</span><br><span class="line">    "key1" : "value1",</span><br><span class="line">    "key2" : "value2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Field-Selectors"><a href="#Field-Selectors" class="headerlink" title="Field Selectors"></a>Field Selectors</h4><p>字段选择器允许你根据一个或多个资源字段的值选择k8s资源。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#三种操作符</span><br><span class="line">=, ==, !=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">metadata.name=my-service</span><br><span class="line">metadata.namespace!=default</span><br><span class="line">status.phase=Pending</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">kubectl get pods --field-selector status.phase=Running</span><br><span class="line">NAME                           READY     STATUS    RESTARTS   AGE</span><br><span class="line">hello-world-3198537413-138pg   1/1       Running   0          5d</span><br><span class="line">hello-world-3198537413-67g6d   1/1       Running   0          5d</span><br><span class="line">hello-world-3198537413-bf73l   1/1       Running   0          5d</span><br><span class="line">hello-world-3198537413-ddgb3   1/1       Running   0          5d</span><br><span class="line">hello-world-3198537413-ffj90   1/1       Running   0          5d</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">kubectl get  ingress --field-selector foo.bar=baz</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">kubectl get pods --field-selector=status.phase!=Running,spec.restartPolicy=Always</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">kubectl get statefulsets,services --field-selector metadata.namespace!=default</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Recommended-Labels"><a href="#Recommended-Labels" class="headerlink" title="Recommended Labels"></a>Recommended Labels</h4><p>你可以使用比<code>kubectl</code>和<code>dashboard</code>更多的工具来可视化和管理k8s对象。一组通用的标签允许工具以互操作的方式工作，以所有工具都能理解的通用方式描述对象。<br>除了支持工具之外，推荐的标签还以可查询的方式描述应用程序。</p><p><code>shared labels and annotations</code>共享一个通用的前缀: <code>app.kubernetes.io</code>。没有前缀的标签对用户是私有的。共享前缀可确保共享标签不会干扰自定义用户标签。</p><p><br></p><p>为了充分利用这些标签，应将它们应用于每个资源对象。</p><table><thead><tr><th>Key</th><th>Description</th><th>Example</th><th>Type</th></tr></thead><tbody><tr><td>app.kubernetes.io/name</td><td>The name of the application</td><td>mysql</td><td>string</td></tr><tr><td>app.kubernetes.io/instance</td><td>A unique name identifying the instance of an application</td><td>wordpress-abcxzy</td><td>string</td></tr><tr><td>app.kubernetes.io/version</td><td>The current version of the application (e.g., a semantic version, revision hash, etc.)</td><td>5.7.21</td><td>string</td></tr><tr><td>app.kubernetes.io/component</td><td>The component within the architecture</td><td>database</td><td>string</td></tr><tr><td>app.kubernetes.io/part-of</td><td>The name of a higher level application this one is part of</td><td>wordpress</td><td>string</td></tr><tr><td>app.kubernetes.io/managed-by</td><td>The tool being used to manage the operation of an application</td><td>helm</td><td>string</td></tr></tbody></table><p>要说明这些标签的运行情况，请考虑一下<code>StatefulSet</code>对象:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="string">app.kubernetes.io/instance:</span> <span class="string">wordpress-abcxzy</span></span><br><span class="line">    <span class="string">app.kubernetes.io/version:</span> <span class="string">"5.7.21"</span></span><br><span class="line">    <span class="string">app.kubernetes.io/component:</span> <span class="string">database</span></span><br><span class="line">    <span class="string">app.kubernetes.io/part-of:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="string">app.kubernetes.io/managed-by:</span> <span class="string">helm</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="使用kubectl进行对象管理"><a href="#使用kubectl进行对象管理" class="headerlink" title="使用kubectl进行对象管理"></a>使用kubectl进行对象管理</h3><p><code>kubectl</code>命令行工具支持多种方式来创建和管理k8s对象。<br>应该只使用一种技术来管理k8s对象。对同一个对象的混合和匹配技术会导致未定义的行为。</p><table><thead><tr><th>Management technique</th><th>Operates on</th><th>Recommended environment</th><th>Supported writers</th><th>Learning curve</th></tr></thead><tbody><tr><td>Imperative commands</td><td>Live objects</td><td>Development projects</td><td>1+</td><td>Lowest</td></tr><tr><td>Imperative object configuration</td><td>Individual files</td><td>Production projects</td><td>1</td><td>Moderate</td></tr><tr><td>Declarative object configuration</td><td>Directories of files</td><td>Production projects</td><td>1+</td><td>Highest</td></tr></tbody></table><p><br><br><br></p><h4 id="必要的命令"><a href="#必要的命令" class="headerlink" title="必要的命令"></a>必要的命令</h4><p>Managing Kubernetes Objects Using Imperative Commands</p><p>使用k8s命令行工具内置的必要命令，可直接快速创建、更新、删除k8s对象。</p><p><br></p><p><strong>权衡</strong><br><code>kubectl</code>工具支持三种对象管理：</p><ul><li>Imperative commands(必要的命令)</li><li>Imperative object configuration(必要的对象配置)</li><li>Declarative object configuration(声明的对象配置)</li></ul><p><br><br><br></p><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><p><code>kubectl</code>工具支持动词驱动的命令，用以创建一些最常见的对象类型。这些命令被命名为即使不熟悉k8s对象类型的用户也能够识别。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个新的Deployment对象，以在一个或多个pod中运行container</span></span><br><span class="line">run</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个新的Service对象，以在pod间对流量进行负载均衡</span></span><br><span class="line">expose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个新的Autoscaler对象，用以自动水平伸缩控制器</span></span><br><span class="line">autoscale</span><br></pre></td></tr></table></figure><p><code>kubectl</code>工具还支持由对象类型驱动的创建命令。这些命令支持更多对象类型，并且更明确地表达了它们的意图，但要求用户知道他们打算创建的对象类型。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create &lt;objecttype&gt; [&lt;subtype&gt;] &lt;instancename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#栗子</span></span><br><span class="line">kubectl create service nodeport &lt;service-name&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="更新对象"><a href="#更新对象" class="headerlink" title="更新对象"></a>更新对象</h5><p><code>kubectl</code>命令支持动词驱动的命令，用于一些常见的更新操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过更新控制器的副本数，水平伸缩控制器，以添加或删除pod</span></span><br><span class="line">scale</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在对象中添加或删除注释</span></span><br><span class="line">annotate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在对象中添加或删除标签</span></span><br><span class="line">label</span><br></pre></td></tr></table></figure><p><code>kubectl</code>工具还支持由对象的某个驱动的更新命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置对象的一个方面</span></span><br><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure><p><code>kubectl</code>工具支持这些直接地更新实时对象的额外方法，但他们需要更好地裂解k8s对象模式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过在编辑器中打开其配置，直接编辑实时对象的原始配置文件</span></span><br><span class="line">edit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用补丁字符串，直接修改实时对象的特定字段</span></span><br><span class="line">patch</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从集群中删除对象</span></span><br><span class="line">delete &lt;<span class="built_in">type</span>&gt;/&lt;name&gt;</span><br><span class="line"></span><br><span class="line">kubectl delete deployment/nginx</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="查看对象"><a href="#查看对象" class="headerlink" title="查看对象"></a>查看对象</h5><p>如下这些命令可用于打印除对象信息:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印有关匹配对象的基本信息</span></span><br><span class="line">get</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印有关匹配对象的详细信息</span></span><br><span class="line">describe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印运行在pod中容器的stdout和stderr</span></span><br><span class="line">logs</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="创建对象前修改对象"><a href="#创建对象前修改对象" class="headerlink" title="创建对象前修改对象"></a>创建对象前修改对象</h5><p>有些对象字段没有可在<code>create</code>命令汇总使用的标志。在某些情况下，你可使用<code>set</code>和<code>create</code>的组合在对象创建之前为字段指定值。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set命令</span></span><br><span class="line">kubectl create service clusterip my-svc --clusterip=<span class="string">"None"</span> -o yaml --dry-run \</span><br><span class="line">| kubectl <span class="built_in">set</span> selector --<span class="built_in">local</span> -f - <span class="string">'environment=qa'</span> -o yaml \</span><br><span class="line">| kubectl create -f -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#--edit标志</span></span><br><span class="line">kubectl create service clusterip my-svc --clusterip=<span class="string">"None"</span> -o yaml --dry-run &gt; /tmp/srv.yaml</span><br><span class="line">kubectl create --edit -f /tmp/srv.yaml</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>Imperative Management of Kubernetes Objects Using Configuration Files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#创建对象</span><br><span class="line">kubectl create -f &lt;file | url&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">kubectl replace -f &lt;file | url&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">kubectl delete -f &lt;file | url&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get -f &lt;file | url&gt; -o yaml</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="使用配置文件声明管理的k8s对象"><a href="#使用配置文件声明管理的k8s对象" class="headerlink" title="使用配置文件声明管理的k8s对象"></a>使用配置文件声明管理的k8s对象</h4><p>Declarative Management of Kubernetes Objects Using Configuration Files</p><p>可通过在目录中存储多个对象配置文件来创建、更新、删除k8s对象，并使用<code>kubectl apply</code>根据递归创建和更新这些对象。<br><code>kubectl apply</code>不支持对象配置命令<code>create</code>和<code>replace</code>。</p><p><br></p><p><strong>开始前</strong><br>声明性对象配置需要深入理解k8s对象定义和配置。</p><p><br><br><br></p><h5 id="创建对象-1"><a href="#创建对象-1" class="headerlink" title="创建对象"></a>创建对象</h5><p>使用<code>kubectl apply</code>创建除指定目录中的配置文件定义的已存在的所有对象。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f &lt;directory&gt;/</span><br></pre></td></tr></table></figure><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/simple_deployment.yaml</span><br><span class="line">#查看</span><br><span class="line">kubectl get -f https://k8s.io/examples/application/simple_deployment.yaml -o yaml</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="更新对象-1"><a href="#更新对象-1" class="headerlink" title="更新对象"></a>更新对象</h5><p>使用<code>kubectl apply</code>更新目录中定义的所有对象，即使这些对象已经存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f &lt;directory&gt;/</span><br></pre></td></tr></table></figure><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#伸缩</span><br><span class="line">kubectl scale deployment/nginx-deployment --replicas=2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新nginx版本，从1.7.9升级到1.11.9</span><br><span class="line">#删除minReadySeconds字段</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.11.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#应用更新</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/update_deployment.yaml</span><br><span class="line">#查看</span><br><span class="line">kubectl get -f https://k8s.io/examples/application/simple_deployment.yaml -o yaml</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="删除对象-1"><a href="#删除对象-1" class="headerlink" title="删除对象"></a>删除对象</h5><p>有两种方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#推荐</span><br><span class="line">kubectl delete -f &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">#选择</span><br><span class="line">kubectl apply -f &lt;directory/&gt; --prune -l &lt;labels&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h5 id="查看对象-1"><a href="#查看对象-1" class="headerlink" title="查看对象"></a>查看对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get -f &lt;file | url&gt; -o yaml</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="计算-存储和网络"><a href="#计算-存储和网络" class="headerlink" title="计算,存储和网络"></a>计算,存储和网络</h2><p>Compute, Storage, and Networking Extensions</p><p><br></p><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p>Cluster Administration</p><ul><li>规划集群</li><li>管理集群</li><li>保护集群</li><li>集群服务</li></ul><p>详情见配置章节。</p><p><br><br><br></p><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>Certificates</p><p>当使用客户端证书认证时，你可以通过<code>easyras, openssl, cfssl</code>手动生成证书。</p><p><br></p><h4 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Generate a ca.key with 2048bit</span></span><br><span class="line">openssl genrsa -out ca.key 2048</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#According to the ca.key generate a ca.crt</span></span><br><span class="line">openssl req -x509 -new -nodes -key ca.key -subj <span class="string">"/CN=<span class="variable">$&#123;MASTER_IP&#125;</span>"</span> -days 10000 -out ca.crt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate a server.key with 2048bit</span></span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#reate a config file for generating a Certificate Signing Request (CSR)</span></span><br><span class="line">[ req ]</span><br><span class="line">default_bits = 2048</span><br><span class="line">prompt = no</span><br><span class="line">default_md = sha256</span><br><span class="line">req_extensions = req_ext</span><br><span class="line">distinguished_name = dn</span><br><span class="line"></span><br><span class="line">[ dn ]</span><br><span class="line">C = &lt;country&gt;</span><br><span class="line">ST = &lt;state&gt;</span><br><span class="line">L = &lt;city&gt;</span><br><span class="line">O = &lt;organization&gt;</span><br><span class="line">OU = &lt;organization unit&gt;</span><br><span class="line">CN = &lt;MASTER_IP&gt;</span><br><span class="line"></span><br><span class="line">[ req_ext ]</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[ alt_names ]</span><br><span class="line">DNS.1 = kubernetes</span><br><span class="line">DNS.2 = kubernetes.default</span><br><span class="line">DNS.3 = kubernetes.default.svc</span><br><span class="line">DNS.4 = kubernetes.default.svc.cluster</span><br><span class="line">DNS.5 = kubernetes.default.svc.cluster.local</span><br><span class="line">IP.1 = &lt;MASTER_IP&gt;</span><br><span class="line">IP.2 = &lt;MASTER_CLUSTER_IP&gt;</span><br><span class="line"></span><br><span class="line">[ v3_ext ]</span><br><span class="line">authorityKeyIdentifier=keyid,issuer:always</span><br><span class="line">basicConstraints=CA:FALSE</span><br><span class="line">keyUsage=keyEncipherment,dataEncipherment</span><br><span class="line">extendedKeyUsage=serverAuth,clientAuth</span><br><span class="line">subjectAltName=@alt_names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate the certificate signing request based on the config file</span></span><br><span class="line">openssl req -new -key server.key -out server.csr -config csr.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate the server certificate using the ca.key, ca.crt and server.csr</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -CA ca.crt -CAkey ca.key \</span><br><span class="line">-CAcreateserial -out server.crt -days 10000 \</span><br><span class="line">-extensions v3_ext -extfile csr.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#View the certificate</span></span><br><span class="line">openssl x509  -noout -text -<span class="keyword">in</span> ./server.crt</span><br></pre></td></tr></table></figure><p><br></p><h4 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h4><p><br></p><h4 id="cfssl"><a href="#cfssl" class="headerlink" title="cfssl"></a>cfssl</h4><p><br></p><h4 id="分发自签名CA证书"><a href="#分发自签名CA证书" class="headerlink" title="分发自签名CA证书"></a>分发自签名CA证书</h4><p>客户端节点可以拒绝将自签名(self-signed)CA 证书识别为有效。对于非生产环境火灾防火墙后面运行的部署，你可以将自签名CA证书分发给客户端，并刷新本地列表以获取有效证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo cp ca.crt /usr/<span class="built_in">local</span>/share/ca-certificates/kubernetes.crt</span><br><span class="line">sudo update-ca-certificates</span><br><span class="line"></span><br><span class="line">Updating certificates <span class="keyword">in</span> /etc/ssl/certs...</span><br><span class="line">1 added, 0 removed; <span class="keyword">done</span>.</span><br><span class="line">Running hooks <span class="keyword">in</span> /etc/ca-certificates/update.d....</span><br><span class="line"><span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="云提供商"><a href="#云提供商" class="headerlink" title="云提供商"></a>云提供商</h3><p>跳过！</p><p><br><br><br></p><h3 id="管理资源"><a href="#管理资源" class="headerlink" title="管理资源"></a>管理资源</h3><p>可能，你已经部署应用程序并通过服务公开它。接下来怎么办？k8s提供了许多工具来帮助你管理应用程序部署(包括伸缩和更新)。我们将更深入讨论配置文件和标签。</p><p><br></p><h4 id="组织资源配置"><a href="#组织资源配置" class="headerlink" title="组织资源配置"></a>组织资源配置</h4><p>Organizing resource configurations</p><p>许多应用程序需要创建多个资源，如Deployment和Service。通过将多个资源组合在同一个文件中(在yaml中以<code>---</code>分隔)，可以简化多个资源的管理。</p><p>栗子：<code>nginx-app.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-nginx-svc</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.7.9</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>使用与单个资源相同的方式创建多个资源。<br>资源将按照它们在文件中出现的顺序创建。因此，最好首先指定Service，因为这将确保Scheduler可以扩展与服务关联的pod，因为它们是由Controller创建的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://k8s.io/examples/application/nginx-app.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#service "my-nginx-svc" created</span></span><br><span class="line"><span class="comment">#deployment "my-nginx" created</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#同样也支持多个-f</span></span><br><span class="line">kubectl create -f https://k8s.io/examples/application/nginx/nginx-svc.yaml -f https://k8s.io/examples/application/nginx/nginx-deployment.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者指定一个目录，读取yaml, yml, json文件</span></span><br><span class="line">kubectl create -f https://k8s.io/examples/application/nginx/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">kubectl create -f https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx/nginx-deployment.yaml</span><br></pre></td></tr></table></figure><p><strong>建议的做法是，将与同一微服务或应用程序相关的资源放入同一配置文件中，或将相关联的配置文件分组到同一目录下。</strong></p><p><br><br><br></p><h4 id="kubectl批量操作"><a href="#kubectl批量操作" class="headerlink" title="kubectl批量操作"></a>kubectl批量操作</h4><p>Bulk operations in kubectl</p><p>资源创建并不是<code>kubectl</code>可执行的唯一操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f https://k8s.io/examples/application/nginx-app.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#deployment "my-nginx" deleted</span></span><br><span class="line"><span class="comment">#service "my-nginx-svc" deleted</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#分开的资源</span></span><br><span class="line">kubectl delete deployments/my-nginx    services/my-nginx-svc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定label(selector)删除</span></span><br><span class="line">kubectl delete deployment,services -l app=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#deployment "my-nginx" deleted</span></span><br><span class="line"><span class="comment">#service "my-nginx-svc" deleted</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#递归删除--recursive -R</span></span><br><span class="line">kubectl create -f project/k8s/development --recursive</span><br><span class="line">kubectl create -f project/k8s/namespaces -f project/k8s/development --recursive</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="高效使用label"><a href="#高效使用label" class="headerlink" title="高效使用label"></a>高效使用label</h4><p>Using labels effectively</p><p>到目前为止，我们使用的示例最多只能将一个标签应用于任意资源。在许多情况下，应该使用多个标签来区分集合。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">     labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">guestbook</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">backend</span></span><br><span class="line"><span class="attr">        role:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span> <span class="bullet">-Lapp</span> <span class="bullet">-Ltier</span> <span class="bullet">-Lrole</span></span><br><span class="line"></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span> <span class="bullet">-l</span> <span class="string">app=guestbook,role=master</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Canary-deployments"><a href="#Canary-deployments" class="headerlink" title="Canary deployments"></a>Canary deployments</h4><p>需要多个标签的另一种情况是区分不同版本的部署，或同一组件的配置。通常的做法是将新应用程序版本的canary与先前版本并排部署，以便新版本可以在完全推出前接收实时生产流量。</p><p>例如，你可以使用<code>track</code>标签来区分不同的版本:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#stable version</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">     replicas:</span> <span class="number">3</span></span><br><span class="line">     <span class="string">...</span></span><br><span class="line"><span class="attr">     labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">guestbook</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">        track:</span> <span class="string">stable</span></span><br><span class="line">     <span class="string">...</span></span><br><span class="line"><span class="attr">     image:</span> <span class="attr">gb-frontend:v3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#new version</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">frontend-canary</span></span><br><span class="line"><span class="attr">     replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="string">...</span></span><br><span class="line"><span class="attr">     labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">guestbook</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">        track:</span> <span class="string">canary</span></span><br><span class="line">     <span class="string">...</span></span><br><span class="line"><span class="attr">     image:</span> <span class="attr">gb-frontend:v4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#前端服务将通过选择其标签的公共子集(`track`)来跨越两组副本，以便将流量定向到两个应用程序。</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">     app:</span> <span class="string">guestbook</span></span><br><span class="line"><span class="attr">     tier:</span> <span class="string">frontend</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="更新标签"><a href="#更新标签" class="headerlink" title="更新标签"></a>更新标签</h4><p>Updating labels</p><p>有时，在创建新资源之前，需要重新标记现有的pod和其它资源。这可使用<code>kubectl label</code>来完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#更新</span><br><span class="line">kubectl label pods -l app=nginx tier=fe</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get pods -l app=nginx -L tier</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="更新注释"><a href="#更新注释" class="headerlink" title="更新注释"></a>更新注释</h4><p>Updating annotations</p><p>有时，你会想要将注释附加到资源。这个使用<code>kubectl annotatie</code>来完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl annotate pods my-nginx-v4-9gw19 description=&apos;my frontend running nginx&apos;</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get pod my-nginx-v4-9gw19 -o yaml</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="伸缩应用程序"><a href="#伸缩应用程序" class="headerlink" title="伸缩应用程序"></a>伸缩应用程序</h4><p>Scaling your application</p><p>当应用程序上的负载增大或缩小时，可以使用<code>kubectl</code>轻松扩展。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment/my-nginx --replicas=2</span><br><span class="line"></span><br><span class="line">kubectl get pods -l app=nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自动伸缩</span></span><br><span class="line">kubectl autoscale deployment/my-nginx --min=1 --max=3</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="就地更新资源"><a href="#就地更新资源" class="headerlink" title="就地更新资源"></a>就地更新资源</h4><p>In-place updates of resources</p><p>有时，需要对创建的资源进行简单，无中断(non-disruptive)的更新。</p><p><strong>kubectl apply</strong><br>建议在源代码管理中维护一组配置文件，以便可以对它们配置的资源的代码进行维护和版本化。这样，你可以使用<code>kubectl apply</code>将更改的配置推送的集群。<br><code>kubectl apply</code>会将注释附加到资源，以便确定自上次调用以来对配置所做的更改。在调用它是，<code>kubectl apply</code>会在先前的配置，提供的输入和资源的当前配置之间进行差异比较，已确定如何修改资源。</p><p><br></p><p><strong>kubectl edit</strong><br>或者，你可使用<code>kubectl edit</code>来更新资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit deployment/my-nginx</span><br><span class="line">#这样就和vim差不多，可修改此部署</span><br></pre></td></tr></table></figure><p><br></p><p><strong>kubectl patch</strong><br>你可使用<code>kubectl patch</code>来更新API对象。此命令支持JSON patch, JSON merge patch和 strategic merge patch。</p><p><br><br><br></p><h4 id="破坏性更新"><a href="#破坏性更新" class="headerlink" title="破坏性更新"></a>破坏性更新</h4><p>Disruptive updates</p><p>在某些情况下，你可能需要更新初始化后无法更新的资源字段，或者你可能只想立即进行递归更改，例如修复部署创建的损坏的pod。要更改此类资源，请使用<code>replace --force</code>——它将删除并重新创建资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl replace -f https://k8s.io/examples/application/nginx/nginx-deployment.yaml --force</span><br><span class="line">deployment &quot;my-nginx&quot; deleted</span><br><span class="line">deployment &quot;my-nginx&quot; replaced</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="在服务没有中断的情况下更新应用程序"><a href="#在服务没有中断的情况下更新应用程序" class="headerlink" title="在服务没有中断的情况下更新应用程序"></a>在服务没有中断的情况下更新应用程序</h4><p>Updating your application without a service outage</p><p>在某些时候，你最终需要更新已部署的应用程序，通常是指定新的image或image tag。<code>kubectl</code>支持多种更新操作，每种操作都适用于不同的场景。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl run my-nginx --image=nginx:1.7.9 --replicas=3</span><br><span class="line">#deployment &quot;my-nginx&quot; created</span><br><span class="line"></span><br><span class="line">#更新nginx版本为: 1.9.1</span><br><span class="line">kubectl edit deployment/my-nginx</span><br><span class="line">#修改镜像那一行</span><br></pre></td></tr></table></figure><p>部署将以声明的方式逐步更新已部署的nginx应用程序。它确保在更新时只有一定数量的旧副本可能会关闭，并且在所需数量的pod之上只能创建一定数量的新副本。</p><p><br><br><br></p><h3 id="集群网络"><a href="#集群网络" class="headerlink" title="集群网络"></a>集群网络</h3><p>Cluster Networking</p><p>默认情况下，k8s与docker的网络方式有所不同。有4个网络问题需要解决：</p><ul><li><strong>高度耦合的容器到容器的通信</strong>: 这通过pod和localhost通信解决</li><li><strong>pod到pod的通信</strong>： 这是侧重点</li><li><strong>pod到service的通信</strong>： 这包含在Service中</li><li><strong>external到service的通信</strong>： 这包含在service中</li></ul><p>k8s假设pod与pod间是可以通信的，无论它们位于哪个主机。每个pod都有自己的IP地址，因此你无需在pod之间明确创建链接，也几乎不需要处理映射容器端口到主机端口。这创建了一个干净的向后兼容的模型，从端口分配、命名、服务发现、负载均衡、应用程序配置和迁移的角度来看，pod可以像VM或物理主机一样。</p><p>为实现此目的，你需要设置集群网络。</p><p><br></p><h4 id="Docker模型"><a href="#Docker模型" class="headerlink" title="Docker模型"></a>Docker模型</h4><p>在讨论k8s网络方法之前，有必要回顾Docker网络方式。默认情况下，Docker使用<code>host-private</code>网络。它创建一个虚拟网桥(称为docker0)，并从RFC1918中为该网桥定义的一个专用地址块中分配一个子网。对于Docker创建的每个容器，它分配一个连接到网桥的虚拟以太网设备(称为veth)。使用Linux命名空间将<code>veth</code>映射为容器中的<code>eth0</code>。容器内的<code>eth0</code>网口从桥接器的地址范围获取IP地址。<br>为了使Docker容器跨节点进行通信，必须在计算机自己的IP地址上分配端口，然后将这些端口转发/代理到容器。这意味着容器必须小心地使用端口，或动态分配端口。</p><p><br><br><br></p><h4 id="k8s模型"><a href="#k8s模型" class="headerlink" title="k8s模型"></a>k8s模型</h4><p>跨多开发者协调端口非常难以大规模地进行，并使用户暴露在他们无法控制的集群级别问题之外。动态端口分配给系统带来了很多复杂性——每个应用程序都必须将端口作为标志，API server必须知道如何将动态端口号插入配置块，服务必须知道如何找到彼此。与此相关，k8s采取了不同的方法。</p><p>k8s对任何网络实施都强加了一下基本要求：</p><ul><li>容器间可互相通信而无需NAT</li><li>所有节点都可与所有容器通信而无需NAT</li><li>容器看到的IP与其他人看到的IP相同</li></ul><p>实际上，k8s在pod范围应用IP地址，pod中的容器共享其网络命名空间(包括IP地址)。这意味着pod中的容器都可以在localhost上彼此通信。这被称为<code>ip-per-pod</code>模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#在Docker中查看</span><br><span class="line">docker network inspect bridge</span><br><span class="line"></span><br><span class="line">#可看到副本集的容器，都是pod，而非container</span><br><span class="line">#这也证明container共享pod的网络空间</span><br><span class="line">#注意它的网关便是docker0</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;68bc0cf07a4d7666e1d35f2c1cf179ae8605b431353ba93446abc898de086a9c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-07-23T17:45:54.42038221+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;10.254.76.0/24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;10.254.76.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;7d2e6561fa81730ae05743f78871666df75cf5e6f483b71da33137823c172333&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;k8s_POD.24f70ba9_hello-world-3198537413-138pg_default_adb8f0fe-8fea-11e8-b10b-000c29aa7e75_785c4a84&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;bf50c5a71ad26531a370a73ce8da5903d32b9e2f8b8397d7405b914203071c45&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:0a:fe:4c:06&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;10.254.76.6/24&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ea9fbf660f27943b866759a084dc26457474d73c50082939f157ed1dfe0bc806&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;k8s_POD.24f70ba9_hello-world-3198537413-ddgb3_default_adb90c8c-8fea-11e8-b10b-000c29aa7e75_0452e1f4&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;e83401827e0e6d2896eb46c7b252594c1694ca119d0cbd74c29383209b80a128&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:0a:fe:4c:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;10.254.76.2/24&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="如何实现k8s网络模型"><a href="#如何实现k8s网络模型" class="headerlink" title="如何实现k8s网络模型"></a>如何实现k8s网络模型</h4><p>How to implement the Kubernetes networking model</p><p>有多种方式实现此网络模型，以下做一个概述。</p><ul><li>ACI</li><li>AOS from Apstra</li><li>Big Cloud Fabric from Big Switch Networks</li><li>Cilium</li><li>CNI-Genie from Huawei</li><li>Contiv</li><li>Contrail</li><li>Flannel</li><li>Google Compute Engine</li><li>Kube-router</li><li>L2 networks and linux bridging</li><li>Multus</li><li>NSX-T</li><li>Nuage Networks VCS</li><li>OpenVSwitch</li><li>OVN</li><li>Project Calico</li><li>Romana</li><li>Weave Net from Weaveworks</li></ul><p><br><br><br></p><h3 id="日志架构"><a href="#日志架构" class="headerlink" title="日志架构"></a>日志架构</h3><p>Logging Architecture</p><p>应用程序和系统日志可以帮助你了解集群内部发生的情况。大多数现代应用程序都有某种日志机制，因此，大多数容器化引擎同样设计来支持多种日志。容器化应用程序最简单、最受欢迎的日志方法是写入<code>stdout</code>和<code>stderr</code>。</p><p>但是，容器引擎或<code>runtime</code>提供的本地(native)功能通常不足以构建完整的日志解决方案。例如，如果container crashe、pod evicted、node dies，你通常仍然希望访问应用程序的日志。因此，日志应独立于container、pod、node，并具有单独存储(separate storage)和生命周期(lifecycle)。这个概念称为集群级日志(cluster-level-loggin)。集群级日志需要单独的后端来<strong>存储(store)、分析(analyze)、查询(query)</strong>日志。k8s不提供日志数据的本地存储解决方案，但你可以将许多现有的日志解决方案集成到k8s集群中。</p><p>集群级日志架构假设在集群内部或外部存在日志记录后端。</p><p><br><br><br></p><h4 id="k8s基本日志"><a href="#k8s基本日志" class="headerlink" title="k8s基本日志"></a>k8s基本日志</h4><p>Basic logging in Kubernetes</p><p>本节中，k8s将日志记录到到标准输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/k8s/test/counter-pod.yaml</span><br><span class="line">#此pod每秒输出一条信息</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: counter</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: count</span><br><span class="line">    image: busybox</span><br><span class="line">    args: [/bin/sh, -c,</span><br><span class="line">            &apos;i=0; while true; do echo &quot;$i: $(date)&quot;; i=$((i+1)); sleep 1; done&apos;]</span><br><span class="line"></span><br><span class="line">#创建</span><br><span class="line">#kubectl create -f /etc/k8s/test/counter-pod</span><br><span class="line"></span><br><span class="line">#不指定命名空间，则默认default</span><br><span class="line">#也可在配置文件里指定命名空间</span><br><span class="line">#kubectl create -f /etc/k8s/test/counter-pod --namespace=test</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">#如果pod有多个容器，则应该指定容器名称</span><br><span class="line">kubectl logs counter</span><br><span class="line"></span><br><span class="line">0: Fri Aug 10 07:43:09 UTC 2018</span><br><span class="line">1: Fri Aug 10 07:43:10 UTC 2018</span><br><span class="line">2: Fri Aug 10 07:43:11 UTC 2018</span><br><span class="line">3: Fri Aug 10 07:43:12 UTC 2018</span><br><span class="line">4: Fri Aug 10 07:43:13 UTC 2018</span><br><span class="line">5: Fri Aug 10 07:43:14 UTC 2018</span><br><span class="line">6: Fri Aug 10 07:43:15 UTC 2018</span><br><span class="line">7: Fri Aug 10 07:43:16 UTC 2018</span><br><span class="line">8: Fri Aug 10 07:43:17 UTC 2018</span><br><span class="line">9: Fri Aug 10 07:43:18 UTC 2018</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="节点级日志记录"><a href="#节点级日志记录" class="headerlink" title="节点级日志记录"></a>节点级日志记录</h4><p>Logging at the node level</p><p><img src="/images/K8s/logging-node-level.png" alt="节点级日志"></p><p><br></p><p>容器化应用程序写入<code>stdout</code>, <code>stderr</code>的所有内容，都由容器引擎处理并重定向到某处。Docker容器引擎可修改日志驱动程序，将日志写入到其它地方(file, json, fluent…)。</p><blockquote><p>注意<br>Docker json日志驱动将每一行视为单独的消息，它没有直接支持多行消息，你需要使用更高级别来处理它。</p></blockquote><p>默认情况下，如果容器重启，<code>kubelet</code>会使用其日志保留一个已终止(terminated)的容器。如果从节点上驱逐pod，则所有相应的容器也会被驱逐(包括日志)。</p><p>节点级日志记录中，一个重要考虑因素是实现日志轮询(log rotation)，以便日志不会占用节点所有可用存储。k8s目前不负责轮询日志，但部署工具应该配置方案来解决日志轮询问题。<br>例如，在k8s集群中，部署一个脚本程序，用于日志轮询。或设置Docker container runtime的<code>log-opt</code>标志已自动轮询应用程序日志。</p><p>当在基本日志记录中运行<code>kubectl logs</code>命令时，节点上的<code>kubelet</code>会处理请求直接从日志文件读取，返回响应的内容。<br>注意： 如果某个外部系统已执行轮询，则<code>kubectl  logs</code>只能获取到最新的日志文件。</p><p><br></p><p><strong>system component logs</strong><br>有两种类型的系统组件:</p><ul><li><strong>run in container</strong>: 如<code>kube-proxy</code></li><li><strong>not run in container</strong>: 如<code>kubelet</code>, Docker</li></ul><p>在使用<code>systemd</code>的机器上，<code>kubelet</code>和<code>container runtime</code>将日志写到<code>journald</code>。如果没有<code>systemd</code>，则写到<code>/var/log/</code>下。容器内的系统组件始终将日志写入<code>/var/log</code>目录下，绕过默认的日志机制。<br>与容器日志类似，在<code>/var/log/</code>目录下的系统组件日志也应该被轮询。</p><p><br><br><br></p><h4 id="集群级日志架构"><a href="#集群级日志架构" class="headerlink" title="集群级日志架构"></a>集群级日志架构</h4><p>Cluster-level logging architectures</p><p>k8s官方没有提供原生的集群级日志记录，但你可以考虑集中常见方法：</p><ul><li>在每个节点上使用<code>node-level logging agent</code></li><li>用于记录应用程序pod的专用<code>sidecar container</code></li><li>将日志直接从应用程序推送到后端</li></ul><p><br></p><p><strong>Using a node logging agent</strong></p><p><img src="/images/K8s/logging-with-node-agent.png" alt=""></p><p>你可以通过在每个节点上包含一个 节点级日志记录代理 来实现集群级日志记录。它是一个用于公开日志或将日志推送到后端的专用工具。<br>通常，此日志代理是一个容器，它可以访问该节点上所有应用程序容器的日志文件的目录。</p><p>由于日志记录代理必须在每个节点上运行，因此，将其实现为节点上的<code>DaemonSet replica</code>, <code>manifest pod</code>, <code>dedicated native process</code>是很常见的。然后，后两种方法已被弃用，并且非常不建议。</p><p>对于k8s集群，使用节点级日志代理是最常见和鼓励的方法，因为它在每个节点上只创建一个Agent，并且不需要对节点上运行的应用程序进行任何更改。然而，节点级日志仅适用于应用程序的<code>stdout</code>和<code>stderr</code>。</p><p>k8s并未指定logging Agent，但有两个可选的日志代理与k8s一同打包。两者都使用<code>fluentd</code>的自定义配置作为节点上的代理。</p><ul><li>Stackdriver Logging: 用于Google Cloud Platform</li><li>Elasticsearch</li></ul><p><br></p><p><strong>Using a sidecar container with the logging agent</strong><br>你可通过以下方式使用<code>sidecar container</code>:</p><ul><li><code>sidecar container</code>将应用程序的日志传输到自己的<code>stdout</code></li><li><code>sidecar container</code>容器运行一个<code>Logging Agent</code>，此代理从应用程序容器中获取日志</li></ul><p><img src="/images/K8s/logging-with-streaming-sidecar.png" alt=""></p><p><br></p><p>通过让<code>sidecar container</code>的stream流向他们自己的<code>stdout/stderr</code>，你可利用已经在每个节点上运行的<code>kubelet</code>和<code>logging agent</code>。<code>sidecat container</code>从file、socket、journald读取日志。每个单独的<code>sidecar container</code>将日志打印到自己的<code>stdout/stderr</code>。<br>此方法允许你从应用程序的不同部分分离多个日志流，其中一些可能缺乏对写入<code>stdout/stderr</code>的支持。重定向日志背后的逻辑是最小的，因此它几乎不是一个重要的开销。此外，因为<code>stdout/stderr</code>由kubelet处理，所以你可以使用如<code>kubectl logs</code>这样的内置工具。</p><p><br></p><p>考虑如下栗子，pod运行单个容器，此容器使用两种不同的日志格式写入两个不同的日志。</p><p>two-files-counter-pod.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">count</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    args:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-c</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      i=0;</span></span><br><span class="line"><span class="string">      while true;</span></span><br><span class="line"><span class="string">      do</span></span><br><span class="line"><span class="string">        echo "$i: $(date)" &gt;&gt; /var/log/1.log;</span></span><br><span class="line"><span class="string">        echo "$(date) INFO $i" &gt;&gt; /var/log/2.log;</span></span><br><span class="line"><span class="string">        i=$((i+1));</span></span><br><span class="line"><span class="string">        sleep 1;</span></span><br><span class="line"><span class="string">      done</span></span><br><span class="line"><span class="string"></span><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>即使你设法将两个组件重定向到容器的<code>stdout</code>，在同一个日志流中包含不同格式的日志条目也会很麻烦。相反，你可以引入两个<code>sidecar container</code>。每个<code>sidecar container</code>可以从共享卷(shared volume)中<code>tail</code>特定的日志文件，然后将日志重定向到自己的<code>stdout</code>。</p><p><br></p><p>这是pod运行两个<code>sidecat container</code>的配置文件。<br>三个容器共享了<code>/var/log</code>。</p><p>two-file-counter-pod-streaming-sidecar.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">count</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    args:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-c</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      i=0;</span></span><br><span class="line"><span class="string">      while true;</span></span><br><span class="line"><span class="string">      do</span></span><br><span class="line"><span class="string">        echo "$i: $(date)" &gt;&gt; /var/log/1.log;</span></span><br><span class="line"><span class="string">        echo "$(date) INFO $i" &gt;&gt; /var/log/2.log;</span></span><br><span class="line"><span class="string">        i=$((i+1));</span></span><br><span class="line"><span class="string">        sleep 1;</span></span><br><span class="line"><span class="string">      done</span></span><br><span class="line"><span class="string"></span><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">count-log-1</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    args:</span> <span class="string">[/bin/sh,</span> <span class="bullet">-c,</span> <span class="string">'tail -n+1 -f /var/log/1.log'</span><span class="string">]</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">count-log-2</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    args:</span> <span class="string">[/bin/sh,</span> <span class="bullet">-c,</span> <span class="string">'tail -n+1 -f /var/log/2.log'</span><span class="string">]</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><br></p><p>现在运行此pod，并单独访问每个日志流:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#run</span></span><br><span class="line">kubectl create -f /etc/k8s/<span class="built_in">test</span>/two-file-counter-pod-streaming-sidecar.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#get</span></span><br><span class="line">kubectl get pod/counter -o wide</span><br><span class="line">NAME      READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">counter   3/3       Running   0          9m        10.244.2.9   salt01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">kubectl logs counter</span><br><span class="line">Error from server (BadRequest): a container name must be specified <span class="keyword">for</span> pod counter, choose one of: [count count-log-1 count-log-2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#logs</span></span><br><span class="line">kubectl logs counter count-log-1</span><br><span class="line"></span><br><span class="line">0: Tue Aug 14 02:58:29 UTC 2018</span><br><span class="line">1: Tue Aug 14 02:58:30 UTC 2018</span><br><span class="line">2: Tue Aug 14 02:58:31 UTC 2018</span><br><span class="line">3: Tue Aug 14 02:58:32 UTC 2018</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl logs counter count-log-2</span><br><span class="line"></span><br><span class="line">Tue Aug 14 02:58:29 UTC 2018 INFO 0</span><br><span class="line">Tue Aug 14 02:58:30 UTC 2018 INFO 1</span><br><span class="line">Tue Aug 14 02:58:31 UTC 2018 INFO 2</span><br><span class="line">Tue Aug 14 02:58:32 UTC 2018 INFO 3</span><br></pre></td></tr></table></figure><p>集群中安装的节点级代理会自动获取这些日志流，而无需进一步配置。如果愿意，可将代理配置为根据源容器解析日志行。</p><p>注意，进错CPU和内存使用率很低，将日志写入文件然后将它们流式传输到<code>stdout</code>会使磁盘使用量增加一倍。如果你有一个应用程序将日志写到单个文件，通常最好将<code>/dev/stdout</code>设置为目标，而不是实现流式<code>sidecar container</code>方法。</p><p><code>sidecar container</code>还可用于应用程序本身日志轮询。然而，建议直接使用<code>stdout/stderr</code>并将日志的轮询和保留交给<code>kubelet</code>。</p><p><br></p><p><strong>Sidecar container wiht a logging agent</strong></p><p><img src="/images/K8s/logging-with-sidecar-agent.png" alt="官方栗子"></p><p><br></p><p><img src="/images/K8s/filebeat-log-collector-arch.png" alt="额外栗子"></p><p><br></p><p>如果节点级日志记录代理对你来说不够灵活，你可以创建一个带有单独日志记录代理程序的<code>sidecar container</code>，该代理可专门配置来与你的程序一起运行。</p><blockquote><p>注意：<br>在<code>sidecar container</code>使用日志记录代理将会消耗大量资源。此外，你将无法使用<code>kubectl logs</code>命令访问这些日志，因为它们不受kubelet控制。</p></blockquote><p>栗子使用<code>fluentd</code>作为<code>logging agent</code>。有两个可用于实现此方法的配置文件：</p><ul><li>ConfigMap<br>使用<code>ConfigMap</code>来配置fluentd。具体配置参考fluentd官方文档。</li></ul><p><code>fluentd-sidecat-config.yaml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-config</span><br><span class="line">data:</span><br><span class="line">  fluentd.conf: |</span><br><span class="line">    &lt;source&gt;</span><br><span class="line">      type tail</span><br><span class="line">      format none</span><br><span class="line">      path /var/log/1.log</span><br><span class="line">      pos_file /var/log/1.log.pos</span><br><span class="line">      tag count.format1</span><br><span class="line">    &lt;/source&gt;</span><br><span class="line"></span><br><span class="line">    &lt;source&gt;</span><br><span class="line">      type tail</span><br><span class="line">      format none</span><br><span class="line">      path /var/log/2.log</span><br><span class="line">      pos_file /var/log/2.log.pos</span><br><span class="line">      tag count.format2</span><br><span class="line">    &lt;/source&gt;</span><br><span class="line"></span><br><span class="line">    &lt;match **&gt;</span><br><span class="line">      type google_cloud</span><br><span class="line">    &lt;/match&gt;</span><br></pre></td></tr></table></figure><ul><li>pod<br>运行fluentd的<code>sidecat container</code>的pod。它挂载一个volume让fluentd获取配置数据。<br>下面需要用到<code>k8s.gcr.io/fluentd-gcp:1.30</code>镜像，请提前准备。要挂载目录，请创建。</li></ul><p><code>two-files-counter-pod-agent-sidecar.yaml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: counter</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: count</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - &gt;</span><br><span class="line">      i=0;</span><br><span class="line">      while true;</span><br><span class="line">      do</span><br><span class="line">        echo &quot;$i: $(date)&quot; &gt;&gt; /var/log/1.log;</span><br><span class="line">        echo &quot;$(date) INFO $i&quot; &gt;&gt; /var/log/2.log;</span><br><span class="line">        i=$((i+1));</span><br><span class="line">        sleep 1;</span><br><span class="line">      done</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/log</span><br><span class="line">  - name: count-agent</span><br><span class="line">    image: k8s.gcr.io/fluentd-gcp:1.30</span><br><span class="line">    env:</span><br><span class="line">    - name: FLUENTD_ARGS</span><br><span class="line">      value: -c /etc/fluentd-config/fluentd.conf</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/log</span><br><span class="line">    - name: config-volume</span><br><span class="line">      mountPath: /etc/fluentd-config</span><br><span class="line">  volumes:</span><br><span class="line">  - name: varlog</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">  - name: config-volume</span><br><span class="line">    configMap:</span><br><span class="line">      name: fluentd-config</span><br></pre></td></tr></table></figure><p>这仅仅是一个栗子。你可以使用其它<code>logging agent</code>取代<code>fluentd</code>，如<code>filebeat</code>, <code>logstash</code>…</p><p><br></p><p><strong>Exposing logs directly from the application</strong></p><p><img src="/images/K8s/logging-from-application.png" alt=""></p><p><br></p><p>你可以通过直接公开每个应用程序的日志或push日志来实现集群级日志记录。就相当于在写得程序中加入日志收集和处理。<br>但是，这种日志记录机制超出了k8s的范围。</p><p><br><br><br></p><h3 id="kubelet垃圾回收"><a href="#kubelet垃圾回收" class="headerlink" title="kubelet垃圾回收"></a>kubelet垃圾回收</h3><p>Configuring kubelet Garbage Collection</p><p>垃圾回收是一个有用的kubelet功能，它将清理未使用的镜像和容器。每分钟对容器执行垃圾回收，每五分钟对镜像进行垃圾回收。<br>不推荐使用额外的垃圾回收工具，因为这可能会破坏<code>kubelet</code>的行为。</p><p><br></p><h4 id="镜像回收"><a href="#镜像回收" class="headerlink" title="镜像回收"></a>镜像回收</h4><p>Image Collection</p><p>k8s在<code>cadvisor</code>的配合下，通过<code>imageManager</code>管理所有镜像的生命周期。<br>镜像垃圾回收策略考虑了两个要素：</p><ul><li>HighThresholdPercent</li><li>LowThresholdPercent</li></ul><p>磁盘使用率高于高阈值将触发垃圾回收，垃圾回收将删除最近最少使用的镜像，直到满足低阈值。</p><p><br></p><p>镜像垃圾回收的kubelet flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#触发镜像垃圾回收的磁盘使用率百分比</span><br><span class="line">#默认值 90%</span><br><span class="line">image-gc-high-threshold</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#镜像垃圾回收尝试释放磁盘使用的百分比</span><br><span class="line">#默认值 80%</span><br><span class="line">image-gc-low-threshold</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="容器回收"><a href="#容器回收" class="headerlink" title="容器回收"></a>容器回收</h4><p>Container Collection</p><p>容器垃圾回收策略考虑了三个用户定义的变量：</p><ul><li>MinAge</li><li>MaxPerPodContainer</li><li>MaxContainers</li></ul><p><code>MinAge</code>是容器可以被垃圾回收的最小年龄。设置为0可禁用。<br><code>MaxPerPodContainer</code>是允许每个pod对允许拥有的最大死容器数。设置小于0可禁用。<br><code>MaxContainers</code>是总死亡容器的最大数量。设置小于0可禁用。</p><p>kubelet将对未识别、删除或标志设置的边界之外的容器起作用。通常首先移除最旧的容器。<br>不受kubelet管理的容器不受容器垃圾回收的限制。</p><p><br></p><p>容器垃圾回收的kubelet flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#完成的容器在垃圾回收之前的最低年龄</span><br><span class="line">#默认值 0min，意味着每个完成的容器都将被垃圾回收</span><br><span class="line">minimum-container-ttl-duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#每个容器要保留的最大旧实例数</span><br><span class="line">#默认值 1</span><br><span class="line">#强烈建议使用足够大的值，以允许每个预期容器保留至少1个死亡容器</span><br><span class="line">maximum-dead-containers-per-container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#全局要保留的最大容器实例数</span><br><span class="line">#默认值 -1，意味着禁用</span><br><span class="line">#处于类似的原因，同样建议使用较大的值</span><br><span class="line">maximum-dead-containers</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>一些kubelet垃圾回收标志未来将被启用或取代。</p><table><thead><tr><th>Existing Flag</th><th>New Flag</th><th>Rationale</th></tr></thead><tbody><tr><td>–image-gc-high-threshold</td><td>–eviction-hard or –eviction-soft</td><td>existing eviction signals can trigger image garbage collection</td></tr><tr><td>–image-gc-low-threshold</td><td>–eviction-minimum-reclaim</td><td>eviction reclaims achieve the same behavior</td></tr><tr><td>–maximum-dead-containers</td><td>xxx</td><td>deprecated once old logs are stored outside of container’s context</td></tr><tr><td>–maximum-dead-containers-per-container</td><td>xxx</td><td>deprecated once old logs are stored outside of container’s context</td></tr><tr><td>–minimum-container-ttl-duration</td><td>xxx</td><td>deprecated once old logs are stored outside of container’s context</td></tr><tr><td>–low-diskspace-threshold-mb</td><td>–eviction-hard or eviction-soft</td><td>eviction generalizes disk thresholds to other resources</td></tr><tr><td>–outofdisk-transition-frequency</td><td>–eviction-pressure-transition-period</td><td>eviction generalizes disk pressure transition to other resources</td></tr></tbody></table><p><br><br><br></p><h3 id="Federation"><a href="#Federation" class="headerlink" title="Federation"></a>Federation</h3><p>先跳过，后面来学习。</p><p><br><br><br></p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>Proxies in Kubernetes</p><p>使用Kubernetes时可能会遇到几种不同的代理。<br>代理已经取代了重定向功能，重定向已被弃用。</p><p><br></p><h4 id="kubectl-proxy"><a href="#kubectl-proxy" class="headerlink" title="kubectl proxy"></a>kubectl proxy</h4><ol><li>runs on a user’s desktop or in a pod</li><li>proxies from a localhost address to the Kubernetes apiserver</li><li>client to proxy uses HTTP</li><li>proxy to apiserver uses HTTPS</li><li>locates apiserver</li><li>adds authentication headers</li></ol><p><br><br><br></p><h4 id="apiserver-proxy"><a href="#apiserver-proxy" class="headerlink" title="apiserver proxy"></a>apiserver proxy</h4><ol><li>is a bastion built into the apiserver</li><li>connects a user outside of the cluster to cluster IPs which otherwise might not be reachable</li><li>runs in the apiserver processes</li><li>client to proxy uses HTTPS (or http if apiserver so configured)</li><li>proxy to target may use HTTP or HTTPS as chosen by proxy using available information</li><li>can be used to reach a Node, Pod, or Service</li><li>does load balancing when used to reach a Service</li></ol><p><br><br><br></p><h4 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube proxy"></a>kube proxy</h4><ol><li>runs on each node</li><li>proxies UDP and TCP</li><li>does not understand HTTP</li><li>provides load balancing</li><li>is just used to reach services</li></ol><p><br><br><br></p><h4 id="A-Proxy-Load-balancer-in-front-of-apiserver"><a href="#A-Proxy-Load-balancer-in-front-of-apiserver" class="headerlink" title="A Proxy/Load-balancer in front of apiserver"></a>A Proxy/Load-balancer in front of apiserver</h4><ol><li>existence and implementation varies from cluster to cluster(e.g. nginx)</li><li>sits between all clients and one or more apiservers</li><li>acts as load balancer if there are several apiservers</li></ol><p><br><br><br></p><h4 id="云负载均衡器"><a href="#云负载均衡器" class="headerlink" title="云负载均衡器"></a>云负载均衡器</h4><ol><li>由云服务商提供</li><li>当k8s服务有LoadBalancer类型时自动创建</li><li>仅使用udp/tcp</li><li>具体详情因云服务商而异</li></ol><p><br><br><br></p><h3 id="控制器管理器指标"><a href="#控制器管理器指标" class="headerlink" title="控制器管理器指标"></a>控制器管理器指标</h3><p>Controller manager metrics</p><p>控制器管理器指标，提供有关控制器管理器性能和运行状况的重要信息。</p><p>这些指标包括常见的Go语言运行时指标、控制器特定指标。可用于衡量集群的运行状况。</p><p>在集群中，当控制器管理器运行时，可从<code>http://localhost:10252/metrics</code>获取控制器管理器指标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -nltup | grep 10252</span><br><span class="line">tcp        0      0 127.0.0.1:10252         0.0.0.0:*               LISTEN      11088/kube-controll </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl http://localhost:10252/metrics</span><br></pre></td></tr></table></figure><p>这些指标以<code>prometheus format</code>格式发出，并且是人类可读的。</p><p><br><br><br></p><h3 id="附加组件"><a href="#附加组件" class="headerlink" title="附加组件"></a>附加组件</h3><p>Installing Addons</p><p>附加组件扩展了k8s的功能。</p><p><br></p><h4 id="网络和网络策略"><a href="#网络和网络策略" class="headerlink" title="网络和网络策略"></a>网络和网络策略</h4><p>Networking and Network Policy</p><ul><li>ACI： 通过 Cisco ACI提供集成的容器网络和网络完全</li><li>Calico： 是一个安全的L3网络和网络策略提供商</li><li>Canal: 将Flannel和Calico联合起来，提供网络和网络策略</li><li>Cilium： 是一个L3网络和网络策略插件</li><li>CNI-Genie： 使k8s能够无缝连接到各种CNI插件</li><li>Contiv： 提供可配置的网络，用于各种用例和丰富的策略框架</li><li>Flannel： 是一个可以与k8s一起使用的overlay网络提供商</li><li>Knitter： 是一个支持k8s多个网络的网络解决方案</li><li>Multus： 是一个用于k8s中多个网络支持，以支持所有CNI插件的多插件</li><li>NSX-T： 提供VMware NSX-T与容器协调器之间的集成</li><li>Nuage： 是一个SDN平台，可在k8s Pod和non-k8s环境之间提供基于策略的网络，并提供可见性和安全性监控</li><li>Romana： 用于Pod网络的L3网络解决方案</li><li>Weave Net： 提供网络和网络策略，将在网络分区的两侧进行工作，而不需要外部数据库</li></ul><p><br><br><br></p><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><p>Service Discovery</p><ul><li><a href="https://coredns.io/" target="_blank" rel="noopener">CoreDNS</a>： 是一个灵活，可扩展的DNS服务器，可作为用于pod的集群DNS。</li></ul><p><br><br><br></p><h4 id="可视化，控制"><a href="#可视化，控制" class="headerlink" title="可视化，控制"></a>可视化，控制</h4><p>Visualization, Control</p><ul><li><a href="https://github.com/kubernetes/dashboard#kubernetes-dashboard" target="_blank" rel="noopener">Dashboard</a>： k8s的Dashboard Web Interface</li><li><a href="https://www.weave.works/docs/scope/latest/installing/#k8s" target="_blank" rel="noopener">Weave Scope</a>： 是一个用于以图形可视化显示container, pod, service…</li></ul><p><br><br><br><br><br></p><h2 id="k8s架构"><a href="#k8s架构" class="headerlink" title="k8s架构"></a>k8s架构</h2><p>Kubernetes Architecture</p><p><br></p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>node是k8s中的工作机器，以前称为minion。也就是集群中的一台主机。节点可以是VM或物理机。每个节点都具有用于运行pod所需的服务，并由master组件管理。节点上的服务包括<code>docker</code>, <code>kubelet</code>, <code>kube-proxy</code>。</p><p><br></p><h4 id="节点状态"><a href="#节点状态" class="headerlink" title="节点状态"></a>节点状态</h4><p>Node Status</p><p>节点的状态包含以下信息：</p><ul><li>地址(Address)</li><li>条件(Condition)</li><li>容量(Capacity)</li><li>信息(Info)</li></ul><p><br></p><p><strong>地址</strong><br>这些字段的使用取决于机器配置。</p><ul><li>HostName： 节点内核报告的主机名</li><li>ExternalIP： 通常是可从外部路由的节点IP地址</li><li>InternalIP： 通常是仅在集群内可路由的节点IP地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node -o wide</span><br><span class="line">NAME      STATUS    ROLES     AGE       VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION              CONTAINER-RUNTIME</span><br><span class="line">master    Ready     master    7d        v1.11.1   192.168.31.49    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-862.9.1.el7.x86_64   docker://1.13.1</span><br><span class="line">node      Ready     &lt;none&gt;    7d        v1.11.1   192.168.31.174   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-862.9.1.el7.x86_64   docker://1.13.1</span><br><span class="line">salt01    Ready     &lt;none&gt;    1d        v1.11.1   192.168.31.159   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-862.9.1.el7.x86_64   docker://1.13.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe node/salt01</span><br><span class="line">Addresses:</span><br><span class="line">  InternalIP:  192.168.31.159</span><br><span class="line">  Hostname:    salt01</span><br></pre></td></tr></table></figure><p><br></p><p><strong>条件</strong><br>该字段描述了所有运行中节点的状态。节点条件使用JSON对象表示。</p><table><thead><tr><th>条件</th><th>描述</th></tr></thead><tbody><tr><td>OutOfDisk</td><td>True(节点上的可用空间不足以添加新pod), 否则为False</td></tr><tr><td>Ready</td><td>True(节点健康并准备好接受pod) <br> False(节点不健康且不接受pod) <br> Unknown(节点控制器在最后一个<code>node-monitor-grace-period</code>期限内没有从节点收到消息。默认40s)</td></tr><tr><td>MemoryPressure</td><td>True(节点内存有压力，即内存不足)，否则为False</td></tr><tr><td>PIDPressure</td><td>True(进程存在压力，即节点上有太多进程)，否则为False</td></tr><tr><td>DiskPressure</td><td>True(磁盘大小存在压力，即磁盘容量较低), 否则为False</td></tr><tr><td>NetworkUnavailable</td><td>True(节点网络配置错误)，否则为False</td></tr><tr><td>ConfigOK</td><td>True(kubelet配置正确)，否则为False</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node/salt01</span><br><span class="line">Conditions:</span><br><span class="line">  Type             Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message</span><br><span class="line">  ----             ------  -----------------                 ------------------                ------                       -------</span><br><span class="line">  OutOfDisk        False   Wed, 15 Aug 2018 11:10:49 +0800   Mon, 13 Aug 2018 15:51:40 +0800   KubeletHasSufficientDisk     kubelet has sufficient disk space available</span><br><span class="line">  MemoryPressure   False   Wed, 15 Aug 2018 11:10:49 +0800   Mon, 13 Aug 2018 15:51:40 +0800   KubeletHasSufficientMemory   kubelet has sufficient memory available</span><br><span class="line">  DiskPressure     False   Wed, 15 Aug 2018 11:10:49 +0800   Mon, 13 Aug 2018 15:51:40 +0800   KubeletHasNoDiskPressure     kubelet has no disk pressure</span><br><span class="line">  PIDPressure      False   Wed, 15 Aug 2018 11:10:49 +0800   Mon, 13 Aug 2018 15:51:40 +0800   KubeletHasSufficientPID      kubelet has sufficient PID available</span><br><span class="line">  Ready            True    Wed, 15 Aug 2018 11:10:49 +0800   Mon, 13 Aug 2018 15:53:00 +0800   KubeletReady                 kubelet is posting ready status</span><br></pre></td></tr></table></figure><p><br></p><p><strong>容量</strong><br>描述节点上的可用资源：CPU，内存，可调度到节点上的最大pods数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node/salt01</span><br><span class="line">Capacity:</span><br><span class="line"> cpu:                2</span><br><span class="line"> ephemeral-storage:  49250820Ki</span><br><span class="line"> hugepages-2Mi:      0</span><br><span class="line"> memory:             3881332Ki</span><br><span class="line"> pods:               110</span><br></pre></td></tr></table></figure><p><br></p><p><strong>信息</strong><br>关于节点的一般信息，如Kernel版本，Kubernetes版本，Docker版本，OS…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node/salt01</span><br><span class="line">System Info:</span><br><span class="line"> Machine ID:                 e48d6bf22f9b4c8da5cb1a07b2fec730</span><br><span class="line"> System UUID:                564D1413-905B-64D6-E9A2-92E37F9B5BDA</span><br><span class="line"> Boot ID:                    1df89a81-77a4-44a0-9241-e6d766795e32</span><br><span class="line"> Kernel Version:             3.10.0-862.9.1.el7.x86_64</span><br><span class="line"> OS Image:                   CentOS Linux 7 (Core)</span><br><span class="line"> Operating System:           linux</span><br><span class="line"> Architecture:               amd64</span><br><span class="line"> Container Runtime Version:  docker://1.13.1</span><br><span class="line"> Kubelet Version:            v1.11.1</span><br><span class="line"> Kube-Proxy Version:         v1.11.1</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h4><p>Management</p><p>与Pod与Service不同，k8s本身并不创建节点： 它由云服务商创建，或存在于物理机/虚拟机的pool中。<br>当k8s创建节点时，它实际上只是创建了一个表示节点的对象。创建之后，k8s将检查节点是否有效。</p><p>栗子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"Node"</span>,</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"10.240.79.157"</span>,</span><br><span class="line">    <span class="attr">"labels"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"my-first-k8s-node"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>k8s将在内部创建节点对象，并通过基于<code>metadata.name</code>字段的运行状况检查来验证节点。<br>如果节点有效(valid)，即所有必要的服务都已运行，它就符合了运行pod的条件。否则它将被所有的集群动作忽略，直到它变为有效。请注意，Kubernetes将保持无效(invalide)节点的对象，除非它被手动删除。Kubernetes将持续检查节点是否变得可用。</p><p>目前，有3个组件与k8s节点接口交互：</p><ul><li>Node Controller</li><li>kubelet</li><li>kubectl</li></ul><p><br></p><p><strong>节点控制器</strong><br>节点控制器是一个k8s Master组件，用于管理节点的各个方面。</p><p>节点控制器在节点的生命周期中具有多个角色(role)。第一个便是在节点注册时为其分配CIDR地址块。<br>第二个是使节点控制器的内部节点列表与可用机器保持一致。只要节点不健康，节点控制器就会询问该节点是否仍然可用。如果不是，则节点控制器从其节点列表中删除该节点。<br>第三个是监控节点的健康状况。当节点不可达时，节点控制器负责更新节点的条件(condition)状态，从<code>Ready</code>变为<code>Unknown</code>。如果节点继续无法访问，则稍后从节点中驱逐(evict)所有pod(graceful termination)。默认超时时间为40s开始上报<code>Unknown</code>，然后5min之后开始驱逐pods。节点控制器通过<code>--node-nonitor-period</code>秒检查每个节点的状态。</p><p>在大多数情况下，节点控制器将驱逐率(evication rate)限制为<code>--node-eviction-rate</code>(默认值 0.1)每秒。这意味着它将不会每10s从超过1个节点驱逐pod。</p><p>当给定可用区域中的节点变得不健康时，节点驱逐行为会发生变化。同时，节点控制器检查此区域中不健康节点的百分比。<br>如果节点不健康比例至少为<code>--unhealthy-zone-threshold</code>(默认值 0.55)，那么驱逐率会降低；<br>如果集群很小，小于或等于<code>--large-cluster-size-threshold</code>(默认值 50)，则停止驱逐；<br>否则，驱逐率减小到每秒<code>--secondary-node-eviction-rate</code>(默认值 0.01)。<br>每个可用区域实施这些策略的原因是，一个可用区域可能与其它可用区域保持连接。</p><p>在可用区域之间传播节点的一个关键原因是，当整个区域出现故障时，工作负载可以转移到健康区域。因此，如果区域中的全部节点都不健康，则节点控制器以正常速率<code>--node-eviction-rate</code>驱逐。<br>The corner case是当所有区域都不健康时。在这种情况下，节点控制器假定Master连接存在一些问题，并在某些连接恢复之前停止所有驱逐。</p><p><br></p><p><strong>节点自注册</strong><br>Self-Registration of Nodes</p><p>当<code>kubelet</code>标志<code>--register-node</code>为true(默认)时，它会尝试向API server注册自己。这是大多数发行版使用的首选模式。</p><p>对于自注册，kubelet使用如下选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#向API server验证自身的凭据路径</span><br><span class="line">--kubeconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#r如何与云服务商交流</span><br><span class="line">--cloud-provider</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#向API server自动注册</span><br><span class="line">--register-node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#节点IP地址</span><br><span class="line">--node-ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#集群中注册节点时要添加的标签</span><br><span class="line">--node-labels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定kubelet将节点状态发送到master的频率</span><br><span class="line">--node-status-update-frequency</span><br></pre></td></tr></table></figure><p>目前，任何kubelet都有权 create/modify 任何节点资源，但实际上它只 创建/修改 自己的节点资源。(将来，k8s打算只允许kubelet修改自己的节点资源)</p><p><strong>手动管理节点</strong></p><p>如果希望手动创建节点对象，请设置<code>kubelet</code>标志<code>--register-node=false</code>。<br>修改包括在节点上设置标签(label)并将其标记为不可调度(unschedulable)。</p><p><br></p><p><strong>节点容量</strong><br>Node Capacity</p><p>节点容量(cpu, memory)是节点对象的一部分。通常，当创建节点对象时，节点注册自己并上报其容量。如果是手动管理节点，则需要你在添加节点时设置节点容量。<br>k8s调度器确保节点上的所有pod都有足够的资源。它检查节点上容器请求的总和不大于节点容量。它包括由kubelet启动的所有容器，但不包括由容器运行时直接启动的容器，也不包括容器外部的任何进程。所以，尽量不要在k8s集群节点上运行额外进程。</p><p>如果要为<code>non-pod</code>进程保留资源，你可以创建保留(placeholder)pod。将内存和CPU的值设置为要保留的资源量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">resource-reserver</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">sleep-forever</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">k8s.gcr.io/pause:0.8.0</span></span><br><span class="line"><span class="attr">  - resources:</span></span><br><span class="line"><span class="attr">      requests:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">memory:</span> <span class="number">100</span><span class="string">Mi</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="API对象"><a href="#API对象" class="headerlink" title="API对象"></a>API对象</h4><p>Node is a top-level resource in the Kubernetes REST API.</p><p><br><br><br></p><h3 id="节点通信"><a href="#节点通信" class="headerlink" title="节点通信"></a>节点通信</h3><p>Master-Node communication</p><p>Master(APIserver)与k8s cluster之间的通信。<br>目的是允许用户自定义其安装以强化网络配置，以便集群可在不受信任的网络上运行。</p><p><br></p><h4 id="Cluster-gt-Master"><a href="#Cluster-gt-Master" class="headerlink" title="Cluster-&gt;Master"></a>Cluster-&gt;Master</h4><p>从Cluster到Master的所有通信路径都终止于API server。在典型部署中，API server配置为在安全的HTTPS(443)端口上监听远程连接，并启用一种或多种形式的Client认证。<br>应该为节点配置集群的公共根证书，以便他们可以使用有效证书安全地连接到API server。<br>希望连接到API server的Pod可以利用Service Account安全地执行此操作，这样k8s在实例化时自动将公共根证书和有效bearer token注入到Pod中。<code>the kubernetes service</code>配置了一个虚拟IP地址，该地址被重定向到API server的HTTPS endpoint。<br>Master组件还通过安全端口与Cluster API server通信。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service</span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                         AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP                         8d</span><br></pre></td></tr></table></figure><p>因此，默认情况下，从Cluster到Master的连接的默认操作模式是安全的，可在不受信任网络/公共网络上运行。</p><p><br><br><br></p><h4 id="Master-gt-Cluster"><a href="#Master-gt-Cluster" class="headerlink" title="Master-&gt;Cluster"></a>Master-&gt;Cluster</h4><p>从Master(API server)到Cluster有两条主要通信路径：</p><ul><li>API server <code>-&gt;</code> kubelet</li><li>API server <code>-&gt;</code> node, pod, service</li></ul><p><br></p><p><strong>API server -&gt; kubelet</strong><br>从API server到kubelet(它运行在集群中的每个节点上)。</p><p>从API server到kubelet的连接用于：</p><ul><li>获取Pod的日志</li><li>附加到运行的Pod</li><li>提供kubelet的端口转发功能</li></ul><p>这些连接终止于kubelet的HTTPS endpoint。默认情况下，API server不会验证kubelet的证书，这会使连接可能受到中间人工具，并且不安全地运行在不受信任/公共的网络上。<br>要验证此连接，使用<code>--kubelet-certificate-authority</code>标志位API server提供根证书，用于验证kubelet的证书。</p><p>如果无法做到，请在API server和kubelet之间使用SSH隧道保障连接安全。</p><p><br></p><p><strong>API server -&gt; node, pod, service</strong><br>从API server到node, pod, service的连接默认为纯HTTP，因此既不需要认证也未加密。他们可以通过在API URI的前缀使用<a href="https://" target="_blank" rel="noopener">https://</a>来运行安全的HTTPS，但他们不会验证HTTPS endpoint提供的证书，也不会提供客户端凭据。因此连接将被加密，它不会提供任何完整性保证。</p><p><br><br><br></p><h3 id="云控制器管理器"><a href="#云控制器管理器" class="headerlink" title="云控制器管理器"></a>云控制器管理器</h3><p>Cloud Controller Manager</p><p>暂时跳过！</p><p><br><br><br><br><br></p><h2 id="扩展k8s"><a href="#扩展k8s" class="headerlink" title="扩展k8s"></a>扩展k8s</h2><p><br></p><h3 id="扩展k8s集群"><a href="#扩展k8s集群" class="headerlink" title="扩展k8s集群"></a>扩展k8s集群</h3><p>Extending your Kubernetes Cluster</p><p>k8s具有高度可配置化和可扩展化。</p><p>定制方法可大致分为配置，只涉及更改标志，本地配置文件或API资源；扩展，设计运行其它程序或服务。</p><p><br></p><h4 id="扩展模式"><a href="#扩展模式" class="headerlink" title="扩展模式"></a>扩展模式</h4><p>Extensions Patterns</p><p>k8s旨在通过编写客户端程序实现自动化。任意 read/write k8s API的程序都可以提供有用的自动化。自动化可在集群上启用或关闭。自动化通常适用于k8s集群，包括托管集群和管理安装。</p><p>有一种编写与k8s一起使用的称为控制器模式(Controller Pattern)客户端程序的特定模式。控制器通常读取对象的<code>.spec</code>，可能做些事情，然后更新对象的<code>.status</code>。<br>控制器(Controller)是一个k8s client。当k8s为client并调用远程服务时，它被称为<code>Webhook</code>。远程服务被称为<code>Webhook Backend</code>。与控制器一样，<code>Webhook</code>确实增加了一个失败点。</p><p>在webhook模式中，k8s 向远程服务发出网络请求。在二进制插件模型中，k8s执行二进制程序。二进制插件由kubelet和kubectl使用。</p><p><img src="/images/K8s/k8s_extensions.png" alt="k8s扩展"></p><p><br></p><h4 id="扩展点"><a href="#扩展点" class="headerlink" title="扩展点"></a>扩展点</h4><p>Extension Points</p><p>k8s 系统的扩展点:</p><p><img src="/images/K8s/k8s_extension_points.png" alt="k8s 扩展点"></p><p><br></p><ol><li>用户使用<code>kubectl</code>与k8s API进行交互</li><li>API server处理所有请求</li><li>API server提供各种资源</li><li>k8s调度器决定将pod放在哪个节点上</li><li>k8s大部分行为都是由控制器实现的</li><li>kubelet帮助pod在集群网络上显示为具有自己IP的虚拟服务</li><li>kubelet还可挂载和解挂容器的卷</li></ol><p><br></p><p>如果你不确定如何开始，查看如下流程图：</p><p><img src="/images/K8s/k8s_extensions_start.png" alt=""></p><p><br></p><h4 id="API扩展"><a href="#API扩展" class="headerlink" title="API扩展"></a>API扩展</h4><p>API Extensions</p><p><br></p><p><strong>User-Defined Types</strong><br>如果想要定义新的控制器、应用程序配置对象、声明性API并管理他们，请考虑向k8s添加自定义资源。<br>不要讲自定义资源用作应用程序、用户、监控数据的数据存储。</p><p><br></p><p><strong>Combining New APIs with Automation</strong><br>通常，当添加新API时，还会添加一个 read/write 新API的控制循环。当自定义API和控制循环的组合用于管理特定的，通常是有状态的应用程序时，这被称为操作者模式(Operator Pattern)。</p><p><br></p><p><strong>Changing Built-in Resources</strong><br>通过自定义资源添加扩展k8s API时，添加的资源始终属于新的API组。你无法替换或修改已经存在的API组。添加API不会直接影响现有API的行为，但API Access Extensions会影响现有API的行为。</p><p><br></p><p><strong>API Access Extensions</strong><br>当请求到达k8s API server时，它首先进行身份验证，然后授权，然后进行各种准入控制。每个步骤都提供了扩展点。</p><p><br></p><p><strong>Authentication</strong><br>身份验证将所有请求中的Header或证书映射到发出请求的客户端的用户名中。</p><p><br></p><p><strong>Authorization</strong><br>授权确定特定用户是否可以对API资源进行读写和其它操作。它只是在整个资源的层面上工作，不基于任意对象字段进行区分。</p><p><br></p><p><strong>Dynamic Admission Control</strong><br>当请求授权之后，如果它是一个写操作，它还需要通过<code>Admission Control</code>步骤。除了内建步骤之外，还有其它扩展：</p><ul><li><code>Image Policy webhook</code>限制可在容器中运行的镜像</li><li>为了做出任意的<code>admission control</code>决策，可使用普通<code>admission webhook</code></li><li>初始化程序可在创建对象之前修改对象的控制器</li></ul><p><br></p><h4 id="基础设施扩展"><a href="#基础设施扩展" class="headerlink" title="基础设施扩展"></a>基础设施扩展</h4><p>Infrastructure Extensions</p><p><br></p><p><strong>Storage Plugins</strong><br><code>Flex Volumes</code>允许用户通过<code>kubelet</code>调用二进制插件来安装卷，来安装没有内置支持的卷类型</p><p><br></p><p><strong>Device Plugins</strong><br>设备插件允许节点通过设备发现插件发现新的节点资源</p><p><br></p><p><strong>Network Plugins</strong><br>支持不同的网络结构</p><p><br></p><p><strong>Scheduler Extensions</strong><br>调度器是一种特殊类型的控制器，用于监视Pod，并将Pod分配给节点。</p><p><br><br><br></p><h3 id="扩展k8s-API"><a href="#扩展k8s-API" class="headerlink" title="扩展k8s API"></a>扩展k8s API</h3><p>Extending the Kubernetes API</p><p><br></p><h4 id="在聚合层扩展k8s-API"><a href="#在聚合层扩展k8s-API" class="headerlink" title="在聚合层扩展k8s API"></a>在聚合层扩展k8s API</h4><p>Extending the Kubernetes API with the aggregation layer</p><p>聚合层允许在集群中安装其它k8s-style的API。</p><p><br></p><h4 id="自定义资源"><a href="#自定义资源" class="headerlink" title="自定义资源"></a>自定义资源</h4><p>Custom Resources</p><p>自定义资源是k8s API的扩展，包括何时向k8s集群添加自定义资源以及何时使用独立服务。</p><p>资源是k8s API中的端点(endpoint)，用于存储某种API对象的集合。如，内建的pods资源包含了Pod对象的集合。<br>自定义资源是k8s API的扩展，不一定在每个k8s集群上都可用。换句话说，它代表了特定k8s的定制安装。<br>自定义资源可通过动态注册在正在运行的集群中出现和消失，集群管理员可独立于集群本身更新自定义资源。安装自定义资源后，用户可使用<code>kubectl</code>创建和访问其对象。</p><p><br></p><p>Custom controllers</p><p>自定义字段本身可让你存储和检索结构化数据。只有与控制器结合使用才能成为真正的声明性API。declare API允许你声明或指定资源的所需状态，并尝试将实际状态与此期望状态相匹配。这里，控制器将结构化的数据解释为用户期望状态的记录，并且不断采取行动以实现和维护该状态。<br>自定义控制器是一种用户可在正在运行的集群上进行部署和更新，而与集群自身的生命周期无关的控制器。自定义控制器可使用任何类型的资源，但与自定义资源结合使用时，它们更有效。</p><p><br></p><p>Should I add a custom resource to my Kubernetes Cluster?</p><p>当创建新的API时，考虑是使用k8s cluster API还是让API独立运行。</p><table><thead><tr><th>Consider API aggregation if:</th><th>Prefer a stand-alone API if:</th></tr></thead><tbody><tr><td>Your API is Declarative.</td><td>Your API does not fit the Declarative model.</td></tr><tr><td>You want your new types to be readable and writable using kubectl.</td><td>kubectl support is not required</td></tr><tr><td>You want to view your new types in a Kubernetes UI, such as dashboard, alongside built-in types.</td><td>Kubernetes UI support is not required.</td></tr><tr><td>You are developing a new API.</td><td>You already have a program that serves your API and works well.</td></tr><tr><td>You are willing to accept the format restriction that Kubernetes puts on REST resource paths, such as API Groups and Namespaces. (See the API Overview.)</td><td>You need to have specific REST paths to be compatible with an already defined REST API.</td></tr><tr><td>Your resources are naturally scoped to a cluster or to namespaces of a cluster.</td><td>Cluster or namespace scoped resources are a poor fit; you need control over the specifics of resource paths.</td></tr><tr><td>You want to reuse Kubernetes API support features.</td><td>You don’t need those features</td></tr></tbody></table><p><br></p><p><strong>声明性API</strong><br>Declarative APIs</p><p>在一个声明性API中，通常：</p><ul><li>你的API由相对较少的相对较小的对象组成</li><li>应用程序或基础结构的对象定义配置</li><li>对象很少更新</li><li>人们通常需要读写对象</li><li>对象的主要操作时CRUD</li><li>跨对象的事务不是必需的：API表示期望状态，而不是精确的状态</li></ul><p>imperative API不是声明性的，你的API可能不是声明性的标志包括：</p><ul><li>客户端说执行此操作，完成后获得同步响应</li><li>客户端说执行此操作，然后获取操作ID，并且必须检查单独的Operation对象以确定请求的完成</li><li>谈论Remote Procedure Calls(RPCs)</li><li>直接存储大量数据</li><li>需要高带宽访问</li><li>存储最终用户数据，或应用程序处理的其它大规模数据</li><li>对象非CRUD的自然操作</li><li>API不容易建模为对象</li><li>使用操作ID或操作对象表示挂起的操作</li></ul><p><br></p><p>Should I use a configMap or a custom resource?</p><p>如果符合以下任意条件，请使用ConfigMap:</p><ul><li>存在现有的，记录完备的配置文件格式</li><li>你希望将整个配置文件放入ConfigMap的一个key中</li><li>配置文件的主要用途是在集群上的Pod中运行的程序使用该文件来配置自身</li><li>文件的消费者更喜欢使用Pod中的文件或环境变量，而不是k8s API</li><li>你希望在文件更新时通过部署执行滚动升级</li></ul><p>如果符合以下大部分情况，请使用自定义资源：</p><ul><li>你希望使用k8s client library和CLI来创建和更新新资源</li><li>你希望来自<code>kubectl</code>的顶级支持</li><li>你希望构建新的自动化，监视新对象的更新，然后CRUD其它对象</li><li>你希望编写处理对象更新的自动化</li><li>你希望使用k8s API约定，如<code>.spec, .status, .metadata</code></li><li>你希望对象是受控资源集合的抽象，或其它资源的汇总</li></ul><p><br></p><p><strong>添加自定义资源</strong><br>k8s提供了两种方式来向你的集群中添加自定义资源：</p><ul><li>CRD很简单，无需任何编程即可创建</li><li>API聚合需要编程，但允许更多控制API行为，如数据的存储方式和API版本间的转换</li></ul><p>聚合API是位于主API server后面的从属API server，它充当代理。这种安排称为API聚合(AA, API Aggregation)。<br>CRD允许用户添加新类型的资源，而无需添加其它API server，你无需了解API聚合即可使用CRD。<br>无论如何安装，新资源都成为自定义资源，以区别于内置的k8s 资源。</p><p><br></p><p><strong>自定义资源定义</strong><br>自定义资源定义 API资源允许你去定义自定义资源。定义CRD对象会创建一个新的自定义资源，其中包含指定的名称和架构。k8s API提供并处理自定义资源的存储。<br>这使你无需编写自己的API server来处理自定义资源，但实现的一般特性意味着你的灵活性低于API server聚合。</p><p><br></p><p><strong>API server aggregation</strong><br>通常，k8s API中的每个资源都需要处理REST 请求的代码并管理对象的持久化存储。k8s API server处理pod等内建资源，还可通过CRD处理自定义资源。<br>聚合层允许你通过编写和部署自己的独立API server为自定义资源提供专门的实现。API server将请求委托给你处理的自定义资源，使其对所有客户端可用。</p><p>为添加自定义资源选择一个方法<br>通常情况下，CRD很适合，如果：</p><ul><li>你有少数几个领域</li><li>你正在使用公司内的资源，或作为小型开源项目的一部分</li></ul><p><br></p><p>易用性比较：</p><table><thead><tr><th>CRDs</th><th>Aggregated API</th></tr></thead><tbody><tr><td>Do not require programming. Users can choose any language for a CRD controller.</td><td>Requires programming in Go and building binary and image. Users can choose any language for a CRD controller.</td></tr><tr><td>No additional service to run; CRs are handled by API Server.</td><td>An additional service to create and that could fail.</td></tr><tr><td>No ongoing support once the CRD is created. Any bug fixes are picked up as part of normal Kubernetes Master upgrades.</td><td>May need to periodically pickup bug fixes from upstream and rebuild and update the Aggregated APIserver.</td></tr><tr><td>No need to handle multiple versions of your API. For example: when you control the client for this resource, you can upgrade it in sync with the API.</td><td>You need to handle multiple versions of your API, for example: when developing an extension to share with the world.</td></tr></tbody></table><p><br></p><p>高级功能和灵活性：</p><table><thead><tr><th>Feature</th><th>Description</th><th>CRDs</th><th>Aggregated API</th></tr></thead><tbody><tr><td>Validation</td><td>Help users prevent errors and allow you to evolve your API independently of your clients. These features are most useful when there are many clients who can’t all update at the same time.</td><td>Yes. Most validation can be specified in the CRD using OpenAPI v3.0 validation. Any other validations supported by addition of a Validating Webhook.</td><td>Yes, arbitrary validation checks</td></tr><tr><td>Defaulting</td><td>See above</td><td>Yes, via a Mutating Webhook; Planned, via CRD OpenAPI schema.</td><td>Yes</td></tr><tr><td>Multi-versioning</td><td>Allows serving the same object through two API versions. Can help ease API changes like renaming fields. Less important if you control your client versions.</td><td>No, but planned</td><td>Yes</td></tr><tr><td>Custom Storage</td><td>If you need storage with a different performance mode (for example, time-series database instead of key-value store) or isolation for security (for example, encryption secrets or different</td><td>No</td><td>Yes</td></tr><tr><td>Custom Business Logic</td><td>Perform arbitrary checks or actions when creating, reading, updating or deleting an object</td><td>Yes, using Webhooks.</td><td>Yes</td></tr><tr><td>Scale Subresource</td><td>Allows systems like HorizontalPodAutoscaler and PodDisruptionBudget interact with your new resource</td><td>Yes</td><td>Yes</td></tr><tr><td>Status Subresource</td><td></td></tr><tr><td>Finer-grained access control: user writes spec section, controller writes status section.</td></tr><tr><td>Allows incrementing object Generation on custom resource data mutation (requires separate spec and status sections in the resource)</td></tr><tr><td>Yes</td><td>Yes</td></tr><tr><td>Other Subresources</td><td>Add operations other than CRUD, such as “logs” or “exec”.</td><td>No</td><td>Yes</td></tr><tr><td>strategic-merge-patch</td><td>The new endpoints support PATCH with Content-Type: application/strategic-merge-patch+json. Useful for updating objects that may be modified both locally, and by the server. For more information, see “Update API Objects in Place Using kubectl patch”</td><td>No, but similar functionality planned</td><td>Yes</td></tr><tr><td>Protocol Buffers</td><td>The new resource supports clients that want to use Protocol Buffers</td><td>No</td><td>Yes</td></tr><tr><td>OpenAPI Schema</td><td>Is there an OpenAPI (swagger) schema for the types that can be dynamically fetched from the server? Is the user protected from misspelling field names by ensuring only allowed fields are set? Are types enforced (in other words, don’t put an int in a string field?)</td><td>No, but planned</td><td>Yes</td></tr></tbody></table><p><br></p><p>一般功能：</p><table><thead><tr><th>Feature</th><th>What it does</th></tr></thead><tbody><tr><td>CRUD</td><td>The new endpoints support CRUD basic operations via HTTP and kubectl</td></tr><tr><td>Watch</td><td>The new endpoints support Kubernetes Watch operations via HTTP</td></tr><tr><td>Discovery</td><td>Clients like kubectl and dashboard automatically offer list, display, and field edit operations on your resources</td></tr><tr><td>json-patch</td><td>The new endpoints support PATCH with Content-Type: application/json-patch+json</td></tr><tr><td>merge-patch</td><td>The new endpoints support PATCH with Content-Type: application/merge-patch+json</td></tr><tr><td>HTTPS</td><td>The new endpoints uses HTTPS</td></tr><tr><td>Built-in Authentication</td><td>Access to the extension uses the core apiserver (aggregation layer) for authentication</td></tr><tr><td>Built-in Authorization</td><td>Access to the extension can reuse the authorization used by the core apiserver (e.g. RBAC)</td></tr><tr><td>Finalizers</td><td>Block deletion of extension resources until external cleanup happens.</td></tr><tr><td>Admission Webhooks</td><td>Set default values and validate extension resources during any create/update/delete operation.</td></tr><tr><td>UI/CLI Display</td><td>Kubectl, dashboard can display extension resources.</td></tr><tr><td>Unset vs Empty</td><td>Clients can distinguish unset fields from zero-valued fields.</td></tr><tr><td>Client Libraries Generation</td><td>Kubernetes provides generic client libraries, as well as tools to generate type-specific client libraries.</td></tr><tr><td>Labels and annotations</td><td>Common metadata across objects that tools know how to edit for core and custom resources</td></tr></tbody></table><p><br></p><p><strong>安装自定义资源</strong><br>在向集群添加自定义资源之前，需要注意几点</p><ul><li>第三方代码和新的失败点</li><li>存储</li><li>认证，授权，审计</li></ul><p><br></p><p><strong>访问自定义资源</strong><br>k8s client library可用于访问自定义资源。并非所有client library都支持自定义资源，但go和python client library可以。</p><p>当你添加一个自定义资源时，你可以使用如下方式访问：</p><ul><li>kubectl</li><li>k8s dynamic client</li><li>REST client</li><li>由k8s client 生成工具生成的client</li></ul><p><br><br><br></p><h3 id="计算，存储和网络插件"><a href="#计算，存储和网络插件" class="headerlink" title="计算，存储和网络插件"></a>计算，存储和网络插件</h3><p>Compute, Storage, and Networking Extensions</p><p><br></p><h4 id="网络插件"><a href="#网络插件" class="headerlink" title="网络插件"></a>网络插件</h4><p>Network Plugins</p><blockquote><p>Notice:<br>FEATURE STATE: Kubernetes v1.11 alpha<br>Alpha features change rapidly</p></blockquote><p>k8s中的网络插件有几种风格：</p><ul><li>CNI plugins: 遵守appc/CNI规范，旨在实现互操作性</li><li>Kubenet plugin: 使用<code>bridge</code>和<code>host-local</code> CNI plugins实现基本的<code>cbr0</code></li></ul><p><br></p><p><strong>安装</strong><br>kubelet有一个默认的网络插件，以及整个集群的默认网络。它在启动时探测插件，记住它找到的内容，并在pod声明周期中的适当时间执行所选插件。<br>使用插件时，请记住两个<code>kubelet</code>命令行参数：</p><ul><li><code>cni-bin-dir</code>: kubelet在启动时检测此目录以获取插件</li><li><code>network-plugin</code>： 从<code>cni-bin-dir</code>使用的网络插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep kubelet</span><br><span class="line"></span><br><span class="line">/usr/bin/kubelet xxx --cni-bin-dir=/opt/cni/bin --cni-conf-dir=/etc/cni/net.d --network-plugin=cni</span><br></pre></td></tr></table></figure><p><br></p><p><strong>网络插件需求</strong><br>除了提供网络插件接口来配置和清理pod网络外，该插件还可能需要对kube-proxy提供特定支持。iptables proxy依赖于iptables，插件可能需要确保容器流量可用于iptables。<br>默认情况下，如果未指定kubelet网络插件，则使用noop插件，它设置<code>net/bridge-nf-call-iptables=1</code>来确保简单配置与iptables proxy正常工作。</p><p><strong>CNI</strong><br>通过kubelet传递<code>--network-plugin=cni</code>选项来选择CNI插件。kubelet从<code>cni-conf-dir</code>(默认<code>/etc/cni/net.d</code>)中读取文件，并使用该文件中的CNI配置来设置每个pod的网络。引用的插件必须存在于<code>--cni-bin-dir</code>(默认<code>/opt/cni/bin</code>)中。<br>如果目录中有多个CNI配置文件，则使用文件名的词典顺序的第一个。<br>除了配置文件指定的CNI插件外，k8s还需要标准的CNI lo插件(loopback)，最低版本 v0.2.0</p><p><strong>kubenet</strong><br>kubelet是一个仅使用与Linux的基本和简单的网络插件。它本身并不实现高级的功能，如跨节点网络或网络策略。kubenet创建一个名为<code>cbr0</code>的Linux bridge，并为每个pod创建一个<code>veth</code>对，每对的主机端连接到连接到<code>cbr0</code>。通过配置或控制器管理器为该对的pod端分配范围内的IP地址。为cbr0分配一个MTU，该MTU与主机上启用的普通接口的最小MTU相匹配。</p><p>此插件需要一些东西：</p><ul><li>需要标准的CNI <code>bridge</code>, <code>lo</code>, <code>host-local</code>插件，最小版本 v0.2.0。首先从<code>/opt/cni/bin</code>查找。</li><li>kubelet必须使用<code>--network-plugin=kubenet</code>参数来启用此插件</li><li>kubelet应该指定<code>--non-masquerade-cidr=&lt;clusterCidr&gt;</code>参数确保超出范围的IP流量将使用IP masquerade。</li><li>必须通过kubelet的<code>--pod-cidr</code>选项或控制器管理器的<code>--allocate-node-cidrs=true --cluster-cidr=&lt;cidr&gt;</code>选项来为节点分配IP子网</li></ul><p><strong>自定义MTU(kubenet)</strong><br>应该始终正确配置MTU以获得最佳网络性能。网络插件通常会推断合理的MTU，但有时不会产生最佳的MTU。<br>如果需要，你可使用kubenet的<code>network-plugin-mtu</code>选项来明确指定MTU，仅有kubenet插件支持此选项。</p><p><br></p><p><strong>使用摘要</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--network-plugin=cni</span><br><span class="line">--network-plugin=kubenet</span><br><span class="line">--network-plugin-mtu=9001</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="设备插件"><a href="#设备插件" class="headerlink" title="设备插件"></a>设备插件</h4><p>Device Plugins</p><p>从v1.8开始，k8s为Vendors提供了设备插件框架，以便在不更改k8s核心代码的情况下将资源通知到kubelet，Vendor可实现手动部署或作为DaemonSet部署的设备插件，而不是编写自定义的k8s插件。目标设备包括GPU，高性能NIC， FPGA， InfiniBand和其它计算资源。</p><p><br></p><p><strong>设备插件注册</strong><br>设备插件功能由<code>DevicePlugins</code>功能控制，默认在 v1.10之前禁用。当启用设备插件功能，kubelet将导出Registration gRPC服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service Registration &#123;</span><br><span class="line">  rpc Register(RegisterRequest) returns (Empty) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设备插件可通过gRPC服务向kubelet注册自己。在注册中，它需要发送：</p><ul><li>Unix socket名</li><li>设备插件API版本</li><li>想要告知的ResourceName</li></ul><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: demo-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: demo-container-1</span><br><span class="line">      image: k8s.gcr.io/pause:2.0</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          vendor-domain/resource: 2 # requesting 2 vendor-domain/resource</span><br></pre></td></tr></table></figure><p><br></p><p><strong>设备插件实现</strong><br>设备插件的一般工作流包括如下步骤：</p><ul><li>初始化</li><li>插件启动gRPC服务</li><li>插件使用kubelet的Unix socket注册自己</li><li>注册成功之后，设备插件以服务模式运行，在此期间，它会持续监控设备运行状况，并在任何设备状况发生变化时向kubelet报告</li></ul><p><br></p><p><strong>设备插件部署</strong><br>设备插件可手动或作为DaemonSet来部署。<br>k8s 设备插件的支持人处于alpha状态。</p><p><br><br><br></p><h3 id="服务目录"><a href="#服务目录" class="headerlink" title="服务目录"></a>服务目录</h3><p>Service Catalog</p><p>服务目录是一种扩展API，它使在k8s集群中运行的应用程序能够轻松使用外部托管软件。<br>它提供了从Service Broker 列出，配置和绑定外部托管服务的方法，而无需详细了解如何创建或管理这些服务。<br>使用服务目录，集群操作人员可以浏览服务代理提供的托管服务列表，配置托管服务的实例，并与其绑定以使其可供k8s集群中应用程序使用。</p><p><br><br><br><br><br></p><h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><p><br></p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>你创建Docker image并将其push到registry，然后在k8s pod中引用它。<br>容器的镜像属性支持与Docker命令相同的语法，包括私有注册表和标记。</p><p><br></p><p><strong>更新镜像</strong><br>默认的拉取策略是<code>ifNotPresent</code>，这会导致kubelet跳过拉取镜像(如果镜像已存在)。所以在网络不好时，我们可以首先将镜像拉取下来。<br>如果你总想强制拉取镜像，可以执行如下操作：</p><ul><li>设置容器<code>imagePullPolicy</code>为<code>Always</code></li><li>使用<code>:latest</code>作为镜像的标记</li><li>启用<code>AlwaysPullImages</code>准入控制器</li></ul><p>如果没有对镜像指定标记，则假定为<code>:latest</code>标记。</p><p><br></p><p><strong>使用私有注册表</strong><br>Using a Private Registry</p><p>私有注册表有：</p><ul><li>Docker Hub</li><li>Aliyun</li><li>Tencent yun</li><li>Google Container Registry</li><li>AWS Container Registry</li><li>Azure Container Registry</li><li>…</li></ul><p>以下是配置节点已使用私有注册表的推荐步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 运行 docker login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 查看 ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        &quot;auths&quot;: &#123;</span><br><span class="line">                &quot;https://index.docker.io/v1/&quot;: &#123;</span><br><span class="line">                        &quot;auth&quot;: &quot;xxxxxxxxxxxxxxx&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;HttpHeaders&quot;: &#123;</span><br><span class="line">                &quot;User-Agent&quot;: &quot;Docker-Client/18.03.1-ce (linux)&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 获取节点列表</span><br><span class="line">#name</span><br><span class="line">nodes=$(kubectl get nodes -o jsonpath=&apos;&#123;range.items[*].metadata&#125;&#123;.name&#125; &#123;end&#125;&apos;)</span><br><span class="line"></span><br><span class="line">#IPs</span><br><span class="line">nodes=$(kubectl get nodes -o jsonpath=&apos;&#123;range .items[*].status.addresses[?(@.type==&quot;ExternalIP&quot;)]&#125;&#123;.address&#125; &#123;end&#125;&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 复制 .docker/config.json 到上面的搜索路径列表</span><br><span class="line"></span><br><span class="line">for n in $nodes; do scp ~/.docker/config.json root@$n:/var/lib/kubelet/config.json; done</span><br></pre></td></tr></table></figure><p><br></p><p>通过创建pod来验证私有镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: private-image-test-1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: uses-private-image</span><br><span class="line">      image: $PRIVATE_IMAGE_NAME</span><br><span class="line">      imagePullPolicy: Always</span><br><span class="line">      command: [ &quot;echo&quot;, &quot;SUCCESS&quot; ]</span><br><span class="line">EOF</span><br><span class="line">pod &quot;private-image-test-1&quot; created</span><br></pre></td></tr></table></figure><p><br></p><p><strong>预拉取镜像</strong><br>Pre-pulling Images</p><p>默认情况下，kubelet将尝试从指定的注册表中拉取镜像。但是，如果容器的<code>imagePullPolicy</code>属性为<code>ifNotPresent</code>或<code>Never</code>，则会使用本地镜像。<br>如果你希望依赖于预先拉取的镜像作为注册表身份验证的替代，则必须确保集群中的所有节点都具有相同的预拉取镜像。<br>这可以用于预加载某些镜像以提高速度，或者作为对私有注册表进行身份认证的替代方法。<br>请确保所有的pods都对预拉取的镜像由访问权限。</p><p><br></p><p><strong>Specifying ImagePullSecrets on a Pod</strong><br>k8s支持在pod上指定registry keys。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#使用Docker config创建secret</span><br><span class="line">kubectl create secret docker-registry -h</span><br><span class="line">#Create a new secret for use with Docker registries.</span><br><span class="line"></span><br><span class="line">kubectl create secret docker-registry zhang21-secret --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL</span><br><span class="line">secret &quot;myregistrykey&quot; created.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get secret</span><br><span class="line">NAME                  TYPE                                  DATA      AGE</span><br><span class="line">zhang21-secret        kubernetes.io/dockerconfigjson        1         22s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看和修改</span><br><span class="line">kubectl edit secret/zhang21-secret</span><br></pre></td></tr></table></figure><p>如果需要访问多个注册表，你可以为每个注册表创建一个secret。当为pod来取镜像时，kubelet会将<code>imagePullSecret</code>合并到 一个虚拟的<code>.docker/config.json</code>文件中。<br>pod只能在自己的命名空间中引用image pull secret，因此每个命名空间都需要执行一次此过程。</p><p><br></p><p>pod上的imagePullSecret</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apiVersion:</span><br><span class="line">kind: Pod</span><br><span class="line">xxx</span><br><span class="line">spec:</span><br><span class="line">  container:</span><br><span class="line">    xxx</span><br><span class="line">  imagePullSecretes:</span><br><span class="line">    name: zhang21-secret</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="容器环境变量"><a href="#容器环境变量" class="headerlink" title="容器环境变量"></a>容器环境变量</h3><p>Container Environment Variables</p><p>k8s容器环境为容器提供了几个重要资源：</p><ul><li>文件系统(是镜像和卷的组合)</li><li>容器自身信息</li><li>集群中对象的信息</li></ul><p><br><br><br></p><h3 id="容器生命周期钩子"><a href="#容器生命周期钩子" class="headerlink" title="容器生命周期钩子"></a>容器生命周期钩子</h3><p>Container Lifecycle Hooks</p><p>本节描述了kubelet如何使用容器生命周期钩子框架来运行在管理生命周期中由事件触发的代码。<br>与许多具有组件生命周期钩子的编程语言框架类似，k8s为容器提供了生命周期钩子。钩子使容器能够了解其生命周期中的事件，并在执行相应的生命周期钩子时运行在处理程序中实现的代码。</p><p><br></p><h4 id="容器钩子"><a href="#容器钩子" class="headerlink" title="容器钩子"></a>容器钩子</h4><p>有两个公开给容器的钩子：</p><ul><li><p><strong>PostStart</strong><br>此钩子在容器创建后立即执行。但是，无法保证钩子将在容器<code>ENTRYPOINT</code>之前执行。没有参数传递给处理程序。</p></li><li><p><strong>PreStop</strong><br>此钩子在容器终止前立即调用。它是阻塞的，意味着它是同步的。所以它必须在调用删除容器之前完成才能发送。没有参数传递给处理程序。</p></li></ul><p><br></p><p><strong>Hook handler implementations</strong><br>容器可以通过实施和注册该钩子的处理程序来访问钩子。可为容器实施两种类型的钩子处理程序：</p><ul><li>Exec： 在cgroup和namespace内执行特定的命令</li><li>HTTP： 在容器的特定端点上执行一个HTTP请求</li></ul><p><br></p><p><strong>Hook handler exection</strong><br>调用容器生命周期管理钩子时，k8s管理系统会在为钩子注册的容器中执行处理程序。</p><p>钩子处理程序调用包含在容器的Pod的上下文中是同步的。这意味着对<strong>PostStart钩子</strong>，容器<code>ENTRYPOINT</code>和钩子异步启动。但是，如果钩子 运行/挂起 太长时间，则容器无法达到<code>running state</code>。<br><strong>PreStop钩子</strong>的行为类似。如果钩子在执行期间挂起，则pod阶段将保持在<code>Terminating state</code>，并在pod结束的<code>terminationGracePeriodSeconds</code>之后被杀掉。<br>如果<strong>PostStart</strong>或<strong>PreStop</strong>钩子失败，则会杀掉容器。</p><p>用户应该使他们的钩子处理程序尽可能的轻量化。</p><p><br></p><p><strong>Hook delivery guarantees</strong><br>钩子交付至少是一次，这意味着对于任何给定的事件可以多次调用钩子。由钩子实现来正确处理这个问题。<br>通常，只进行当次交付。在一些罕见的情况下，可能会发生双重交付。</p><p><br></p><p><strong>Debugging Hook handlers</strong><br>钩子处理程序的日志并不会在Pod事件中公开。如果处理程序由于某种原因失败，它会广播这个事件。</p><p><br><br><br><br><br></p><h2 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h2><p>Workloads</p><h3 id="Pods"><a href="#Pods" class="headerlink" title="Pods"></a>Pods</h3><p>Pod是k8s的基本构建块，是你创建和部署k8s对象模型中最小和最简单的单元。Pod代表了集群上正在运行的进程。<br>Pod封装了(encapsulates) 一个/多个 应用程序容器，存储资源，唯一的IP地址(集群内)以及控制容器运行需要的选项。Pod代表了一个部署单元，k8s中的单个应用程序实例可能包含单个或少量紧密耦合且共享资源的容器。<br>Docker是k8s Pod中最常使用的容器运行环境(runtime)，Pod同样也支持其它容器运行环境。</p><p>k8s 集群中的Pods可以用两种主要方法来使用：</p><ul><li><p><strong>运行单个容器的Pod</strong><br>Pods that run a single container<br><code>one-container-per-pod</code>模型时最常见的k8s用例。在这种情况下，你可将Pod视为单个容器的包装，而k8s直接管理Pod而不是容器。</p></li><li><p><strong>运行多个需要协同工作的容器的Pod</strong><br>Pods that run multiple containers that need to work together<br>Pod可能封装了由多个协同定位(co-located)容器组成的应用程序，这些容器紧密耦合并且需要共享资源。这些协同的容器可能形成一个统一的服务单元——一个容器从共享卷向公众提供文件，而一个单独的<code>sidecar</code>容器刷新或更新这些文件。Pod将这些容器和资源作为单个可管理的实体包装在一起。</p></li></ul><p><br></p><p>每个Pod都用于运行给定应用程序的单个实例。如果你想要水平扩展应用程序，你可以使用多个Pods(每个实例一个)。在k8s中，这通常称为<strong>副本(replication)</strong>。 <code>Replicated Pods</code>通常通过称为<strong>控制器(Controller)</strong>的抽象来创建和管理。</p><p><br></p><p><strong>Pod如何管理多个容器</strong><br>Pods旨在支持多个协作进程(as container)，形成一个具有凝聚力的服务单元。Pod中的容器将自动协同定位(co-located)，并在集群中的同一主机上协同调度(co-scheduled)。容器可以共享资源和依赖，彼此通信，并协调它们何时以及如何终止。</p><p>注意，将多个协同定位和协同管理的容器分组到一个Pod中是一个相对高级的栗子。你应该仅在容器紧密耦合的特定实例中使用此模式。<br>例如，你可能有一个容器充当共享卷中文件的Web Server，以及一个单独的<code>sidecat</code>容器——用于从远程更新这个文件：</p><p><img src="/images/K8s/pod_multi_container.png" alt="多容器Pod"></p><p><br></p><p><strong>Pod共享资源</strong><br>Pod为其组成容器提供了两种共享资源：</p><ul><li><p><strong>Networking</strong><br>每个Pod都被分配了一个唯一的IP地址(within cluster)。Pod中的每个容器都共享网络命名空间，包括IP地址和网络端口。Pod内的容器可使用<code>localhost</code>相互通信。当Pod内的容器与Pod外的实体通信时，它们必须协调如何使用共享网络资源。</p></li><li><p><strong>Storage</strong><br>Pod可以指定一组共享存储卷。Pod中的所有容器都可以访问这个共享卷，允许这些容器共享数据。还是关于数据持久化的卷。</p></li></ul><p><br></p><p><strong>使用Pods</strong><br>你很少直接在k8s(甚至是单例Pod)中创建单独的Pod。这是因为Pod被设计为相对短暂的一次性实体，即用后即焚。当Pod被创建后，都会被调度到集群中的节点上运行。Pod保留在该节点上，知道进程终止，Pod对象被删除，Pod因资源不足而被驱逐，或节点失效。Pod不会自愈。<br>注意： 重启Pod中的容器与重启Pod不是一回事。Pod本身不运行，它只提供容器的运行环境并保持容器的运行状态。但是容器运行的环境会持续存在，直到删除为止。</p><p>Pod本身不提供自我修复(self-heal)。如果将Pod调度到一个失败的节点，或调度操作本身失败，则会删除Pod。同样，由于缺乏资源或节点维护中，Pod将无法在驱逐中存活。k8s使用一个高更级别的抽象，称为控制器(Controller)。它管理相对可处理的Pod实例的工作。因此，尽管可以直接使用Pod，但在k8s中使用控制器管理Pod更为常见。<br>控制器可为你创建和管理多个Pod，处理副本和上线，并在集群范围内提供自我修复功能。例如，如果节点故障，控制器可能会通过在不同节点上安排相同的替换来自动替换Pod。<br>通常，控制器使用你提供的Pod模板来创建它负责的Pod。</p><p><br></p><p><strong>Pod Templates</strong><br>Pod模板是Pod规范，包含在其它对象中。控制器使用Pod模板制作实际的Pod。</p><p>栗子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: myapp</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: myapp-container</span><br><span class="line">    image: busybox</span><br><span class="line">    command: ['sh', '-c', 'echo Hello Kubernetes! &amp;&amp; sleep 3600']</span><br></pre></td></tr></table></figure><p>Pod模板不是指定所有副本的当前所需状态，而是像饼干切割器。饼干被切割后，饼干与切割器无关。</p><p><br><br><br></p><h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><p>Pod是可在k8s中创建和管理的最小可部署的计算单元。</p><p><br></p><p><strong>Pod是什么</strong><br>Pod是一组 一个/多个容器，具有共享存储/网络，以及如何运行容器的规范。Pod中的容器总是<code>co-located</code>和<code>co-scheduler</code>，并在共享上下文中运行。一个pod模拟特定应用程序的逻辑主机，它包含一个/多个紧密耦合的应用程序容器。<br>Pod的共享上下文十一组Linux namespace， cgroup，以及隔离方面。在Pod的上下文中，各个应用程序科恩能够回应用进一步的子隔离。<br>Pod中的容器共享IP地址和端口空间，并且可通过<code>localhsot</code>找到彼此。它们还可使用IPC相互通信。不同Pod中的容器具有不同的IP地址，默认情况下无法通信，需要进行额外配置。<br>Pod中的应用程序还可访问共享卷，共享卷被定义为Pod的一部分，可挂载到每个应用程序的文件系统中。<br>就Docker构造而言，Pod被建模为一组具有共享命名空间和共享卷的Docker容器。<br>与单个应用程序容器类似，Pod被认为是相对短暂(非持久)的实体。</p><p><br></p><p><strong>Pod动机</strong></p><ul><li><p>管理(Management)<br>Pod是多个协作过程进程模式的模型，形成了一个有凝聚力的服务单元。它们通过提供更高级别的抽象来简化应用程序部署和管理。Pod提供用于部署，水平扩展，副本的单元。对于Pod中的容器，它们将自动处理协同调度， 共享命运， 协同副本，资源共享和依赖管理…</p></li><li><p>资源共享和交流<br>Pod可以实现成员之间的数据共享和通信。<br>Pod中的应用程序都是用相同的网络命名空间，因此可通过<code>localhost</code>进行通信。因此，Pod中的应用程序必须协调对端口的使用。<br>主机名设置为Pod中应用程序容器的Pod名。<br>除了定义在Pod中运行的应用程序容器，Pod还制定了一组共享存储卷(持久化)。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get pod -o wide</span><br><span class="line">NAME                                   READY     STATUS    RESTARTS   AGE       IP               NODE</span><br><span class="line">kubernetes-dashboard-6948bdb78-tdh5v   1/1       Running   0          8d        10.244.2.3       salt01</span><br><span class="line">metrics-server-85ff8f7b84-72rd4        1/1       Running   0          9d        10.244.2.2       salt01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl -n kube-system <span class="built_in">exec</span> -it metrics-server-85ff8f7b84-72rd4 /bin/sh</span><br><span class="line">/ <span class="comment"># hostname</span></span><br><span class="line">metrics-server-85ff8f7b84-72rd4</span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0 10.244.2.2</span><br><span class="line">/ <span class="comment"># ping 10.244.2.3</span></span><br><span class="line">PING 10.244.2.3 (10.244.2.3): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.3: seq=0 ttl=64 time=0.115 ms</span><br><span class="line">64 bytes from 10.244.2.3: seq=1 ttl=64 time=0.062 ms</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Pod使用</strong><br>Pod可用于托管垂直集成的应用程序栈，但主要动机是用于支持协同共处，协同管理的应用程序。如：</p><ul><li>内容管理系统，文件和数据加载器，本地缓存管理器</li><li>日志和检查点的备份、压缩、轮询、快照</li><li>数据变更观察器，日志和监控适配器，事件发布器</li><li>代理，网桥和适配器</li><li>控制器，管理器，配置器和更新器</li></ul><p>通常，单个Pod不用于运行同一程序的多个实例。</p><p><br></p><p><strong>替代考虑</strong><br>为什么不在单个容器中运行多个程序？</p><ol><li>透明度</li><li>解耦软件依赖关系</li><li>使用方便</li><li>效率</li></ol><p><br></p><p><strong>Pod耐久性</strong><br>Pod不应被视为耐用实体。它们不会在 调度失败，节点故障，驱逐，节点维护等情况下存活。<br>通常，用户不需要直接创建Pod。而应该(几乎总是)使用控制器。控制器提供了集群范围内的自修复(self-healing)，副本和上线管理。</p><p>Pod公开为一个原语以便于使用：</p><ul><li>调度器和控制器可插拔</li><li>支持Pod级操作，而无需通过控制器API代理</li><li>将Pod寿命与控制器寿命分离</li><li>控制器和服务的分离</li><li>kubelet实际是Pod控制器</li><li>高可用应用程序</li></ul><p><br></p><p><strong>Pod终止</strong><br>由于Pod表示集群中节点上正在运行的进程，因此允许这些进程在不需要时优雅地终止(gracefully terminate)非常重要。用户应该能够请求并指导进程何时终止，但也要确保删除最终完成。当用户请求删除Pod时，系统会在允许Pod强制终止之前记录预期的宽限期(grace period)，并将<code>TERM</code>信号(-15)发送到每个容器的主进程中。宽限期到期后，<code>KILL</code>信号(-9)发送到这些进程，然后从API server中删除该Pod。如果在等待进程终止时Kubelet或容器管理器重启了，则将在完整的宽限期内重试终止。</p><p>流程：</p><ol><li>用户发送删除Pod的命令，默认宽限期(30s)</li><li>API server中的Pod随着时间的推移而更新，在此之后，除了宽限期外，Pod被认为死亡</li><li>列出客户端命令时，Pod显示为<code>Terminating</code></li><li>当Kubelet发现Pod被标记为<code>Terminating</code>，它将开始Pod关闭过程<br> 4.1 如果Pod定义了<code>preStop hook</code>，则会在Pod内调用<br> 4.2 Pod中的进程发送<code>TERM</code>信号</li><li>Pod将从端点列表中删除，并且不再被视为副本控制器中运行的Pod的一部分。缓慢关闭的Pod无法继续为流量提供服务，因为负载均衡器会将其从轮询中删除</li><li>当宽限期到期后，仍在Pod中运行的任何进程都将被<code>KILL</code>信号杀死</li><li>Kubelet通过设置宽限期0（立即删除）完成删除API server上的Pod。Pod从API中消失，客户端不在可见</li></ol><p>默认情况下，所有删除都有30s的宽限期。<code>kubectl delete</code>命令支持指定<code>--grace-period=</code>选项。设置为0表示强制删除Pod。<code>--force --grace-period=0</code>强制删除。</p><p><strong>强制删除Pod</strong><br>强制删除Pod被定义为立即从集群状态和etcd中删除Pod。当执行强制删除时，API server不会等待来自Kubelet的确认——确认该Pod已在运行的节点上终止。它会立即删除API中的Pod，以便可使用相同的名称创建新的Pod。在节点上，设置为立即终止的Pod在被强制终止之前仍被授予一个小的宽限期。<br>强制删除可能会对某些Pod有潜在危险，请谨慎执行。</p><p><br></p><p><strong>Pod容器的特权模式(Privileged mode)</strong><br>在容器 spec的<code>SecurityContext</code>中使用<code>privileged</code>标志，来启用Pod中容器的特权模式。这对于想要使用Linux功能的容器非常有用。容器内的进程获得与可访问的容器外进程几乎相同的权限。使用特权模式，可以更容易的编写网络和卷插件，而不需要编译到kubelet。</p><p><br></p><p><strong>API对象</strong><br>Pod是k8s REST API中的顶级资源, <code>/pod/xxx</code>。</p><p><br><br><br></p><h4 id="Pod生命周期"><a href="#Pod生命周期" class="headerlink" title="Pod生命周期"></a>Pod生命周期</h4><p>Pod Lifecycle</p><p><br></p><p><strong>阶段(phase)</strong><br>Pod的<code>status</code>字段是一个<code>PodStatus</code>对象，它有一个<code>phase</code>字段。</p><p>阶段可能的值：</p><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>Pending</td><td>The Pod has been accepted by the Kubernetes system, but one or more of the Container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while.</td></tr><tr><td>Running</td><td>The Pod has been bound to a node, and all of the Containers have been created. At least one Container is still running, or is in the process of starting or restarting.</td></tr><tr><td>Succeeded</td><td>All Containers in the Pod have terminated in success, and will not be restarted.</td></tr><tr><td>Failed</td><td>All Containers in the Pod have terminated, and at least one Container has terminated in failure. That is, the Container either exited with non-zero status or was terminated by the system.</td></tr><tr><td>Unknown</td><td>For some reason the state of the Pod could not be obtained, typically due to an error in communicating with the host of the Pod.</td></tr></tbody></table><p><br></p><p><strong>状况(conditions)</strong><br>Pod有一个<code>PodStatus</code>，它有一个<code>PodConditions</code>数组，表示Pod是否通过。每个<code>PodCondition</code>数字的每个元素都有六个可能的字段：</p><ul><li><code>lastProbeTime</code>: 最后一次探测Pod状况的字段</li><li><code>lastTransitionTime</code>: Pod最后从一个状态转换到另一个状态的时间戳的字段</li><li><code>message</code>: 有关转换的人类可读的详细信息的字段</li><li><code>reason</code>: 一个独特的，单字的最后转换的原因的字段</li><li><code>status</code>: 字段值可能为<code>True, False, Unknown</code></li><li><code>type</code>: 字段可能有如下值:<ul><li><code>PodScheduled</code>: Pod已被调度到一个节点</li><li><code>Ready</code>: Pod能提供请求，并应该添加到所有匹配服务的负载均衡池中</li><li><code>Initialized</code>: 所有的初始化容器已成功启动</li><li><code>Unschedulable</code>: 调度器现在无法调度Pod，如缺乏资源…</li><li><code>ContainersReady</code>: Pod中的所有容器都已准备好了</li></ul></li></ul><p><br></p><p><strong>探测(probes)</strong><br>探测是由容器上的kubelet定期执行的诊断。为了执行诊断，kubelet调用容器执行处理器(Handler)。有三种类型的处理器:</p><ul><li><code>ExecAction</code>: 在容器内执行指定命令。如果状态码为0，则认为诊断成功</li><li><code>TCPSocketAction</code>: 在指定端口的容器IP地址执行TCP检查。如果端口打开，则认为诊断成功</li><li><code>HTTPGetAction</code>: 在容器IP的特定端口的路径下执行HTTP GET请求。如果请求成功，则认为诊断成功</li></ul><p>每个探测可能有三种结果:</p><ul><li>Success</li><li>Failure</li><li>Unknown</li></ul><p>kubelet可选择在运行容器上执行两种探测并对其作出反应:</p><ul><li><code>livenessProbe</code>: 确定容器是否正在运行</li><li><code>readinessProbe</code>: 确定容器是否准备好为请求提供服务</li></ul><p>什么时候使用这两中探测？<br>When should you use liveness or readiness probes?</p><p>如果容器中的进程在遇到问题或变得不健康时会自行崩溃(crash)，则你不一定需要<code>livenessProbe</code>。kubelet将根据Pod的<code>restartPolicy</code>自动执行正确的操作。<br>如果希望在探测失败时杀死并重启容器，则请指定<code>livenessPorbe</code>和指定<code>restartPolicy</code>为<code>Always</code></p><p>如果只想在探测成功时向Pod发送流量，请指定<code>readinessProbe</code>。<br>如果容器需要在启动期间除了大型数据，配置文件或迁移，请指定<code>readnessProbe</code>。<br>如果你希望容器能够自行维护，你可指定一个<code>readnessProbe</code>，它检查特定端点。</p><p>注意，如果你只想在删除Pod时排除请求，则不一定需要<code>readnessProbe</code>。无论是否存在<code>readnessProbe</code>，Pod都会自动将其置于未准备状态。Pod在等待Pod中容器停止时仍处于未准备状态。</p><p><br></p><p><strong>Pod readiness gate</strong><br>FEATURE STATE: Kubernetes v1.11 alpha</p><p>为了通过向PodStatus调价额外的反馈或信号来增加<code>Pod readness</code>的可扩展性，k8s v1.11引入了一个名为<code>Pod ready++</code>的功能。你可在<code>PodSpec</code>中使用新字段<code>ReadinessGate</code>来指定要为Pod准备情况评估的其它条件。如果k8s在Pod的<code>status.conditions</code>字段找不到这样的状况，则状况的状态默认为<code>False</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Kind: Pod</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  readinessGates:</span><br><span class="line">    - conditionType: &quot;www.example.com/feature-1&quot;</span><br><span class="line">status:</span><br><span class="line">  conditions:</span><br><span class="line">    - type: Ready  # this is a builtin PodCondition</span><br><span class="line">      status: &quot;True&quot;</span><br><span class="line">      lastProbeTime: null</span><br><span class="line">      lastTransitionTime: 2018-01-01T00:00:00Z</span><br><span class="line">    - type: &quot;www.example.com/feature-1&quot;   # an extra PodCondition</span><br><span class="line">      status: &quot;False&quot;</span><br><span class="line">      lastProbeTIme: null</span><br><span class="line">      lastTransitionTime: 2018-01-01T00:00:00Z</span><br><span class="line">  containerStatuses:</span><br><span class="line">    - containerID: docker://abcd...</span><br><span class="line">      ready: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br></p><p><strong>重启策略</strong><br><code>PodSpec</code>有一个<code>restartPolicy</code>字段，其值可能是<code>Always(默认值), OnFailure, Never</code>。此策略应用于Pod中的所有容器，它仅指由同一节点上的kubelet重启的容器。退出的容器将由kubelet以指定退避延迟(10s, 20s, 40s…)重新启动，上限5分钟，并在成功执行十分钟后重置。</p><p><br></p><p><strong>寿命(lifetime)</strong><br>一般来说，Pod不会消失，直到有人摧毁它们。唯一的例外是，具有成功或失败超过一段时间的阶段的Pod将过期并自动销毁。</p><p>有三种类型的控制器可用：</p><ul><li>Use a Job for Pod</li><li>Use a  ReplicationController/ReplicaSet/Deployment for Pod</li><li>Use a DaemonSet for Pod</li></ul><p>所有三种类型的控制器都包含了PodTemplate。推荐创建适当的控制器并让它创建Pod，而不是自己直接创建Pod。这是因为Pod单独对机器故障没有弹性，但控制器不会。<br>如果节点死亡或与集群的其余部分断开连接，k8s会应用策略将丢失节点上的所有Pod的阶段设置为Failed。</p><p><br><br><br></p><h4 id="Init-Containers"><a href="#Init-Containers" class="headerlink" title="Init Containers"></a>Init Containers</h4><p>本节提供了初始容器(init container)的概述，它是在应用程序容器运行之前的专用容器，可包含应用程序镜像中不存在的实用程序或脚本设置。</p><p><br></p><p><strong>理解初始容器</strong><br>Pod可以有多个容器在其中运行应用程序，但它同样可以有一个或多个初始容器——它在应用程序容器启动前运行。<br>初始容器与常规容器一样，除了：</p><ul><li>They always run to completion.</li><li>每一个必须在下一个启动之前成功完成</li></ul><p>如果Pod的初始容器失败，则k8s会重复重启直到初始容器成功。但是，如果Pod的<code>restartPolicy</code>为<code>Never</code>，则不会重启。<br>要将容器指定为初始容器，请将<code>PodSpec</code>上的<code>initContainers</code>字段添加为应用程序<code>container</code>数组旁边的容器类型对象的JSON数组。初始容器的状态在<code>.status.initContainerStatuses</code>字段中作为容器状态数据返回。</p><p><strong>与常规容器的不同</strong><br>初始容器支持应用程序容器的所有字段和功能，包括资源限制，卷和安全设置。但资源请求和处理方式略有不同。此外，初始容器不支持<code>readiness probes</code>，因为它必须在Pod准备好之前运行完成。<br>如果为Pod指定了多个初始容器，则按顺序依次运行一个容器。每个必须在下一个运行之前完成。当所有初始容器都运行完毕时，k8s会初始化Pod并像往常一样运行应用程序容器。</p><p><br></p><p><strong>初始容器可用于什么</strong><br>由于初始容器具有来自应用程序容器的单独镜像，因此它们对于启动相关代码具有一些优势：</p><ul><li>出于安全原因，它们可以包含并运行不希望包含在应用程序容器镜像中的使用程序</li><li>它可以包含应用程序镜像中不存在的实用程序或自定义代码。例如，在配置过程中，无需为了使用其他工具(sed, awk, dig…)而专门使用<code>FROM</code>创建一个镜像</li><li>应用程序镜像构建器和部署器角色可独立工作，而无需共同构建单个应用程序镜像</li><li>它们使用Linux命名空间，以便从应用程序容器中获得不同的文件系统视图。因此，它们可以访问应用程序容器无法访问的<code>Secrets</code></li><li>它们在应用程序容器启动前运行完成，因此初始容器提供了一种简单的方法来阻止或延迟应用程序容器的启动，知道满足一组前置条件。</li></ul><p><br></p><p><strong>栗子</strong><br>这有些初始容器的使用案例:</p><ul><li>等待使用shell命令创建服务: <code>for in in {1..100}; do sleep 1; if dig myservice; then exit 0; fi; done; exit 1</code></li><li>使用API从远程服务器注册此Pod: <code>curl -XPOST http://host:port/register -d &#39;instance=$()&amp;ip=$()&#39;</code></li><li>在启动应用程序之前等待一段时间: <code>sleep 60</code></li><li>克隆一个git repo到某个卷</li><li>替换配置文件中的值并运行模板来动态生成应用程序容器的配置文件</li></ul><p><br></p><p><strong>使用初始容器</strong><br>两个初始容器。第一个等待<code>myservice</code>，第二个等待<code>mydb</code>。一旦两个容器完成，Pod将开始。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">myapp-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">myapp-container</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">['sh',</span> <span class="string">'-c'</span><span class="string">,</span> <span class="string">'echo The app is running! &amp;&amp; sleep 3600'</span><span class="string">]</span></span><br><span class="line"><span class="attr">  initContainers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">init-myservice</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">['sh',</span> <span class="string">'-c'</span><span class="string">,</span> <span class="string">'until nslookup myservice; do echo waiting for myservice; sleep 2; done;'</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">init-mydb</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">['sh',</span> <span class="string">'-c'</span><span class="string">,</span> <span class="string">'until nslookup mydb; do echo waiting for mydb; sleep 2; done;'</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>创建:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f /etc/k8s/test/init-container.yaml</span><br><span class="line">pod/myapp-pod created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get pod</span><br><span class="line">NAME             READY     STATUS     RESTARTS   AGE</span><br><span class="line">init-container   0/1       Init:0/2   0          6s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe -f /etc/k8s/test/init-container.yaml</span><br><span class="line">Init Containers:</span><br><span class="line">  init-myservice:</span><br><span class="line">    Container ID:  docker://f9ca73d4d2c8903a1fe84937e34ae27b909a691d2e524254b8f4aec9d5cc754c</span><br><span class="line">    Image:         busybox</span><br><span class="line">    Image ID:      docker-pullable://docker.io/busybox@sha256:cb63aa0641a885f54de20f61d152187419e8f6b159ed11a251a09d115fdff9bd</span><br><span class="line">    Port:          &lt;none&gt;</span><br><span class="line">    Host Port:     &lt;none&gt;</span><br><span class="line">    Command:</span><br><span class="line">      sh</span><br><span class="line">      -c</span><br><span class="line">      until nslookup myservice; do echo waiting for myservice; sleep 2; done;</span><br><span class="line">    State:          Terminated</span><br><span class="line">      Reason:       Completed</span><br><span class="line">      Exit Code:    0</span><br><span class="line">      Started:      Fri, 24 Aug 2018 16:31:13 +0800</span><br><span class="line">      Finished:     Fri, 24 Aug 2018 16:31:18 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-69vgk (ro)</span><br><span class="line">  init-mydb:</span><br><span class="line">    Container ID:  docker://a9946122976ff70ff1dd874299e3e63f4b07f2758f5e6518b84343c58daa3506</span><br><span class="line">    Image:         busybox</span><br><span class="line">    Image ID:      docker-pullable://docker.io/busybox@sha256:cb63aa0641a885f54de20f61d152187419e8f6b159ed11a251a09d115fdff9bd</span><br><span class="line">    Port:          &lt;none&gt;</span><br><span class="line">    Host Port:     &lt;none&gt;</span><br><span class="line">    Command:</span><br><span class="line">      sh</span><br><span class="line">      -c</span><br><span class="line">      until nslookup mydb; do echo waiting for mydb; sleep 2; done;</span><br><span class="line">    State:          Terminated</span><br><span class="line">      Reason:       Completed</span><br><span class="line">      Exit Code:    0</span><br><span class="line">      Started:      Fri, 24 Aug 2018 16:31:24 +0800</span><br><span class="line">      Finished:     Fri, 24 Aug 2018 16:31:29 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-69vgk (ro)</span><br><span class="line">Containers:</span><br><span class="line">  myapp-container:</span><br><span class="line">    Container ID:  docker://b2c7a1f32d65dd41fa439d1f6879824b40c3014b32b15d61fed0cda171144a1b</span><br><span class="line">    Image:         busybox</span><br><span class="line">    Image ID:      docker-pullable://docker.io/busybox@sha256:cb63aa0641a885f54de20f61d152187419e8f6b159ed11a251a09d115fdff9bd</span><br><span class="line">    Port:          &lt;none&gt;</span><br><span class="line">    Host Port:     &lt;none&gt;</span><br><span class="line">    Command:</span><br><span class="line">      sh</span><br><span class="line">      -c</span><br><span class="line">      echo The app is running! &amp;&amp; sleep 3600</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Fri, 24 Aug 2018 16:31:34 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-69vgk (ro)</span><br></pre></td></tr></table></figure><p><img src="/images/K8s/init_container.png" alt="初始容器"></p><p><br></p><p><strong>详细行为</strong><br>在Pod启动期间，初始化网络和卷后，初始容器将按顺序启动。每个容器必须在下一个容器启动前成功退出。如果容器由于运行环境未能启动或失败退出而启动失败，则它根据Pod的<code>restartPolicy</code>重试。如果Pod的<code>restartPolicy</code>为<code>Always(默认)</code>，则初始容器使用<code>restartPolicy</code>为<code>OnFailure</code>。<br>在所有初始容器都成功之前，Pod无法变为<code>Ready</code>。初始容器上的端口无法聚合到服务下。正在初始化的Pod处于<code>Pending</code>状态，但应该具有<code>Initializing</code>设置为<code>true</code>的条件。<br>如果Pod重启，则所有初始都要执行一遍。<br><code>init container spec</code>的更改仅限于容器镜像字段。更改初始容器镜像字段相当于重启Pod。<br>由于初始容器可重启，重试或重新执行，因此初始容器代码应该是幂等的。In particular, code that writes to files on EmptyDirs should be prepared for the possibility that an output file already exists.<br>在Pod上使用<code>activeDeadlineSeconds</code>，在容器上使用<code>livenessProbe</code>，以防止初始容器永远失败。<br>Pod中每个应用程序和初始容器的名称必须是唯一的，否则会引发验证错误。</p><p><strong>资源</strong><br>给定初始容器的排序和执行，适用一下资源使用规则：</p><ul><li>在所有初始容器上定义的任何特定资源请求或限制的最高值是有效的初始 请求/限制</li><li>Pod对资源的有效请求/限制是以下值中的较高者:<ul><li>所有的应用程序容器对资源请求/限制的总和</li><li>对资源的有效初始请求/限制</li></ul></li><li>调度是基于有效请求/限制完成的，这意味着初始容器可以保留在Pod生命周期内未使用的初始化资源</li><li>Pod的有效QoS层与初始容器和应用程序容器一样</li></ul><p>Pod级别的cgroup基于有效的Pod请求和限制，与调度程序相同。</p><p><br></p><p><strong>Pod重启原因</strong><br>由于以下原因，Pod可重新启动，导致重新执行初始容器：</p><ul><li>用户更新了<code>PodSpec</code>，导致初始容器镜像发生噶变。应用程序容器镜像的更改仅重启应用程序容器</li><li>Pod的基础架构容器重启</li><li>Pod的所有容器都终止，而<code>restartPolicy</code>设置为<code>Always</code>，强制重启，并且初始容器完成记录由于垃圾回收而丢失</li></ul><p><br><br><br></p><h4 id="Pod预设"><a href="#Pod预设" class="headerlink" title="Pod预设"></a>Pod预设</h4><p>Pod Preset</p><p>Pod Presets是对象，在创建时将特定信息注入Pod。<br>Pod Preset是一种API资源，用于在创建时将其它运行时的需求写入到Pod。你可使用<code>label selectors</code>指定应用于Pod的给定Pod Preset。<br>使用Pod Preset允许pod template作者不必显示提供每个pod的所有信息。这样，作者不需要知道有关该服务的所有详细信息。</p><p><br></p><p><strong>它如何工作</strong><br>k8s提供了一个<code>admission controller(Pod Preset)</code>，启用后，会将Pod Preset应用于传入的pod创建请求。当Pod创建请求发生时，系统会执行一下操作：</p><ol><li>检索所有可供使用的Pod Preset</li><li>检查任何Pod Preset的<code>label selector</code>是否与正在创建的Pod上的标签匹配</li><li>尝试将Pod Preset定义的各种资源合并到正在创建的Pod中</li><li>出错时，抛出一个记录Pod 合并错误的事件，然后创建不从Pod Preset写入任何资源的pod</li><li>注释生成的修改后的Pod spec，以表明它已被Pod Preset修改——<code>podpreset.admission.kubernetes.io/podpreset-&lt;pod-preset name&gt;: &quot;&lt;resource version&gt;&quot;</code></li></ol><p>每个Pod能够被零个或多个PodPreset匹配，每个PodPreset可以被应用到零个或多个Pod。当PodPreset应用于一个或多个Pod时，k8s会修改Pod spec。对于<code>Env, EnvFrom, VolumeMounts</code>，k8s修改Pod中所有容器的<code>container spce</code>；对于<code>Volume</code>的更改，k8s修改<code>Pod spec</code>。</p><p><strong>为指定Pod禁用PodPreset</strong><br>在某些情况下，你希望Pod不被任何PodPreset修改。你可修改: <code>podpreset.admission.kubernetes.io/exclude: &quot;true&quot;</code></p><p><br></p><p><strong>启用PodPreset</strong><br>要在集群中使用PodPreset，你必须确保以下内容：</p><ol><li>你已启用API类型: <code>settings.k8s.io/v1alpha1/podpreset</code></li><li>你已经启动<code>admission controller</code> PodPreset</li><li>你已通过在将使用的命名空间中创建PodPreset对象来定义PodPreset</li></ol><p><br><br><br></p><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p>Disruptions</p><p>本节适用于想要构建高可用性应用程序的用户，因此需要了解Pod可能发生的中断类型。<br>这同样适用于希望执行自动化集群操作的集群管理员，例如升级或自动伸缩集群。</p><p><br></p><p><strong>自愿和非自愿中断</strong><br>Voluntary and Involuntary Disruptions</p><p><br><br><br></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p><br></p><h4 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h4><p>副本集是下一个副本控制器。现在副本集和副本控制器之间的唯一区别是<code>selector</code>的支持。副本集支持<code>labels user guide</code>中描述的新的基于集合<code>selector</code>的要求，而副本控制器仅支持基于等同<code>selector</code>的要求。</p><p><br></p><p><strong>如何使用副本集</strong><br>大多数支持副本控制器的<code>kubectl</code>命令也支持副本集。一个例外是<code>rolling-update</code>命令。如果你想要滚动更新功能，请考虑使用Deployments代替。<br>虽然副本集可独立使用，但它主要被Deployment用作协调Pod创建，删除和更新的机制。使用部署时，你不必担心管理它们创建的副本集，部署拥有并管理其副本集。</p><p><br></p><p><strong>何时使用副本集</strong><br>副本集确保在任何给定时间运行指定数量的Pod副本。但是，部署是一个更高级别的概念，它管理副本集并为Pod提供声明性更新以及许多其它有用的功能。因此，除非你需要自定义更新或无需更新，否则建议你使用部署而不是直接使用副本集。<br>这实际上意味着，你不需要操作副本集对象：改为使用部署，并在<code>spec</code>部分定义你的应用程序。</p><p><br></p><p><strong>栗子</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">guestbook</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># modify replicas according to your case</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">    matchExpressions:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">&#123;key:</span> <span class="string">tier,</span> <span class="attr">operator:</span> <span class="string">In,</span> <span class="attr">values:</span> <span class="string">[frontend]&#125;</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">guestbook</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">php-redis</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">gcr.io/google_samples/gb-frontend:v3</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">100</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">GET_HOSTS_FROM</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">dns</span></span><br><span class="line">          <span class="comment"># If your cluster config does not include a dns service, then to</span></span><br><span class="line">          <span class="comment"># instead access environment variables to find service host</span></span><br><span class="line">          <span class="comment"># info, comment out the 'value: dns' line above, and uncomment the</span></span><br><span class="line">          <span class="comment"># line below.</span></span><br><span class="line">          <span class="comment"># value: env</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f /etc/k8s/test/frontend.yaml</span><br></pre></td></tr></table></figure><p><br></p><p><strong>编写副本集<code>spec</code></strong><br>与所有其它k8s API对象一样，副本集需要<code>apiVersion</code>, <code>kind</code>, <code>metadata</code>字段，副本集还需要一个<code>.spce</code>部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#Pod Template</span><br><span class="line">.spec.template是.spec唯一必需的字段</span><br><span class="line">除了pod的必须字段，副本集中的Pod模板还必须指定适当的`label`和`restart policy`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Pod Selector</span><br><span class="line">.spec.selector字段是一个label selector。副本集使用与selector匹配的label来管理所有pod。</span><br><span class="line">它不区分创建或删除的Pod以及人或进程创建或删除的pod。这允许替换副本集而不会影响正在运行的Pod。</span><br><span class="line">.spec.template.metadata.labels 必须匹配 .spec.selector，否则它将被API拒绝。</span><br><span class="line">此外，你通常不应创建任何label与selector匹配的pod。如果你这样做了，副本集会认为它创建了其它pod，k8s并没有阻止你这样做。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Labels on a ReplicaSet</span><br><span class="line">副本集本身可以有标签(.metadata.labels)。通常，你可将其设置为与 .spec.template.metadata.labels 一致。但，允许他们不同，并且 .metadata.labels 不会影响副本集的行为</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Replicas</span><br><span class="line">你可通过设置 .spec.replicas 来指定应同时运行的pod数量。如果未指定，默认为1</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用副本集</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#删除副本集和它的pods</span><br><span class="line">kubectl delete replicaset/xxx</span><br><span class="line">#或</span><br><span class="line">kubectl proxy --port=8080</span><br><span class="line">curl -XDELETE &apos;localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/frontend \</span><br><span class="line">-d &apos;&#123;&quot;kind&quot;:&quot;DeleteOptions&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;propagationPolicy&quot;:&quot;Foreground&quot;&#125;&apos; \</span><br><span class="line">-H &quot;Content-Type: application/json&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#仅删除副本集</span><br><span class="line">kubectl delete rs/xxx --cascade=false</span><br><span class="line">#或</span><br><span class="line">kubectl proxy --port=8080</span><br><span class="line">curl -X DELETE  &apos;localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/frontend&apos; \</span><br><span class="line">-d &apos;&#123;&quot;kind&quot;:&quot;DeleteOptions&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;propagationPolicy&quot;:&quot;Foreground&quot;&#125;&apos; \</span><br><span class="line">-H &quot;Content-Type: application/json&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#从副本隔离pods</span><br><span class="line">可通过更改label从副本集的目标中删除Pod。此技术可用于从服务中删除pod以进行调试，数据恢复等。以这种方式删除的pod将自动替换</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#伸缩副本集</span><br><span class="line">只需更新副本集的 .spec.replicas 字段轻松伸缩副本集。副本集控制器确保具有匹配 label selector 所需数量的pod可用且可操作。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#作为水平pod自动伸缩目标的副本集</span><br><span class="line">Horizontal Pod Autoscalers(HPA)，意味着副本集可通过HPA自动伸缩。</span><br><span class="line">#栗子</span><br><span class="line">apiVersion: autoscaling/v1</span><br><span class="line">kind: HorizontalPodAutoscaler</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend-scaler</span><br><span class="line">spec:</span><br><span class="line">  scaleTargetRef:</span><br><span class="line">    kind: ReplicaSet</span><br><span class="line">    name: frontend</span><br><span class="line">  minReplicas: 3</span><br><span class="line">  maxReplicas: 10</span><br><span class="line">  targetCPUUtilizationPercentage: 50</span><br><span class="line"></span><br><span class="line">kubectl create -f /path/xx/hpa.rs.yaml</span><br><span class="line">#此外，可使用kubectl命令来自动伸缩</span><br><span class="line">#kubectl autoscale rs frontend</span><br></pre></td></tr></table></figure><p><br></p><p><strong>替代副本集</strong></p><ul><li>Deployment(推荐)</li><li>Bare Pods</li><li>Job</li><li>DaemonSet</li></ul><p><br><br><br></p><h4 id="ReplicationController"><a href="#ReplicationController" class="headerlink" title="ReplicationController"></a>ReplicationController</h4><p><strong>注意：现在，配置副本集的推荐方法是使用部署。</strong></p><p>副本控制器确保一次运行指定数量的Pod副本。换言之，副本控制器确保一个Pod或一组同类Pod总是可用。</p><p><br><br><br></p><h4 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h4><p>部署控制器为Pod和ReplicaSet提供了声明性更新。<br>在部署对象中描述所需的状态，部署控制器以受控速率将实际状态更改为所需状态。你可定义部署来创建新的副本集，或删除现有的部署并使用新的部署收纳所有资源。<br>你不应该直接管理部署所拥有的副本集，应该通过操作部署对象来涵盖所有用例。</p><p><br></p><p><strong>栗子</strong><br>以下是部署的典型案例：</p><ul><li>创建部署来上线副本集</li><li>声明Pod的新状态</li><li>回滚到早期的部署版本</li><li>伸缩部署</li><li>暂定部署</li><li>使用部署的状态</li><li>清理旧的副本集</li></ul><p><br></p><p><strong>创建一个部署</strong><br>下面的栗子，创建一个3个Nginx pods的副本集:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.7.9</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ./nginx-deployment.yaml</span><br><span class="line"></span><br><span class="line">kubectl get deployment</span><br><span class="line">kubectl get rs</span><br><span class="line">kubectl get pod --show-labels</span><br></pre></td></tr></table></figure><p><br></p><p><strong>更新部署</strong><br>当且仅当部署的pod template发生更改时，才会触发部署更新上线。<br>假如我们要更新Nginx的版本为<code>1.9.1</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1</span><br><span class="line">deployment.extensions/nginx-deployment image updated</span><br><span class="line"></span><br><span class="line">#或者</span><br><span class="line">kubectl edit deployment/nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment edited</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看上线状态</span><br><span class="line">kubectl rollout status deployment/nginx-deployment</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...</span><br><span class="line">deployment &quot;nginx-deployment&quot; successfully rolled out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#新旧副本集副本数</span><br><span class="line">kubectl get rs</span><br><span class="line">NAME                          DESIRED   CURRENT   READY     AGE</span><br><span class="line">nginx-deployment-67594d6bf6   0         0         0         16m</span><br><span class="line">nginx-deployment-d78fcfc84    3         3         3         3m</span><br></pre></td></tr></table></figure><p>部署可以确保在更新时只有一定数量的Pod可能会关闭。默认情况下，它确保最大不可用率25%。<br>部署确保在所需数量的Pod之上只能创建一定数量的Pod。默认情况下，它确保比最大数多25%。<br>例如，如果仔细查看上面的部署，你将看到它首先创建了一个新的Pod，然后删除了一些旧的Pod并创建新的Pod。在有足够数量的新Pod出现之前，它不会杀死旧的Pod，并且在足够数量的旧Pod被杀死之前不会创建新的Pod。</p><p>通常不鼓励进行<code>label selector</code>的更改，建议你事先规划好<code>selector</code>。</p><p><br></p><p><strong>回滚(rolling back)部署</strong><br>有时可能需要回滚部署，当部署不稳定时，如崩溃循环(crash looping)。默认情况下，所有的部署上线历史都保留在系统中，以便可以随时回滚。</p><p>假设我之间将<code>nginx:1.7.1</code>更新到<code>nginx:1.9.1</code>的时候错误的写成了<code>nginx:1.91</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployment/nginx-deployment nginx=nginx:1.91</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#上线就会卡在此处</span><br><span class="line">kubectl rollout status deployments nginx-deployment</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...</span><br><span class="line">error: deployment &quot;nginx-deployment&quot; exceeded its progress deadline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看容器错误，它会报镜像拉取错误</span><br><span class="line">kubectl get pod</span><br><span class="line">nginx-deployment-58c7645486-s5t6t   0/1       ImagePullBackOff   0          3m        &lt;none&gt;        node</span><br><span class="line">#UI里面的报错</span><br><span class="line">#Failed to pull image &quot;nginx:1.91&quot;: rpc error: code = Unknown desc = manifest for docker.io/nginx:1.91 not found</span><br></pre></td></tr></table></figure><p>部署控制器将自动停止错误的<code>rollout</code>，并将停止扩展新的副本集。这取决于滚动升级的参数(<code>maxUnavailable</code>)。默认情况下，k8s将值设置为1，将<code>.spec.replicas</code>设置为1，因此你无需关心设置这些参数。你的部署可能具有100%的不可用性。</p><p>要修复它，你需要回滚到先前稳定的部署版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#检查上线历史</span><br><span class="line">kubectl rollout history deployment/nginx-deployment</span><br><span class="line">deployments &quot;nginx-deployment&quot;</span><br><span class="line">REVISION    CHANGE-CAUSE</span><br><span class="line">1           kubectl create -f ./nginx-deployment.yaml --record</span><br><span class="line">2           kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1</span><br><span class="line">3           kubectl set image deployment/nginx-deployment nginx=nginx:1.91</span><br><span class="line"></span><br><span class="line">#查看某个上线历史</span><br><span class="line">rollout history deployment/nginx-deployment --revision=2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#回滚</span><br><span class="line"></span><br><span class="line">#回滚到前一个版本</span><br><span class="line">kubectl rollout undo deployment/nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line"></span><br><span class="line">#回滚到指定版本</span><br><span class="line">kubectl rollout undo deployment/nginx-deployment --to-revision=2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看事件</span><br><span class="line">kubectl describe deployment/nginx-deployment</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason              Age                From                   Message</span><br><span class="line">  ----    ------              ----               ----                   -------</span><br><span class="line">  Normal  DeploymentRollback  2m                 deployment-controller  Rolled back deployment &quot;nginx-deployment&quot; to revision 3</span><br><span class="line">  Normal  ScalingReplicaSet   2m                 deployment-controller  Scaled down replica set nginx-deployment-58c7645486 to 0</span><br></pre></td></tr></table></figure><p><br></p><p><strong>伸缩副本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#扩展部署</span><br><span class="line">kubectl scale deployment nginx-deployment --replicas=5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#水平伸缩</span><br><span class="line">kubectl autoscale deployment nginx-deployment --min=3 --max=6 --cpu-percent=80</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get horizontalpodautoscaler.autoscaling</span><br><span class="line">NAME               REFERENCE                     TARGETS         MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deployment   Deployment/nginx-deployment   &lt;unknown&gt;/80%   3         6         5          1m</span><br></pre></td></tr></table></figure><p><strong>比例伸缩(proportional scaling)</strong><br>滚动升级部署支持同时运行多个版本的应用程序。当你或自动伸缩器正在上线滚动更新的部署时，部署控制器将平衡现有活动的副本集中的其它副本，以降低风险。这称为比例缩放。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   5         5         5            5           1h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新一个错误镜像，它会卡住</span><br><span class="line">kubectl set image deploy/nginx-deployment nginx=nginx:sometag</span><br><span class="line"></span><br><span class="line">kubectl get rs -o wide</span><br><span class="line">NAME                         DESIRED   CURRENT   READY     AGE       CONTAINERS   IMAGES          SELECTOR</span><br><span class="line">nginx-deployment-895bd59bc   3         3         0         1m        nginx        nginx:sometag   app=nginx,pod-template-hash=451681567</span><br><span class="line">nginx-deployment-d78fcfc84   5         5         5         1h        nginx        nginx:1.7.1     app=nginx,pod-template-hash=834979740</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get deploy -o wide</span><br><span class="line">NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE       CONTAINERS   IMAGES          SELECTOR</span><br><span class="line">nginx-deployment   6         8         3            5           1h        nginx        nginx:sometag   app=nginx</span><br></pre></td></tr></table></figure><p><br></p><p><strong>暂停和恢复部署</strong><br>你可以在触发一个或多个更新之前暂停(pause)部署，然后恢复(resume)它。这允许你在暂停和恢复之间应用多个修复，而不会触发不必要的上线。<br>注意： 在恢复暂停部署之前，无法执行回滚操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#暂停</span><br><span class="line">kubectl rollout pause deployment/nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment paused</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl set image deploy/nginx-deployment nginx=nginx:1.9.1</span><br><span class="line">deployment.extensions/nginx-deployment image updated</span><br><span class="line"></span><br><span class="line">kubectl set resources deployment nginx-deployment -c=nginx --limits=cpu=200m,memory=128Mi</span><br><span class="line">deployment.extensions/nginx-deployment resource requirements updated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#恢复</span><br><span class="line">kubectl rollout resume deployment/nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment resumed</span><br></pre></td></tr></table></figure><p><br></p><p><strong>部署状态</strong><br>部署在其生命周期内会进入各种状态–<code>kubectl rollout status</code></p><ul><li><p>Progessing Deployment</p><ul><li>部署创建一个新的副本集</li><li>部署伸缩到新的/旧的副本集</li><li>新的Pod可用</li></ul></li><li><p>Complete Deployment</p><ul><li>所有与部署关联的副本都已完成</li><li>所有与部署关联的副本都可用</li><li>没有正在运行的旧的部署副本</li></ul></li><li><p>Failed Deployment</p><ul><li>配额不足</li><li>准备探针失败</li><li>镜像拉取失败</li><li>权限不足</li><li>限制范围</li><li>应用程序运行时配置错误</li></ul></li><li><p>Operating on a failed deployment</p></li></ul><p><br></p><p><strong>Clean up Policy</strong><br>可在部署中设置<code>.spec.revisionHistoryLimit</code>字段来指定需要保留的旧副本集数。其余的将在后台被垃圾回收，默认为10。</p><p><strong>注意：</strong>将此字段设置为0会导致清理部署的所有历史记录，从而部署将无法回滚。</p><p><br></p><p><strong>Deployment Spec</strong><br>与其它k8s配置一样，Deployment需要<code>apiVersion</code>, <code>kind</code>, <code>metadata</code>字段。但部署还需要<code>.spec</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#pod template</span><br><span class="line">#必填字段</span><br><span class="line">.spec.template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Replicas</span><br><span class="line">.spec.replicas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Selector</span><br><span class="line">#它必须匹配.spec.template.metadata.labels，否则会被API拒绝</span><br><span class="line">.spec.selector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Strategy</span><br><span class="line">.spec.strategy</span><br><span class="line"></span><br><span class="line">#Recreate deployment</span><br><span class="line">.spec.strategy.type==Recreate</span><br><span class="line"></span><br><span class="line">#Rolling Update Deployment</span><br><span class="line">.spce.stratefy.type==RollingUpdate</span><br><span class="line">#Max Unavailable</span><br><span class="line">.spec.strategy.rollingUpdate.maxUnavailable</span><br><span class="line">#Max Surge</span><br><span class="line">.specstrategy.rollingUpdate.maxSurge</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Progress Deadline Seconds</span><br><span class="line">.spec.progressDeadlineSeconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Min Ready Seconds</span><br><span class="line">.spec.minReadySeconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Rollback To</span><br><span class="line">.spec.rollbackTo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Revision History Limit</span><br><span class="line">.spec.revisionHistoryLimit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Paused</span><br><span class="line">.spec.paused</span><br></pre></td></tr></table></figure><p><br></p><p><strong>替代方案</strong></p><ul><li>kubectl rolling update<br><code>kubetl rolling update</code>以类似的方式更新Pod和副本集控制器。但建议使用部署，因为它是声明性的。</li></ul><p><br><br><br></p><h4 id="StatefulSets"><a href="#StatefulSets" class="headerlink" title="StatefulSets"></a>StatefulSets</h4><p><code>StatefulSet</code>是用于管理有状态应用程序的工作负载的API对象。<br><strong>Note: StatefulSets are stable (GA) in 1.9.</strong></p><p>管理一组Pod的部署和伸缩，并提供有关这些Pod的序列和唯一性的保证。<br>与部署类似，有状态集管理基于相同容器规范(spec)的Pod；与部署不同，有状态集为其每个Pod维护一个粘性(sticky)标识。这些Pod根据相同的规范创建，但不可互换，每个Pod都有一个持久的标识符，它可在任何重新调度时保留。<br>有状态集与任何其它控制器相同的模式运行。你在有状态集对象中定义所需的状态，有状态集控制器进行任何必要的更新以从当前状态到达期望状态。</p><p><br></p><p><strong>使用有状态集</strong><br>有状态集对于需要以下一个或多个应用程序非常有用：</p><ul><li>稳定，唯一的网络标识</li><li>稳定，持久存储</li><li>有序，优雅的部署和伸缩</li><li>有序，优雅的删除和终止</li><li>有序，自动的滚动更新</li></ul><p>如果应用程序不需要任何稳定标识或有序部署、删除、伸缩，则应该使用提供一组无状态副本的控制器来部署你的应用程序。如部署或副本集这样的控制器可能更适合无状态需求。</p><p><br></p><p><strong>局限(limitations)</strong></p><ul><li>k8s v1.9+</li><li>给定Pod的存储必须由<code>PersistentVolume Provisioner</code>根据请求的存储类进行配置，或由管理员预先配置</li><li>删除/伸缩有状态集将不会删除与有状态集相关联的卷。这是为了确保数据安</li><li>有状态集目前要求<code>headless service</code>负责Pod的网络身份，你有责任创建此服务</li></ul><p><br></p><p><strong>组件(components)</strong></p><ul><li><code>headless service</code>，用于控制网络域</li><li><code>StatefulSet</code></li><li><code>volumeClaimTemplates</code>，使用持久化卷提供稳定存储</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.template.metadata.labels</span></span><br><span class="line"><span class="attr">  serviceName:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span> <span class="comment"># by default is 1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.selector.matchLabels</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">k8s.gcr.io/nginx-slim:0.8</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">www</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">  volumeClaimTemplates:</span></span><br><span class="line"><span class="attr">  - metadata:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">www</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line"><span class="attr">      storageClassName:</span> <span class="string">"my-storage-class"</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        requests:</span></span><br><span class="line"><span class="attr">          storage:</span> <span class="number">1</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Pod Selector</strong><br>必须设置有状态集的<code>.spec.selector</code>字段以匹配<code>.spec.template.metadata.labels</code>的标签。</p><p><br></p><p><strong>Pod Identity</strong><br>有状态集Pod有一个唯一的标识，由序数、稳定的网络表示和稳定的网络存储组成。</p><ul><li><p>Ordinal Index<br>对于有多个副本的有状态集，有状态集中的每个Pod将被分配一个唯一的整数序数(ordinal)，从0–(N-1)。</p></li><li><p>Stable Network ID<br>有状态集中的每个Pod都从有状态集的名称和Pod的序号中派生其主机名。构造的主机名的模式时<code>$(statefulset name)-$(ordinal)</code>。</p></li><li><p>Stable Storage<br>k8s为每个<code>VolumeClaimTemplate</code>创建一个<code>PersistentVolume</code>。</p></li><li><p>Pod Name Label<br>当有状态集控制器创建Pod时，它会添加一个标签<code>statefulset.kubernetes.io/pod-name</code>，该标签设置为Pod的名称。该标签允许你将服务附加到有状态集中的特定Pod。</p></li></ul><p><br></p><p><strong>部署和伸缩保证(guarantees)</strong></p><ul><li>对于有多个副本的有状态集，当Pod被部署时，它们按顺序从{0…N-1}被创建</li><li>但Pod被删除，它们将以{N-1…0}的相反顺序终止</li><li>在伸缩操作应用于Pod之前，所有的前置任务(predecessors)必须是Running和Ready</li><li>在终止Pod之前，其所有后继者(successors)必须完全关闭</li></ul><p>有状态集不应该指定<code>pod.Spec.TerminationGracePeriodSeconds</code>为0，这很不安全，强烈建议不要这么做。</p><p>k8s v1.7+，有状态集允许你放宽Pod管理策略的排序保证，同时通过其<code>.spec.podManagementPolicy</code>字段保留期唯一性和身份保证。<br><code>OrderedReady</code> pod管理是有状态集的默认设置。<br><code>Parallel</code> pod管理告诉有状态集控制器并行(parallel)启动或终止所有Pod，并且在启动或终止另一个Pod之前不等待Pod变为Running、Ready或完全终止。</p><p><br></p><p><strong>更新策略</strong><br>有状态集的<code>.spec.updateStrategy</code>字段允许你为有状态集中的Pod配置和禁用容器、标签、资源请求/限制、注释的自动更新。</p><p><br><br><br></p><h4 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h4><p>守护进程集确保所有(或某些)节点运行Pod的副本。随着节点添加到集群中，会将Pod添加到集群中。随着节点从集群中移除，Pod将被垃圾回收。删除一个守护进程集会清除它创建的Pod。</p><p>守护进程集的一些典型用法：</p><ul><li>在每个节点上运行集群存储守护进程</li><li>在每个节点上运行日志收集守护进程</li><li>在每个节点上运行一个节点监控守护进程</li></ul><p><br></p><p><strong>Writing a DaemonSet Spec</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">fluentd-logging</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="attr">        effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">fluentd-elasticsearch</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">k8s.gcr.io/fluentd-elasticsearch:1.20</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/var/lib/docker/containers</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#创建守护进程集</span><br><span class="line">kubectl create -f ./daemonset.yaml</span><br></pre></td></tr></table></figure><ul><li><p>Required Fields<br>与其它k8s配置一样，守护进程集需要<code>apiVersion</code>, <code>kind</code>, <code>metadata</code>, <code>.spec</code>字段。</p></li><li><p>Pod Template<br><code>.spec.template</code>是<code>.spec</code>的必要字段。<br>守护进程集中的人Pod模板必须要<code>RestartPolicy: Always(默认)</code>。</p></li><li><p>Pod Selector</p></li><li><p>仅在某些节点上运行Pod<br>如果指定了<code>.spec.template.spce.nodeSelector</code>，则守护进程控制器将在<code>node selector</code>匹配的节点上创建Pod。同样，如果指定了<code>.spec.template.spec.affinity</code>，则守护进程控制器将在与该节点关联匹配的节点上创建Pod。<br>如果未指定任何一个，则守护进程控制器将在所有节点上创建Pod。</p></li></ul><p><br></p><p><strong>Daemon Pods如何调度</strong></p><ul><li><p>由守护进程集控制器调度（默认）<br>通常，Pod运行的机器由k8s调度程序选择。然而，由守护进程集控制器创建的Pod已经选择了机器(<code>.spec.nodeName</code>)。</p></li><li><p>由默认调度器调度<br>功能阶段： k8s v1.11 <code>alpha</code><br>守护进程集确保所有符合条件的节点都运行Pod的副本。</p></li><li><p>Taints and Tolerations</p></li></ul><p><br></p><p><strong>Daemon Pods间通信</strong><br>守护进程集中Pod通信的一些可能模式：</p><ul><li>Push</li><li>NodeIP and Known Port</li><li>DNS</li><li>Service</li></ul><p><br></p><p><strong>更新DaemonSet</strong><br>如果更改了节点标签，守护进程集会立即将Pod添加到新匹配的节点，并从新匹配的节点中删除Pod。<br>可以修改守护进程集创建的Pod。然而，Pod不允许更新所有字段。同样，守护进程集控制器在下次创建节点时使用原始模板。<br>你也可以删除守护进程集，若指定了<code>--cascade=false</code>，则会在节点上保留Pod。</p><p><br></p><p><strong>守护进程集的替代方案</strong></p><ul><li>Init Scripts</li><li>Bare Pods</li><li>Static Pods</li><li>Deployments</li></ul><p><br><br><br></p><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>Garbage Collection</p><p>k8s垃圾回收的作用是删除曾经拥有所有者，但不再拥有所有者的某些对象。</p><p><br></p><p><strong>Owners and dependents</strong><br>一些k8s对象是其它对象的所有者。如副本集是一组Pod的所有者。拥有的对象称为所有者的依赖项(dependents)。每个依赖对象都有一个<code>metadata.ownerReferences</code>字段来指向所有者。</p><p><br></p><p><strong>控制垃圾回收器如何删除依赖项</strong><br>删除对象时，可以指定是否也自动删除对象的依赖项。<br>删除对象而不自动删除依赖项，则称依赖项为孤立对象(orphaned)。<br>自动删除依赖项被称为级联删除(cascading deletion)，这有两种级联删除模式：</p><ul><li>Foreground</li><li>Background</li></ul><p><br></p><p><strong>设置级联删除策略</strong><br>删除对象时，设置<code>deleteOptions</code>参数的<code>propagationPolicy</code>字段来控制级联删除策略。</p><p><br><br><br></p><h4 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h4><p>Jobs - Run to Completion</p><p>作业创建一个或多个Pod，并确保指定数量的Pod成功终止。随着Pod成功完成，作业跟踪也成功完成。删除作业将清除它创建的Pod。<br>作业还可用于并行运行多个Pod。</p><p><br></p><p><strong>栗子</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">pi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">pi</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">perl</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">["perl",</span>  <span class="string">"-Mbignum=bpi"</span><span class="string">,</span> <span class="string">"-wle"</span><span class="string">,</span> <span class="string">"print bpi(2000)"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">  backoffLimit:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ./job.yaml</span><br><span class="line">job.batch/pi created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get job</span><br><span class="line">kubectl describe job/pi</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line">kubectl logs pi-xxx</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Job Spec</strong><br>与其它k8s配置一样，Job也需要<code>apiVersion</code>, <code>kind</code>, <code>metadata</code>, <code>.spec</code>字段。</p><ul><li><p>Pod Template<br><code>.spec.template</code>是<code>.spce</code>字段的必要项。</p></li><li><p>Pod Selector<br><code>.spec.selector</code>字段可选。</p></li><li><p>Parallel Jobs: 有三种主要类型作业</p><ul><li>Non-parallel Jobs<ul><li>通常指启动一个Pod，除非Pod失败</li><li>Pod成功终止后，作业即告完成</li></ul></li><li>Parallel Jobs with a fixed completion count<ul><li>为<code>.spec.completions</code>指定非零正值</li><li>当1-<code>.spec.completions</code>范围内的每个值都有一个成功的Pod时，作业就完成了</li><li>尚未实施，每个Pod都传递了1-<code>.spec.completions</code>范围内不同的索引</li></ul></li><li>Parallel Jobs with a work queue<ul><li>每个Pod独立地确定是否所有对等都完成，因此整个Job完成</li><li>当任何Pod成功终止，不会创建新的Pod</li><li>一旦至少一个Pod成功终止并且所有Pod终止，则作业成功完成</li><li>一旦任意Pod已成功退出，其它任何Pod都不应该做任何工作或输出</li></ul></li></ul></li></ul><p><strong>控制并行</strong><br>Controlling Parallelism</p><p>请求的并行性(<code>.spec.parallelism</code>)可以设置为任何非负值。如果未指定，则默认为1.如果指定为0，则作业将暂停，直至其增加。<br>由于各种原因，实际并行性(在任何时刻运行的Pod数量)可能多于或少于请求的并行度：</p><ul><li>对于固定完成计数的作业，并行运行的实际Pod数不会超过剩余的Pod数</li><li>对于工作多列作业，任何Pod成功后都不会启动新的Pod，但允许剩余的Pod完成</li><li>如果控制器没有时间做出反应</li><li>如果控制器因任何原因无法创建Pod</li><li>由于同一作业中过多的先前Pod故障，控制器可能会限制新的Pod创建</li><li>当Pod正常关闭时，停止需要一些时间</li></ul><p><br></p><p><strong>处理Pod和Container失败</strong><br>Pod中的容器可能由于多种原因而失败，如果发生此情况，并且<code>.spec.template.spec.restartPolicy = &quot;OnFailure&quot;</code>，那么Pod会留在节点上，但容器会重新运行。因此，你的程序需要在本地处理此情况，或指定<code>.spec.template.spec.restartPolicy = &quot;Never&quot;</code>。</p><p>一个完整的Pod也可能由于多种原因而失败。当Pod失败时，作业控制器启动一个新的Pod。因此，你的程序需要在新Pod重启时处理此情况。</p><p><br></p><p><strong>Pod Backoff failure policy</strong><br>在某些情况下，由于配置中的逻辑错误等原因，你需要在重试一段时间后使作业失败。为此，可设置<code>.spec.backoffLimit</code>将作为视为失败前的重试次数。默认值为6s。与作业关联的失败的Pod由作业控制器重新创建，指数退避延迟(10s, 20s, 40s…)，上限6分钟。如果在作业的下一次状态检查之前没有出现新的故障Pod，则重置退避计数。</p><p><br></p><p><strong>作业终止和清理</strong><br>Job Termination and Cleanup</p><p>作业完成后，不会再创建Pod，也不会删除Pod。保持它们可让你仍然能查看已完成的Pod的日志以检查error, warning, 或其它诊断性输出。作业对象在完成后也会保留，以便可查看其状态。在注意到其状态后，用户可删除旧的作业。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#一并删除作业创建的Pod</span><br><span class="line">kubectl delete jobs/xxx</span><br><span class="line"></span><br><span class="line">#不删除作业创建的Pod</span><br><span class="line">kubectl delete jobs/xxx --</span><br></pre></td></tr></table></figure><p>默认情况下，除非Pod失败，否则作业将不间断运行，此时作业将延迟到上述的<code>.spec.backoffLimit</code>。终止作业的另一种方法是设置活动截止日期，通过设置<code>.spec.activateDeadlineSeconds</code>字段来执行此操作。请注意，作业的<code>.spec.activateDeadlineSeconds</code>优先于<code>.spec.backoffLimit</code>。因此，重试一个或多个失败的Pod的作业在达到<code>activeDeadlineSeconds</code>指定的时间限制后将不会重置其它Pod，即使尚未达到<code>backoffLimit</code>也是如此。</p><p><br></p><p><strong>作业模式</strong><br>Job Patterns</p><p>作业对象可用于支持Pod的可靠并行执行，它不是为了支持紧密通信的并行进程而设计。<br>在复杂系统中，可能存在多组不同的工作项。这里只考虑一组工作项——批处理作业</p><p>并行计算有几种不同的模式，每种模式都有有点和缺点：</p><ul><li>一个工作项一个作业对象 vs 所有工作项一个作业对象</li><li>创建的Pod数等于工作项数 vs 每个Pod可以处理多个工作项</li><li>多个方法使用一个工作队列</li></ul><p><br></p><p><strong>高级用法</strong><br>Advanced Usage</p><ul><li>指定自己的Pod selector<br>通常，创建作业对象时，不会指定<code>.spec.selector</code>。系统默认在创建作业时添加此字段。然而，在某些情况下，你可能需要设置它。这样做的时候要非常小心，如果你指定的label selector不是该作业的Pod所独有，并且与不想关的Pod匹配，则可能会删除不相关作业的Pod。如果选择了non-unique selector，则其它控制器及其Pod也可能以不可预测的方式进行。在指定<code>.spec.selector</code>时，k8s不会阻止你犯错误。</li></ul><p><br></p><p><strong>替代方案</strong><br>Alternatives</p><ul><li>Bare Pods</li><li>Replication Controller</li><li>Single Job starts Controller Pod</li></ul><p><br></p><p><strong>Cron Jobs</strong><br>在指定的时间/日期创建作业。</p><p><br><br><br></p><h4 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h4><p>Cron Job基于时间调度创建作业。<br>一个定时任务对象类似于crontab中的一行。它以给定的时间周期性运行作业。</p><p><strong>注意： 所有定时作业调度， 时间以UTC表示。</strong></p><p><br></p><p><strong>定时作业局限</strong><br>Cron Job Limitations</p><p>定时作业在其计划的每个执行时间创建一个作业对象。<br>如果<code>startingDeadlineSeconds</code>被设置为较大值或未设置(默认值)，并且<code>concurrencyPolicy</code>设置为Allow，则作业将始终至少运行一次。<br>如果设置了<code>startDeadlineSeconds</code>字段，则控制器会计算从<code>startingDeadlineSeconds</code>的值到现在发生的错过的作业数，而不是从上一个计划时间到现在。<br>如果定时作业未能在其预定时间创建，则将其视为未命中。</p><p>定时作业仅负责创建与其计划相匹配的作业，而作业则负责管理它所代表的Pod。</p><p><br><br><br><br><br></p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>Configuration</p><p><br></p><h3 id="配置最佳实践"><a href="#配置最佳实践" class="headerlink" title="配置最佳实践"></a>配置最佳实践</h3><p>Configuration Best Practices</p><p><br></p><h4 id="一般配置技巧"><a href="#一般配置技巧" class="headerlink" title="一般配置技巧"></a>一般配置技巧</h4><p>General Configuration Tips</p><ul><li>定义配置时，请指定最新的稳定的API版本</li><li>在推送到集群之前，配置文件应存储在版本控制系统中。这允许你在必要时快速回滚配置，有助于集群重建和恢复</li><li>使用YMAL而不是JSON来编写配置文件，YAML格式更用户友好</li><li>只要有意义，就将相关对象分组到一个文件中。管理一个文件比管理一堆文件更便捷</li><li>可以在目录上调用许多<code>kubectl</code>命令。例如，你可在配置文件目录上调用<code>kubectl create</code></li><li>不要不必要地指定默认值</li><li>将对象描述写在注释中，以便更好进行内省</li></ul><p><br><br><br></p><h4 id="Naked-Pod-vs-副本集，部署和作业"><a href="#Naked-Pod-vs-副本集，部署和作业" class="headerlink" title="Naked Pod vs 副本集，部署和作业"></a>Naked Pod vs 副本集，部署和作业</h4><p>“Naked” Pods vs ReplicaSets, Deployments, and Jobs</p><ul><li>不要使用Naked Pods(即未绑定到副本集或部署的Pod)<br>如果节点发生故障，裸Pod将不会被重新调度。</li></ul><p><br><br><br></p><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>Service</p><ul><li><p>在相应的后端工作负载(部署或副本集)访问它之前创建服务<br>当k8s启动容器时，它提供指向启动容器时正在运行的所有服务的环境变量。</p></li><li><p>除非绝对必要，否则不要为Pod指定hostPort<br>将Pod绑定到hostPort时，它会限制Pod可调度的位置数。因为每个<code>hostIP, hostPort, protocol</code>的组合必须是独特的。如果没有指定hostIp和protocol，k8s将使用<code>0.0.0.0</code>作为默认的hostIP，使用TCP作为默认协议。</p></li></ul><p>如果你只需要访问端口以进行调试，可使用<code>apiserver proxy</code>或<code>kubectl port-forward</code>。<br>如果你需要公开节点上Pod的端口，考虑使用<code>NodePort</code>服务。</p><ul><li>避免使用hostNetwork， 原因与hostPort类似</li><li>当不需要<code>kube-proxy</code>负载均衡时，使用 headless Services可轻松服务发现</li></ul><p><br><br><br></p><h4 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h4><p>Using Labels</p><ul><li>为你的应用程序或部署定义和使用标签<br>你可使用这些标签为其它资源筛选合适的Pod</li></ul><p><br><br><br></p><h4 id="容器镜像"><a href="#容器镜像" class="headerlink" title="容器镜像"></a>容器镜像</h4><p>Container Images</p><ul><li>默认的镜像拉取策略。对于容器是<code>ifNotPresent</code>，kubelet只有在本地镜像不存在时才拉取镜像。如果希望每次k8s启动容器时都拉取镜像，请指定<code>imagePullPolicy: Always</code>。<br>一个已弃用的替代方案。设置k8s总是拉取镜像的<code>:latest</code>标记，它会隐式地将<code>imagePullPolicy</code>设置为<code>Always</code>。</li></ul><p><strong>注意： 在生产环境中部署容器时，你应该避免使用<code>:latest</code>标记，因为这使得正在运行的镜像版本难以回滚。</strong><br>如果镜像使用<code>:latest</code>标记，回滚的话其实需要回滚代码，然后打包上线，然后触发动态更新，之后就还原成了之前的版本。这样确实要复杂很缓慢一些。</p><ul><li>确保容器使用使用相同版本的镜像</li></ul><p><br><br><br></p><h4 id="使用kubectl"><a href="#使用kubectl" class="headerlink" title="使用kubectl"></a>使用kubectl</h4><ul><li><p>使用<code>kubectl apply -f &lt;directory&gt;</code> 或 <code>kubectl create -f &lt;directory&gt;</code><br>它在此目录中所有<code>.yaml</code>, <code>.yml</code>, <code>.json</code>文件汇总寻找k8s配置配置文件，并将其传递给kubectl。</p></li><li><p>使用label selectors进行<code>get</code>和<code>delete</code>操作，而不是特定的对象名称</p></li><li>使用<code>kubectl run</code>和<code>kubectl expose</code>快速创建单容器部署和服务</li></ul><p><br><br><br></p><h3 id="管理容器的计算资源"><a href="#管理容器的计算资源" class="headerlink" title="管理容器的计算资源"></a>管理容器的计算资源</h3><p>Managing Compute Resources for Containers</p><p>指定Pod时，可以选择指定每个容器需要多少CPU和MEM。当容器指定了请求(requests)的资源时，调度器可以更好地决定将Pod放在哪个节点上。当容器指定了限制(limit)时，可以以指定的方式处理节点上资源的争用。</p><p><br><br><br></p><h4 id="资源类型"><a href="#资源类型" class="headerlink" title="资源类型"></a>资源类型</h4><p>Resource types</p><p>CPU和MEM都是资源类型。资源类型具有基本单元(unix)。CPU以核(<code>cores</code>)为指定单位，MEM以字节(<code>Byte</code>)为指定单位。<br>CPU和MEM统称为计算资源，或资源。计算资源是可以请求，分配和使用的可测量数据。它们与API资源不同。API资源(如Pod和Service)，是可通过k8s APIserver读取和修改的对象。</p><p><br><br><br></p><h4 id="资源的请求和限制"><a href="#资源的请求和限制" class="headerlink" title="资源的请求和限制"></a>资源的请求和限制</h4><p>Resource requests and limits of Pod and Container</p><p>Pod中的容器都可指定一个或多个限制：</p><ul><li><code>spec.containers[].resources.limits.cpu</code></li><li><code>spec.containers[].resources.limits.memory</code></li><li><code>spec.containers[].resources.requests.cpu</code></li><li><code>spec.containers[].resources.requests.memory</code></li></ul><p>虽然只能在单独的容器上指定请求和限制，但是讨论Pod资源的请求和限制很方便。特定资源类型的Pod资源 请求/限制 是Pod中每个容器的该类型的资源 请求/限制 的总和。</p><p><br><br><br></p><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>Meaning of CPU</p><p>CPU资源的限制和请求以CPU单位进行测量。在k8s中，1 cpu等于：</p><ul><li>1 AWS vCPU</li><li>1 GCP Core</li><li>1 Azure vCore</li><li>1 IBM vCPU</li><li>1 Hyperthread on a bare-metal Intel processor with Hyperthreading</li></ul><p>允许分数请求。如<code>spec.containers[].resources.requests.cpu: 0.5</code>。表达式<code>0.1</code>相当于表达式<code>100m</code>。具有小数点的请求资源(如<code>0.1</code>)由API转换为<code>100m</code>，不允许精度小于<code>1m</code>。<br>始终要求CPU作为绝对数量，而不是相对数量。因此，<code>0.1</code>单元对于单核，双核，八核机器上的CPU资源时相同的。</p><p><br><br><br></p><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p>Meaning of memory</p><p>内存的限制和请求以字节为单位。<br>你可使用以下后缀来表示整数内存: <code>E, P, T, G, M, K</code>；<br>你还还可以使用2的幂等: <code>Ei, Pi, Ti, Gi, Mi, Ki</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#相同值的不同表达</span><br><span class="line">128974848</span><br><span class="line">129e6</span><br><span class="line">129M</span><br><span class="line">123Mi</span><br></pre></td></tr></table></figure><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: db</span><br><span class="line">    image: mysql</span><br><span class="line">    env:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: &quot;password&quot;</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        memory: &quot;64Mi&quot;</span><br><span class="line">        cpu: &quot;250m&quot;</span><br><span class="line">      limits:</span><br><span class="line">        memory: &quot;128Mi&quot;</span><br><span class="line">        cpu: &quot;500m&quot;</span><br><span class="line">  - name: wp</span><br><span class="line">    image: wordpress</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        memory: &quot;64Mi&quot;</span><br><span class="line">        cpu: &quot;250m&quot;</span><br><span class="line">      limits:</span><br><span class="line">        memory: &quot;128Mi&quot;</span><br><span class="line">        cpu: &quot;500m&quot;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="如何调度具有资源请求的Pod"><a href="#如何调度具有资源请求的Pod" class="headerlink" title="如何调度具有资源请求的Pod"></a>如何调度具有资源请求的Pod</h4><p>How Pods with resource requests are scheduled</p><p>创建Pod时，k8s调度器会选择要运行Pod的节点。每个节点都具有每种资源类型的最大容量，它可为Pod提供CPU和MEM。调度程序确保对于每种资源类型，调度的容器的资源请求总和小于节点的容量。请注意，即使节点上的实际内存或CPU资源使用率非常低，但如果容量检查失败，调度器扔拒绝在节点上放置Pod。当资源使用随后增加时，这可以防止节点上的资源短缺。</p><p><br><br><br></p><h4 id="如何运行具有资源限制的Pod"><a href="#如何运行具有资源限制的Pod" class="headerlink" title="如何运行具有资源限制的Pod"></a>如何运行具有资源限制的Pod</h4><p>How Pods with resource limits are run</p><p>当<code>kubelet</code>启动Pod中的容器时，它会将CPU和MEM限制传递给容器运行环境。</p><p>当使用Docker时：</p><ul><li><p><code>spec.container[].resources.requests.cpu</code>被转换成core value，分数的话会乘以1024。此数字中的较大值用作<code>docker run</code>命令中<code>--cpu-shares</code>标志的值</p></li><li><p><code>spec.container[].resources.limits.cpu</code>被转换为millicore value并乘以100。结果值代表容器每100ms可以使用的CPU时间总量。<br>在此间隔期间，容器不能使用超过其CPU时间的份额。<br>默认配额时间是100ms，CPU配额的最小解析为1ms。</p></li></ul><ul><li><code>spec.containers[].resources.limits.memory</code>被转换为整数，并用作<code>docker run</code>命令中<code>--memory</code>标志的值</li></ul><p>如果容器超出其内存限制(mem limit)，则容器可能会终止。如果它可以重启，则kubelet将重启它；<br>如果容器超出其内存请求(mem request)，当节点内存不足时，它的Pod可能会被驱逐；<br>容器可能会/可能不会被允许在较长时间内超过其CPU限制。但是，它不会因CPU使用率过高而被杀死。</p><p><br><br><br></p><h4 id="监控计算资源使用"><a href="#监控计算资源使用" class="headerlink" title="监控计算资源使用"></a>监控计算资源使用</h4><p>Monitoring compute resource usage</p><p>Pod的资源使用情况将作为Pod Status的一部分进行上报。</p><p><br><br><br></p><h4 id="本地短暂存储"><a href="#本地短暂存储" class="headerlink" title="本地短暂存储"></a>本地短暂存储</h4><p>Local ephemeral storage</p><p>FEATURE STATE: Kubernetes v1.11 beta</p><p>k8s v1.8介绍了一种新资源，用于管理本地短暂存储的短暂存储(ephemeral-storage)。在每个k8s 节点上，kubelet的根目录(默认<code>/var/lib/kubelet</code>)和日志目录(<code>/var/log</code>)存储在节点的根分区上。Pod还通过<code>emptyDir volume</code>，容器日志，镜像层，容器可写层共享和使用此分区。<br>此分区是短暂的，应用程序不能指望来自此分区的任何SLA(如磁盘IO)。本地临时存储仅适用于根分区，镜像层和可写层的可选分区超出了范围。</p><p><br></p><p><strong>本地短暂存储的请求和限制设置</strong><br>Requests and limits setting for local ephemeral storage</p><p>Pod中的容器可指定一个或多个短暂存储：</p><ul><li><code>spec.containers[].resources.limits.ephemeral-storage</code></li><li><code>spec.containers[].resources.requests.ephemeral-storage</code></li></ul><p>短暂存储的限制和请求以字节(<code>Byte</code>)为单位。<br>你可以使用一下后缀表示整数存储: <code>E, P, T, G, M, K</code>；<br>你也可以使用2的幂等: <code>Ei, Pi, Ti, Gi, Mi, Ki</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">128974848</span><br><span class="line">129e6</span><br><span class="line">129M</span><br><span class="line">123Mi</span><br></pre></td></tr></table></figure><p><br></p><p>栗子： Pod由两个容器，每个容器都有2GiB的本地短暂存储请求，4GiB的本地短暂存储限制。因此，总共是4GiB请求，8GiB限制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: db</span><br><span class="line">    image: mysql</span><br><span class="line">    env:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      value: &quot;password&quot;</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        ephemeral-storage: &quot;2Gi&quot;</span><br><span class="line">      limits:</span><br><span class="line">        ephemeral-storage: &quot;4Gi&quot;</span><br><span class="line">  - name: wp</span><br><span class="line">    image: wordpress</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        ephemeral-storage: &quot;2Gi&quot;</span><br><span class="line">      limits:</span><br><span class="line">        ephemeral-storage: &quot;4Gi&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>如何调度具有本地短暂存储的Pod</strong><br>How Pods with ephemeral-storage requests are scheduled</p><p>对于容器级的隔离，如果容器的可写层和日志使用量超过其存储限制，则Pod将被驱逐。对于Pod级别的隔离，如果所有容器的本地短暂存储使用量与Pod的<code>emptyDir volume</code>的总和超过了限制，则Pod将被驱逐。</p><p><br><br><br></p><h4 id="扩展的资源"><a href="#扩展的资源" class="headerlink" title="扩展的资源"></a>扩展的资源</h4><p>Extended resources</p><p>扩展资源是<code>kubernetes.io</code>域之外的完全限定资源名称。它们允许集群操作者通告和用户使用非k8s内置资源。<br>使用扩展资源需要两个步骤，首先，集群操作者必须通告扩展资源；其次，用户必须在Pod中请求扩展资源。</p><p><br></p><p><strong>节点级扩展资源</strong><br>节点级扩展资源与节点相关联。</p><p><br></p><p><strong>集群级扩展资源</strong><br>集群级扩展资源不依赖与节点。它们通常由调度器扩展程序管理——它处理资源消耗和资源配额。</p><p><br></p><p><strong>使用扩展资源</strong><br>用户可以在<code>pod spec</code>中项CPU和MEM一样使用扩展资源。调度程序负责资源核算，以便不会同时为Pod分配可用的数量。<br>API server将扩展资源的数量限制为整数。</p><p>要在Pod中使用扩展资源，在<code>container spec</code>中的<code>spec.container[].resources.limits</code>映射中包含资源名称作为键。<br>只有满足所有请求资源时，才会调度Pod。只要无法满足资源请求，Pod就会保持在<code>PENDING status</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: my-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: my-container</span><br><span class="line">    image: myimage</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        cpu: 2</span><br><span class="line">        example.com/foo: 1</span><br><span class="line">      limits:</span><br><span class="line">        example.com/foo: 1</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="分配Pod到节点"><a href="#分配Pod到节点" class="headerlink" title="分配Pod到节点"></a>分配Pod到节点</h3><p>Assigning Pods to Nodes</p><p>你可以将Pod约束为只能在特定节点上运行，或更喜欢在特定节点上运行。有几种方法做到这一点，它们都使用<code>label selector</code>来进行选择。通常这种约束是不必要的，因为调度程序将自动进行合理的放置。但在某些情况下，你可能希望对Pod放置的节点进行更多控制。如确保Pod放置在安装有SSD的计算机上…</p><p><br><br><br></p><h4 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h4><p>nodeSelector</p><p>节点选择器是最简单的约束形式。<code>nodeSelector</code>是<code>PodSpecs</code>的一个字段，它指定了一个键值对的映射。要使Pod有资格在节点上运行，该节点必须将每个指示的的键值对作为标签。最常见的用法是一个键值对。</p><ul><li><p>Prerequisites<br>k8s 集群</p></li><li><p>Attach label to the node</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#获取节点名</span><br><span class="line">kubectl get node</span><br><span class="line">NAME      STATUS    ROLES     AGE       VERSION</span><br><span class="line">master    Ready     master    33d       v1.11.1</span><br><span class="line">node      Ready     &lt;none&gt;    33d       v1.11.1</span><br><span class="line">salt01    Ready     &lt;none&gt;    27d       v1.11.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打标签</span><br><span class="line">kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;=&lt;label-value&gt;</span><br><span class="line"></span><br><span class="line">#查看标签</span><br><span class="line">kubectl get node --show-labels</span><br></pre></td></tr></table></figure><ul><li>Add a nodeSelector field to your pod configuration</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    env: test</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  nodeSelector:</span><br><span class="line">    &lt;label-key&gt;: &lt;label-value&gt;</span><br></pre></td></tr></table></figure><p>当创建这个资源时，Pod将调度到附加此标签的节点上。</p><p><br><br><br></p><h4 id="内置节点标签"><a href="#内置节点标签" class="headerlink" title="内置节点标签"></a>内置节点标签</h4><p>built-in node labels</p><p>除了你附加的标签之外，节点还有一些预先填充的标准标签。</p><ul><li><code>kubernetes.io/hostname</code></li><li><code>failure-domain.beta.kubernetes.io/zone</code></li><li><code>failure-domain.beta.kubernetes.io/region</code></li><li><code>beta.kubernetes.io/instance-type</code></li><li><code>beta.kubernetes.io/os</code></li><li><code>beta.kubernetes.io/arch</code></li></ul><p><br><br><br></p><h4 id="亲和力和反亲和力"><a href="#亲和力和反亲和力" class="headerlink" title="亲和力和反亲和力"></a>亲和力和反亲和力</h4><p>Affinity and anti-affinity</p><p>节点选择器提供了一种非常简单的方法，使用特定标签约束Pod到特定节点。目前处于测试阶段的亲和力/反亲和力功能，极大地扩展了你可以表达的约束类型。关键的改进有：</p><ul><li>语言更具表达性</li><li>你可以指示规则是<code>soft/preference</code>而不是硬性要求，因此如果调度程序不能满足，也仍然会调度Pod</li><li>你可以约束运行在节点上的其它Pod的标签，而不是对节点本身的标签进行约束</li></ul><p>亲和力有两种类型：</p><ul><li>node-affinity</li><li>inter-pod affinity/anti-affinity</li></ul><p><br></p><p><strong>节点亲和力</strong><br>节点亲和力在概念上类似于nodeSelector，它允许你根据节点标签约束pod调度的节点。<br>目前有两种类型的节点亲和力：</p><ul><li><code>requiredDuringSchedulingIgnoredDuringExecution</code></li><li><code>preferredDuringSchedulingIgnoredDuringExecution</code></li></ul><p>你可将它们分别是为<code>hard</code>和<code>soft</code>，前者指定了将Pod调度到节点上必须满足的规则，后者指定调度程序将尝试执行但不保证的首选项。名称的<code>IgnoredDuringExecution</code>部分意味着，与节点选择器的工作方式类似，如果节点标签在运行时更改，而不再满足Pod的亲和力规则，则Pod将继续在节点上运行。<br>未来，我们计划提供<code>requiredDuringSchedulingRequiredDuringExecution</code>，就像Ignored一样，它将从不再满足Pod的亲和力要求的节点中驱逐Pod。</p><p>节点亲和力在<code>spec.affinity.nodeAffinity</code>字段中指定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: with-node-affinity</span><br><span class="line">spec:</span><br><span class="line">  affinity:</span><br><span class="line">    nodeAffinity:</span><br><span class="line">      requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">        nodeSelectorTerms:</span><br><span class="line">        - matchExpressions:</span><br><span class="line">          - key: kubernetes.io/e2e-az-name</span><br><span class="line">            operator: In</span><br><span class="line">            values:</span><br><span class="line">            - e2e-az1</span><br><span class="line">            - e2e-az2</span><br><span class="line">      preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">      - weight: 1</span><br><span class="line">        preference:</span><br><span class="line">          matchExpressions:</span><br><span class="line">          - key: another-node-label-key</span><br><span class="line">            operator: In</span><br><span class="line">            values:</span><br><span class="line">            - another-node-label-value</span><br><span class="line">  containers:</span><br><span class="line">  - name: with-node-affinity</span><br><span class="line">    image: k8s.gcr.io/pause:2.0</span><br></pre></td></tr></table></figure><p>此节点亲和力规则表示，Pod只能防止在<code>kubernetes.io/e2e-az-name</code>标签键，值为<code>e2e-az1</code>或<code>e2e-az2</code>的节点上。此外，在满足条件的节点中，应优先选择具有<code>another-node-label-key</code>键，值为<code>another-node-label-value</code>的节点。<br>节点亲和力语法支持如下操作符: <code>In, NotIn, Exists, DoesNotExist, Gt, Lt</code>。</p><p>如果你同时指定了<code>nodeSelector</code>和<code>nodeAffinity</code>，则必须满足两者以将Pod调度到候选节点上；<br>如果你指定了与<code>nodeAffinity</code>类型关联的多个<code>nodeSelectorTerms</code>。那么，如果满足其中一个<code>nodeSelectorTerms</code>，则可以将Pod调度到节点上；<br>如果你指定了与<code>nodeSelectorTerms</code>关联的多个<code>matchExpressions</code>。那么，只有满足所有<code>matchExpressions</code>的情况下，才能将Pod安排到节点上；<br>如果删除或更改调度Pod的节点标签，则Pod不会被删除。换句话说，亲和力仅在调度Pod时起作用。</p><p><br></p><p><strong>Pod间亲和力和反亲和力</strong><br>Pod间亲和力和反亲和力，你可以根据已在节点上运行的Pod上的标签(而不是节点标签)，来约束Pod可以调度的节点。与节点不同，Pod有命名空间，Pod标签的标签选择器必须指定选择器应该应用于哪些命名空间。</p><p>注意： Pod间亲和力和反亲和力需要大量的处理，可会显著减慢大型集群中的调度。因此，不建议在大于几百个节点的集群中使用；<br>注意： Pod反亲和力要求节点一致地标签节点，即集群中的每个节点都必须具有匹配的<code>topologyKey</code>标签，如果某些节点缺少，可能会导致意外情况。</p><p>目前有两种类型的Pod亲和力和反亲和力:</p><ul><li><code>requiredDuringSchedulingIgnoredDuringExecution</code></li><li><code>preferredDuringSchedulingIgnoredDuringExecution</code></li></ul><p>同样表示<code>hard</code>和<code>soft</code>要求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: with-pod-affinity</span><br><span class="line">spec:</span><br><span class="line">  affinity:</span><br><span class="line">    podAffinity:</span><br><span class="line">      requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">      - labelSelector:</span><br><span class="line">          matchExpressions:</span><br><span class="line">          - key: security</span><br><span class="line">            operator: In</span><br><span class="line">            values:</span><br><span class="line">            - S1</span><br><span class="line">        topologyKey: failure-domain.beta.kubernetes.io/zone</span><br><span class="line">    podAntiAffinity:</span><br><span class="line">      preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">      - weight: 100</span><br><span class="line">        podAffinityTerm:</span><br><span class="line">          labelSelector:</span><br><span class="line">            matchExpressions:</span><br><span class="line">            - key: security</span><br><span class="line">              operator: In</span><br><span class="line">              values:</span><br><span class="line">              - S2</span><br><span class="line">          topologyKey: kubernetes.io/hostname</span><br><span class="line">  containers:</span><br><span class="line">  - name: with-pod-affinity</span><br><span class="line">    image: k8s.gcr.io/pause:2.0</span><br></pre></td></tr></table></figure><p>Pod亲和力和反亲和力的有效操作符有: <code>In, NotIn, Exists, DoesNotExist</code><br>原则上，<code>topologyKey</code>可以是任一合法的<code>label-key</code>。但是，出于性能和安全的原因，它也有一些限制：</p><ul><li>对于亲和力和<code>requiredDuringSchedulingIgnoredDuringExecution</code>的Pod的反亲和力，不允许使用空的<code>topologykey</code></li><li>对于<code>requiredDuringSchedulingIgnoredDuringExecution</code>的Pod的反亲和力，引入控制器<code>LimitPodHardAntiAffinityTopology</code>是为了将<code>topologyKey</code>限制为<code>kubernetes.io/hostname</code>。如果要使其可用于自定义，可修改控制器，或禁用它</li><li>对于<code>preferredDuringSchedulingIgnoredDuringExecution</code>的Pod的反亲和力，空的<code>topologyKey</code>被解释为<code>all topologies</code></li><li>除了上面提到的，<code>topologyKey</code>可以是任一合法的<code>label-key</code></li></ul><p>除了<code>labelSelector</code>和<code>topologyKey</code>之外，你还可以选择指定<code>labelSelector</code>应匹配的命名空间。如果为空或省略，则默认为Pod的亲和力/反亲和力的命名空间。</p><p><br><br><br></p><h3 id="污点和容忍"><a href="#污点和容忍" class="headerlink" title="污点和容忍"></a>污点和容忍</h3><p>Taints and Tolerations</p><p>节点亲和力是Pod的属性，它将它们吸引到节点；Taints则相反——它允许节点排斥Pod。<br>Taints 和 Tolerations 一起工作以确保Pod不被安排的不适当的节点上。将一个或多个污点(taints)应用于节点，这标志着节点不应该接受任何不能容忍污点的Pod。容忍(tolerations)应用于Pod，并允许Pod安排到具有匹配污点的节点上。</p><p><br></p><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>使用<code>kubectl taint</code>命令对节点添加污染:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#除非具有匹配的容忍，否则不会将Pod调度到此节点上</span><br><span class="line">kubectl taint nodes &lt;node-name&gt; key=value:NoSchedule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">kubectl taint nodes &lt;node-name&gt; key:NoSchedule-</span><br></pre></td></tr></table></figure><p>你可以在<code>PodSpec</code>的指定Pod的容忍度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tolerations:</span><br><span class="line">- key: &quot;key&quot;</span><br><span class="line">  operator: &quot;Equal&quot; #default</span><br><span class="line">  value: &quot;value&quot;</span><br><span class="line">  effect: &quot;NoSchedule&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tolerations:</span><br><span class="line">- key: &quot;key&quot;</span><br><span class="line">  operator: &quot;Exists&quot;</span><br><span class="line">  effect: &quot;NoSchedule&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><code>effect</code>的三个选项：</p><ul><li><code>NoSchedule</code></li><li><code>PreferNoSchedule</code>: soft of NoSchedule</li><li><code>NoExecute</code></li></ul><p>你可在同一个节点上放置多个污点，并在同一个Pod上放置多个容忍。k8s处理多个污点和容忍的方式就像一个过滤器：从节点的所有污点开始，忽略Pod匹配的容忍度的那些，剩下的未被忽略的污点对Pod有明显的影响。尤其是：</p><ul><li>如果至少有一个未被忽略的<code>effect</code>为<code>NoSchedule</code>的污点，则k8s将不会调度Pod到该节点</li><li>如果没有<code>effect</code>为<code>NoSchedule</code>，但至少有一个未被忽略的<code>effect</code>为<code>PreferNoSchedule</code>的污点，则k8s将尝试不将Pod调度到该节点</li><li>如果至少有一个未被忽略的<code>effect</code>为<code>NoExecute</code>的污点，则Pod将从节点驱逐(如果它已经在节点上运行)，并且不会被调度到该节点上</li></ul><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes node1 key1=value1:NoSchedule</span><br><span class="line">kubectl taint nodes node1 key1=value1:NoExecute</span><br><span class="line">kubectl taint nodes node1 key2=value2:NoSchedule</span><br></pre></td></tr></table></figure><p>有两个容忍度的Pod：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="attr">- key:</span> <span class="string">"key1"</span></span><br><span class="line"><span class="attr">  operator:</span> <span class="string">"Equal"</span></span><br><span class="line"><span class="attr">  value:</span> <span class="string">"value1"</span></span><br><span class="line"><span class="attr">  effect:</span> <span class="string">"NoSchedule"</span></span><br><span class="line"><span class="attr">- key:</span> <span class="string">"key1"</span></span><br><span class="line"><span class="attr">  operator:</span> <span class="string">"Equal"</span></span><br><span class="line"><span class="attr">  value:</span> <span class="string">"value1"</span></span><br><span class="line"><span class="attr">  effect:</span> <span class="string">"NoExecute"</span></span><br></pre></td></tr></table></figure><p>对于<code>NoExecute</code>的容忍度可以指定一个可选<code>tolerationSeconds</code>字段，它指示在添加污点后Pod将保持绑定到节点的时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tolerations:</span></span><br><span class="line"><span class="attr">- key:</span> <span class="string">"key1"</span></span><br><span class="line"><span class="attr">  operator:</span> <span class="string">"Equal"</span></span><br><span class="line"><span class="attr">  value:</span> <span class="string">"value1"</span></span><br><span class="line"><span class="attr">  effect:</span> <span class="string">"NoExecute"</span></span><br><span class="line"><span class="attr">  tolerationSeconds:</span> <span class="number">3600</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><p>Example Use Cases</p><p>污点和容忍是一种灵活的方式来引导Pod远离节点或驱逐不应该运行的Pod。一些栗子：</p><ul><li><strong>专用节点(Dedicated Nodes)</strong></li><li><strong>特殊硬件的节点(Nodes with Special Hardware)</strong></li><li><strong>基于污点的驱逐(Taint based Evictions)</strong></li></ul><p><br><br><br></p><h4 id="Taint-based-Evictions"><a href="#Taint-based-Evictions" class="headerlink" title="Taint based Evictions"></a>Taint based Evictions</h4><p>内置的污点：</p><ul><li><code>node.kubernetes.io/not-ready</code></li><li><code>node.kubernetes.io/unreachable</code></li><li><code>node.kubernetes.io/out-of-disk</code></li><li><code>node.kubernetes.io/memory-pressure</code></li><li><code>node.kubernetes.io/disk-pressure</code></li><li><code>node.kubernetes.io/network-unavailable</code></li><li><code>node.kubernetes.io/unschedulable</code></li><li><code>node.cloudprovider.kubernetes.io/uninitialized</code></li></ul><p>使用<code>NoExecute</code>容忍的DaemonSet Pod为以下污点创建，没有<code>tolerationSeconds</code>：</p><ul><li><code>node.alpha.kubernetes.io/unreachable</code></li><li><code>node.kubernetes.io/not-ready</code></li></ul><p>这可确保DaemonSet Pod永远不会因为这个问题而被驱逐，这与禁用此功能时的行为相匹配。</p><p><br><br><br></p><h4 id="按条件污染节点"><a href="#按条件污染节点" class="headerlink" title="按条件污染节点"></a>按条件污染节点</h4><p>Taint Nodes by Condition</p><p>节点控制器创建对应于节点条件的污点。当启用此功能，调度程序不检查节点条件，调度程序检查污点。这可确保节点条件不会影响节点上的调度。用户可以通过添加适当的Pod容忍来选择忽略节点的一些问题。</p><p>DaemonSet controller自动将一下<code>NoSchedule</code>的容忍度添加到所有的守护进程，以防止守护进程破坏：</p><ul><li><code>node.kubernetes.io/memory-pressure</code></li><li><code>node.kubernetes.io/disk-pressure</code></li><li><code>node.kubernetes.io/out-of-disk</code> (only for critical pods)</li><li><code>node.kubernetes.io/unschedulable</code> (1.10 or later)</li><li><code>node.kubernetes.io/network-unavailable</code> (host network only)</li></ul><p>添加这些容忍度可确保向后兼容，你还可以向DaemonSet添加任意容忍度。</p><p><br><br><br></p><h3 id="Secrets"><a href="#Secrets" class="headerlink" title="Secrets"></a>Secrets</h3><p><code>Secrets</code>类型的对象旨在保存敏感信息，如密码、OAuth token、ssh keys。把这些敏感信息放在<code>Secrets</code>中比将其放在Pod中或image中更安全、更灵活。</p><p><br></p><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>用户和系统都可以创建一些秘密(Secrets)。<br>要使用秘密，Pod需要引用该秘密。秘密可以通过两种方式与Pod一起使用：</p><ul><li>作为挂载到容器中的卷中的文件</li><li>为Pod拉取镜像时由<code>kubelet</code>使用的文件</li></ul><p><br></p><h5 id="内建的秘密"><a href="#内建的秘密" class="headerlink" title="内建的秘密"></a>内建的秘密</h5><p>Built-in Secrets</p><p><strong>Service Accounts Automatically Create and Attach Secrets with API Credentials</strong><br>k8s会自动创建包含用于访问API的证书的秘密，并自动修改Pod以使用此类秘密。你可禁用它，但不推荐。</p><p><br></p><h5 id="创建自己的秘密"><a href="#创建自己的秘密" class="headerlink" title="创建自己的秘密"></a>创建自己的秘密</h5><p>Creating your own Secrets</p><p><br></p><p><strong>使用kubectl创建秘密(Creating a Secret Using kubectl create secret)</strong><br>假设一些Pod需要访问数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ echo -n &apos;admin&apos; &gt; ./username.txt</span><br><span class="line">$ echo -n &apos;1f2d1e2e67df&apos; &gt; ./password.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建秘密</span><br><span class="line">$ kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt</span><br><span class="line">secret/db-user-pass created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">#默认都不会显示文件内容，为了安全</span><br><span class="line">kubectl get secrets</span><br><span class="line"></span><br><span class="line">kubectl describe secrets/db-user-pass</span><br><span class="line">Name:         db-user-pass</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:  Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password.txt:  12 bytes</span><br><span class="line">username.txt:  5 bytes</span><br></pre></td></tr></table></figure><p><br></p><p><strong>手动创建秘密(Creating a Secret Manually)</strong><br>每项必须是<code>base64</code>编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ echo -n &apos;admin&apos; | base64</span><br><span class="line">YWRtaW4=</span><br><span class="line">$ echo -n &apos;1f2d1e2e67df&apos; | base64</span><br><span class="line">MWYyZDFlMmU2N2Rm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#现在编写一个秘密对象文件</span><br><span class="line">#db-user-pass.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: mysecret</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">  password: MWYyZDFlMmU2N2Rm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建它</span><br><span class="line">$ kubectl create -f ./secret.yaml</span><br><span class="line">secret &quot;mysecret&quot; created</span><br></pre></td></tr></table></figure><p><br></p><p><strong>解码秘密(Decoding a Secret)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret mysecret -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">  password: MWYyZDFlMmU2N2Rm</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: 2016-01-22T18:41:56Z</span><br><span class="line">  name: mysecret</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;164619&quot;</span><br><span class="line">  selfLink: /api/v1/namespaces/default/secrets/mysecret</span><br><span class="line">  uid: cfee02d6-c137-11e5-8d73-42010af00002</span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#解码</span><br><span class="line">$ echo &apos;MWYyZDFlMmU2N2Rm&apos; | base64 --decode</span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></table></figure><p><br></p><h5 id="使用秘密"><a href="#使用秘密" class="headerlink" title="使用秘密"></a>使用秘密</h5><p>Using Secrets<br>秘密可以作为数据卷来挂载，也可作为环境变量公开，以供Pod中的容器使用。它们也可以由系统的其它部分使用，而不是直接暴露在Pod中。</p><p><br></p><p><strong>将秘密用作Pod中的文件(Using Secrets as Files from a Pod)</strong><br>在Pod中的卷中使用秘密：</p><ul><li>创建或使用已有的秘密。多个Pod可以引用相同的秘密</li><li>修改Pod定义以添加卷和挂载卷</li><li>修改镜像或命令行，以便程序在该挂载目录中查找文件</li></ul><p>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">"/etc/foo"</span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">    secret:</span></span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">mysecret</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>向指定路径投射密钥(Projection of secret keys to specific paths)</strong><br>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">"/etc/foo"</span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">    secret:</span></span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">mysecret</span></span><br><span class="line"><span class="attr">      items:</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">my-group/my-username</span></span><br><span class="line"><span class="comment">#username秘密存储在/etc/foo/my-group/my-username而不是/etc/foo/username</span></span><br><span class="line"><span class="comment">#password秘密没有投射</span></span><br></pre></td></tr></table></figure><p><br></p><p>**秘密文件权限(Secret files permissions)<br>你还可以指定秘密所具有的的权限:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">"/etc/foo"</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">    secret:</span></span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">mysecret</span></span><br><span class="line"><span class="attr">      defaultMode:</span> <span class="number">256</span> <span class="comment">#0400(八进制)</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">"/etc/foo"</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">    secret:</span></span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">mysecret</span></span><br><span class="line"><span class="attr">      items:</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">my-group/my-username</span></span><br><span class="line"><span class="attr">        mode:</span> <span class="number">511</span> <span class="comment">#0777</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>从卷中使用秘密值(Consuming Secret Values from Volumes)</strong><br>在挂载秘密卷的容器内，密钥显示为文件，秘密值基于<code>base64</code>进行解码并存储在这些文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls /etc/foo/</span><br><span class="line">username</span><br><span class="line">password</span><br><span class="line">$ cat /etc/foo/username</span><br><span class="line">admin</span><br><span class="line">$ cat /etc/foo/password</span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></table></figure><p><br></p><p><strong>挂载的秘密会自动更新(Mounted Secrets are updated automatically)</strong></p><p>当更新卷中已经使用的秘密时，最终也会更新投射的密钥。</p><p><br></p><p><strong>使用秘密作为环境变量(Using Secrets as Environment Variables)</strong><br>要在Pod中的环境变量中使用秘密：</p><ul><li>创建或使用已有的秘密。多个Pod可引用同一个秘密</li><li>修改Pod定义</li><li>修改Image或命令行，以便程序在指定的环境变量中查找值</li></ul><p>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">secret-env-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">mycontainer</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">SECRET_USERNAME</span></span><br><span class="line"><span class="attr">        valueFrom:</span></span><br><span class="line"><span class="attr">          secretKeyRef:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">mysecret</span></span><br><span class="line"><span class="attr">            key:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">SECRET_PASSWORD</span></span><br><span class="line"><span class="attr">        valueFrom:</span></span><br><span class="line"><span class="attr">          secretKeyRef:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">mysecret</span></span><br><span class="line"><span class="attr">            key:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li>从环境变量中使用秘密值<br>Consuming Secret Values from Environment Variables</li></ul><p>容器内使用的环境变量的秘密值，它显示为<code>base64</code>的解码值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo $SECRET_USERNAME</span><br><span class="line">admin</span><br><span class="line">$ echo $SECRET_PASSWORD</span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Using imagePullSecrets</strong><br>imagePullSecret是一种包含docker image registry password的秘密传递给kubelet的方法，因此它可以用于Pod拉取你的私有镜像。</p><p><br><br><br></p><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p><br></p><h5 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h5><p>Restrictions</p><p>验证密钥卷源以确保指定的对象引用实际指向的秘密类型对象。因此，需要在任何Pod依赖它之前先创建秘密。<br><code>Secret API</code>对象驻留在命名空间中，它们只能由同一命名空间中的Pod引用。<br>单个秘密的大小被限制为1MB。这是为了阻止创建非常大的秘密，这会耗尽apiserver和kubelet的内存。然而，创建许多小的秘密也可能耗尽内存。更多关于限制秘密对内存的使用是未来的计划功能。<br>kubelet仅支持使用从apiserver获取的Pod秘密。这包含由<code>kubectl</code>创建的秘密，不包含通过<code>--manifest-url</code>标志或REST API创建的秘密。</p><p><br></p><h5 id="Secret和Pod的终生交互"><a href="#Secret和Pod的终生交互" class="headerlink" title="Secret和Pod的终生交互"></a>Secret和Pod的终生交互</h5><p>Secret and Pod Lifetime interaction</p><p>通过API创建Pod时，不会检查引用的秘密是否存在。一旦调度了Pod，kubelet将尝试获取秘密值。如果由于该秘密不存在或暂时缺少与apiserver的连接而无法获取该秘密，则kubelet将定期重试。它将报告有关Pod的事件，说明它尚未启动的原因。一旦获取到秘密，kubelet将创建并挂载包含它的卷，在挂载所有Pod的卷之前，Pod的容器都不会启动。</p><p><br><br><br></p><h4 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h4><ul><li><strong>Pod with ssh keys</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#创建包含ssh keys的秘密</span><br><span class="line">kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建引用此秘密的Pod</span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: secret-test-pod</span><br><span class="line">  labels:</span><br><span class="line">    name: secret-test</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: secret-volume</span><br><span class="line">    secret:</span><br><span class="line">      secretName: ssh-key-secret</span><br><span class="line">  containers:</span><br><span class="line">  - name: ssh-test-container</span><br><span class="line">    image: mySshImage</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: secret-volume</span><br><span class="line">      readOnly: true</span><br><span class="line">      mountPath: &quot;/etc/secret-volume&quot;</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>Pods with prod / test credentials</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create secret generic prod-db-secret --from-literal=username=produser --from-literal=password=Y4nys7f11</span><br><span class="line">secret &quot;prod-db-secret&quot; created</span><br><span class="line">$ kubectl create secret generic test-db-secret --from-literal=username=testuser --from-literal=password=iluvtests</span><br><span class="line">secret &quot;test-db-secret&quot; created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Pod中引用</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: List</span><br><span class="line">items:</span><br><span class="line">- kind: Pod</span><br><span class="line">  apiVersion: v1</span><br><span class="line">  metadata:</span><br><span class="line">    name: prod-db-client-pod</span><br><span class="line">    labels:</span><br><span class="line">      name: prod-db-client</span><br><span class="line">  spec:</span><br><span class="line">    volumes:</span><br><span class="line">    - name: secret-volume</span><br><span class="line">      secret:</span><br><span class="line">        secretName: prod-db-secret</span><br><span class="line">    containers:</span><br><span class="line">    - name: db-client-container</span><br><span class="line">      image: myClientImage</span><br><span class="line">      volumeMounts:</span><br><span class="line">      - name: secret-volume</span><br><span class="line">        readOnly: true</span><br><span class="line">        mountPath: &quot;/etc/secret-volume&quot;</span><br><span class="line">- kind: Pod</span><br><span class="line">  apiVersion: v1</span><br><span class="line">  metadata:</span><br><span class="line">    name: test-db-client-pod</span><br><span class="line">    labels:</span><br><span class="line">      name: test-db-client</span><br><span class="line">  spec:</span><br><span class="line">    volumes:</span><br><span class="line">    - name: secret-volume</span><br><span class="line">      secret:</span><br><span class="line">        secretName: test-db-secret</span><br><span class="line">    containers:</span><br><span class="line">    - name: db-client-container</span><br><span class="line">      image: myClientImage</span><br><span class="line">      volumeMounts:</span><br><span class="line">      - name: secret-volume</span><br><span class="line">        readOnly: true</span><br><span class="line">        mountPath: &quot;/etc/secret-volume&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Dotfiles in secret volume</strong><br>隐藏文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">kind: Secret</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: dotfile-secret</span><br><span class="line">data:</span><br><span class="line">  .secret-file: dmFsdWUtMg0KDQo=</span><br><span class="line">---</span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: secret-dotfiles-pod</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name: secret-volume</span><br><span class="line">    secret:</span><br><span class="line">      secretName: dotfile-secret</span><br><span class="line">  containers:</span><br><span class="line">  - name: dotfile-test-container</span><br><span class="line">    image: k8s.gcr.io/busybox</span><br><span class="line">    command:</span><br><span class="line">    - ls</span><br><span class="line">    - &quot;-l&quot;</span><br><span class="line">    - &quot;/etc/secret-volume&quot;</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: secret-volume</span><br><span class="line">      readOnly: true</span><br><span class="line">      mountPath: &quot;/etc/secret-volume&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Secret visible to one container in a pod</strong><br>考虑一个需要处理HTTP请求，执行一些复杂业务逻辑，然后使用HMAC签署一些消息的程序。由于它具有复杂的逻辑，因此可能存在未被注意的文件读取漏洞，这可能会将私钥暴露给攻击者。</p><p>这可以分为两个容器中的两个进程：</p><ul><li>前端容器处理用户交互和业务逻辑，但无法看到私钥</li><li>后端容器可查看签名的私钥，并相应来自前端的签名请求</li></ul><p><br><br><br></p><h4 id="最佳做法"><a href="#最佳做法" class="headerlink" title="最佳做法"></a>最佳做法</h4><p><strong>Clients that use the secrets API</strong></p><p>在部署与Secret API交互的应用程序时，应使用RBAC等授权策略限制访问。</p><p><br><br><br></p><h4 id="安全属性"><a href="#安全属性" class="headerlink" title="安全属性"></a>安全属性</h4><p><strong>保护</strong><br>由于可以独立于P使用秘密的Pod来创建秘密，因此在创建、查看、编辑Pod的工作流程中泄露秘密的风险较小。系统还可以对秘密对象采取额外的预防措施，如尽可能避免将其写入磁盘。<br>如果节点上的Pod需要秘密，则仅将秘密发送到节点。它不会写入磁盘，而是存储在tmpfs中(RAM)。一旦删除依赖它的Pod，它就会被删除。<br>节点上的秘密数据存储在tmpfs volume中，因此不会停留在节点上。<br>在大多数k8s项目维护的发行版中，用于与apiserver之间的通信，以及apiserver到kubelet的通信受到SSL/TLS保护。<br>同一节点上可能存在多个Pod的秘密，但是，只有Pod请求的密码可能在其容器中可见。因此，一个Pod无法访问另一个Pod的秘密。<br>同一个Pod中可能有几个容器，但是，Pod中的每个容器都必须在其<code>volumeMounts</code>中请求秘密卷，以使其在容器中可见。</p><p><br></p><p><strong>风险</strong></p><ul><li>apiserver中，秘密数据以明文形式存储在etcd中。因此：<ul><li>管理员应该限制用户对etcd的访问权限</li><li>apiserver中的秘密数据在etcd使用的磁盘上处于静止状态；管理员可能想要在不再使用时擦除etcd使用的磁盘</li></ul></li><li>如果通过json/yaml文件配置秘密，该文件的秘密数据的编码为<code>base64</code>，则该秘密可能被泄露。<code>base64</code>编码不是加密方法，被认为与纯文本相同</li><li>应用程序仍然需要在从卷读取秘密值后保护它</li><li>可创建使用秘密的Pod的用户也可看到秘密的值</li><li>如果运行了etcd的多个副本，则它们之间将共享秘密</li><li>目前，任何在节点上具有root权限的用户都可以模拟kubelet从apiserver中读取任何秘密</li></ul><p><br><br><br></p><h3 id="使用kubeconfig文件组织集群访问"><a href="#使用kubeconfig文件组织集群访问" class="headerlink" title="使用kubeconfig文件组织集群访问"></a>使用kubeconfig文件组织集群访问</h3><p>Organizing Cluster Access Using kubeconfig Files</p><p>使用<code>kubeconfig</code>文件来组织有关集群、用户、命名空间、身份验证机制的信息。<code>kubectl</code>使用kubeconfig文件来查找选择集群并与集群apiserver通信所需的信息。<br>用于配置对集群的访问的文件称为kubeconfig。这是引用配置文件的普通方法，这并不意味着有一个名为<code>kubeconfig</code>的文件。</p><p>默认情况下，<code>kubectl</code>从<code>$HOME/.kube</code>目录下查找名为<code>config</code>的文件。你可以通过<code>--kubeconfig</code>标志设置<code>KUBECONFIG</code>环境变量来指定kubeconfig文件。</p><p><br></p><h4 id="支持多集群、用户、认证机制"><a href="#支持多集群、用户、认证机制" class="headerlink" title="支持多集群、用户、认证机制"></a>支持多集群、用户、认证机制</h4><p>Supporting multiple clusters, users, and authentication mechanisms</p><p>假设你有多个集群，并且用户和组件以各种方式进行认证：</p><ul><li>正在运行的kubelet可能使用证书进行认证</li><li>用户可能使用令牌认证</li><li>管理员可能拥有他为用户提供的证书集</li></ul><p>使用kubeconfig，你可以组织集群、用户和命名空间。你还可以定义上下文，以便在集群和命名空间之间快速进行切换。</p><p><br><br><br></p><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><p>kubeconfig文件中的上下文元素用于在方便的名称下对访问参数进行分组。每个上下文都有三个参数：集群、命名空间、用户。默认情况下，<code>kubectl</code>使用从当前上下文的参数与集群通信。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Modify kubeconfig files</span><br><span class="line">kubectl config -h</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="KUBECONFIG环境变量"><a href="#KUBECONFIG环境变量" class="headerlink" title="KUBECONFIG环境变量"></a>KUBECONFIG环境变量</h4><p><code>$KUBECONFIG</code>环境变量包含kubeconfig文件列表，它不是必须的。如果不存在，则<code>kubectl</code>使用默认的<code>$HOME/.kube/config</code>；如果存在，则<code>kubectl</code>使用有效配置。在Linux/Mac上使用冒号分隔，Windows使用分号分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $KUBECONFIG</span><br><span class="line">/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="合并kubeconfig文件"><a href="#合并kubeconfig文件" class="headerlink" title="合并kubeconfig文件"></a>合并kubeconfig文件</h4><p>Merging kubeconfig files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看配置</span><br><span class="line">kubectl config view</span><br></pre></td></tr></table></figure><ul><li><p>如果设置了<code>--kubeconfig</code>标志，则仅使用指定的文件。不合并，只允许此标志的一个实例。</p></li><li><p>否则，如果设置了<code>$KUBECONFIG</code>环境变量，将其应用于合并的文件列表。遵循以下规则：</p><ul><li>忽略空文件名</li><li>对包含无法反序列化内容的文件生成错误</li><li>设置成特定值或映射见的第一个文件获胜</li><li>切勿修改值或映射键</li></ul></li><li><p>否则，使用默认的<code>$HOME/.kube/config</code>文件，不做合并</p></li></ul><p><br><br><br></p><h3 id="Pod优先级和抢占"><a href="#Pod优先级和抢占" class="headerlink" title="Pod优先级和抢占"></a>Pod优先级和抢占</h3><p>Pod Priority and Preemption</p><blockquote><p>FEATURE STATE: Kubernetes 1.8 alpha<br>FEATURE STATE: Kubernetes 1.11 beta</p></blockquote><p>Pod也有优先级，优先级表示Pod相对于其它Pod的重要性。如果无法调度Pod，则调度程序会尝试抢占(驱逐)较低优先级的Pod，以便可以处理待调度(Pending)的Pod。<br>优先级还会影响Pod的调度顺序和节点上的资源驱逐顺序。</p><p><br></p><h4 id="使用优先级和抢占"><a href="#使用优先级和抢占" class="headerlink" title="使用优先级和抢占"></a>使用优先级和抢占</h4><p>How to use priority and preemption</p><p>要在k8s v1.11+使用优先级和抢占，遵循以下步骤：</p><ul><li>添加一个或多个优先级类(PriorityClassed)</li><li>创建带有<code>priorityClassName</code>的Pod设置为添加的优先级类之一。当然，你不需要直接创建Pod，通常你只需要将<code>priorityClassName</code>添加到对象的Pod模板(如deployment)</li></ul><p><br><br><br></p><h4 id="禁用抢占"><a href="#禁用抢占" class="headerlink" title="禁用抢占"></a>禁用抢占</h4><p>How to disable preemption</p><ul><li><p>禁用Pod优先级和抢占<br>要禁用Pod优先级，请为apiserver、调度程序、kubelet将该功能设置<code>false</code>——<code>--feature-gates=PodPriority=false</code></p></li><li><p>仅禁用抢占<br>在k8s v1.11+，抢占由<code>kube-scheduler</code>的<code>disablePreemption</code>标志控制，默认设置为<code>fasle</code>。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: componentconfig/v1alpha1</span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">algorithmSource:</span><br><span class="line">  provider: DefaultProvider</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">disablePreemption: true</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="PriorityClass"><a href="#PriorityClass" class="headerlink" title="PriorityClass"></a>PriorityClass</h4><p>优先级类(priorityClass)是一个非命名空间的对象，它定义从优先级类名到优先级的整数值的映射。该名称在<code>PriorityClass</code>对象的metadata的<code>name</code>字段中指定，必须的值在<code>value</code>字段中定义。值越高，优先级越高。<br>优先级类对象可以具有小于等于10亿的任何32位整数值。较大的数字保留给通常不会被抢占或驱逐的系统Pod。集群管理员应为他们想要的每个这样的映射创建一个优先级类对象。<br>优先级类有两个可选字段：</p><ul><li><code>globalDefault</code>： 表示该优先级类的值应该用于没有<code>priorityClassName</code>的Pod，系统中只能有一个<code>globalDefault</code>为<code>true</code>的Pod。如果没有设置为<code>globalDefault</code>的优先级类，则Pod的优先级为零。</li><li><code>description</code>： 旨在告诉用户何时应该使用此优先级类</li></ul><p><br></p><p>有关PodPriority和现有集群的说明：</p><ul><li>如果升级现有集群并启用此功能，则现有的Pod的优先级实际上为零</li><li>将<code>globalDefault</code>设置为<code>true</code>的优先级类添加将不会更改现有Pod的优先级。它的值仅用于添加优先级类之后创建的Pod</li><li>如果删除优先级类，则使用已删除的优先级类名称的现有Pod保持不变，但无法创建使用已删除的优先级类名称的Pod</li></ul><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: scheduling.k8s.io/v1beta1</span><br><span class="line">kind: PriorityClass</span><br><span class="line">metadata:</span><br><span class="line">  name: high-priority</span><br><span class="line">value: 1000000</span><br><span class="line">globalDefault: false</span><br><span class="line">description: &quot;This priority class should be used for XYZ service pods only.&quot;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Pod-priority"><a href="#Pod-priority" class="headerlink" title="Pod priority"></a>Pod priority</h4><p>当有一个或多个优先级类之后，你就可以创建在spec中指定priority class name的Pod。优先级许可控制器使用<code>priorityClassName</code>字段并填充优先级的整数值。如果为找到优先级，则决绝Pod。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    env: test</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  priorityClassName: high-priority</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Pod优先级对调度顺序的影响</strong><br>启用Pod优先级后，调度程序按其优先级对挂起的Pod进行排序，并将挂起的Pod置于调度队列中优先级较低的其它挂起Pod之前。因此，如果满足调度要求，则优先级较低的Pod可以更快地安排具有较低优先级的Pod。如果无法调度此类Pod，则调度程序将继续并尝试安排其它较低优先级的Pod。</p><p><br><br><br></p><h4 id="Preemption"><a href="#Preemption" class="headerlink" title="Preemption"></a>Preemption</h4><p>创建Pod时，它们会进入队列并等待调度。调度程序从队列中选择一个Pod并尝试在节点上调度它。如果未找到满足Pod的所有指定要求的节点，则会为挂起的Pod触发抢占逻辑。抢占逻辑试图找到一个节点，其中删除优先级低于<code>Pod P</code>的一个或多个Pod，使得能够在该节点上调度<code>Pod P</code>。如果找到了此节点，则会删除那些Pod，在他们消失后，可在节点上调度<code>Pod P</code>。</p><p><br></p><p><strong>用户公开的信息</strong><br>User exposed information</p><p>当<code>Pod P</code>在节点上抢占一个或多个Pod时，<code>Pod P</code>的状态的<code>nominatedNodeName</code>字段被设置为节点的名称。该字段帮助调度器追踪为<code>Pod P</code>保留的资源，并且还向用户提供关于其集群中的抢占信息。<br>请注意，<code>Pod P</code>不一定安排到<code>nominated node</code>。在受害Pod被抢占后，它们将获得优雅的终止期。如果在调度程序等待受害Pod终止时另一个节点可用，则调度程序将使用另一个节点来调度<code>Pod P</code>。因此，Pod spec中的<code>nominatedNodeName</code>和<code>nodeName</code>并不总是相同。此外，如果调度程序在节点上抢占Pod，然后有比<code>Pod P</code>更高优先级的Pod到达，则调度程序可以将节点提供给新的更高优先级的Pod。</p><p><br></p><p><strong>抢占的局限性</strong><br>Limitations of preemption</p><ul><li>Graceful termination of preemption victims</li><li>PodDisruptionBudget is supported, but not guaranteed!</li><li>Inter-Pod affinity on lower-priority Pods</li><li>Cross node preemption</li></ul><p><br><br><br></p><h4 id="调试Pod优先级和抢占"><a href="#调试Pod优先级和抢占" class="headerlink" title="调试Pod优先级和抢占"></a>调试Pod优先级和抢占</h4><p>优先级和抢占可能会引起潜在的问题：</p><ul><li>Pods are preempted unnecessarily</li><li>Pods are preempted, but the preemptor is not scheduled</li><li>Higher priority Pods are preempted before lower priority pods</li></ul><p><br><br><br></p><h4 id="Pod优先级和QoS的交互"><a href="#Pod优先级和QoS的交互" class="headerlink" title="Pod优先级和QoS的交互"></a>Pod优先级和QoS的交互</h4><p>Interactions of Pod priority and QoS</p><p>调度程序的抢占逻辑在选择抢占目标是会考虑QoS。<br>考虑QoS和Pod优先级的唯一组件<code>kubelet out of resource</code>驱逐。kubelet首先根据他们对饥饿资源的使用是否超过请求，然后按优先级，通过相对于Pod的调度请求消耗的计算资源来排除Pod的驱逐。kubelet资源溢出驱逐不会驱逐资源使用不超过其请求的Pod。如果 优先级较低的未超过其请求，则不会被驱逐。另一个优先级高高于其请求的Pod可能被驱逐。</p><p><br><br><br><br><br></p><h2 id="服务，负载均衡和网络"><a href="#服务，负载均衡和网络" class="headerlink" title="服务，负载均衡和网络"></a>服务，负载均衡和网络</h2><p>Services, Load Balancing, and Networking</p><p><br></p><h3 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h3><p>k8s Pod是会死的，从出生到死亡，它们没有复活(resurrected)。副本集特别地动态创建和销毁Pod。虽然每个Pod都有自己的IP，但即使是那些IP也不能依赖它们随时间变得稳定。这导致一个问题，如果某些Pod为k8s集群内的其它Pod提供功能，那么它们如何找出并追踪它们呢？<br>这就需要用到服务了。</p><p>k8s 服务是一个抽象，它定义了一组逻辑Pod和一个访问它们的策略，有时称为<strong>微服务(micro-service)</strong>。服务目标的Pod由<code>Label Selector</code>来确定。</p><p>对于原生k8s应用程序，k8s提供了提供了一个简单的<code>Endpoints API</code>，只要服务中的Pod集发生变化，它就会更新。对于非原生k8s应用程序，k8s提供了一个基于虚拟IP的服务桥接器，可以重定向到后端的Pod。</p><p><br></p><h4 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h4><p>Defining a service</p><p>k8s中的服务是一个<strong>REST对象</strong>，类似于Pod。与所有REST对象一样，可以将服务定义<code>POST</code>到apiserver以创建实例。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: MyApp</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 9376</span><br></pre></td></tr></table></figure><p>此规范会创建一个名为<code>my-service</code>的服务对象，该对象使用<code>app=MyApp</code>的标签定位任何Pod上的TCP协议9376端口。服务还将分配一个IP地址(称为<code>cluster IP</code>)，由服务代理(service proxy)使用。将连续评估服务的<code>selector</code>，并将结果<code>POST</code>到名为<code>my-service</code>的<strong>Endpoints</strong>对象。<br>请注意，服务可以将传入端口映射到任何<code>targetPort</code>。默认情况下，<code>targetPort</code>将设置为与<code>port</code>字段相同的值。也许更有趣的是<code>targetPort</code>可以是一个字符串，指的是后端Pod中端口的名称。分配给该名称的实际端口号在每个后端Pod中可以不同。这为部署和发展你的服务提供了很大的灵活性。例如，你可以更改Pod的后端软件中公开的端口号，而不会破坏客户端。<br>k8s 服务支持TCP和UDP协议，默认是TCP。</p><p><br></p><p><strong>Services without selectors</strong><br>服务通常抽象访问k8s Pods，但它们也可以抽象访问其它类型的后端。例如：</p><ul><li>你希望在生产环境中拥有外部数据库集群，但在测试环境中你使用自己的数据库</li><li>你希望将服务指向另外的命名空间或集群</li><li>你正在将工作负载迁移到k8s，并且你的一些后端运行在k8s之外</li></ul><p>在任何方案中，你都可以定义不带选择器(selector)的服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure><p>由于此服务没有选择器(selector)，因此不会创建相应的Endpoints对象。你可以手动将服务映射到你自己的特定端点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kind: Endpoints</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">subsets:</span><br><span class="line">  - addresses:</span><br><span class="line">      - ip: 1.2.3.4</span><br><span class="line">    ports:</span><br><span class="line">      - port: 9376</span><br></pre></td></tr></table></figure><p>在没有选择器的情况下访问服务的工作方式与使用选择器的方式相同。流量都会被路由到定义的端点。</p><p><code>ExternalName service</code>是一种特殊的服务案例，它没有选择器并且使用DNS名称代替。</p><p><br><br><br></p><h4 id="虚拟IP和服务代理"><a href="#虚拟IP和服务代理" class="headerlink" title="虚拟IP和服务代理"></a>虚拟IP和服务代理</h4><p>Virtual IPs and service proxies</p><p>在k8s v1.0中，服务是四层构造(tcp/udp)，代理纯粹实在用户空间中。在k8s v1.1中，添加了<code>Ingress API</code>来表示七层服务(HTTP)，也添加了iptables proxy。并成为k8s v1.2的默认操作模式。在k8s v1.8.0中，添加了ipvs proxy。</p><p>k8s 集群中的每个节点都运行一个<code>kube-proxy</code>——它负责为<code>ExternalName</code>以外类型的服务实现一种形式的虚拟IP。<br>在任何这些代理模式中，绑定到服务的<code>ip:port</code>的任何流量都将代理到适当的后端，而客户端不知道有关k8s或服务或Pod的任何信息。</p><p><br></p><p><strong>Proxy-mode: userspace</strong></p><p>在<code>userspace</code>模式下，<code>kube-proxy</code>会监视k8s master以添加和删除<code>Service</code>和<code>Endpoints</code>对象。对于每个服务，它在本地节点上打开一个端口(随机选择)。与此<code>proxy port</code>的任何连接都将代理到服务后端的Pod之一，并根据服务的<code>SessionAffinity</code>决定使用哪个后端Pod。最后，它将安装iptables规则，捕获流量到服务的<code>cluster IP</code>(虚拟IP)，并将流量重定向到代理后端Pod的代理端口。默认情况下，后端的选择是轮询(round robin)。</p><p><img src="/images/K8s/service_userspace.png" alt="service_userspace"></p><p><br></p><p><strong>Proxy-mode: iptables</strong></p><p>在<code>iptables</code>模式下，<code>kube-proxy</code>会监视k8s master以添加和删除<code>Service</code>和<code>Endpoint</code>对象。对于每个服务，它将安装iptables规则，捕获流量到服务的<code>cluster IP</code>和端口，并将流量重定向到服务的后端集之一。对于每个<code>Endpoint</code>对象，它会按照选择后端Pod的iptables规则。默认情况下，后端的选择是随机的。<br>显然，iptables不需要再用户空间(userspace)和内核空间(kernelspace)之间切换，它应该比用户空间代理更快更可靠。然而，与用户空间代理不同，如果最初选择的Pod没有响应，则iptables代理无法自动重试另一个Pod，因此它依赖于<code>readiness probes</code>的工作。</p><p><img src="/images/K8s/service_iptables.png" alt="service_iptables"></p><p><br></p><p><strong>Proxy-mode： ipvs</strong></p><blockquote><p>FEATURE STATE: Kubernetes v1.9 beta</p></blockquote><p>在<code>ipvs</code>模式下，<code>kube-proxy</code>监视k8s的<code>Service</code>和<code>Endpoints</code>，调用<code>netlink</code>接口以相应地创建ipvs规则，并定期与k8s的<code>Service</code>和<code>Endpoint</code>同步ipvs规则，以确保ipvs转台与期望一致。访问服务时，流量将被重定向到其中一个后端Pod。<br>与iptables类似，ipvs基于<code>netfilter hook</code>函数，但是用<code>hash table</code>作为底层数据结构，并在内核空间中工作。这意味着ipvs可以更快地重定向流量，并且再同步代理规则时具有更好的性能。此外，ipvs为负载均衡算法提供了更多选项：</p><ul><li><code>rr</code>： round-robin</li><li><code>lc</code>： least connection</li><li><code>dh</code>： destination hashing</li><li><code>sh</code>： source hashing</li><li><code>sed</code>： shortest expected delay</li><li><code>nq</code>： never queue</li></ul><p><strong>注意：</strong>ipvs模式假设在运行<code>kube-proxy</code>之前便已在节点上安装了IPVS内核模块。当<code>kube-proxy</code>以ipvs代理模式启动时，<code>kube-proxy</code>将验证节点上是否安装了IPVS模块，如果未安装，则<code>kube-proxy</code>将回退到iptables代理模式。</p><p><img src="/images/K8s/service_ipvs.png" alt="service_ipvs"></p><p><br><br><br></p><h4 id="多端口服务"><a href="#多端口服务" class="headerlink" title="多端口服务"></a>多端口服务</h4><p>Multi-Port Services</p><p>许多服务可能需要公开多个端口。对于此情况，k8s支持服务对象上的多个端口定义。当使用多个端口时，必须提供所有端口名称，以便消除端点(Endpoint)的歧义。<br>请注意，端口名称只能包含小写字母数字和横杠<code>-</code>，并须以字母数字结尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: MyApp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    protocol: TCP</span><br><span class="line">port: 80</span><br><span class="line">targetPort: 9376</span><br><span class="line">  - name: https</span><br><span class="line">    protocol: TCP</span><br><span class="line">port: 443</span><br><span class="line">targetPort: 9377</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="选择自己的IP"><a href="#选择自己的IP" class="headerlink" title="选择自己的IP"></a>选择自己的IP</h4><p>Choosing your own IP address</p><p>你可以将自己的<code>cluster ip</code>指定为服务创建请求的一部分。为此，请设置<code>.spec.clusterIP</code>字段。用户选择的IP地址必须是有效的IP地址，并且在apiserver的标志指定的service-cluster-ip-range CIDR范围内。如果IP地址无效，则apiserver返回422 HTTP statuscode以指示该值无效。</p><p><br></p><p><strong>为什么不适用DNS轮询？</strong><br>Why not use round-robin DNS?</p><p>为什么我们使用虚拟IP来完成所有这些工作，而不仅仅是标准的DNS轮询。原因如下：</p><ul><li>DNS libraries的历史悠久，不尊重DNS TTL并缓存名称的查找结果</li><li>许多应用程序执行一次DNS查找并缓存结果</li><li>即使应用程序和库进行了适当的重新解析，每个客户算反复重新解析DNS的负载也是难以管理的</li></ul><p>我们试图阻止用户做出伤害自己的事情。也就是说，如果有足够的人要求这样做，我们可以将其作为替代方案来实施。</p><p><br><br><br></p><h4 id="服务发现-1"><a href="#服务发现-1" class="headerlink" title="服务发现"></a>服务发现</h4><p>Discovering services</p><p>k8s支持两种寻找服务的主要模式： <code>enviroment variables</code>和<code>DNS</code>。</p><p><br></p><p><strong>Environment variables</strong><br>当Pod在节点上运行时，kubelet为每个活跃的服务添加一组环境变量。它支持<code>Docker links compatible</code>变量和更简单的<code>{SVCNAME}_SERVICE_HOST</code>和<code>{SVCNAME}_SERVICE_PORT</code>变量。</p><p>栗子，如<code>redis-master</code>服务公开TCP6379端口，并分配了<code>10.0.0.11</code>的<code>cluster ip</code>以生成如下环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REDIS_MASTER_SERVICE_HOST=10.0.0.11</span><br><span class="line">REDIS_MASTER_SERVICE_PORT=6379</span><br><span class="line">REDIS_MASTER_PORT=tcp://10.0.0.11:6379</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP=tcp://10.0.0.11:6379</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_PROTO=tcp</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_PORT=6379</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_ADDR=10.0.0.11</span><br></pre></td></tr></table></figure><p>这有一个要求——必须在Pod本身之前创建它想要访问的任何服务，否则将不会填充环境变量。DNS没有此限制。</p><p><br></p><p><strong>DNS</strong><br>可选的集群加载项是DNS server(强烈推荐)。DNS server监视k8s API以获取新服务，并为每个服务创建一组DNS 记录。如果已在集群中启用DNS，则所有Pod应该能够自动对服务进行名称解析。</p><p>例如，如果你在k8s命名空间<code>my-ns</code>中创建一个服务<code>my-service</code>，则会创建<code>my-service.my-ns</code>的DNS记录。存在于<code>my-ns</code>命名空间中的Pod应该能够通过简单地对<code>my-service</code>服务进行名称查找来找到它。存在于其它命名空间的Pod必须将名称限定为<code>my-service.my-ns</code>。这些名称查找的结果是<code>cluster ip</code>。<br>k8s还支持命名端口的DNS SRV(service)记录。如果<code>my-service.my-ns</code>服务具有带有TCP协议的名为<code>http</code>的端口，则可以对<code>_http._tcp.my-service.my-ns</code>执行DNS SRV查询以发现<code>http</code>的端口号。<br>k8s DNS server是访问<code>ExternalName</code>类型的服务的唯一方法。</p><p><br><br><br></p><h4 id="Headless-services"><a href="#Headless-services" class="headerlink" title="Headless services"></a>Headless services</h4><p>有时你不需要或不想要负载均衡和单个服务IP。在这种情况下，你可以通过将clusterIP(.spec.clusterIP)指定为<code>None</code>来创建一个<code>headless</code>服务。<br>此选项允许开发人员通过允许他们自由地以自己的方式进行发现来减少与k8s系统的耦合。应用程序仍然可以使用自注册(self-registration)模式，并且可以轻松地在API上构建适用于其它发现系统的适配器。</p><p>对于此类服务，并未分配clusterIP，<code>kube-proxy</code>也不处理这些服务，并且平台没有为它们执行负载均衡和代理。如何自动配置DNS取决于服务是否已定义选择器(selector)：</p><p><strong>With selectors</strong><br>对于定义了选择器的headless服务，端点控制器(endpoints controller)在API中创建端点记录(Endpoint records)，并修改DNS配置以返回直接指向支持服务的Pod的A记录(地址)。</p><p><strong>Without selectors</strong><br>对于没有定义选择器的headless服务，端点控制器不会创建端点记录。但是，DNS系统会查找并配置下面任一项；</p><ul><li><code>ExternalName</code>类型的服务的CNAME记录</li><li>所有其它类型的，与服务共享名称的任何端点记录</li></ul><p><br><br><br></p><h4 id="发布服务和服务类型"><a href="#发布服务和服务类型" class="headerlink" title="发布服务和服务类型"></a>发布服务和服务类型</h4><p>Publishing services - service types</p><p>对于应用程序的某些部分(如前端)，你可能希望将服务公开到外部IP地址(集群外)。<br>k8s <code>ServiceTypes</code>允许你指定所需的服务类型，默认为<code>ClusterIP</code>。</p><p>类型如下：</p><ul><li><p><code>ClusterIp</code><br>在集群内部IP上公开服务，选择此值使服务只能从集群内访问。这是默认的服务类型。</p></li><li><p><code>NodePort</code><br>在每个节点IP的静态端口上公开服务。将自动创建<code>cluster ip</code>服务(NodePort服务将路由到此服务)。你可以在集群外部通过请求<code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code>来联系<code>NodePort</code>服务</p></li><li><p><code>LoadBalancer</code><br>使用云提供商的负载均衡器在外部公开服务。将自动创建外部负载均衡器路由到<code>NodePort</code>服务和<code>ClusterIP</code>服务。</p></li><li><p><code>ExternalName</code><br>通过返回CNAME记录的值，将服务映射到<code>externalName</code>字段的内容。没有设置任何类型的代理。这需要<code>kube-dns v1.7+</code>。</p></li></ul><p><br><br><br></p><h5 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h5><p><code>NodePort</code>类型下，k8s master将从<code>--service-node-port-range</code>标志指定的范围(默认 30000-32767)分配端口，(当然，你也可以在此范围了自定义)，并且每个节点将代理进入服务的端口(每个节点上的端口号相同)。服务中的<code>.spec.ports[].nodePort</code>字段。</p><p>如果要制定代理端口的特定IP，可将<code>kube-proxy</code>中的<code>--nodeport-addresses</code>标志 设置为特定IP块(从k8s v1.10+支持)。使用逗号<code>,</code>分隔IP块列表(如<code>10.0.0.0/8,1.2.3.4/31</code>)用于过滤此节点的本地地址。例如，如果你使用<code>--nodeport-address=127.0.0.0/8</code>标志启动<code>kube-proxy</code>，则<code>kube-proxy</code>将仅为NodePort服务选择环回地址接口(loopback)。<code>--nodeport-address</code>默认为空，这意味着选择所有可用的接口并符合当前的NodePort行为。</p><p>如果你需要特定的端口号，可以在<code>nodePort</code>字段中指定一个值，系统将为你分配该端口。请注意，指定的端口值必须在默认范围内，且没有端口冲突。</p><p>请注意，服务将同时显示<code>&lt;NodeIP&gt;:spec.ports[*].nodePort</code>和<code>.spec.clusterIP:spec.ports[*].port</code>。</p><p><br><br><br></p><h5 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h5><p>在支持外部负载均衡器的云提供商上，将<code>type</code>字段设置为<code>LoadBalancer</code>将为服务配置负载均衡器。负载均衡器的实际创建是异步(asynchronously)发生的，有关已配置的均衡器的信息将发布在服务的<code>.status.loadBalancer</code>字段。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: MyApp</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 9376</span><br><span class="line">  clusterIP: 10.0.171.239</span><br><span class="line">  loadBalancerIP: 78.11.24.19</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">status:</span><br><span class="line">  loadBalancer:</span><br><span class="line">    ingress:</span><br><span class="line">    - ip: 146.148.47.155</span><br></pre></td></tr></table></figure><p>来自外部负载均衡器的流量将指向后端Pod，但具体如何工作取决于云提供商。某些云提供商允许指定<code>loaBalancerIP</code>。在这些情况下，将使用用户指定的<code>loadBalancerIP</code>创建负载均衡器。如果未指定<code>loadBalancerIP</code>字段，则将为负载均衡器分配临时IP。如果指定了<code>loadBalancerIP</code>字段，但云提供商不支持该功能，则该字段被忽略。</p><p><br></p><p>一些云提供商：</p><ul><li>AWS</li><li>Azure</li><li>GCP</li><li>Aliyun</li><li>TencentCloud</li></ul><p><br><br><br></p><h5 id="ExternalName"><a href="#ExternalName" class="headerlink" title="ExternalName"></a>ExternalName</h5><blockquote><p>NOTE: ExternalName Services are available only with kube-dns version 1.7 and later.</p></blockquote><p><code>ExternalName</code>类型的服务将服务映射到DNS名称(使用<code>spec.externalName</code>)，而不是映射到传统的选择器(如my-service)。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">  namespace: prod</span><br><span class="line">spec:</span><br><span class="line">  type: ExternalName</span><br><span class="line">  externalName: my.database.example.com</span><br></pre></td></tr></table></figure><p>查找主机<code>my-service.prod.svc.CLUSTER</code>时，集群DNS服务将返回<code>my.database.example.com</code>的CNAME记录。访问<code>my-service</code>服务的工作方式与其它服务的工作方式相同，但重要的区别在于重定向发生在DNS级别，而不是通过代理或转发。</p><p><br><br><br></p><h5 id="External-IPs"><a href="#External-IPs" class="headerlink" title="External IPs"></a>External IPs</h5><p>如果有外部IP路由到一个或多个集群节点，则可以在这些<code>externalIPs</code>上公开k8s 服务。在服务端口上使用外部IP，进入集群的流量将路由到其中一个服务端点。外部IP不由k8s管理，它是集群管理员的责任。</p><p>栗子；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">MyApp</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">9376</span></span><br><span class="line"><span class="attr">  externalIPs:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">80.11</span><span class="number">.12</span><span class="number">.10</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><p>Shortcomings</p><p>使用虚拟IP(VIP)的用户空间(userspace)将在中小规模(small to medium scale)上工作，但不会扩展到具有成千上万个服务的大集群中。</p><p>使用用户空间代理会模糊访问服务的数据包的源IP，这使得某些类型的防火墙变得不可能。iptabels代理不会掩盖集群内源IP，但它仍然会影响通过负载均衡器或节点端口的客户端。</p><p><code>Type</code>字段设置为嵌套功能——每个级别都添加到前一个级别。并非所有云服务商都严格要求这样做，但目前的API需要它。</p><p><br><br><br></p><h4 id="VIP细节"><a href="#VIP细节" class="headerlink" title="VIP细节"></a>VIP细节</h4><p>The gory details of virtual IPs</p><ul><li><strong>避免冲突(Avoiding collisions)</strong><br>k8s的主要哲学之一是用户不应该暴露可能导致他们的行为失败的情况，而不是他们自己的过错。在这种情况下，我们查看网络端口——用户不应该选择可能与另一个用户发生冲突的网络端口。这叫隔离失败。<br>为了允许用户为服务选择端口号，我们必须确保没有服务间的冲突。我们通过为每个服务分配IP地址来做到这一点。</li></ul><p>为了确保每个服务都接收到一个唯一的IP，内部分配器会在创建每个服务之前以原子方式更新etcd中的全局分配映射。映射对象必须存在于映射表中以获取IP，否则创建将失败并显示一条消息，指示无法分配IP。后台控制器负责创建该映射以及由于管理员的干预而检查无效的分配，并清除已分配但当前没有服务使用的任何IP。</p><p><br></p><ul><li><strong>IPs和VIPs</strong><br>与实际路由到目的地的Pod IP不同，Service IP实际上并未由单个主机应答。相反，我们使用<code>iptables</code>来定义根据需要透明重定向的虚拟IP。当客户端连接到VIP时，其流量会自动传输到适当的端点。服务的环境变量和DNS实际上是根据服务的VIP和端口填充的。<br>支持三种代理模式： userspace、iptables、ipvs，它们的操作略有不同。</li></ul><p><br><br><br></p><h4 id="API对象-1"><a href="#API对象-1" class="headerlink" title="API对象"></a>API对象</h4><p>服务在k8s REST API中是顶级资源。</p><p><br><br><br></p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS for Services and Pods</p><p><br></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>k8s DNS在集群上调度DNS Pod和Service，并配置kubelet以告知各个容器使用DNS Service’s IP 来解析DNS名称。<br>集群中定义的每个服务(包括DNS服务自身)，都会分配一个DNS名称。默认情况下，客户端Pod的DNS搜索列表将包含Pod自己的命名空间和集群的默认域。</p><p>栗子：<br>假设在k8s的<code>bar</code>命名空间中有一个<code>foo</code>服务，运行在<code>bar</code>命名空间中的Pod可通过简单地为<code>foo</code>执行DNS查询来查找此服务。运行在<code>quux</code>命名空间中的Pod可通过<code>foo.bar</code>执行DNS查询来查找此服务。</p><p><br><br><br></p><h4 id="Services-1"><a href="#Services-1" class="headerlink" title="Services"></a>Services</h4><p><strong>A records</strong><br>正常的服务(非headless)都分配了一个名为<code>my-svc.my-namespace.svc.cluster.local</code>形式的DNS A记录，这将解析为服务的<code>cluster ip</code>。<br><code>Headless</code>服务同样分配了一个名为<code>my-svc.my-namespace.svc.cluster.local</code>形式的DNS A记录。与服务不同，这将解析为服务选择的Pod的IP。</p><p><br></p><p><strong>SRV records</strong><br>为命名端口创建SRV记录，这些端口是普通服务或headless服务的一部分。<br>对于每个命名端口，SRV记录的格式为<code>_my-port-name._my-port-protocol.my-svc.my-namespace.svc.cluster.local</code>；<br>对于常规的服务，这将解析为端口号和域名：<code>my-svc.my-namespace.svc.cluster.local</code>；<br>对于headless服务，这将解析为多个答案。一个用于支持服务的每个Pod，并且包含Pod形式的端口号和域名:<code>auto-generated-name.my-svc.my-namespace.svc.cluster.local</code>。</p><p><br><br><br></p><h4 id="Pods-1"><a href="#Pods-1" class="headerlink" title="Pods"></a>Pods</h4><p><strong>A records</strong><br>启用后，将以<code>pod-ip-address.my-namespace.pod.cluster.local</code>的形式为Pod分配DNS A记录。如<code>10-0-1-11.default.pod.cluster.local</code>。</p><p><br></p><p><strong>Pod’s hostname and subdomain fields</strong><br>目前，当创建Pod时，其主机名时Pod的<code>metadata.name</code>值。Pod spec有一个可选的<code>hostname</code>字段，可用于指定Pod的主机名。指定后，它优先于Pod的名称作为Pod的主机名。<br>Pod spec同样有一个可选的<code>subdomain</code>字段，可用于指定其子域。</p><p>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">default-subdomain</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">1234</span></span><br><span class="line"><span class="attr">targetPort:</span> <span class="number">1234</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  nam:</span> <span class="string">busybox1</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">busybox-1</span></span><br><span class="line"><span class="attr">  subdomain:</span> <span class="string">default-subdomain</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">'3600'</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">busybox2</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">busybox-2</span></span><br><span class="line"><span class="attr">  subdomain:</span> <span class="string">default-subdomain</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">sleep</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"3600"</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">busybox</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Pod’s DNS Policy</strong><br>可以基于每个Pod设置DNS策略。目前，k8s支持以下特定于Pod的DNS策略。这些策略在Pod spec中的<code>dnsPolicy</code>字段中指定。</p><ul><li><p><code>Default</code><br>Pod从Pod的节点继承名称解析配置。</p></li><li><p><code>ClusterFirst</code><br>任何与配置的集群域后缀名称不匹配的DNS查询，都会转发到从该节点继承的上游名称服务器。集群管理员可能配置了额外的存根域和上游DNS server。<br>注意<code>Default</code>不是默认的DNS策略，如果未指定DNS策略，则使用<code>ClusterFirst</code>。</p></li><li><p><code>ClusterFirstWithHostNet</code><br>对于使用hostNetwork运行的Pod，你应该明确设置其DNS策略为<code>ClusterFirstWithHostNet</code>。</p></li><li><p><code>None</code><br>k8s v1.9+中引入的新功能。它允许Pod忽略k8s环境中的DNS设置。应该使用DNS spec中的<code>dnsConfig</code>字段提供所有的DNS设置。</p></li></ul><p><br></p><p><strong>Pod’s DNS Config</strong><br>要启用此功能，集群管理员需要在apiserver和kubelet上启用<code>--feature-gates=CustomPodDNS=true,...</code>。之后，用户便可以将Pod的<code>dnsPolicy</code>字段设置为<code>None</code>，并可以将新字段<code>dnsConfig</code>添加到Pod spec中。</p><p><code>dnsConfig</code>字段是可选的，它可与任何<code>dnsPolicy</code>设置一起使用。但是，当Pod的<code>dnsPolicy</code>字段设置为<code>None</code>时，必须指定<code>dnsConfig</code>字段。</p><p>用户可在<code>dnsConfig</code>字段中指定的属性：</p><ul><li><p><code>nameservers</code><br>用作Pod的DNS服务器的IP地址列表，最多可以指定3个IP地址。当<code>dnsPolicy</code>设置为<code>None</code>时，必须至少包含一个IP地址，否则此属性是可选的。</p></li><li><p><code>searches</code><br>Pod中主机名查找的DNS搜索域列表，此属性是可选的。k8s最多允许6个搜索域。</p></li><li><p><code>options</code><br>一个可选的对象属性，其中每个对象有<code>name(必须): value(可选)</code>。</p></li></ul><p>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">dns-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  dnsPolicy:</span> <span class="string">"None"</span></span><br><span class="line"><span class="attr">  dnsConfig:</span></span><br><span class="line"><span class="attr">    nameservers:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line"><span class="attr">    searches:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ns1.svc.cluster.local</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">my.dns.search.suffix</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">ndots</span></span><br><span class="line"><span class="attr">        value:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">edns0</span></span><br></pre></td></tr></table></figure><p>查看:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it -- cat /etc/resolv.conf</span><br><span class="line">nameserver 1.2.3.4</span><br><span class="line">search ns1.svc.cluster.local my.dns.search.suffix</span><br><span class="line">options ndots:2 edns0</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="连接应用与服务"><a href="#连接应用与服务" class="headerlink" title="连接应用与服务"></a>连接应用与服务</h3><p>Connecting Applications with Services</p><p>现在你拥有了一个连续运行的副本应用程序，你可以在网络上公开它。在讨论k8s网络方法之前，值得将它与Docker的方式进行对比。<br>默认情况下，Docker使用<code>host-private</code>网络，因此只有当容器位于同一台主机上时，容器才能与其它容器进行通信。为了使Docker容器能够跨节点通信，必须在主机的IP地址上分配端口，然后将这些端口转发或代理到容器。这意味着容器要小心协调它们使用的端口。<br>k8s假设Pod可与其它Pod通信，无论它们着落在哪个主机。我们为每个Pod提供了集群专用IP，因此无需在Pod之间明确创建链接，或将容器端口映射到主机端口。这意味着Pod中的容器都可以在localhost上到达彼此的端口，并且集群中的所有Pod都可以在没有NAT的情况下看到对方。</p><p><br></p><h4 id="将Pod公开给集群"><a href="#将Pod公开给集群" class="headerlink" title="将Pod公开给集群"></a>将Pod公开给集群</h4><p>Exposing pods to the cluster</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>Creating a Service</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">my-nginx</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h4><p>Accessing the Service</p><ul><li>Environment Variables</li><li>DNS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec &lt;pod&gt; -- printenv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get services kube-dns --namespace=kube-system</span><br></pre></td></tr></table></figure><p><br></p><h4 id="服务安全"><a href="#服务安全" class="headerlink" title="服务安全"></a>服务安全</h4><p>Securing the Service</p><p>在将服务公开到因特网之前，你需要确保通信渠道是安全的。你需要：</p><ul><li>https签名证书</li><li>使用证书的nginx server</li><li>使证书可供Pod访问的secret</li></ul><p><br></p><h4 id="公开服务"><a href="#公开服务" class="headerlink" title="公开服务"></a>公开服务</h4><p>Exposing the Service</p><ul><li>NodePort</li><li>LoadBalancer</li></ul><p><br><br><br></p><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>管理集群中外部访问服务的API对象，通常是HTTP。<br>Ingress(入口)可以提供负载均衡，SSL终止和基于名称的虚拟主机。</p><p><br></p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>Terminology</p><ul><li>Node</li><li>Cluster</li><li>Edge router</li><li>Cluster network</li><li>Service</li></ul><p><br></p><h4 id="Ingress是什么"><a href="#Ingress是什么" class="headerlink" title="Ingress是什么"></a>Ingress是什么</h4><p>通常，服务和Pod具有的IP仅可在集群网络路由。最终在边缘路由器上的所有流量都被丢弃或转发到其它地方。从概念上讲，这可能看起来像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  internet</span><br><span class="line">      |</span><br><span class="line">------------</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><p>Ingress是一组允许访问连接到达集群服务的一组规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><p>它可以配置为微服务提供外部可访问的URL，负载均衡流量、ssl terminate、基于名称的虚拟主机等。用户通过POST ingress资源到api-server来请求ingress。Ingress Controller负责完成ingress，通常使用负载均衡器(loadbalancer)，但也可配置为edge router或其它前端以帮助以HA方式处理流量。</p><p><br><br><br></p><h4 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h4><p>Prerequisites</p><p>在开始使用ingress资源之前，你应该了解一些事项。Ingress是<code>beta resource</code>，在k8s v1.1 之前的版本中都没有。你需要一个<code>ingress controller</code>来满足Ingress，简单地创建资源将无法生效。<br>GCE/Google Kubernetes Engine在<code>master</code>上部署<code>ingress controller</code>。你可以在Pod中部署任意数量的自定义入口控制器。你必须使用适当的class对每个入口进行注释。在GCE/google kubernetes engine以外的环境中，你需要将ingress controller部署为Pod。</p><p><br><br><br></p><h4 id="Ingress资源"><a href="#Ingress资源" class="headerlink" title="Ingress资源"></a>Ingress资源</h4><p>一个最小化的Ingress看起来如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-ingress</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#ingress spec需要配置负载均衡器或代理服务器所需的信息</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/testpath</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>如果尚未配置ingress controller，则将此操作发送到api-verser将不起作用。</p><p>和其它k8s配置一样，Ingress也需要<code>apiVersion</code>, <code>kind</code>, <code>metadata</code>, <code>spec</code>字段。<br>Ingress spec字段需要配置负载均衡器和代理服务器所需的所有信息。最重要的是，它包含与所有传入请求匹配的规则列表。目前，Ingress仅支持http规则。<br>每个http rule都包含如下信息： <code>a host</code>，默认值为<code>*</code>；与后端挂念的一组<code>path</code>列表。在负载均衡器将流量定向到后端之前，host和path都必须与传入请求的内容匹配。<br>后端(backend)是一个<code>service:port</code>的组合。入口流量通常直接发送到与后端匹配的端点(endpoint)。<br>实例中没有包含Ingress的全局参数(global patameters)，详情请查看文档。</p><p><br><br><br></p><h4 id="Ingress-controllers"><a href="#Ingress-controllers" class="headerlink" title="Ingress controllers"></a>Ingress controllers</h4><p>为了使ingress资源正常工作，集群必须运行ingress controller——这与其它类型的控制器不同，后者通常为<code>kube-controller-manager</code>程序的一部分，并且通常作为集群创建的一部分而自启动。选择最适合你的集群的ingress controller。</p><ul><li><p>k8s目前支持和维护GCE和Nginx控制器<br>GCE: <a href="https://github.com/kubernetes/ingress-gce/blob/master/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-gce/blob/master/README.md</a></p></li><li><p>F5 BIG-IP Controller for Kubernetes<br>链接： <a href="http://clouddocs.f5.com/products/connectors/k8s-bigip-ctlr/latest" target="_blank" rel="noopener">http://clouddocs.f5.com/products/connectors/k8s-bigip-ctlr/latest</a></p></li><li><p>Kong Ingress Controller for Kubernetes<br>链接： <a href="https://konghq.com/blog/kubernetes-ingress-controller-for-kong/" target="_blank" rel="noopener">https://konghq.com/blog/kubernetes-ingress-controller-for-kong/</a></p></li><li><p>Traefik<br>Traefik: <a href="https://github.com/containous/traefik" target="_blank" rel="noopener">https://github.com/containous/traefik</a><br>Containous: <a href="https://containo.us/services" target="_blank" rel="noopener">https://containo.us/services</a></p></li><li><p>NGINX Ingress Controller for Kubernetes<br>链接: <a href="https://www.nginx.com/products/nginx/kubernetes-ingress-controller/" target="_blank" rel="noopener">https://www.nginx.com/products/nginx/kubernetes-ingress-controller/</a><br>github: <a href="https://github.com/jcmoraisjr/haproxy-ingress" target="_blank" rel="noopener">https://github.com/jcmoraisjr/haproxy-ingress</a></p></li><li><p>HAProxy Ingress Controller for Kubernetes<br>链接： <a href="https://www.haproxy.com/blog/haproxy_ingress_controller_for_kubernetes/" target="_blank" rel="noopener">https://www.haproxy.com/blog/haproxy_ingress_controller_for_kubernetes/</a></p></li><li><p>基于<strong>istio</strong>的<strong>Control Ingress Traffic</strong><br>istio: <a href="https://istio.io/" target="_blank" rel="noopener">https://istio.io/</a><br>链接: <a href="https://istio.io/docs/tasks/traffic-management/ingress/" target="_blank" rel="noopener">https://istio.io/docs/tasks/traffic-management/ingress/</a></p></li></ul><p><br><br><br></p><p>####Ingress的类型</p><p><br></p><h5 id="Single-Service-Ingress"><a href="#Single-Service-Ingress" class="headerlink" title="Single Service Ingress"></a>Single Service Ingress</h5><p>现有的k8s概念允许你公开单个服务，但你也可以通过Ingress指定不使用规则的默认后端。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  backend:</span></span><br><span class="line"><span class="attr">    serviceName:</span> <span class="string">testsvc</span></span><br><span class="line"><span class="attr">    servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line">kubectl create -f</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get ingress test-ingress</span><br><span class="line">NAME           HOSTS     ADDRESS           PORTS     AGE</span><br><span class="line">test-ingress   *         107.178.254.228   80        59s</span><br><span class="line">#107.178.254.228是ingress controller为满足此Ingress而分配的IP</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Simple-fanout"><a href="#Simple-fanout" class="headerlink" title="Simple fanout"></a>Simple fanout</h5><p>如前所述，k8s中Pod只能在集群内网络上看到IP，因此我们需要在边缘处接收入口流量并将其代理到正确的端点。该组件通常是高可用的负载均衡器。Ingress允许你将负载均衡器的数量将至最低。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo.bar.com -&gt; 178.91.123.132 -&gt; / foo    s1:80</span><br><span class="line">                                 / bar    s2:80</span><br></pre></td></tr></table></figure><p>需要一个Ingress，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">foo.bar.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/foo</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">s1</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/bar</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">s2</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f xxx</span><br><span class="line">kubectl describe ingress test</span><br><span class="line"></span><br><span class="line">Name:             test</span><br><span class="line">Namespace:        default</span><br><span class="line">Address:          178.91.123.132</span><br><span class="line">Default backend:  default-http-backend:80 (10.8.2.3:8080)</span><br><span class="line">Rules:</span><br><span class="line">  Host         Path  Backends</span><br><span class="line">  ----         ----  --------</span><br><span class="line">  foo.bar.com</span><br><span class="line">               /foo   s1:80 (10.8.0.90:80)</span><br><span class="line">               /bar   s2:80 (10.8.0.91:80)</span><br><span class="line">Annotations:</span><br><span class="line">  nginx.ingress.kubernetes.io/rewrite-target:  /</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason  Age                From                     Message</span><br><span class="line">  ----     ------  ----               ----                     -------</span><br><span class="line">  Normal   ADD     22s                loadbalancer-controller  default/test</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Name-based-virtual-hosting"><a href="#Name-based-virtual-hosting" class="headerlink" title="Name based virtual hosting"></a>Name based virtual hosting</h5><p>基于名称的虚拟主机对同一IP地址使用多个主机名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo.bar.com --|                 |-&gt; foo.bar.com s1:80</span><br><span class="line">              | 178.91.123.132  |</span><br><span class="line">bar.foo.com --|                 |-&gt; bar.foo.com s2:80</span><br></pre></td></tr></table></figure><p>如下的Ingress告诉后端负载均衡器根据Host Header来路由请求：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">foo.bar.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">s1</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">bar.foo.com</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">s2</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>default backend</strong>： 没有指定规则的Ingress将所有流量发送到单个默认后端。你可以使用相同的技术来指定一组规则和默认后端来告诉负载均衡器在哪里找到网站的404页面。如果Ingress中的所有主机都与请求Header中的主机不匹配，并且没有任何路径与请求的URL匹配，则流量将路由到你的默认后端。</p><p><br></p><h5 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h5><p>可以通过指定包含TSL私钥和证书的机密来保护Ingress。目前，Ingress仅支持单个TLS 443端口。TLS Secret必须包含名为<code>tls.crt</code>和<code>tls.key</code>的证书和密钥：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">tls.crt:</span> <span class="string">base64</span> <span class="string">encoded</span> <span class="string">cert</span></span><br><span class="line">  <span class="string">tls.key:</span> <span class="string">base64</span> <span class="string">encoded</span> <span class="string">key</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">testsecret</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br></pre></td></tr></table></figure><p>在Ingress中引用secret将此告知ingress controller：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="literal">no</span><span class="bullet">-rules-map</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  tls:</span></span><br><span class="line"><span class="attr">  - secretName:</span> <span class="string">testsecret</span></span><br><span class="line"><span class="attr">  backend:</span></span><br><span class="line"><span class="attr">    serviceName:</span> <span class="string">s1</span></span><br><span class="line"><span class="attr">    servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>请注意，各种ingress controller支持的TLS功能存在差异性。</p><p><br></p><h5 id="Loadbalancing"><a href="#Loadbalancing" class="headerlink" title="Loadbalancing"></a>Loadbalancing</h5><p>ingress controller通过一些适用于所有Ingress的负载均衡策略设置进行引导(bootstrapped)，一些高级 的负载均衡概念(持久会话、动态权重)尚未通过Ingress进行公开。但你仍然可以通过服务负载均衡器获得这些功能。</p><p><br><br><br></p><h4 id="更新Ingress"><a href="#更新Ingress" class="headerlink" title="更新Ingress"></a>更新Ingress</h4><ul><li>直接更新资源</li><li>更新配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#直接更新资源</span><br><span class="line">kubectl edit ingress test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新修改的配置文件</span><br><span class="line">kubectl replace -f xxx</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h4><ul><li>各种模式的HTTPS/TLS支持</li><li>通过声明请求IP或Hostname</li><li>结合L4和L7 Ingress</li><li>更多ingress controller</li></ul><p><br><br><br></p><h4 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives"></a>Alternatives</h4><p>有多种方式公开服务：</p><ul><li>LoadBalancer</li><li>NodePort</li><li>Port Proxy</li></ul><p><br><br><br></p><h3 id="LoadBalancer-NodePort-Ingress比较"><a href="#LoadBalancer-NodePort-Ingress比较" class="headerlink" title="LoadBalancer/NodePort/Ingress比较"></a>LoadBalancer/NodePort/Ingress比较</h3><p>参考: <a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0" target="_blank" rel="noopener">Kubernetes NodePort vs LoadBalancer vs Ingress? When should I use what?</a></p><p>这几种服务类型的优缺点，以及什么时候使用它们。</p><p><br></p><p><strong>Cluster IP</strong><br><code>Cluster IP</code>是默认的k8s服务，它提供集群内部的访问，外部无法访问。<br>但你可以使用<code>kubernetes proxy</code>来访问它。</p><p>什么时候使用：</p><ul><li>调试服务</li><li>内部访问就可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#开启proxy</span><br><span class="line">kubectl proxy --port=8080</span><br><span class="line"></span><br><span class="line">#访问资源</span><br><span class="line">http://localhost:8080/api/v1/proxy/namespaces/&lt;NAMESPACE&gt;/services/&lt;SERVICE-NAME&gt;:&lt;PORT-NAME&gt;/</span><br></pre></td></tr></table></figure><p><img src="/images/K8s/kubernetes-proxy.png" alt=""></p><p><br></p><p><strong>NodePort</strong><br><code>NodePort</code>是公开服务的最原始的方式。</p><p>什么时候使用？此方法有许多缺点：</p><ul><li>每个端口只能有一个服务</li><li>默认端口范文<code>30000-32767</code></li><li>如果节点IP地址发生更改，则需要处理该问题</li><li>由于这些原因，不建议在生产环境使用这种方法</li></ul><p><img src="/images/K8s/kubernetes-nodeport.png" alt=""></p><p><br></p><p><strong>LoadBalancer</strong><br><code>LoadBalancer</code>是公开服务的标准方式。</p><p>什么时候用：</p><ul><li>指定端口上的所有流量都被转发到该服务，没有过滤、路由等。这意味着你可以发送任何类型的流量，如HTTP, TCP, UDP, Websocket, gRPC…</li><li>最大的缺点，你必须为每一个公开的服务使用一个负载均衡器，这个负载均衡器公开的服务都将获得自己的IP，这可能会付出比较大的代价</li></ul><p><img src="/images/K8s/kubernetes-loadbalancer.png" alt=""></p><p><br></p><p><strong>Ingress</strong><br>与以上方式不同，Ingress不是一种服务。相反，它位于多个服务之前，充当集群中的入口。<br>你可以使用Ingress做很多不同的事，并且有许多类型的 ingress controller，具有不同的功能。</p><p>什么时候用：</p><ul><li>Ingress可能是公开服务最强大的方式，但也可能是最复杂的</li><li>如果你希望在相同的IP下公开多个服务，则Ingress是最有用的</li></ul><p><img src="/images/K8s/kubernetes-ingress.png" alt=""></p><p><br><br><br></p><h3 id="网络策略"><a href="#网络策略" class="headerlink" title="网络策略"></a>网络策略</h3><p>Network Policies</p><p>网络策略是允许容器组如何与彼此以及其它网络端点通信的规范。<br><code>NetworkPolicy</code>资源使用<code>labels</code>选择Pod并定义规则，这些规则指定允许选定的Pod的流量。</p><p><br></p><h4 id="先决条件-1"><a href="#先决条件-1" class="headerlink" title="先决条件"></a>先决条件</h4><p>网络策略由网络插件来实现，因此你必须使用支持<code>NetworkPolicy</code>的网络解决方案——简单地创建资源而没有控制器来实现它将不起作用。</p><p><br><br><br></p><h4 id="Isolated-and-Non-isolated-Pods"><a href="#Isolated-and-Non-isolated-Pods" class="headerlink" title="Isolated and Non-isolated Pods"></a>Isolated and Non-isolated Pods</h4><p>默认情况下，Pod是非隔离的(non-isolated)。它们接受任何来源的流量。<br>可选择<code>NetworkPolicy</code>来隔离Pod，一旦命名空间中任何<code>NetworkPolicy</code>选择了特定的Pod，该Pod将拒绝网络策略不允许的任何连接。</p><p><br><br><br></p><h4 id="NetworkPolicy资源"><a href="#NetworkPolicy资源" class="headerlink" title="NetworkPolicy资源"></a>NetworkPolicy资源</h4><p>The NetworkPolicy Resource</p><p>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-network-policy</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  podSelector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      role:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">  policyTypes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Ingress</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Egress</span></span><br><span class="line"><span class="attr">  ingress:</span></span><br><span class="line"><span class="attr">  - from:</span></span><br><span class="line"><span class="attr">    - ipBlock:</span></span><br><span class="line"><span class="attr">        cidr:</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">        except:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="number">172.17</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">    - namespaceSelector:</span></span><br><span class="line"><span class="attr">        matchLabels:</span></span><br><span class="line"><span class="attr">          project:</span> <span class="string">myproject</span></span><br><span class="line"><span class="attr">    - podSelector:</span></span><br><span class="line"><span class="attr">        matchLabels:</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">  egress:</span></span><br><span class="line"><span class="attr">  - to:</span></span><br><span class="line"><span class="attr">    - ipBlock:</span></span><br><span class="line"><span class="attr">        cidr:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">5978</span></span><br></pre></td></tr></table></figure><ul><li><strong>必填字段</strong>： <code>NetworkPolicy</code>, <code>apiVersion</code>, <code>kind</code>, <code>metadata</code></li><li><strong>spec</strong>: 网络策略所需的所有信息</li><li><strong>podSelector</strong>： 选择策略适用的Pod分组。(如果为空，则表示此命名空间下的所有Pod)</li><li><strong>policyTypes</strong>： 可能包含<code>Ingress</code>, <code>Egress</code>。指示给定策略是否适用于入口流量和出口流量。(如果为空，默认为Ingress)</li><li><strong>ingress</strong>： 允许配置<code>from</code>和<code>ports</code>部分的流量。<code>ipBlock</code>, <code>namespaceSelector</code>, <code>podSelector</code>指定具体信息</li><li><strong>egress</strong>： 允许配置<code>to</code>和<code>ports</code>部分的流量</li></ul><p><br><br><br></p><h4 id="默认策略"><a href="#默认策略" class="headerlink" title="默认策略"></a>默认策略</h4><p>Default policies</p><p>默认情况下，如果命名空间中不存在任何策略，则允许所有入口(ingress)和出口(egress)流量进出该命名空间中的Pod。</p><p><br></p><ul><li><strong>默认拒绝所有入口流量(Default deny all ingress traffic)</strong><br>你可以通过创建<code>NetworkPolicy</code>来为命名空间创建默认的隔离策略，该策略选择所有Pod但不允许任何入口流量到这些Pod。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">default-deny</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  podSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  policyTypes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Ingress</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>默认允许所有入口流量(Default allow all ingress traffic)</strong><br>如果要允许所有流量到命名空间的所有Pod，你可以创建一个明确允许该命名空间中所有流量的策略。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">allow-all</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  podSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  ingress:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>默认拒绝所有出口流量(Default deny all egress traffic)</strong><br>可通过创建<code>NetworkPolicy</code>来为命名空间创建默认的出口隔离策略，该策略选择所有Pod但不允许来自这些Pod的出口流量。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">default-deny</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  podSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  policyTypes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Egress</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>默认允许所有出口流量(Default allow all egress traffic)</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">allow-all</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  podSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  egress:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  policyTypes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Egress</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>默认拒绝所有入口/出口流量(Default deny all ingress and all egress traffic)</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">default-deny</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  podSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  policyTypes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Ingress</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Egress</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="使用HostAliases向Pod的hosts添加条目"><a href="#使用HostAliases向Pod的hosts添加条目" class="headerlink" title="使用HostAliases向Pod的hosts添加条目"></a>使用HostAliases向Pod的hosts添加条目</h3><p>Adding entries to Pod <code>/etc/hosts</code> with HostAliases</p><p>当DNS和其它选项不适用时，向Pod的<code>/etc/hosts</code>文件添加条目可提供主机名解析的Pod级别的覆盖。在 <strong>v1.7</strong> 中，用户可以使用pod spec中的<code>HostAliases</code>字段来添加这些自定义条目。<br>不建议不使用<code>HostAliases</code>进行修改，因为该文件由Kubelet管理，并且可以在Pod 创建/重启 期间覆盖。</p><p><br></p><h4 id="默认hosts文件"><a href="#默认hosts文件" class="headerlink" title="默认hosts文件"></a>默认hosts文件</h4><p>Default Hosts File Content</p><p>查看Pod hosts文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -o=wide</span><br><span class="line">NAME                                     READY     STATUS    RESTARTS   AGE       IP            NODE</span><br><span class="line">nginx-deployment-597549df56-chjps        1/1       Running   0          26d       10.244.2.52   salt01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#kubectl exec POD [-c CONTAINER] -- COMMAND [args...] [options]</span><br><span class="line">kubectl exec nginx-deployment-597549df56-chjps -- cat /etc/hosts</span><br><span class="line"># Kubernetes-managed hosts file.</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">fe00::0 ip6-mcastprefix</span><br><span class="line">fe00::1 ip6-allnodes</span><br><span class="line">fe00::2 ip6-allrouters</span><br><span class="line">10.244.2.52     nginx-deployment-597549df56-chjps</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="使用HostAliases添加额外条目"><a href="#使用HostAliases添加额外条目" class="headerlink" title="使用HostAliases添加额外条目"></a>使用HostAliases添加额外条目</h4><p>Adding Additional Entries with HostAliases</p><p><code>hostaliases-pod.yaml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hostaliases-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">  hostAliases:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"foo.local"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"bar.local"</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"192.168.31.119"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">zhang21</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">cat-hosts</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="attr">args:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"/etc/hosts"</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f hostaliases-pod.yaml</span><br><span class="line"></span><br><span class="line">kubeclt logs hostaliases-pod</span><br><span class="line"><span class="comment"># Kubernetes-managed hosts file.</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">fe00::0ip6-mcastprefix</span><br><span class="line">fe00::1ip6-allnodes</span><br><span class="line">fe00::2ip6-allrouters</span><br><span class="line">10.244.1.69hostaliases-pod</span><br><span class="line"><span class="comment"># Entries added by HostAliases.</span></span><br><span class="line">127.0.0.1foo.local</span><br><span class="line">127.0.0.1bar.local</span><br><span class="line">192.168.31.119zhang21</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="为什么kubelet管理hosts"><a href="#为什么kubelet管理hosts" class="headerlink" title="为什么kubelet管理hosts"></a>为什么kubelet管理hosts</h4><p>Why Does Kubelet Manage the Hosts File?</p><p>Kubelet管理Pod中每个容器的hosts文件，以防止Docker在容器已启动后修改文件。<br>由于文件的托管性质，只要在容器重启或Pod重新调度的情况下由Kubelet重新挂载hosts文件，因此用户编写的内容都将被覆盖。因此，不建议直接修改文件的内容。</p><p><br><br><br><br><br></p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>Storage</p><p><br><br><br></p><h3 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h3><p>容器中的磁盘文件是短暂的，这在容器中运行时会给重大的应用程序带来一些问题。首先，当一个容器奔溃时，kubelet将重启它，但文件会丢失，容器将以干净的状态启动。其次，在Pod中一起运行容器时，通常需要在这些容器间共享文件。k8s volume抽象解决这些问题。</p><p><br><br><br></p><h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><p>Docker也有关于卷的概念，虽然它有点宽松和管理较少。在Docker中，卷是磁盘上或其它容器中的目录，声明周期不受管理。Docker提供了卷驱动，但目前功能非常有限。</p><p>另一方面，k8s的卷具有明确的生命周期。因此，卷可以比Pod中运行的任何容器活得更久，并且可在容器重启之间保留数据。当然，当Pod不再存在时，卷也将不复存在。更重要的是，k8s支持多种类型的卷，Pod可以同时使用任意数量的卷。<br>从本质上讲，卷只是一个目录，可能包含一些数据，Pod中的容器可以访问它。该目录如何形成，支持它的介质以及它的内容都由所用特定卷的类型决定。<br>要使用卷，Pod Spec要指定提供的卷(<code>.spec.volumes</code>字段)，以及将这些卷挂载到容器中的位置(<code>.spec.containers.volumeMounts</code>字段)。</p><p>容器中的进程可以看到由Docker镜像和卷组成的文件系统视图。Docker镜像位于文件系统层次结构的根下，任何卷都挂载到镜像中的指定路径。卷不能挂载到其它卷或其它卷的硬链接上，Pod中的每个容器必须独立的指定每个卷的挂载位置。</p><p><br><br><br></p><h4 id="卷类型"><a href="#卷类型" class="headerlink" title="卷类型"></a>卷类型</h4><p>k8s支持如下卷类型。注意，这些卷并非全部都是持久化的(如emptyDir)，它们会随着Pod的消亡而消亡。</p><ul><li>awsElasticBlockStore</li><li>azureDisk</li><li>azureFile</li><li>cephfs</li><li>configMap</li><li>csi</li><li>downwardAPI</li><li>emptyDir</li><li>fc (fibre channel)</li><li>flocker</li><li>gcePersistentDisk</li><li>gitRepo (deprecated)</li><li>glusterfs</li><li>hostPath</li><li>iscsi</li><li>local</li><li>nfs</li><li>persistentVolumeClaim</li><li>projected</li><li>portworxVolume</li><li>quobyte</li><li>rbd</li><li>scaleIO</li><li>secret</li><li>storageos</li><li>vsphereVolume</li></ul><p>具体例子请参考: <a href="https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes</a></p><p><br></p><p><strong>configMap</strong><br><code>configMap</code>资源提供了一种将配置数据注入Pod的方法。存储在configMap对象中的数据可以在configMap类型的卷中引用，然后由Pod中运行的应用程序使用。<br>引用configMap对象时，只需在卷中提供其名称即可引用它。你还可以自定义configMap中的特定条路的路径。</p><p>例如，要将<code>log-config</code>的ConfigMap挂载到名为<code>configmap-pod</code>的Pod上，你可以这样操作：<br>注意，在使用之前你先得创建ConfigMap<br>使用ConfigMap作为subPath的卷挂载将不会收到<code>ConfigMap</code>的更新</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">configmap-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">config-vol</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">config-vol</span></span><br><span class="line"><span class="attr">      configMap:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">log-config</span></span><br><span class="line"><span class="attr">        items:</span></span><br><span class="line"><span class="attr">          - key:</span> <span class="string">log_level</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">log_level</span></span><br><span class="line"><span class="comment">#log-config configMap作为卷挂载，存储在`log_level`的所有内容都挂载到路径`/etc/config/log_level`的Pod中</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>emptyDir</strong><br>将Pod分配给节点时，首先会创建一个<code>emptyDir</code>卷。只要节点还在该节点上运行，它就会存在。就如同它的名称一样，它最初是空的。Pod中的容器都可以在<code>emptyDir</code>卷中读取和写入相同的文件，尽管改卷可以安装在每个容器中相同或不同的路径上。当从节点上删除Pod时，将永久删除<code>emptyDir</code>中的数据。<br>注意：容器奔溃不会从节点中删除Pod，因此<code>emptyDir</code>卷中的数据在容器奔溃时是安全的。</p><p><code>emptyDir</code>的一些用途：</p><ul><li>临时空间</li><li>检查从崩溃中恢复的长计算</li><li>保存内容管理器容器在Web服务器提供数据时提取的文件</li></ul><p>默认情况下，<code>emptyDir</code>卷存储在节点的任何介质上(磁盘、SSD、网络存储…)，取决于你的环境。但是，你可以将<code>emptyDir.medium</code>字段设置为<code>Memory</code>，以告诉k8s为你安装<code>tmpfs</code>(RAM支持的文件系统)。tmpfs非常快，但请注意断电就没有了，并且你编写的任何文件都将计入容器的内存限制。</p><p>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">k8s.gcr.io/test-webserver</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - mountPath:</span> <span class="string">/cache</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">cache-volume</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">cache-volume</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>hostPath</strong><br><code>hostPath</code>卷将文件或目录从主机节点的文件系统挂载到Pod中。这不是大多数Pod需要的东西，但它为某些应用程序提供了强大的逃生舱。</p><p><code>hostPath</code>的一些用途：</p><ul><li>运行需要访问Docker内部的容器，使用<code>/var/lib/docker</code>的<code>hostPath</code></li><li>在容器中运行cAdvisor</li><li>允许Pod指定在Pod运行之前是否应该存在给定的<code>hostPath</code>，是否应该创建它以及它应该存在的内容</li></ul><p>三个字段:</p><ul><li>hostPath</li><li>path</li><li>type</li></ul><p>支持的<code>type</code>的值：</p><table><thead><tr><th>Value</th><th>Behavior</th></tr></thead><tbody><tr><td>空</td><td>Empty string (default) is for backward compatibility, which means that no checks will be performed before mounting the hostPath volume.</td></tr><tr><td>DirectoryOrCreate</td><td>If nothing exists at the given path, an empty directory will be created there as needed with permission set to 0755, having the same group and ownership with Kubelet.</td></tr><tr><td>Directory</td><td>A directory must exist at the given path</td></tr><tr><td>FileOrCreate</td><td>If nothing exists at the given path, an empty file will be created there as needed with permission set to 0644, having the same group and ownership with Kubelet.</td></tr><tr><td>File</td><td>A file must exist at the given path</td></tr><tr><td>Socket</td><td>A UNIX socket must exist at the given path</td></tr><tr><td>CharDevice</td><td>A character device must exist at the given path</td></tr><tr><td>BlockDevice</td><td>A block device must exist at the given path</td></tr></tbody></table><p>请注意何时使用此类型的卷，因为：</p><ul><li>由于节点上的文件不同，具有相同配置的Pod在不同节点上的行为可能有所不同</li><li>当k8s按计划添加资源，它将无法考虑<code>hostPath</code>使用的资源</li><li>在底层主机上创建的文件或目录只能由root写入</li></ul><p>栗子:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">k8s.gcr.io/test-webserver</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">    - mountPath:</span> <span class="string">/test-pd</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">test-volume</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">test-volume</span></span><br><span class="line"><span class="attr">    hostPath:</span></span><br><span class="line">      <span class="comment"># directory location on host</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/data</span></span><br><span class="line">      <span class="comment"># this field is optional</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>local</strong><br><code>local</code>卷表示已挂载的本地存储设备，如磁盘，分区或目录。它只能用作静态创建的持久化卷，尚不支持动态配置。<br>与<code>hostPath</code>卷相比，可以以持久且可移植的方式使用<code>lobal</code>卷，而无需手动将Pod调度到节点。<br>然而，local卷仍受基础节点可用性的限制，并不适用于所有应用程序。如果节点变得不健康，则local卷也将变得不可访问，并且使用它的Pod将无法运行。使用local volume的应用程序必须能够容忍这种降低的可用性以及潜在的数据丢失，具体取决于底层磁盘的持久性特征。</p><p>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">example-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">100</span><span class="string">Gi</span></span><br><span class="line">  <span class="comment"># volumeMode field requires BlockVolume Alpha feature gate to be enabled.</span></span><br><span class="line"><span class="attr">  volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line"><span class="attr">  local:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/mnt/disks/ssd1</span></span><br><span class="line"><span class="attr">  nodeAffinity:</span></span><br><span class="line"><span class="attr">    required:</span></span><br><span class="line"><span class="attr">      nodeSelectorTerms:</span></span><br><span class="line"><span class="attr">      - matchExpressions:</span></span><br><span class="line"><span class="attr">        - key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"><span class="attr">          operator:</span> <span class="string">In</span></span><br><span class="line"><span class="attr">          values:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">example-node</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>NFS</strong><br>栗子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">nfs</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line">    <span class="comment"># <span class="doctag">FIXME:</span> use the right hostname</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">10.254</span><span class="number">.234</span><span class="number">.223</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">"/"</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>persistentVolumeClaim</strong><br><code>persistentVolumeClaim</code>卷用于将持久化卷挂载到Pod中。</p><p><br><br><br></p><h4 id="使用子路径"><a href="#使用子路径" class="headerlink" title="使用子路径"></a>使用子路径</h4><p>Using subPath</p><p>有时，在单个Pod中共享一个卷用于多个用途是很有用的。<code>volumeMounts.subPath</code>属性可用于指定引用卷内的子路径，而不是根路径。</p><p>使用单个共享卷的Pod与LAMP Stack的示例，HTML内容被映射到html目录中，数据库存储在mysql目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: my-lamp-site</span><br><span class="line">spec:</span><br><span class="line">    containers:</span><br><span class="line">    - name: mysql</span><br><span class="line">      image: mysql</span><br><span class="line">      env:</span><br><span class="line">      - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">        value: &quot;rootpasswd&quot; </span><br><span class="line">      volumeMounts:</span><br><span class="line">      - mountPath: /var/lib/mysql</span><br><span class="line">        name: site-data</span><br><span class="line">        subPath: mysql</span><br><span class="line">    - name: php</span><br><span class="line">      image: php:7.0-apache</span><br><span class="line">      volumeMounts:</span><br><span class="line">      - mountPath: /var/www/html</span><br><span class="line">        name: site-data</span><br><span class="line">        subPath: html</span><br><span class="line">    volumes:</span><br><span class="line">    - name: site-data</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: my-lamp-site-data</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用带有扩展环境变量的子路径</strong><br>Using subPath with expanded environment variables</p><p>FEATURE STATE: <code>k8s v1.11 alpha</code></p><p><code>subPath</code>目录名也可从Downward API环境变量构造。在使用此功能之前，必须启用<code>VolumeSubpathEnvExpansion</code>。<br>下例中，Pod使用<code>subPath</code>在主机路径卷<code>/var/log/pods</code>中创建<code>pod1</code>目录，使用Downward API中的Pod名。主机目录<code>/var/log/pods/pod1</code>被挂载到容器中的<code>/logs</code>目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: container1</span><br><span class="line">    env:</span><br><span class="line">    - name: POD_NAME</span><br><span class="line">      valueFrom:</span><br><span class="line">        fieldRef:</span><br><span class="line">          apiVersion: v1</span><br><span class="line">          fieldPath: metadata.name</span><br><span class="line">    image: busybox</span><br><span class="line">    command: [ &quot;sh&quot;, &quot;-c&quot;, &quot;while [ true ]; do echo &apos;Hello&apos;; sleep 10; done | tee -a /logs/hello.txt&quot; ]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: workdir1</span><br><span class="line">      mountPath: /logs</span><br><span class="line">      subPath: $(POD_NAME)</span><br><span class="line">  restartPolicy: Never</span><br><span class="line">  volumes:</span><br><span class="line">  - name: workdir1</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /var/log/pods</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p><code>emptyDir</code>卷的存储介质(磁盘，SSD…)由kubelet根目录的文件系统的介质确定。<code>emptyDir</code>或<code>hostPath</code>卷可以占用多少空间没有限制，容器之间或Pod之间没有隔离。</p><p><br><br><br></p><p>####挂载传播</p><p>Mount propagation</p><p>FEATURE STATE: <code>k8s v1.10 beta</code></p><p>挂载传播允许将容器挂载的卷共享到同一Pod的其它容器，或同一节点的其它Pod。<br>如果<code>MountPropagation</code>功能被禁用，或Pod未指明特定的挂载环境，则不会传播Pod的容器中的挂载卷。<br>卷的挂载传播由<code>Container.volumeMounts</code>中的<code>mountPropagation</code>字段控制。它的值为：</p><ul><li><p><code>None</code><br>此卷的挂载不会接收主机挂载到此卷或任何子目录的任何后续挂载。此模式等同于于Linux kernel中描述的<code>private</code>挂载传播。</p></li><li><p><code>HostToContainer</code><br>此卷的挂载将接收安装到此卷或其任何子目录的所有后续挂载。换句话说，如果主机在卷挂载中挂载任何内容，则容器将看到它挂载在那里。<br>类似地，如果任何具有双向挂载传播的Pod挂载到同一个卷中，那么具有<code>HostToContainer</code>挂载传播的容器将看到它。此模式等同于Linux Kernel中描述的<code>rslave</code>挂载传播。</p></li><li><p><code>Bidirectional</code><br>此卷的挂载行为与<code>HostToContainer</code>相同。此外，容器创建的所有卷 挂载都将传播会主机和所有使用相同卷的Pod中的容器。此模式等同于Linux kernel中描述的<code>rshared</code>挂载传播。</p></li></ul><p><br></p><p><strong>配置</strong><br>在挂载传播可以在某些部署上正常工作之前，必须在Docker中正确配置挂载共享，修改<code>docker systemd</code>服务文件，设置<code>MountFlags</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MountFlags=shared</span><br></pre></td></tr></table></figure><p>重启Docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="持久化卷"><a href="#持久化卷" class="headerlink" title="持久化卷"></a>持久化卷</h3><p>Persistent Volumes</p><p><br><br><br><br><br></p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>Kubernetes 垃圾收集器的角色是删除指定的对象，这些对象曾经有但以后不再拥有 Owner 了。</p><p>某些Kubernetes对象是其它一些对象的Owner。如，一个副本集是一组pod的Owner。<br>具有Owner的对象被称为是Owner的<strong>Dependent</strong>。每个Dependent对象具有一个执行所属对象的<code>metadata.ownerReference</code>字段。</p><p>有时，Kubernetes会自动设置<code>ownerReference</code>的值。<br>也可以手动设置<code>ownerReference</code>的值，来指定Owner和Dependent之间的关系。</p><p><br></p><p><strong>控制垃圾收集器删除Dependent</strong></p><ul><li><p>级联删除</p><ul><li>background</li><li>foreground<br>删除对象时自动删除Dependent。<br>在bg级联删除模式下，k8s会立即删除Owner对象，然后垃圾收集器会在后台删除这些Dependent。<br>在fg级联删除模式下，根对象首先进入删除中状态。一旦对象被设置为删除中状态，垃圾收集器会删除对象的所有Dependent。</li></ul></li><li><p>孤儿<br>删除对象时，不自动删除它的Dependent。这些Dependent就被称作孤儿。垃圾收集器在删除了所有 “Blocking” 状态的 Dependent（对象的 ownerReference.blockOwnerDeletion=true）之后，它会删除 Owner 对象。</p></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>Tutorials</p><p>教程展示了如何实现比单个任务更大的目标(task)。</p><p><br></p><h2 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h2><p>栗子里面包含一个Service和Deployment，请一定要注意yaml的语法格式，不使用<code>-</code>的话可能会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#注意yaml语法错误</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment-test</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx</span><br><span class="line">    env: test</span><br><span class="line">  annotations:</span><br><span class="line">    des: A k8s-deployment test</span><br><span class="line">    author: Zhang21</span><br><span class="line">    date: 2018-09-13</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      dnsPolicy: ClusterFirst</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      volumes:</span><br><span class="line">      - name: test01</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: test02</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /tmp/k8s/volume/test02</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.12.2</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        workingDir: /usr/share/nginx/html</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        env:</span><br><span class="line">        - name: AUTHOR</span><br><span class="line">          value: Zhang21</span><br><span class="line">        - name: EMAIL</span><br><span class="line">          value: me@zhang21.cn</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: test01</span><br><span class="line">          mountPath: /usr/share/nginx/html/test01</span><br><span class="line">        - name: test02</span><br><span class="line">          mountPath: /usr/share/nginx/html/test02</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 0.3</span><br><span class="line">            memory: 300Mi</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service-test</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx</span><br><span class="line">  annotations:</span><br><span class="line">    des: A k8s Service test</span><br><span class="line">    author: Zhang21</span><br><span class="line">    date: 2018-09-13</span><br><span class="line">spec:</span><br><span class="line">  #记得指定应用，不然服务无法找到后端端点和容器组</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: nginx</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    nodePort: 31234</span><br><span class="line">    #The range of valid ports is 30000-32767</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br></pre></td></tr></table></figure><p>执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ./nginx.yaml</span><br><span class="line"></span><br><span class="line">#apply可修改后更新</span><br><span class="line">kubectl apply -f ./nginx.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#之后在dashboard中查看成功与否</span><br><span class="line">#访问master 31234 port</span><br><span class="line">curl master:31234</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="k8s基本"><a href="#k8s基本" class="headerlink" title="k8s基本"></a>k8s基本</h2><p><br></p><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>本教程提供了Kubernetes集群编排系统基础知识的介绍。</p><p>你将学到：</p><ul><li>在集群上部署容器化服务</li><li>伸缩部署</li><li>使用新软件版本更新容器化应用程序</li><li>调试容器化应用程序</li></ul><p><br></p><p><strong>k8s能为你做什么？</strong><br>容器化有助于打包软件以实现这些目标，是应用程序能够以简单快速的方式发布和更新，而无需停机。k8s可帮助你确保这些容器化应用程序随时随地运行，并帮助它们找到运行所需的资源。</p><p><br></p><p><strong>k8s 基础模块</strong></p><ol><li>创建(create)一个k8s集群</li><li>部署(deploy)应用程序</li><li>探索(explore)应用程序</li><li>公开(expose)展示应用程序</li><li>伸缩(scale)应用程序</li><li>升级(update)应用程序</li></ol><p><br><br><br></p><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>Create a Cluseter</p><p>详情见安装部分。</p><p><br><br><br></p><h3 id="部署应用程序"><a href="#部署应用程序" class="headerlink" title="部署应用程序"></a>部署应用程序</h3><p>Deploy an APP</p><p><br></p><h4 id="使用kubectl创建部署"><a href="#使用kubectl创建部署" class="headerlink" title="使用kubectl创建部署"></a>使用kubectl创建部署</h4><p>Using kubectl to create a Deployment</p><p>目标：</p><ul><li>了解应用程序部署</li><li>在k8s上使用<code>kubectl</code>部署你的第一个应用程序</li></ul><p><br></p><p><strong>k8s Deployments</strong><br>一旦运行了k8s集群，就可在其上部署容器化应用程序。为此，你需要创建Kubernetes Deployment configuration。它指示k8s 如何创建和更新应用程序实例。创建部署后，k8s master将应用程序实例调度到各个node上。<br>创建应用程序实例后，Kubernetes Deployment Controller会持续监控这些实例。如果主机节点上的实例关闭或删除，Deployment Controller会替换它。这提供了一种自我修复(self-healing)机制来解决机器故障或维护。</p><p><br></p><p><strong>部署应用程序</strong><br>可使用<code>kubectl</code>(使用k8s api与集群交互)来创建和管理Deployment。下面有一些关于使用kubectl在k8s集群上创建和管理Deployment的基础命令。</p><p>创建部署时，你需要指定应用程序的容器镜像(image)，以及要运行的副本数(replicas)。你可在以后改变这些信息来更新你的部署。</p><p>栗子：<br>第一个部署，k8s使用一个Docker容器的<code>Node.js</code>应用程序包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">kubectl version</span><br><span class="line">#client</span><br><span class="line">#server</span><br><span class="line"></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">#创建名为k8s-bootcamp的deployment</span><br><span class="line">kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080</span><br><span class="line">#这是国内镜像: docker.io/jocatalin/kubernetes-bootcamp:v1</span><br><span class="line"></span><br><span class="line">kubectl get deployments</span><br><span class="line">NAME           DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubenetes-bootcamp   1         1        1           1          1h</span><br><span class="line">#表示 希望副本数，当前副本数，最新副本数，可用副本数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#由于pod被封装在集群私网，没有对外开放</span><br><span class="line">#proxy将通信转发到集群内私网</span><br><span class="line">kubectl proxy</span><br><span class="line">curl http://localhost:8081/version</span><br><span class="line">curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/</span><br><span class="line">#Hello Kubernetes bootcamp!</span><br></pre></td></tr></table></figure><p>此处我遇到一个错误，<code>replicats unavailable</code>:<br>原因是拉取的镜像在谷歌云上，无法访问<gcr.io>，拉取失败所以导致部署失败。<br>gcr(google container Registry)</gcr.io></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#查看部署信息</span><br><span class="line"> kubectl get deployment kubernetes-bootcamp -o yaml</span><br><span class="line">    message: &apos;unable to create pods: No API token found for service account &quot;default&quot;,</span><br><span class="line">      retry after the token is automatically created and added to the service account&apos;</span><br><span class="line">    reason: FailedCreate</span><br><span class="line">    status: &quot;True&quot;</span><br><span class="line">    type: ReplicaFailure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get deployments</span><br><span class="line">NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-bootcamp   1         0         0            0           33m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe deployments kubernetes-bootcamp</span><br><span class="line">Replicas:               1 desired | 0 updated | 0 total | 0 available | 1 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">ReplicaFailure   True    FailedCreate</span><br></pre></td></tr></table></figure><p>针对<strong>unable to create pods: No API token found for service account “default”</strong>这个问题，需要修改kube-apiserver配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#去掉 KUBE_ADMISSION_CONTROL中的SecurityContextDeny,ServiceAccount</span><br><span class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重启kube-apiserver</span><br><span class="line">systemctl restart kube-apiserver</span><br><span class="line"></span><br><span class="line">#之后查看副本数就正常了</span><br><span class="line">kubectl get deployments</span><br><span class="line">NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-bootcamp   1         1         1            0           8m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#这里available还是0</span><br><span class="line">kubectl get pods</span><br><span class="line">NAME                                  READY     STATUS              RESTARTS   AGE</span><br><span class="line">kubernetes-bootcamp-390780338-6x48n   0/1       ContainerCreating   0          21h</span><br><span class="line">#pod处于创建状态</span><br><span class="line"></span><br><span class="line">#查看详情</span><br><span class="line">kubectl describe pods</span><br><span class="line">#错误信息</span><br><span class="line">  Warning  FailedSync  4m (x258 over 21h)   kubelet, 192.168.31.159  Error syncing pod, skipping: failed to &quot;StartContainer&quot; for &quot;POD&quot; with ErrImagePull: &quot;image pull failed for registry.access.redhat.com/rhel7/pod-infrastructure:latest, this may be because there are no credentials on this request.  details: (open /etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt: no such file or directory)&quot;</span><br><span class="line">  Warning  FailedSync  9s (x5728 over 21h)  kubelet, 192.168.31.159  Error syncing pod, skipping: failed to &quot;StartContainer&quot; for &quot;POD&quot; with ImagePullBackOff: &quot;Back-off pulling image \&quot;registry.access.redhat.com/rhel7/pod-infrastructure:latest\&quot;&quot;</span><br><span class="line"></span><br><span class="line">#在node上查看此文件，发现它指向了一个空链接</span><br><span class="line">#并不存在/etc/rhsm目录</span><br><span class="line">ll /etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt</span><br><span class="line">lrwxrwxrwx. 1 root root 27 7月  16 16:58 /etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt -&gt; /etc/rhsm/ca/redhat-uep.pem</span><br><span class="line"></span><br><span class="line">#在node安装此rhsm</span><br><span class="line">yum search rhsm</span><br><span class="line">#python-rhsm-certificates.x86_64</span><br><span class="line">#python-rhsm.x86_64</span><br><span class="line">yum install -y python-rhsm.x86_64 python-rhsm-certificates.x86_64</span><br><span class="line">#之后在node上手动拉取下image便可看到pod正常运行</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="探索应用程序"><a href="#探索应用程序" class="headerlink" title="探索应用程序"></a>探索应用程序</h3><p>Explore Your App</p><p><br></p><h4 id="查看Pods和Nodes"><a href="#查看Pods和Nodes" class="headerlink" title="查看Pods和Nodes"></a>查看Pods和Nodes</h4><p>目标：</p><ul><li>了解k8s Pods</li><li>了解k8s Nodes</li><li>部署应用的故障解决(troubleshoot)</li></ul><p><br></p><p><strong>k8s Pods</strong><br>当你创建一个部署时，k8s创建了一个pod来托管你的应用程序实例。pod是k8s的一个抽象，表示一组(一个/多个)应用程序容器，以及这些容器的共享资源。<br>pod有一个唯一的IP地址，甚至是同一节点上的pod。pod中的容器共享IP地址和端口，始终位于同一位置并共同调度，并在同一节点上共享上下文中运行。<br>这些资源包括：</p><ul><li>共享存储(volumes)</li><li>网络(唯一的集群内ip)</li><li>运行容器的相关信息</li></ul><p><br></p><p><strong>Nodes</strong><br>pod总是运行在node上，一个node上可运行多个pod。每个node由master管理，master自动处理在node上调度pod。<br>node至少运行如下组件：</p><ul><li>kubelet</li><li>container runtime(如docker)</li></ul><p><br></p><p><strong>Troubleshooting with kubectl</strong><br>最常用的<code>kubectl</code>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#列出资源</span><br><span class="line">kubectl get</span><br><span class="line">#kubectl get nodes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#某个资源的详细信息</span><br><span class="line">kubectl describe</span><br><span class="line">#kubectl describe deployments kubernetes-bootcamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pod中容器日志</span><br><span class="line">kubectl logs</span><br><span class="line">#kubectl logs $pod --since=1h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在pod的容器执行命令</span><br><span class="line">kubectl exec</span><br><span class="line">#kubectl ecec $pod env</span><br><span class="line">#kubectl exec -it $pod /bin/bash</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="公开展示应用程序"><a href="#公开展示应用程序" class="headerlink" title="公开展示应用程序"></a>公开展示应用程序</h3><p>Expose Your App Publicly</p><p><br></p><h4 id="使用服务来展示应用程序"><a href="#使用服务来展示应用程序" class="headerlink" title="使用服务来展示应用程序"></a>使用服务来展示应用程序</h4><p>Using a Service to Expose Your App</p><p>目标：</p><ul><li>了解k8s中的服务(service)</li><li>理解labels和LabelSelector对象如何关联服务</li><li>使用服务将应用程序展示在集群外部</li></ul><p><br></p><p><strong>k8s Service</strong><br>事实上，pods有一个生命周期。当工作node死亡，node上运行的pods也会丢失。ReplicationController可以通过创建新的Pod来动态地将集群驱动会所需状态，以使应用程序保持运行。<br>k8s的服务是一个抽象概念，它定义了一组逻辑Pod和一个访问pods的策略。服务使用YAML或JSON来定义。由一组pods所构成的服务通常由LabelSelector来确定。<br>尽管每个Pod都有一个唯一的IP地址，但如果没有服务，这些IP就不会在集群外公开。<br>通过指定ServeceSpec中的type，可以不同方式公开服务:</p><ul><li><p>ClusterIP(默认方式)<br>在集群内部IP公开服务，只可内部访问</p></li><li><p>NodePort<br>使用NAT在集群的指定节点上公开服务</p></li><li><p>LoadBalancer<br>创建一个外部负载均衡器，并给服务分配一个外部IP</p></li><li><p>ExternalName<br>通过返回带有名称的CNAME(k8s-dns)记录，使用任意名称公开服务</p></li></ul><p><br></p><p><strong>Services和Labels</strong><br>服务使用labels和selectors匹配一组pod这是一个允许对k8s的对象进行逻辑操作的分组原语。<br>Label是附件到对象的键/值对，随时随地可修改。有多种方式可使用：</p><ul><li>指定用于开发(development)、测试(test)、生产(procuct)的对象</li><li>嵌入版本tag</li><li>使用tag对对象进行分类</li></ul><p><br></p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">#NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">#kubernetes-bootcamp-390780338-6x48n   1/1       Running   0          22h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get services</span><br><span class="line">#NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">#kubernetes   ClusterIP   10.254.0.1   &lt;none&gt;        443/TCP   1d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#公开展示应用程序</span><br><span class="line">kubectl expose deployment/kubernetes-bootcamp --type=&quot;NodePort&quot; --port 8080</span><br><span class="line">#service &quot;kubernetes-bootcamp&quot; exposed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get services</span><br><span class="line">#NAME                  TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">#kubernetes            ClusterIP   10.254.0.1     &lt;none&gt;        443/TCP          1d</span><br><span class="line">#kubernetes-bootcamp   NodePort    10.254.11.76   &lt;none&gt;        8080:31514/TCP   2m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe services/kubernetes-bootcamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe deployment</span><br><span class="line">#Labels:                 run=kubernetes-bootcamp</span><br><span class="line">#使用label查询</span><br><span class="line">kubectl get pods -l run=kubernetes-bootcamp</span><br><span class="line">kubectl get services -l run=kubernetes-bootcamp</span><br><span class="line">#使用label删除</span><br><span class="line">kubectl delete service -l run=kubernetes-bootcamp</span><br><span class="line"></span><br><span class="line">kubectl describe pods kubernetes-bootcamp-390780338-6x48n</span><br><span class="line"></span><br><span class="line">kubectl exec -it kubernetes-bootcamp-390780338-6x48n /bin/bash</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="扩展应用程序"><a href="#扩展应用程序" class="headerlink" title="扩展应用程序"></a>扩展应用程序</h3><p>Scale Your App</p><p>Running Multiple Instances of Your App</p><p>目标：</p><ul><li>使用<code>kubectl</code>伸缩应用程序</li></ul><p><br></p><p><strong>伸缩应用程序</strong><br>前面通过部署创建的服务仅有一个pod，当遇到流量激增，我们便需要扩展应用程序。<br>通过更改部署中的副本数来完成扩展。</p><p>扩展部署将确保使用可用资源(available resource)创建新的pod并将其调度到node。k8s支持Pod的自动伸缩，缩放到0(也就是没有pod)也是可能的，它将终止指定部署的所有Pod。<br>对应用程序运行多个实例需要一种方法将流量分配给所有这些实例。服务有集成的负载均衡器(load-blancer)，可将网络流量分配到公开部署的所有Pod。服务将使用endpoint持续监控运行的Pod，以确保网络流量发送到可用的Pods。</p><p>一旦运行的应用程序有了多个实例，你就可以在不停机(downtime)的情况下执行滚动更新(rolling update)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments</span><br><span class="line">#1个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#扩展实例</span><br><span class="line">kubectl scale deployments/kubernetes-bootcamp --replicas=4</span><br><span class="line">#deployment.extensions &quot;kubernetes-bootcamp&quot; scaled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get deployments</span><br><span class="line">#4个</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">#4个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe deployment/kubernetes-bootcamp</span><br><span class="line">kubectl describe services/kubernetes-bootcamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#缩放实例</span><br><span class="line">kubectl scale deployments/kubernetes-bootcamp --replicas=2</span><br><span class="line">#deployment.extensions &quot;kubernetes-bootcamp&quot; scaled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get deployments</span><br><span class="line">#2个</span><br><span class="line"></span><br><span class="line">#有两个pods正在关闭中</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">NAME                                  READY     STATUS        RESTARTS   AGE       IP            NODE</span><br><span class="line">kubernetes-bootcamp-390780338-1zgvs   1/1       Terminating   0          7m        10.254.76.5   192.168.31.159</span><br><span class="line">kubernetes-bootcamp-390780338-6x48n   1/1       Running       0          2d        10.254.76.2   192.168.31.159</span><br><span class="line">kubernetes-bootcamp-390780338-bqztg   1/1       Running       0          7m        10.254.76.4   192.168.31.159</span><br><span class="line">kubernetes-bootcamp-390780338-hkwfd   1/1       Terminating   0          7m        10.254.76.3   192.168.31.159</span><br><span class="line"></span><br><span class="line">#关闭完成</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE       IP            NODE</span><br><span class="line">kubernetes-bootcamp-390780338-6x48n   1/1       Running   0          2d        10.254.76.2   192.168.31.159</span><br><span class="line">kubernetes-bootcamp-390780338-bqztg   1/1       Running   0          15m       10.254.76.4   192.168.31.159</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="升级应用程序"><a href="#升级应用程序" class="headerlink" title="升级应用程序"></a>升级应用程序</h3><p>Update your App<br>Performing a Rolling Update</p><p>目标：</p><ul><li>使用<code>kubectl</code>执行滚动升级</li></ul><p><br></p><p><strong>滚动更新</strong><br>用户希望应用程序始终可用，可发人员可能会多次部署新版本应用程序。在k8s中，这都可以通过滚动更新(rolling update)完成。<br>滚动更新允许通过使用新的实例逐步更新Pod来实现部署的更新，而不需停机(downtime)。新的Pod将在具有可用资源的node上进行调度。<br>在k8s中，更新是版本化的，任何部署更新都可以恢复到以前的版本。</p><p>与应用程序扩展类似，服务在更新期间仅会将流量负载均衡到可用的Pod(应用实例)。</p><p>滚动更新允许以下操作：</p><ul><li>将应用程序从一个环境推到另一个环境</li><li>回滚(rollback)到之前的版本</li><li>无需停机的持续集成(CI)和持续交付(CD)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments</span><br><span class="line">kubectl get pods</span><br><span class="line">#2个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新镜像</span><br><span class="line">kubectl set image deployments/kubernetes-bootcamp  kubernetes-bootcamp=docker.io/jocatalin/kubernetes-bootcamp:v2</span><br><span class="line">deployment.apps &quot;kubernetes-bootcamp&quot; image updated</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">kubectl get pods</span><br><span class="line">NAME                                  READY     STATUS        RESTARTS   AGE</span><br><span class="line">kubernetes-bootcamp-390780338-6x48n   1/1       Terminating   0          3d</span><br><span class="line">kubernetes-bootcamp-390780338-bqztg   1/1       Terminating   0          38m</span><br><span class="line">kubernetes-bootcamp-472176051-m6h1q   1/1       Running       0          29s</span><br><span class="line">kubernetes-bootcamp-472176051-z4wqs   1/1       Running       0          29s</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">kubectl get pods</span><br><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">kubernetes-bootcamp-472176051-m6h1q   1/1       Running   0          42s</span><br><span class="line">kubernetes-bootcamp-472176051-z4wqs   1/1       Running   0          42s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#检查回滚状态</span><br><span class="line">kubectl rollout status deployments/kubernetes-bootcamp</span><br><span class="line">deployment &quot;kubernetes-bootcamp&quot; successfully rolled out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=docker.io/jocatalin/kubernetes-bootcamp:v10</span><br><span class="line">deployment.apps &quot;kubernetes-bootcamp&quot; image updated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#有错</span><br><span class="line">kubectl get deployments</span><br><span class="line">NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-bootcamp   2         3         2            1           3d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#有错</span><br><span class="line">kubectl get pods</span><br><span class="line">NAME                                  READY     STATUS             RESTARTS   AGE</span><br><span class="line">kubernetes-bootcamp-384357858-7kjx1   0/1       ErrImagePull       0          2m</span><br><span class="line">kubernetes-bootcamp-384357858-t0wmt   0/1       ImagePullBackOff   0          2m</span><br><span class="line">kubernetes-bootcamp-472176051-m6h1q   1/1       Running            0          9m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">kubectl describe pods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#回滚</span><br><span class="line">kubectl rollout undo deployments/kubernetes-bootcamp</span><br><span class="line">deployment.apps &quot;kubernetes-bootcamp&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl decribe pods</span><br><span class="line">#Image:          docker.io/jocatalin/kubernetes-bootcamp:v2</span><br><span class="line">#回到了V2版</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><p>Configuration</p><p><br></p><h3 id="使用ConfigMap配置Redis"><a href="#使用ConfigMap配置Redis" class="headerlink" title="使用ConfigMap配置Redis"></a>使用ConfigMap配置Redis</h3><p><strong>目标(Objective)</strong></p><ul><li>创建ConfigMap</li><li>使用ConfigMap创建Pod规范</li><li>创建Pod</li><li>验证配置是否正确应用</li></ul><p><br></p><p><strong>开始之前</strong><br>需要有k8s集群，并且安装了<code>kubectl</code>命令行工具。</p><p><br></p><p><strong>栗子：使用ConfigMap配置Redis</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#Master</span><br><span class="line">#创建redis的ConfigMap</span><br><span class="line">kubectl create configmap redis-config --from-file=xxx/redis-config</span><br><span class="line">kubectl get configmap redis-config -o yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建redis-pod.yaml文件</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: redis</span><br><span class="line">    image: kubernetes/redis:v1</span><br><span class="line">    env:</span><br><span class="line">    - name: MASTER</span><br><span class="line">      value: &quot;true&quot;</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 6379</span><br><span class="line">    resources:</span><br><span class="line">      limits:</span><br><span class="line">        cpu: &quot;0.1&quot;</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /redis-master-data</span><br><span class="line">      name: data</span><br><span class="line">    - mountPath: /redis-master</span><br><span class="line">      name: config</span><br><span class="line">  volumes:</span><br><span class="line">    - name: data</span><br><span class="line">      emptyDir: &#123;&#125;</span><br><span class="line">    - name: config</span><br><span class="line">      configMap:</span><br><span class="line">        name: redis-config</span><br><span class="line">        items:</span><br><span class="line">        - key: redis-config</span><br><span class="line">          path: redis.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建pod</span><br><span class="line">kubectl create -f /etc/k8s/pods/config/redis-pod.yaml</span><br><span class="line"></span><br><span class="line">kubectl exec -it redis redis-cli</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="无状态应用程序"><a href="#无状态应用程序" class="headerlink" title="无状态应用程序"></a>无状态应用程序</h2><p>Stateless Applications</p><p><br></p><h3 id="公开外物IP以访问集群中的应用程序"><a href="#公开外物IP以访问集群中的应用程序" class="headerlink" title="公开外物IP以访问集群中的应用程序"></a>公开外物IP以访问集群中的应用程序</h3><p>Exposing an External IP Address to Access an Application in a Cluster</p><p><strong>目标</strong></p><ul><li>为一个Hello World应用程序运行五个实例</li><li>创建一个展示外部IP的服务对象</li><li>使用服务对象去访问运行的应用程序</li></ul><p><br></p><p><strong>为运行五个pods的应用程序创建一个服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#运行hello world</span><br><span class="line">kubectl run hello-world --replicas=5 --labels=&quot;run=load-balancer-example&quot; --image=gcr.io/google-samples/node-hello:1.0  --port=8080</span><br><span class="line">#--image=docker.io/jocatalin/hellonode:v1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看信息</span><br><span class="line">kubectl get deployments hello-world</span><br><span class="line">kubectl describe deployments hello-world</span><br><span class="line"></span><br><span class="line">kubectl get replicasets</span><br><span class="line">kubectl describe replicasets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建展示部署的服务对象</span><br><span class="line">kubectl expose deployment hello-world --type=LoadBalancer --name=my-service</span><br><span class="line">#如果外部地址显示为pending，请等待几分钟</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看信息</span><br><span class="line">kubectl get services my-service</span><br><span class="line">kubectl describe services my-service</span><br><span class="line">#可看到LoanBlancer Ingress</span><br><span class="line"></span><br><span class="line">kubectl get pods --output=wide</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#访问外部地址(LoadBalancer Ingress)</span><br><span class="line">curl http://&lt;external-ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>清理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#删除服务</span><br><span class="line">kubectl delete services my-service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除正在运行的程序的Deployment，ReplicaSet，Pods</span><br><span class="line">kubectl delete deployment hello-world</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="状态集应用程序"><a href="#状态集应用程序" class="headerlink" title="状态集应用程序"></a>状态集应用程序</h1><p>StatefulSet Basics</p><p><br></p><hr><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes: &lt;a href=&quot;https://zh.wikipedia.org/wiki/Kubernetes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zh.wikipedia.org/wiki/Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;官方文档: &lt;a href=&quot;https://kubernetes.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://kubernetes.io/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中文文档: &lt;a href=&quot;http://docs.kubernetes.org.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://docs.kubernetes.org.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;etcd: &lt;a href=&quot;https://coreos.com/etcd/docs/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://coreos.com/etcd/docs/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;flannel: &lt;a href=&quot;https://coreos.com/flannel/docs/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://coreos.com/flannel/docs/latest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7x86_64&lt;/li&gt;
&lt;li&gt;Kubernetes v1.11&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Kubernetes" scheme="https://zhang21.github.io/tags/Kubernetes/"/>
    
      <category term="k8s" scheme="https://zhang21.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>性能分析</title>
    <link href="https://zhang21.github.io/2018/05/14/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://zhang21.github.io/2018/05/14/性能分析/</id>
    <published>2018-05-14T07:11:16.000Z</published>
    <updated>2018-05-22T02:08:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境：</p><ul><li>CentOS7.x84_64</li></ul><p>参考:</p><ul><li>strace命令: <a href="http://man.linuxde.net/strace" target="_blank" rel="noopener">http://man.linuxde.net/strace</a></li><li>pstack命令: <a href="http://man.linuxde.net/pstack" target="_blank" rel="noopener">http://man.linuxde.net/pstack</a></li><li>lsof命令: <a href="http://man.linuxde.net/lsof" target="_blank" rel="noopener">http://man.linuxde.net/lsof</a></li><li>系统调用: <a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8</a></li><li>Linux系统调用列表: <a href="https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#8" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#8</a></li><li>高CPU分析: <a href="http://blog.51cto.com/yaocoder/1543352" target="_blank" rel="noopener">http://blog.51cto.com/yaocoder/1543352</a></li></ul><p><br><br><br></p><a id="more"></a><p><br></p><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>系统调用(system call)，指运行在用户态的程序向操作系统内核请求需要更高权限运行的服务。系统调用提供用户程序与操作系统之间的接口。<br>操作系统的进程空间可分为用户态和内核态，它们需要不同的执行权限。其中系统调用运行在内核态。</p><p>大多数系统交互式操作需求在内核态运行。如设备I/O或进程间通信。</p><p><br></p><ul><li><p>内核态(kernel space)<br>内核、核心扩充、驱动程序运行在内核空间上。</p></li><li><p>用户态(user space)<br>其它的应用程序，则运行在用户空间上。<br>所有运行在用户空间的应用程序，都被统称为用户级(userland)。</p></li><li><p>库函数<br>系统调用和普通库函数调用非常相似，只是系统调用由操作系统内核提供，运行于内核核心态；而普通的库函数调用由函数库或用户自己提供，运行于用户态。</p></li></ul><p><br></p><p><strong>系统调用的意义</strong></p><p>内核提供用户空间程序与内核空间进行交互的一套标准接口，这些接口让用户态程序能受限访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等。用户空间发生请求，内核空间负责执行，这些接口便是用户空间和内核空间共同识别的桥梁，这里提到两个字“受限”，是由于为了保证内核稳定性，而不能让用户空间程序随意更改系统，必须是内核对外开放的且满足权限的程序才能调用相应接口。</p><p>在用户空间和内核空间之间，有一个叫做Syscall(系统调用, system call)的中间层，是连接用户态和内核态的桥梁。这样即提高了内核的安全型，也便于移植，只需实现同一套接口即可。Linux系统，用户空间通过向内核空间发出Syscall，产生软中断，从而让程序陷入内核态，执行相应的操作。对于每个系统调用都会有一个对应的系统调用号，比很多操作系统要少很多。</p><p>安全性与稳定性：内核驻留在受保护的地址空间，用户空间程序无法直接执行内核代码，也无法访问内核数据，通过系统调用</p><p>性能：Linux上下文切换时间很短，以及系统调用处理过程非常精简，内核优化得好，所以性能上往往比很多其他操作系统执行要好。</p><p><br><br><br></p><h2 id="Linux系统调用方法"><a href="#Linux系统调用方法" class="headerlink" title="Linux系统调用方法"></a>Linux系统调用方法</h2><ul><li><p>futex<br>Futex 是fast userspace mutex的缩写，意思是快速用户空间互斥体。Linux内核把它们作为快速的用户空间的锁和信号量的预制构件提供给开发者。</p></li><li><p>select<br>select系统调用允许程序同时在多个底层文件表述符上，等待输入的到达或输出的完成。</p></li></ul><p><br></p><p><strong>进程控制</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>fork</td><td>创建一个新进程</td></tr><tr><td>clone</td><td>按指定条件创建子进程</td></tr><tr><td>execve</td><td>运行可执行文件</td></tr><tr><td>exit</td><td>中止进程</td></tr><tr><td>_exit</td><td>立即中止当前进程</td></tr><tr><td>getdtablesize</td><td>进程所能打开的最大文件数</td></tr><tr><td>getpgid</td><td>获取指定进程组标识号</td></tr><tr><td>setpgid</td><td>设置指定进程组标志号</td></tr><tr><td>getpgrp</td><td>获取当前进程组标识号</td></tr><tr><td>setpgrp</td><td>设置当前进程组标志号</td></tr><tr><td>getpid</td><td>获取进程标识号</td></tr><tr><td>getppid</td><td>获取父进程标识号</td></tr><tr><td>getpriority</td><td>获取调度优先级</td></tr><tr><td>setpriority</td><td>设置调度优先级</td></tr><tr><td>modify_ldt</td><td>读写进程的本地描述表</td></tr><tr><td>nanosleep</td><td>使进程睡眠指定的时间</td></tr><tr><td>nice</td><td>改变分时进程的优先级</td></tr><tr><td>pause</td><td>挂起进程，等待信号</td></tr><tr><td>personality</td><td>设置进程运行域</td></tr><tr><td>prctl</td><td>对进程进行特定操作</td></tr><tr><td>ptrace</td><td>进程跟踪</td></tr><tr><td>sched_get_priority_max</td><td>取得静态优先级的上限</td></tr><tr><td>sched_get_priority_min</td><td>取得静态优先级的下限</td></tr><tr><td>sched_getparam</td><td>取得进程的调度参数</td></tr><tr><td>sched_getscheduler</td><td>取得指定进程的调度策略</td></tr><tr><td>sched_rr_get_interval</td><td>取得按RR算法调度的实时进程的时间片长度</td></tr><tr><td>sched_setparam</td><td>设置进程的调度参数</td></tr><tr><td>sched_setscheduler</td><td>设置指定进程的调度策略和参数</td></tr><tr><td>sched_yield</td><td>进程主动让出处理器,并将自己等候调度队列队尾</td></tr><tr><td>vfork</td><td>创建一个子进程，以供执行新程序，常与execve等同时使用</td></tr><tr><td>wait</td><td>等待子进程终止</td></tr><tr><td>wait3</td><td>参见wait</td></tr><tr><td>waitpid</td><td>等待指定子进程终止</td></tr><tr><td>wait4</td><td>参见waitpid</td></tr><tr><td>capget</td><td>获取进程权限</td></tr><tr><td>capset</td><td>设置进程权限</td></tr><tr><td>getsid</td><td>获取会晤标识号</td></tr><tr><td>setsid</td><td>设置会晤标识号</td></tr></tbody></table><p><br></p><p><strong>文件系统控制：</strong></p><ul><li>文件读写操作</li></ul><table><thead><tr><th>fcntl</th><th>文件控制</th></tr></thead><tbody><tr><td>open</td><td>打开文件</td></tr><tr><td>creat</td><td>创建新文件</td></tr><tr><td>close</td><td>关闭文件描述字</td></tr><tr><td>read</td><td>读文件</td></tr><tr><td>write</td><td>写文件</td></tr><tr><td>readv</td><td>从文件读入数据到缓冲数组中</td></tr><tr><td>writev</td><td>将缓冲数组里的数据写入文件</td></tr><tr><td>pread</td><td>对文件随机读</td></tr><tr><td>pwrite</td><td>对文件随机写</td></tr><tr><td>lseek</td><td>移动文件指针</td></tr><tr><td>_llseek</td><td>在64位地址空间里移动文件指针</td></tr><tr><td>dup</td><td>复制已打开的文件描述字</td></tr><tr><td>dup2</td><td>按指定条件复制文件描述字</td></tr><tr><td>flock</td><td>文件加/解锁</td></tr><tr><td>poll</td><td>I/O多路转换</td></tr><tr><td>truncate</td><td>截断文件</td></tr><tr><td>ftruncate</td><td>参见truncate</td></tr><tr><td>umask</td><td>设置文件权限掩码</td></tr><tr><td>fsync</td><td>把文件在内存中的部分写回磁盘</td></tr></tbody></table><ul><li>文件系统操作</li></ul><table><thead><tr><th>access</th><th>确定文件的可存取性</th></tr></thead><tbody><tr><td>chdir</td><td>改变当前工作目录</td></tr><tr><td>fchdir</td><td>参见chdir</td></tr><tr><td>chmod</td><td>改变文件方式</td></tr><tr><td>fchmod</td><td>参见chmod</td></tr><tr><td>chown</td><td>改变文件的属主或用户组</td></tr><tr><td>fchown</td><td>参见chown</td></tr><tr><td>lchown</td><td>参见chown</td></tr><tr><td>chroot</td><td>改变根目录</td></tr><tr><td>stat</td><td>取文件状态信息</td></tr><tr><td>lstat</td><td>参见stat</td></tr><tr><td>fstat</td><td>参见stat</td></tr><tr><td>statfs</td><td>取文件系统信息</td></tr><tr><td>fstatfs</td><td>参见statfs</td></tr><tr><td>readdir</td><td>读取目录项</td></tr><tr><td>getdents</td><td>读取目录项</td></tr><tr><td>mkdir</td><td>创建目录</td></tr><tr><td>mknod</td><td>创建索引节点</td></tr><tr><td>rmdir</td><td>删除目录</td></tr><tr><td>rename</td><td>文件改名</td></tr><tr><td>link</td><td>创建链接</td></tr><tr><td>symlink</td><td>创建符号链接</td></tr><tr><td>unlink</td><td>删除链接</td></tr><tr><td>readlink</td><td>读符号链接的值</td></tr><tr><td>mount</td><td>安装文件系统</td></tr><tr><td>umount</td><td>卸下文件系统</td></tr><tr><td>ustat</td><td>取文件系统信息</td></tr><tr><td>utime</td><td>改变文件的访问修改时间</td></tr><tr><td>utimes</td><td>参见utime</td></tr><tr><td>quotactl</td><td>控制磁盘配额</td></tr></tbody></table><p><br></p><p><strong>系统控制：</strong></p><table><thead><tr><th>ioctl</th><th>I/O总控制函数</th></tr></thead><tbody><tr><td>_sysctl</td><td>读/写系统参数</td></tr><tr><td>acct</td><td>启用或禁止进程记账</td></tr><tr><td>getrlimit</td><td>获取系统资源上限</td></tr><tr><td>setrlimit</td><td>设置系统资源上限</td></tr><tr><td>getrusage</td><td>获取系统资源使用情况</td></tr><tr><td>uselib</td><td>选择要使用的二进制函数库</td></tr><tr><td>ioperm</td><td>设置端口I/O权限</td></tr><tr><td>iopl</td><td>改变进程I/O权限级别</td></tr><tr><td>outb</td><td>低级端口操作</td></tr><tr><td>reboot</td><td>重新启动</td></tr><tr><td>swapon</td><td>打开交换文件和设备</td></tr><tr><td>swapoff</td><td>关闭交换文件和设备</td></tr><tr><td>bdflush</td><td>控制bdflush守护进程</td></tr><tr><td>sysfs</td><td>取核心支持的文件系统类型</td></tr><tr><td>sysinfo</td><td>取得系统信息</td></tr><tr><td>adjtimex</td><td>调整系统时钟</td></tr><tr><td>alarm</td><td>设置进程的闹钟</td></tr><tr><td>getitimer</td><td>获取计时器值</td></tr><tr><td>setitimer</td><td>设置计时器值</td></tr><tr><td>gettimeofday</td><td>取时间和时区</td></tr><tr><td>settimeofday</td><td>设置时间和时区</td></tr><tr><td>stime</td><td>设置系统日期和时间</td></tr><tr><td>time</td><td>取得系统时间</td></tr><tr><td>times</td><td>取进程运行时间</td></tr><tr><td>uname</td><td>获取当前UNIX系统的名称、版本和主机等信息</td></tr><tr><td>vhangup</td><td>挂起当前终端</td></tr><tr><td>nfsservctl</td><td>对NFS守护进程进行控制</td></tr><tr><td>vm86</td><td>进入模拟8086模式</td></tr><tr><td>create_module</td><td>创建可装载的模块项</td></tr><tr><td>delete_module</td><td>删除可装载的模块项</td></tr><tr><td>init_module</td><td>初始化模块</td></tr><tr><td>query_module</td><td>查询模块信息</td></tr><tr><td>*get_kernel_syms</td><td>取得核心符号,已被query_module代替</td></tr><tr><td>ioctl</td><td>I/O总控制函数</td></tr><tr><td>_sysctl</td><td>读/写系统参数</td></tr><tr><td>acct</td><td>启用或禁止进程记账</td></tr><tr><td>getrlimit</td><td>获取系统资源上限</td></tr><tr><td>setrlimit</td><td>设置系统资源上限</td></tr><tr><td>getrusage</td><td>获取系统资源使用情况</td></tr><tr><td>uselib</td><td>选择要使用的二进制函数库</td></tr><tr><td>ioperm</td><td>设置端口I/O权限</td></tr><tr><td>iopl</td><td>改变进程I/O权限级别</td></tr><tr><td>outb</td><td>低级端口操作</td></tr><tr><td>reboot</td><td>重新启动</td></tr><tr><td>swapon</td><td>打开交换文件和设备</td></tr><tr><td>swapoff</td><td>关闭交换文件和设备</td></tr><tr><td>bdflush</td><td>控制bdflush守护进程</td></tr><tr><td>sysfs</td><td>取核心支持的文件系统类型</td></tr><tr><td>sysinfo</td><td>取得系统信息</td></tr><tr><td>adjtimex</td><td>调整系统时钟</td></tr><tr><td>alarm</td><td>设置进程的闹钟</td></tr><tr><td>getitimer</td><td>获取计时器值</td></tr><tr><td>setitimer</td><td>设置计时器值</td></tr><tr><td>gettimeofday</td><td>取时间和时区</td></tr><tr><td>settimeofday</td><td>设置时间和时区</td></tr><tr><td>stime</td><td>设置系统日期和时间</td></tr><tr><td>time</td><td>取得系统时间</td></tr><tr><td>times</td><td>取进程运行时间</td></tr><tr><td>uname</td><td>获取当前UNIX系统的名称、版本和主机等信息</td></tr><tr><td>vhangup</td><td>挂起当前终端</td></tr><tr><td>nfsservctl</td><td>对NFS守护进程进行控制</td></tr><tr><td>vm86</td><td>进入模拟8086模式</td></tr><tr><td>create_module</td><td>创建可装载的模块项</td></tr><tr><td>delete_module</td><td>删除可装载的模块项</td></tr><tr><td>init_module</td><td>初始化模块</td></tr><tr><td>query_module</td><td>查询模块信息</td></tr><tr><td>*get_kernel_syms</td><td>取得核心符号,已被query_module代替</td></tr></tbody></table><p><br></p><p><strong>内存管理：</strong></p><table><thead><tr><th>brk</th><th>改变数据段空间的分配</th></tr></thead><tbody><tr><td>sbrk</td><td>参见brk</td></tr><tr><td>mlock</td><td>内存页面加锁</td></tr><tr><td>munlock</td><td>内存页面解锁</td></tr><tr><td>mlockall</td><td>调用进程所有内存页面加锁</td></tr><tr><td>munlockall</td><td>调用进程所有内存页面解锁</td></tr><tr><td>mmap</td><td>映射虚拟内存页</td></tr><tr><td>munmap</td><td>去除内存页映射</td></tr><tr><td>mremap</td><td>重新映射虚拟内存地址</td></tr><tr><td>msync</td><td>将映射内存中的数据写回磁盘</td></tr><tr><td>mprotect</td><td>设置内存映像保护</td></tr><tr><td>getpagesize</td><td>获取页面大小</td></tr><tr><td>sync</td><td>将内存缓冲区数据写回硬盘</td></tr><tr><td>cacheflush</td><td>将指定缓冲区中的内容写回磁盘</td></tr></tbody></table><p><br></p><p><strong>网络管理：</strong></p><table><thead><tr><th>getdomainname</th><th>取域名</th></tr></thead><tbody><tr><td>setdomainname</td><td>设置域名</td></tr><tr><td>gethostid</td><td>获取主机标识号</td></tr><tr><td>sethostid</td><td>设置主机标识号</td></tr><tr><td>gethostname</td><td>获取本主机名称</td></tr><tr><td>sethostname</td><td>设置主机名称</td></tr></tbody></table><p><br></p><p><strong>socket控制：</strong></p><table><thead><tr><th>socketcall</th><th>socket系统调用</th></tr></thead><tbody><tr><td>socket</td><td>建立socket</td></tr><tr><td>bind</td><td>绑定socket到端口</td></tr><tr><td>connect</td><td>连接远程主机</td></tr><tr><td>accept</td><td>响应socket连接请求</td></tr><tr><td>send</td><td>通过socket发送信息</td></tr><tr><td>sendto</td><td>发送UDP信息</td></tr><tr><td>sendmsg</td><td>参见send</td></tr><tr><td>recv</td><td>通过socket接收信息</td></tr><tr><td>recvfrom</td><td>接收UDP信息</td></tr><tr><td>recvmsg</td><td>参见recv</td></tr><tr><td>listen</td><td>监听socket端口</td></tr><tr><td>select</td><td>对多路同步I/O进行轮询</td></tr><tr><td>shutdown</td><td>关闭socket上的连接</td></tr><tr><td>getsockname</td><td>取得本地socket名字</td></tr><tr><td>getpeername</td><td>获取通信对方的socket名字</td></tr><tr><td>getsockopt</td><td>取端口设置</td></tr><tr><td>setsockopt</td><td>设置端口参数</td></tr><tr><td>sendfile</td><td>在文件或端口间传输数据</td></tr><tr><td>socketpair</td><td>创建一对已联接的无名socket</td></tr></tbody></table><p><br></p><p><strong>用户管理：</strong></p><table><thead><tr><th>getuid</th><th>获取用户标识号</th></tr></thead><tbody><tr><td>setuid</td><td>设置用户标志号</td></tr><tr><td>getgid</td><td>获取组标识号</td></tr><tr><td>setgid</td><td>设置组标志号</td></tr><tr><td>getegid</td><td>获取有效组标识号</td></tr><tr><td>setegid</td><td>设置有效组标识号</td></tr><tr><td>geteuid</td><td>获取有效用户标识号</td></tr><tr><td>seteuid</td><td>设置有效用户标识号</td></tr><tr><td>setregid</td><td>分别设置真实和有效的的组标识号</td></tr><tr><td>setreuid</td><td>分别设置真实和有效的用户标识号</td></tr><tr><td>getresgid</td><td>分别获取真实的,有效的和保存过的组标识号</td></tr><tr><td>setresgid</td><td>分别设置真实的,有效的和保存过的组标识号</td></tr><tr><td>getresuid</td><td>分别获取真实的,有效的和保存过的用户标识号</td></tr><tr><td>setresuid</td><td>分别设置真实的,有效的和保存过的用户标识号</td></tr><tr><td>setfsgid</td><td>设置文件系统检查时使用的组标识号</td></tr><tr><td>setfsuid</td><td>设置文件系统检查时使用的用户标识号</td></tr><tr><td>getgroups</td><td>获取后补组标志清单</td></tr><tr><td>setgroups</td><td>设置后补组标志清单</td></tr></tbody></table><p><br><br><br></p><p><strong>进程间通信：</strong></p><ul><li><p>ipc, 进程间通信总控制调用</p></li><li><p>信号</p></li></ul><table><thead><tr><th>sigaction</th><th>设置对指定信号的处理方法</th></tr></thead><tbody><tr><td>sigprocmask</td><td>根据参数对信号集中的信号执行阻塞/解除阻塞等操作</td></tr><tr><td>sigpending</td><td>为指定的被阻塞信号设置队列</td></tr><tr><td>sigsuspend</td><td>挂起进程等待特定信号</td></tr><tr><td>signal</td><td>参见signal</td></tr><tr><td>kill</td><td>向进程或进程组发信号</td></tr><tr><td>*sigblock</td><td>向被阻塞信号掩码中添加信号,已被sigprocmask代替</td></tr><tr><td>*siggetmask</td><td>取得现有阻塞信号掩码,已被sigprocmask代替</td></tr><tr><td>*sigsetmask</td><td>用给定信号掩码替换现有阻塞信号掩码,已被sigprocmask代替</td></tr><tr><td>*sigmask</td><td>将给定的信号转化为掩码,已被sigprocmask代替</td></tr><tr><td>*sigpause</td><td>作用同sigsuspend,已被sigsuspend代替</td></tr><tr><td>sigvec</td><td>为兼容BSD而设的信号处理函数,作用类似sigaction</td></tr><tr><td>ssetmask</td><td>ANSI-C的信号处理函数,作用类似sigaction</td></tr></tbody></table><ul><li>消息</li></ul><table><thead><tr><th>msgctl</th><th>消息控制操作</th></tr></thead><tbody><tr><td>msgget</td><td>获取消息队列</td></tr><tr><td>msgsnd</td><td>发消息</td></tr><tr><td>msgrcv</td><td>取消息</td></tr></tbody></table><ul><li><p>管道</p><ul><li>pipe, 创建管道</li></ul></li><li><p>信号量</p></li></ul><table><thead><tr><th>shmctl</th><th>控制共享内存</th></tr></thead><tbody><tr><td>shmget</td><td>获取共享内存</td></tr><tr><td>shmat</td><td>连接共享内存</td></tr><tr><td>shmdt</td><td>拆卸共享内存</td></tr></tbody></table><ul><li>共享内存</li></ul><table><thead><tr><th>shmctl</th><th>控制共享内存</th></tr></thead><tbody><tr><td>shmget</td><td>获取共享内存</td></tr><tr><td>shmat</td><td>连接共享内存</td></tr><tr><td>shmdt</td><td>拆卸共享内存</td></tr></tbody></table><p><br><br><br></p><hr><p><br></p><h1 id="strace命令"><a href="#strace命令" class="headerlink" title="strace命令"></a>strace命令</h1><p>strace命令是一个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。当然strace与专业的调试工具比如说gdb之类的是没法相比的，因为它不是一个专业的调试器。</p><p>strace的最简单的用法就是执行一个指定的命令，在指定的命令结束之后它也就退出了。在命令执行的过程中，strace会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值。</p><p>strace可跟踪一个命令或进程。</p><p><br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strace - trace system calls and signals</span><br><span class="line"></span><br><span class="line">strace --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="问题案例"><a href="#问题案例" class="headerlink" title="问题案例"></a>问题案例</h2><p>当发现进程或服务异常时，我们可以通过strace来跟踪其系统调用，“看看它在干啥”，进而找到异常的原因。熟悉常用系统调用，能够更好地理解和使用strace。<br>当然，万能的strace也不是真正的万能。当目标进程卡死在用户态时，strace就没有输出了。</p><ul><li>定位进程异常退出</li><li>定位共享内存异常</li><li>性能分析</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="pstack命令"><a href="#pstack命令" class="headerlink" title="pstack命令"></a>pstack命令</h1><p>pstack命令可显示每个进程(线程)的栈跟踪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gdb</span><br><span class="line"></span><br><span class="line">pstack $PID</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="lsof命令"><a href="#lsof命令" class="headerlink" title="lsof命令"></a>lsof命令</h1><p>lsof命令用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-a：列出打开文件存在的进程</span><br><span class="line">-c&lt;进程名&gt;：列出指定进程所打开的文件</span><br><span class="line">-g：列出GID号进程详情</span><br><span class="line">-d&lt;文件号&gt;：列出占用该文件号的进程</span><br><span class="line">+d&lt;目录&gt;：列出目录下被打开的文件</span><br><span class="line">+D&lt;目录&gt;：递归列出目录下被打开的文件</span><br><span class="line">-n&lt;目录&gt;：列出使用NFS的文件</span><br><span class="line">-i&lt;条件&gt;：列出符合条件的进程（4、6、协议、:端口、 @ip ）</span><br><span class="line">-p&lt;进程号&gt;：列出指定进程号所打开的文件</span><br><span class="line">-u：列出UID号进程详情</span><br><span class="line">-h：显示帮助信息</span><br><span class="line">-v：显示版本信息</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="高CPU占用分析"><a href="#高CPU占用分析" class="headerlink" title="高CPU占用分析"></a>高CPU占用分析</h1><p>步骤：</p><ul><li>查看进程 <code>top</code></li><li>查看线程 <code>top -H -p $pid</code></li><li>查看进程打开连接数 <code>lsof -p ${pid}</code></li><li>追踪 <code>strace -T -r -c -p $pid</code></li><li>栈 <code>pstack $pid</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7.x84_64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strace命令: &lt;a href=&quot;http://man.linuxde.net/strace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://man.linuxde.net/strace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pstack命令: &lt;a href=&quot;http://man.linuxde.net/pstack&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://man.linuxde.net/pstack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;lsof命令: &lt;a href=&quot;http://man.linuxde.net/lsof&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://man.linuxde.net/lsof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;系统调用: &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux系统调用列表: &lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;高CPU分析: &lt;a href=&quot;http://blog.51cto.com/yaocoder/1543352&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.51cto.com/yaocoder/1543352&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Linux" scheme="https://zhang21.github.io/tags/Linux/"/>
    
      <category term="系统调优" scheme="https://zhang21.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="https://zhang21.github.io/2018/05/06/Python/"/>
    <id>https://zhang21.github.io/2018/05/06/Python/</id>
    <published>2018-05-06T08:11:16.000Z</published>
    <updated>2018-09-06T07:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境:</p><ul><li>CentOS7x86_64</li><li>Python3.5</li></ul><p>参考:</p><ul><li>Python教程: <a href="https://docs.python.org/3.5/tutorial/index.html" target="_blank" rel="noopener">https://docs.python.org/3.5/tutorial/index.html</a></li><li>Python词汇表: <a href="https://docs.python.org/3.5/glossary.html" target="_blank" rel="noopener">https://docs.python.org/3.5/glossary.html</a></li><li>Python语言参考: <a href="https://docs.python.org/3.5/reference/index.html" target="_blank" rel="noopener">https://docs.python.org/3.5/reference/index.html</a></li><li>Python HOWTOs: <a href="https://docs.python.org/3.5/howto/index.html" target="_blank" rel="noopener">https://docs.python.org/3.5/howto/index.html</a></li><li>Python标准库: <a href="https://docs.python.org/3.5/library/" target="_blank" rel="noopener">https://docs.python.org/3.5/library/</a></li><li>PyPI: <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a></li><li>Awesome-Python<ul><li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">https://github.com/vinta/awesome-python</a></li><li><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a></li></ul></li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><h1 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h1><ul><li><p><code>&gt;&gt;&gt;</code><br>交互式shell的默认Python提示符</p></li><li><p><code>...</code><br>在为缩进代码块输入代码时，或在一对匹配的左右分隔符中，交互式shell的默认Python提示符</p></li><li><p><code>2to3</code><br>将Python2.x代码转换为Python3.x代码的工具</p></li><li><p>抽象基类(abstract base class)</p></li><li><p>参数(argument)<br>调用函数时传递给(或方法)的值: 关键字参数/可选参数</p></li><li><p>异步上下文管理器(asynchronous context manager)<br>控制在异步语句中看到的环境对象</p></li><li><p>异步生成器(asynchronous generator)<br>返回一个生成器迭代器的函数</p></li><li><p>异步生成器迭代器(asynchronous generator iterator)<br>由异步生成器创建的对象</p></li><li><p>异步可迭代(asynchronous iterable)<br>一个对象</p></li><li><p>异步迭代器(asynchronous iterator)<br>一个对象</p></li><li><p>属性(attribute)<br>按名称引用的对象关联的值</p></li><li><p>awaitable<br>一个对象</p></li><li><p>二进制文件(binary file)<br>能读写bytes-like对象的文件对象</p></li><li><p>bytes-like对象<br>支持Buffer Protocol并可以导出C-contiguous buffer的对象</p></li><li><p>字节码(bytecode)<br>Python源代码被编译成字节码</p></li><li><p>类(class)<br>用于创建用户对象的模板</p></li><li><p>coercion<br>在涉及两个相同类型参数的操作中，将一个类型的实例隐式转换为另一个类型的实例</p></li><li><p>复数(complex number)</p></li><li><p>上下文管理器(context manager)</p></li><li><p>contiguous</p></li><li><p>协程(coroutine)</p></li><li><p>coroutine function</p></li><li><p>CPython<br>Python语言的规范实现</p></li><li><p>修饰器(decorator)<br>返回另一个函数的函数</p></li><li><p>描述(descriptor)</p></li><li><p>字典(dictionary)</p></li><li><p>字典视图(dictionary view)<br>从<code>dict.keys()</code>, <code>dict.values()</code>, <code>dict.items()</code>返回的对象称为字典视图</p></li><li><p>文档字符串(docstring)<br>在类，函数，或模块中的第一个表达式出现的字符串文字</p></li><li><p>duck-typing<br>一种编程风格</p></li><li><p>表达式(expression)</p></li><li><p>扩展模块(extension module)<br>由C/C++编写，通过Python API与核心和用户代码交互</p></li><li><p>f-string</p></li><li><p>文件对象(file object)</p></li><li><p>finder<br>为正在导入的模块查找加载程序的对象</p></li><li><p>地板除(floor division)</p></li><li><p>函数(function)</p></li><li><p>函数注释(function annotation)</p></li><li><p><code>__future__</code><br>可使用伪模块来启用与当前解释器不兼容的新语言功能</p></li><li><p>垃圾回收(garbage collection)<br>不再使用时释放内存的过程</p></li><li><p>生成器(generator)</p></li><li><p>generator iterator</p></li><li><p>生成器表达式(generator expression)<br>返回迭代器的表达式</p></li><li><p>通用函数(generic function)<br>由多个函数组成的函数</p></li><li><p>global interpreter lock<br>确保一次只有一个线程执行Python字节码的机制</p></li><li><p>hashable<br>如果一个对象具有在其生命周期内从不改变的hash值，并且可与其它对象相比，那么这个对象就是可hash的</p></li><li><p>IDLE<br>Python的集成开发环境</p></li><li><p>一成不变的(immutable)<br>具有固定值的对象</p></li><li><p>易变的(mutable)<br>可改变它们值得对象</p></li><li><p>import path</p></li><li><p>importing<br>一个模块中的Python代码在另一个Python代码中可获取</p></li><li><p>importer<br>既能找到又能加载模块的对象</p></li><li><p>交互式(interactive)</p></li><li><p>解释型(interpreted)<br>Python是一种解释型语言，与编译型语言相反</p></li><li><p>interpreter shutdown</p></li><li><p>迭代(iterable)<br>一次能够返回其成员的对象</p></li><li><p>迭代器(iterator)<br>表示数据流的对象</p></li><li><p>关键函数(key function)<br>关键函数或整理函数是一个可调用函数，它返回用于排序的值</p></li><li><p>关键字参数(keyword argument)</p></li><li><p>lambda<br>一个匿名内联函数，由调用该函数时评估的单个表达式组成</p></li><li><p>LBYL<br>三思而后行(Look before you leap)</p></li><li><p>列表(list)<br>一个内建Python序列</p></li><li><p>list comprehension<br>一种紧凑的方式来处理序列中的全部或部分元素，并返回列表和结果</p></li><li><p>loader<br>加载模块的对象</p></li><li><p>映射(mapping)<br>支持任意键查找并实现映射中指定方法的容器对象</p></li><li><p>meta path finder</p></li><li><p>metaclass<br>The class of a class</p></li><li><p>方法(method)<br>类里面定义的函数</p></li><li><p>method resolution order</p></li><li><p>模块(module)<br>Python代码的组织单元的对象</p></li><li><p>module spec</p></li><li><p>named tuple</p></li><li><p>命名空间(namespace)<br>变量存储的地方</p></li><li><p>namespace package<br>仅用作子包的包</p></li><li><p>嵌套范围(nested scope)<br>能够在封闭变量中引用变量</p></li><li><p>new-style class</p></li><li><p>对象(object)<br>具有状态和定义行为的任一数据</p></li><li><p>包(package)<br>可包含子模块或递归子模块的Python模块</p></li><li><p>参数(parameter)<br>函数或方法定义中的一个命名实体，用于指定该函数可接受的参数。<br>有5中参数:</p><ul><li>positional-or-keyword:</li><li>positional-only</li><li>keyword-only</li><li>var-positional</li><li>var-keyword</li></ul></li><li><p>path entry</p></li><li><p>path entry finder</p></li><li><p>path entry hook</p></li><li><p>path based finder</p></li><li><p>path-like object</p></li><li><p>portion<br>单目录中的一组文件</p></li><li><p>positional argument</p></li><li><p>provisional API</p></li><li><p>provisional package</p></li><li><p>Python 3000<br>Python3.x发行版的昵称</p></li><li><p>Python化(Pythonic)<br>与Python语言最常见的习惯用法密切相关的想法或代码片段，而不是使用其它语言通用的概念来实现该代码</p></li><li><p>合格的名字(qualified name)</p></li><li><p>引用计数(reference count)<br>对某个对象的引用次数</p></li><li><p>regular package</p></li><li><p><code>__slots__</code><br>类中的声明，通过预先声明实例属性的空间并消除实例字典来节省内存</p></li><li><p>序列(sequence)</p></li><li><p>单一调度(single dispatch)<br>通用函数调度的一种形式</p></li><li><p>切片(slice)<br>通常包含一部分序列的对象</p></li><li><p>special method<br>一种由Python隐式调用的方法</p></li><li><p>声明(statement)</p></li><li><p>struct sequence<br>具有命名元素的元组</p></li><li><p>text encoding</p></li><li><p>text file</p></li><li><p>三重引号(triple-quoted string)</p></li><li><p>type</p></li><li><p>通用换行符(universal newlines)<br>Unix: <code>\n</code>; Windows: <code>\r\n</code></p></li><li><p>变量注释(variable annotation)<br>与模块全局变量或类属性关联的类型元数据值</p></li><li><p>虚拟环境(virtual environment)</p></li><li><p>虚拟机(virtual machine)</p></li><li><p>Zen of Python<br>Pythono的设计原理和哲学</p></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>官网: <a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p><p>Python教程非正式地向读者介绍了Python语言和系统的基本概念和功能。<br>Python是一种易于学习，功能强大的编程语言。它具有高效的高级数据结构以及面向对象(object-oriented)编程的简单而有效的方法。优雅的语法和动态类型以及其解释的特性，使其成为大多数平台上许多领域脚本编写(scripting)和快速应用程序开发的理想语言。<br>Python解释器很容易用C或C++实现新功能和数据类型进行扩展。Python也适合作为定制程序的扩展语言。</p><p>本教程非正式地向读者介绍了Python语言和系统的基本概念和功能，不会涵盖每个功能。相反，它引入了许多Python最值得注意的功能和语言风格。</p><p><br><br><br></p><h2 id="激起你的胃口"><a href="#激起你的胃口" class="headerlink" title="激起你的胃口"></a>激起你的胃口</h2><p>Whetting Your Appetite</p><p><br></p><p>将一些工作自动化，或编写一个小程序。</p><p>C/C++/Java，编写/编译/测试/重编译周期太慢，但你又不想为你的应用程序开发和设计一门全新的语言。</p><p>这样的话，Python就是适合你的语言！</p><p><br></p><p>为一些任务编写Unix shell script或Windows batch file，但它们只适合文本数据，而不适合GUI应用程序…<br>你可以编写C/C++/Java程序，但需要很长的开发时间。Python简单易用，可帮助你更快完成工作。</p><p>Python为大型程序提供更多的结构和支持，它提供了更多的错误检查。作为一种非常高级的语言，它有内建的高级数据类型(如灵活的数组和字典)。<br>由于其更通用的数据类型，Python适用于比<code>awk</code>甚至<code>Perl</code>更大的问题域，但Python中的许多事情至少与这些语言一样容易。</p><p>Python允许你将你的程序拆分成模块，使其它Python程序能重用。它附带了大量的标准模块，你可将它们作为学习Python编程的基础。包括了: 文件I/O；系统调用；socket；GUI…</p><p>Python是一种解释型语言，在程序开发中节省大量时间，因为不需要编译和链接。</p><p>Python可以使程序紧凑而易读，由Python编写的程序通常比等效的C/C++/Java程序代码少得多。原因如下:</p><ul><li>高级数据类型允许你在单个语句中表达复杂的操作</li><li>语句分组通过缩进(4个空格)来完成，而不是开始和结束</li><li>无需声明变量和参数</li></ul><p>Python是可扩展的，如果你会C编程的话，很容易为解释器添加一个新的内置函数或模块，或将Python程序链接到可用库的二进制形式。也可将Python解释器链接到C编写的应用程序中。</p><p>顺便说一句，该语言是根据BBC节目<strong>Monty Python’s Flying Circus</strong>命名，与爬行动物无关。</p><p>学习语言的最好方法就是使用它，以工代练！</p><p><br><br><br><br><br></p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p>Python Interpreter</p><p><br></p><p>My Linux:</p><ul><li><code>/usr/bin/python3</code></li><li><code>/lib64/python3.5/</code></li></ul><p><br><br><br></p><h3 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h3><p>Interactive Mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;for i in range(4):</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>Argument Passing</p><p><br></p><p>使用<code>sys</code>模块的<code>argv</code>变量给脚本传递参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = len(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num != <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'Usage: xxx.py argv1 argv2'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'argu[0] is '</span> + sys.argv[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">'argu[1] is '</span> + sys.argv[<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">'argu[2] is '</span> + sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod u+x xxx.py</span><br><span class="line"></span><br><span class="line">./argvPass.py <span class="number">1</span> <span class="number">22</span></span><br><span class="line">argu[<span class="number">0</span>] <span class="keyword">is</span> ./argvPass.py</span><br><span class="line">argu[<span class="number">1</span>] <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">argu[<span class="number">2</span>] <span class="keyword">is</span> <span class="number">22</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h3><p>Source Code Encoding</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>An Informal Introduction to Python</p><p><br></p><p>注意Python的两个默认提示符:</p><ul><li><code>&gt;&gt;&gt;</code></li><li><code>...</code></li></ul><p><br><br><br></p><h3 id="作为计算器"><a href="#作为计算器" class="headerlink" title="作为计算器"></a>作为计算器</h3><p>Using Python as a Calculator</p><p><br></p><h4 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line"> -</span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">//(取商)</span><br><span class="line">%(取余)</span><br><span class="line">**</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">float</span><br><span class="line">decimal</span><br><span class="line">fraction(分数)</span><br><span class="line">comlex number(复数)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'(single quote)</span></span><br><span class="line"><span class="string">"(double quote)</span></span><br><span class="line"><span class="string">\(转义)</span></span><br><span class="line"><span class="string">r(元字符)</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">index</span></span><br><span class="line"><span class="string">string[-1]</span></span><br><span class="line"><span class="string">string[0:2]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">len()</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list = [xx, x, ...]</span><br><span class="line"></span><br><span class="line">index</span><br><span class="line">list[index]</span><br><span class="line">list[start:stop]</span><br><span class="line"></span><br><span class="line">method</span><br><span class="line">append()</span><br><span class="line">pop()</span><br><span class="line">del()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="编程第一步"><a href="#编程第一步" class="headerlink" title="编程第一步"></a>编程第一步</h3><p>First Steps Towards Programming</p><p><br></p><p>斐波那契数列(Fibonacci series)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">10</span>:</span><br><span class="line">    print(b, end=<span class="string">','</span>)</span><br><span class="line">a, b = b, a+b</span><br><span class="line"></span><br><span class="line"> <span class="comment">#多重赋值(multiple assignment)</span></span><br><span class="line"> <span class="comment">#关键字参数(keyword argument)</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>Control Flow Tools</p><p><br></p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while Statements</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = input(int(<span class="string">'Please input an int: '</span>))</span><br><span class="line"></span><br><span class="line">whiel a &lt; <span class="number">50</span>:</span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if Statements</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = int(input(<span class="string">"please input an int: "</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    print(<span class="string">'Negative changed to zero'</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'Zero'</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'Single'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'More'</span>)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for Statements</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">'a'</span>, <span class="string">'bb'</span>, <span class="string">'ccc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">print(w, len(w))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">如果需要修改迭代中的序列，建议先制作副本，遍历一个序列并不会隐式地创建一个副本</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">words = [<span class="string">'a'</span>, <span class="number">22</span>, <span class="string">'ccc'</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> words[:]:</span><br><span class="line">    <span class="keyword">if</span> type(w) <span class="keyword">is</span> int:</span><br><span class="line">words.insert(<span class="number">0</span>, w)</span><br><span class="line"></span><br><span class="line">words</span><br><span class="line">[<span class="number">22</span>, <span class="string">'a'</span>, <span class="number">22</span>, <span class="string">'ccc'</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>The range() Function<br>遍历一系列数字</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">101</span>, <span class="number">10</span>):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">22</span>, <span class="string">'A'</span>, <span class="string">'AA'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a))</span><br><span class="line">print(i, a[i])</span><br><span class="line"></span><br><span class="line">list(range(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><br></p><p><strong>注意</strong><br>在许多方面，由<code>range()</code>返回的对象的行为就好像它是一个列表，但事实并非如此。它是一个对象，在你迭代时才返回所需序列，但它并不真正生成列表，从而节省空间。<br>我们说这样一个对象是可迭代的(iterable)。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(range(<span class="number">10</span>))</span><br><span class="line">range(<span class="number">0</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h3><p>break and continue Statements, and else Clauses on Loops</p><ul><li><code>break</code><ul><li>结束循环</li></ul></li><li><code>continue</code><ul><li>结束本次循环</li></ul></li></ul><p><br></p><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p>pass Statements<br><code>pass</code>语句什么也不做！当语句需要语法而程序不需要任何操作时，可使用它。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">emptyClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>Defining Functions<br>关键字<code>def</code>引入一个函数定义，必须跟随函数名称和形式参数。函数主体语句必须缩进</p><p>函数主体的第一个语句是可选的字符串文字(sting literal)，用于描述函数。<br>在编写的代码中包含文档字符串是一种很好的做法，请养成此习惯。</p><p>函数中的所有变量赋值都将值存储在本地符号表中，而变量引用首先在本地符号表中查找，然后是封闭函数的本地符号表，然后是全局符号表，最后是内置名称表。<br>因此，全局变量不能直接在函数内赋值(除非是<code>global</code>语句)，尽管它们可能被引用。</p><p>事实上即使是没有<code>return</code>语句的函数也会返回一个值，它被称为<code>None</code>(一个内建名)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="string">"""function's documentation</span></span><br><span class="line"><span class="string">   print a Fibonacci series up to n.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; n:</span><br><span class="line">print(a, end=<span class="string">'  '</span>)</span><br><span class="line">a, b = b, a+b</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">fib(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">f = fib</span><br><span class="line">f(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">print(fib())</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><p><br></p><p>也可以使用可变数量的参数来定会函数。</p><p><br></p><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><p>Default Argument Values</p><p>最有用的形式是为一个或多个参数指定默认值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask_ok</span><span class="params">(prompt, retries=<span class="number">4</span>, reminder=<span class="string">'Please try again!'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        ok = input(prompt)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'y'</span>, <span class="string">'ye'</span>, <span class="string">'yes'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'n'</span>, <span class="string">'no'</span>, <span class="string">'nop'</span>, <span class="string">'nope'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        retries = retries - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> retries &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid user response'</span>)</span><br><span class="line">        print(reminder)</span><br></pre></td></tr></table></figure><p>函数可通过如下方法调用:</p><ul><li>只给出必须的参数: <code>ask_os(&#39;Prompt xxx&#39;)</code></li><li>给出可选参数: <code>ask_ok(&#39;Prompt xx&#39;, 3)</code></li><li>给出所有参数: <code>ask_ok(agr1, arg2, arg3)</code></li></ul><p><br></p><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>Keyword Arguments</p><p>也可使用<code>kwarg = value</code>来调用函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parrot</span><span class="params">(voltage, state=<span class="string">'a stiff'</span>, action=<span class="string">'voom'</span>, type=<span class="string">'Norwegian Blue'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"-- This parrot wouldn't"</span>, action, end=<span class="string">' '</span>)</span><br><span class="line">    print(<span class="string">"if you put"</span>, voltage, <span class="string">"volts through it."</span>)</span><br><span class="line">    print(<span class="string">"-- Lovely plumage, the"</span>, type)</span><br><span class="line">    print(<span class="string">"-- It's"</span>, state, <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parrot(<span class="number">1000</span>)                                          <span class="comment"># 1 positional argument</span></span><br><span class="line">parrot(voltage=<span class="number">1000</span>)                                  <span class="comment"># 1 keyword argument</span></span><br><span class="line">parrot(voltage=<span class="number">1000000</span>, action=<span class="string">'VOOOOOM'</span>)             <span class="comment"># 2 keyword arguments</span></span><br><span class="line">parrot(action=<span class="string">'VOOOOOM'</span>, voltage=<span class="number">1000000</span>)             <span class="comment"># 2 keyword arguments</span></span><br><span class="line">parrot(<span class="string">'a million'</span>, <span class="string">'bereft of life'</span>, <span class="string">'jump'</span>)         <span class="comment"># 3 positional arguments</span></span><br><span class="line">parrot(<span class="string">'a thousand'</span>, state=<span class="string">'pushing up the daisies'</span>)  <span class="comment"># 1 positional, 1 keyword</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="name-name"><a href="#name-name" class="headerlink" title="*name/**name"></a><code>*name/**name</code></h4><p><code>**name</code>，它接收一个字典(<code>keyword=value</code>)。可能与<code>*name</code>结合使用。<code>*name</code>必须出现在<code>**name</code>之前。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shop</span><span class="params">(kind, *arguments, **keywords)</span>:</span></span><br><span class="line">    print(<span class="string">"-- Do you have any "</span>, kind, <span class="string">"?"</span>)</span><br><span class="line">    print(<span class="string">"-- I'm sorry, we're all out of "</span>, kind)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> arguments:</span><br><span class="line">        print(arg)</span><br><span class="line">    print(<span class="string">'\n-----\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> kw <span class="keyword">in</span> keywords:</span><br><span class="line">        print(kw, <span class="string">':'</span>, keywords[kw])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shop(<span class="string">'Kind'</span>, <span class="string">'arg1'</span>, <span class="string">'arg2'</span>, kw1=<span class="string">'KW1'</span>, kw2=<span class="string">'KW2'</span>, kw3=<span class="string">'KW3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-- Do you have any  Kind ?</span></span><br><span class="line"><span class="string">-- I'm sorry, we're all out of  Kind</span></span><br><span class="line"><span class="string">arg1</span></span><br><span class="line"><span class="string">arg2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">kw3 : KW3</span></span><br><span class="line"><span class="string">kw1 : KW1</span></span><br><span class="line"><span class="string">kw2 : KW2</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="任意参数列表"><a href="#任意参数列表" class="headerlink" title="任意参数列表"></a>任意参数列表</h4><p>Arbitrary Argument Lists</p><p>最不经常使用的选项是指定可以用任意数量的参数调用一个函数，这些参数将被封装在一个元组中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arb</span><span class="params">(*args)</span>:</span></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">print(arg)</span><br><span class="line"></span><br><span class="line">art(<span class="number">1</span>, <span class="number">22</span>, <span class="string">'CCC'</span>)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="解包参数"><a href="#解包参数" class="headerlink" title="解包参数"></a>解包参数</h4><p>Unpacking Argument Lists</p><p>当参数已经在一个列表或元组中时，会出现相反的情况。需要对单独的位置参数的函数调用进行解包。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">args = [<span class="number">5</span>]</span><br><span class="line">list(range(*args))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><br></p><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p>可以使用<code>lambda</code>关键字创建小的匿名函数。<br>Lambda函数可用于需要函数对象的任何地方，它在语法上受限于单个表达式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambdaTest</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line"></span><br><span class="line">f = lambdaTest(<span class="number">10</span>)</span><br><span class="line">f(<span class="number">1</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line">f(<span class="number">5</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h4><p>Documentation Strings</p><p>以下是关于文档字符串内容和格式的一些约定:</p><ul><li>第一行应该始终是对象目的的简短摘要</li><li>第二行应该是空白，如果有多行的话</li><li>以下几行应该是描述</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Document it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This func just print one argument.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(func.__doc__)</span><br><span class="line"></span><br><span class="line">Document it.</span><br><span class="line">    This func just <span class="keyword">print</span> one argument.</span><br></pre></td></tr></table></figure><p><br></p><h4 id="函数注释"><a href="#函数注释" class="headerlink" title="函数注释"></a>函数注释</h4><p>Function Annotations</p><p>函数注释完全是关于用户定义函数使用的类型的可选元数据信息。</p><p>Annotations以字典的形式存储在函数的<code>__annotations__</code>属性中，并且不影响函数的其它部分。参数注释由参数名称后面的冒号<code>:</code>定义，后跟表达式评估注释的值。注释由参数列表和<code>def</code>语句结束的冒号之间的<code>-&gt;</code>定义，后跟一个表达式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name: str, age: int = <span class="number">18</span>)</span> -&gt; str:</span></span><br><span class="line">    print(<span class="string">"Annotations: "</span>, f.__annotations__)</span><br><span class="line">    print(<span class="string">"Arguments: "</span>, name, age)</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">'and'</span> + str(age)</span><br><span class="line"></span><br><span class="line">f(<span class="string">'Zhang21'</span>)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h3><p>不同的语言有不同的编码风格。但是，让别人很轻松便能阅读你的代码总是一个好主意！</p><p>对于Python而言，PEP(Python Enhanced Proposals) 8 已成为大多数项目遵循的风格指南。它促进了非常可读和令人喜爱的编码风格，每个Python开发者都应该阅读它。<br>以下是最重要的几点：</p><ul><li>使用<code>4空格</code>缩进，而不是<code>tab</code></li><li><code>自动换行</code>，不要超过79个字符</li><li>使用<code>空白行</code>来分割函数和类，以及函数内的更大快代码</li><li>如有可能，请将<code>注释</code>放在它们的上一行</li><li>使用<code>文档字符串</code></li><li>在运算符和逗号后面使用空格，但不要直接在包围结构中使用空格 -&gt; <code>(a + b)</code></li><li>一致地命名函数和类</li><li>建议使用<code>UTF-8</code>编码方式</li><li>建议不要在标识符中使用non-ASCII字符，如果有其它语言的人会去维护代码</li></ul><p><br><br><br><br><br></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Data Structures</p><p><br></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>More on Lists</p><p><br></p><p>列表数据类型有多种方法：</p><ul><li><p><code>list.append(x)</code><br>添加一个项到列表的末尾</p></li><li><p><code>list.extend(iterable)</code><br>通过添加迭代中的所有项来扩展列表</p></li><li><p><code>list.insert(i, x)</code><br>在列表中给定位置插入一个项</p></li><li><p><code>list.remove(x)</code><br>删除列表中给定值的第一项</p></li><li><p><code>list.pop()</code><br>返回并删除列表中给定位置的项<br>如果未指定index，则默认为最后一项</p></li><li><p><code>list.clear()</code><br>删除列表中的所有项</p></li><li><p><code>list.index(x)</code><br>返回指定值的第一个索引<br>如果没有此值，返回ValueError</p></li><li><p><code>list.count(x)</code><br>返回列表中指定值出现的次数</p></li><li><p><code>list.sort()</code><br>对列表中的项进行排序</p></li><li><p><code>list.reverse()</code><br>反转列表中的元素</p></li><li><p><code>list.copy()</code><br>返回列表的shallow copy</p></li></ul><p><br></p><p><strong>列表用处：</strong></p><ul><li><p>Stack</p></li><li><p>Queue</p></li></ul><ul><li>列表解析<br>List Comprehensions</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#列表解析提供了一个简洁的方式来创建列表</span></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    l.append(i**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">#lambda</span></span><br><span class="line">l = list(map(<span class="keyword">lambda</span> i: i**<span class="number">2</span>, range(<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"> <span class="comment">#or</span></span><br><span class="line">l = [x**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>] <span class="keyword">if</span> x != y]</span><br></pre></td></tr></table></figure><ul><li>嵌套列表解析<br>Nested List Comprehensions</li></ul><p>列表解析中的初始表达式可以是任意表达式，包括另一个列表解析。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">[<span class="number">9</span>, <span class="number">10</span> ,<span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> l] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h3><p><code>del</code>语句可从列表中删除切片或整个列表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="元组和序列"><a href="#元组和序列" class="headerlink" title="元组和序列"></a>元组和序列</h3><p>Tuples and Sequences</p><p><br></p><p>列表和字符串由许多共同属性，如索引和切片操作。<br>列表是可变的，它们的元素通常是同类，并且通过遍历列表可访问。</p><p>元组是不可变的！无法对元组项赋值，但可创建包含可变对象的元组。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">123</span>, <span class="number">321</span>, <span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">tt = t, (<span class="string">'a'</span>, <span class="string">'bb'</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">123</span>, <span class="number">321</span>, <span class="string">'hello), ('</span>a<span class="string">', '</span>b<span class="string">b')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> #对元组赋值会出错</span></span><br><span class="line"><span class="string">t[0] = 888</span></span><br><span class="line"><span class="string">TypeError: '</span>tuple<span class="string">' object does not support item assignment</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> #序列拆包(unpacking)</span></span><br><span class="line"><span class="string"> #要求变量数量等于元素数量</span></span><br><span class="line"><span class="string">x, y, z = t</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">x</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">321</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">z</span></span><br><span class="line"><span class="string">'</span>hello<span class="string">'</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>Sets</p><p><br></p><p>Python中的集合是没有重复元素的无序集合，并支持数学操作:</p><ul><li>并集 <code>a | b</code></li><li>交集 <code>a &amp; b</code></li><li>差集 <code>a - b</code></li><li>异或 <code>a ^ b</code></li></ul><p>使用大(花)括号<code>{}</code>或<code>set()</code>创建集合，但创建一个空集合使用<code>set()</code>，而不是<code>{}</code>——后者创建一个空字典。</p><p>集合也支持集合解析。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">alpha = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line"></span><br><span class="line">alpha</span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">'c'</span> <span class="keyword">in</span> alpha</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#数学运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"></span><br><span class="line">a | b</span><br><span class="line">a &amp; b</span><br><span class="line">a - b</span><br><span class="line">a ^ b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#集合解析</span></span><br><span class="line">&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abcdefgabc'</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'abc'</span>&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>Dictionaries</p><p><br></p><p>字典数据类型在其它语言中被称为“associative memories” or “associative arrays”。与由数字索引的序列不同，字典由<code>key</code>索引(可以是任何不可变类型)，字符串和数字都可作为<code>key</code>。如果元组只包含字符串，数字或元组，则可作为<code>key</code>。若包含任何可变对象，则不能作为<code>key</code>。你不能使用列表作为<code>key</code>。</p><p>可将字典视为无序的键:值对，并要求键是唯一！<br>花括号<code>{}</code>创建一个空字典。</p><p>字典的主要操作是用某个<code>key</code>存储<code>value</code>，并提取给定<code>key</code>的<code>value</code>。使用<code>del</code>语句删除一个键值对；新键值对会替换旧键值对。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'AA'</span>, <span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'tel'</span>: <span class="number">155</span>&#125;</span><br><span class="line">info[<span class="string">'addr'</span>] = <span class="string">'Chengdu'</span></span><br><span class="line"></span><br><span class="line">info</span><br><span class="line">info[<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">'id'</span>]</span><br><span class="line"></span><br><span class="line">list(info.keys())</span><br><span class="line">print(info.values())</span><br><span class="line">print(info.items())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#dict()构造函数</span></span><br><span class="line">dict([(<span class="string">'name'</span>, <span class="string">'A'</span>), (<span class="string">'age'</span>, <span class="number">11</span>)])</span><br><span class="line">dict(&#123;<span class="string">'name'</span>: <span class="string">'A'</span>, <span class="string">'age'</span>: <span class="number">11</span>&#125;)</span><br><span class="line">dict(name=<span class="string">'zhang'</span>, age=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">#字典解析</span></span><br><span class="line">&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="循环技巧"><a href="#循环技巧" class="headerlink" title="循环技巧"></a>循环技巧</h3><p>Looping Techniques</p><p><br></p><ul><li>字典循环</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'AA'</span>, <span class="string">'age'</span>: <span class="number">11</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> info.items():</span><br><span class="line">    print(k, v, sep=<span class="string">':'</span>)</span><br><span class="line"></span><br><span class="line">name:AA</span><br><span class="line">age:<span class="number">11</span></span><br></pre></td></tr></table></figure><ul><li>序列循环<br>可使用<code>enumerate()</code>函数同时检索位置索引和相应值</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</span><br><span class="line">    print(i, v)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> a</span><br><span class="line"><span class="number">1</span> b</span><br><span class="line"><span class="number">2</span> c</span><br></pre></td></tr></table></figure><ul><li>同时循环多个序列<br>要同时循环多个序列，可将这些条目与<code>zip()</code>函数配对</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aa = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">bb = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> zip(aa, bb):</span><br><span class="line">    print(<span class="string">'&#123;0&#125;, &#123;1&#125;'</span>.format(a, b))</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>, a</span><br><span class="line"><span class="number">2</span>, b</span><br><span class="line"><span class="number">3</span>, c</span><br></pre></td></tr></table></figure><ul><li>反向循环序列</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">6</span>)):</span><br><span class="line">    print(i, end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br></pre></td></tr></table></figure><ul><li>循环排序</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'ac'</span>, <span class="string">'fb'</span>, <span class="string">'nx'</span>, <span class="string">'by'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted(l):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">ac</span><br><span class="line">by</span><br><span class="line">fb</span><br><span class="line">nx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll = [<span class="string">'ac'</span>, <span class="string">'fb'</span>, <span class="string">'nx'</span>, <span class="string">'by'</span>, <span class="string">'ac'</span>, <span class="string">'by'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted(set(ll)):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">ac</span><br><span class="line">by</span><br><span class="line">fb</span><br><span class="line">nx</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="关于条件"><a href="#关于条件" class="headerlink" title="关于条件"></a>关于条件</h3><p>More on Conditions</p><p><br></p><p><code>while</code>和<code>if</code>语句中使用的条件可以包含任何运算符，而不仅仅是比较。</p><p>比较操作符<code>in</code>和<code>not in</code>检查值是否在序列中<br>操作符<code>is</code>和<code>is not</code>比较两个对象是否相同，这适用于可变对象(如list)</p><p>比较操作可以使用布尔运算符<code>and</code>和<code>or</code>进行组合，结果可用<code>not</code>。它们的优先级低于比较操作<br>所有的比较操作符(comparison operators)具有相同的优先级，都低于数值运算符</p><p><br><br><br><br><br></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Modules</p><p><br></p><p>如果你从Python解释器中退出并重新进入，你所做的定义(函数和变量)将会丢失。因此，如果编写一个稍长的程序，最好使用文本编辑器，然后将代码文件作文输入来运行它。这就被称为创建一个脚本。<br>随着程序变长，可能需要将其分割为便于维护的多个文件。你可能还想使用你在多个程序中编写的某个功能(函数)，而不是将其定义复制到每个程序中。</p><p>为了支持此，Python有一种方法可将定义(definition)放入一个文件中，并在脚本或交互式实例中使用它们。这样的文件被称为模块(module)。<br>来自模块的定义可以被导入到其它模块或主模块中。</p><p>模块是一个包含Python定义和语句的文件。文件名是带有<code>.py</code>的模块名。<br>在模块中，模块的名称(string)用作全局变量<code>__name__</code>的值。</p><p><br></p><p><strong>编写一个模块：</strong><br><code>vim /path/fibo.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#Fibonacci numbers module</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; n:</span><br><span class="line">    print(b, end=<span class="string">' , '</span>)</span><br><span class="line">a, b = b, a+b</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span></span><br><span class="line">result = []</span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; n:</span><br><span class="line">result.appen(b)</span><br><span class="line">a, b = b, a+b</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><strong>载入此模块：</strong><br>如果没有将此模块放入Python默认lib目录(如/usr/lib64/python3.5/)的话，则需要进入模块所在目录打开Python解释器。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /path</span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibo.fb(<span class="number">100</span>)</span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibo.fib2(<span class="number">100</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibo.__name__</span><br><span class="line"><span class="string">'fibo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibo.__str__()</span><br><span class="line">module <span class="string">'fibo'</span> <span class="keyword">from</span> <span class="string">'/path/fibo.py'</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="更多模块信息"><a href="#更多模块信息" class="headerlink" title="更多模块信息"></a>更多模块信息</h3><p>More on Modules</p><p>一个模块可以包含可执行语句以及函数定义。这些语句旨在初始化模块，它们仅在<code>import</code>语句中第一次遇到模块名称时执行。</p><p>每个模块都有自己的私人符号表(private symbol table)，它被模块中定义的所有函数(functions)用作全局符号表(global symbol talbe)。因此，模块的作者可以在模块中使用全局变量(global variable)，而不用担心与用户的全局变量发生意外冲突。</p><p>模块可以导入其它模块。习惯上(但不是硬性要求)，将<code>import</code>语句放在模块(脚本)的开头。导入模块的名称被放置在导入模块的全局符号表中。</p><p><br></p><ul><li>将模块名称直接导入到导入模块的符号表中，这不会在本地符号表中引入导入模块的名称</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#fibo模块名并没有被定义</span></span><br><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> fib, fib2</span><br></pre></td></tr></table></figure><ul><li>导入模块中定义的所有名称<br>在大多数情况下，Python程序员不会使用这个工具。因为它会向解释器引入一组未知的名称，可能会隐藏你已经定义的一些东西。<br>注意，通常从模块或包中<code>import *</code>的做法是不被接受的，因为它经常会导致代码可读性很差。但是，可以使用它来保存交互式会话中的输入。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#这会导入除了以下划线开头的所有名称</span></span><br><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ul><li>将导入模块名称绑定到指定名称</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fibo <span class="keyword">as</span> fib</span><br><span class="line"></span><br><span class="line">fib.fib(<span class="number">100</span>)</span><br><span class="line">fib.fib2(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> fib2 <span class="keyword">as</span> fibonacci</span><br><span class="line"></span><br><span class="line">fibonacci(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="把模块作为脚本来执行"><a href="#把模块作为脚本来执行" class="headerlink" title="把模块作为脚本来执行"></a>把模块作为脚本来执行</h4><p>Executing modules as scripts</p><p>如果你将模块中的<code>__name__</code>设置为<code>__main__</code>，模块中的代码就会被执行，就像导入它一样。这意味着你需要在你的模块的末尾添加它们。<br>如果模块被导入，代码也不会执行。</p><p>这通常用于为模块提供用户接口，或测试。</p><p><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">fib(int(sys.argv[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python3 fibo.py &#123;args&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="模块的搜索路径"><a href="#模块的搜索路径" class="headerlink" title="模块的搜索路径"></a>模块的搜索路径</h4><p>The Module Search Path</p><p>当<code>import fibo</code>模块时，解释器首先在内建模块中搜索此名称。如果找不到，它会在<code>sys.path</code>给出的目录列表中搜索<code>fibo.py</code>文件。</p><p><code>sys.path</code>从以下位置初始化：</p><ul><li>包含输入脚本的目录(未指定文件时的当前目录)</li><li>PYTHONPATH</li><li>依赖于安装的默认值</li><li>包含符号链接的目录不会被添加到模块的搜索路径中</li></ul><p><br></p><h4 id="编译的Python文件"><a href="#编译的Python文件" class="headerlink" title="编译的Python文件"></a>编译的Python文件</h4><p>“Compiled” Python files</p><p>为了加速载入模块，Python将每个模块的编译版本缓存在名为<code>module.version.pyc</code>的<code>__pycache__</code>目录下，对编译文件的格式进行编码，它通常包含Python版本号。<br>Python根据编译后的版本检查源代码的修改日期，看它是否过期并需要重新编译。这是一个完全自动的过程。另外，编译后的模块时独立于平台的，因此可以在不同体系结构的系统之间共享相同的库。</p><p>有两种情况，Python不会检查缓存：</p><ul><li>总是重新编译并且不存储从命令行直接加载的模块的结果</li><li>没有源模块</li></ul><p><br></p><p><strong>专家提示：</strong></p><ul><li>可以Python命令中使用<code>-0</code>或<code>-00</code>来减少已编译模块的大小</li><li>读取<code>.pyc</code>文件不会比<code>.py</code>文件快，唯一更快的事情是它们被加载的速度</li><li>模块<code>compileall</code>可以为目录中的所有模块创建<code>.pyc</code>文件</li><li>更多细节，参见PEP 3147</li></ul><p><br><br><br></p><h3 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h3><p>Standard Modules</p><p><br></p><p>Python提供了一个标准模块库。</p><p>一些模块被内置到解释器中，提供了对操作的访问。这些操作不属于语言核心的一部分，但是为了提高效率或提供对操作系统的访问权限。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.ps1</span><br><span class="line"><span class="string">'&gt;&gt;&gt;'</span></span><br><span class="line">sys.ps2</span><br><span class="line"><span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">sys.ps1 = <span class="string">'&lt;&lt;&lt;'</span></span><br><span class="line">sys.ps1</span><br><span class="line"><span class="string">'&lt;&lt;&lt;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#查看PYTHONPATH</span></span><br><span class="line">sys.path.__str__</span><br><span class="line"> <span class="comment">#添加PYTHONPATH</span></span><br><span class="line">sys.path.append(<span class="string">'/home/zhang/venv/python'</span>)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a><code>dir()</code>函数</h3><p>内建函数<code>dir()</code>用于找出模块定义的名称。<br>它列出所有类型的名称： 变量，模块，函数…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fibo, sys</span><br><span class="line"></span><br><span class="line">dir(fibo)</span><br><span class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'fib'</span>, <span class="string">'fib2'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dir(sys)</span><br><span class="line">[<span class="string">'__displayhook__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__excepthook__'</span>, <span class="string">'__interactivehook__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'__stderr__'</span>, <span class="string">'__stdin__'</span>, <span class="string">'__stdout__'</span>, <span class="string">'_clear_type_cache'</span>, <span class="string">'_current_frames'</span>, <span class="string">'_debugmallocstats'</span>, <span class="string">'_getframe'</span>, <span class="string">'_home'</span>, <span class="string">'_mercurial'</span>, <span class="string">'_xoptions'</span>, <span class="string">'abiflags'</span>, <span class="string">'api_version'</span>, <span class="string">'argv'</span>, <span class="string">'base_exec_prefix'</span>, <span class="string">'base_prefix'</span>, <span class="string">'builtin_module_names'</span>, <span class="string">'byteorder'</span>, <span class="string">'call_tracing'</span>, <span class="string">'callstats'</span>, <span class="string">'copyright'</span>, <span class="string">'displayhook'</span>, <span class="string">'dont_write_bytecode'</span>, <span class="string">'exc_info'</span>, <span class="string">'excepthook'</span>, <span class="string">'exec_prefix'</span>, <span class="string">'executable'</span>, <span class="string">'exit'</span>, <span class="string">'flags'</span>, <span class="string">'float_info'</span>, <span class="string">'float_repr_style'</span>, <span class="string">'getallocatedblocks'</span>, <span class="string">'getcheckinterval'</span>, <span class="string">'getdefaultencoding'</span>, <span class="string">'getdlopenflags'</span>, <span class="string">'getfilesystemencoding'</span>, <span class="string">'getprofile'</span>, <span class="string">'getrecursionlimit'</span>, <span class="string">'getrefcount'</span>, <span class="string">'getsizeof'</span>, <span class="string">'getswitchinterval'</span>, <span class="string">'gettrace'</span>, <span class="string">'hash_info'</span>, <span class="string">'hexversion'</span>, <span class="string">'implementation'</span>, <span class="string">'int_info'</span>, <span class="string">'intern'</span>, <span class="string">'last_traceback'</span>, <span class="string">'last_type'</span>, <span class="string">'last_value'</span>, <span class="string">'maxsize'</span>, <span class="string">'maxunicode'</span>, <span class="string">'meta_path'</span>, <span class="string">'modules'</span>, <span class="string">'path'</span>, <span class="string">'path_hooks'</span>, <span class="string">'path_importer_cache'</span>, <span class="string">'platform'</span>, <span class="string">'prefix'</span>, <span class="string">'ps1'</span>, <span class="string">'ps2'</span>, <span class="string">'setcheckinterval'</span>, <span class="string">'setdlopenflags'</span>, <span class="string">'setprofile'</span>, <span class="string">'setrecursionlimit'</span>, <span class="string">'setswitchinterval'</span>, <span class="string">'settrace'</span>, <span class="string">'stderr'</span>, <span class="string">'stdin'</span>, <span class="string">'stdout'</span>, <span class="string">'thread_info'</span>, <span class="string">'version'</span>, <span class="string">'version_info'</span>, <span class="string">'warnoptions'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#它不会列出内建函数和变量的名称，除非如下操作</span></span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line">dir(builtins)</span><br><span class="line"></span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>, <span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FileExistsError'</span>, <span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>, <span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'_'</span>, <span class="string">'__build_class__'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'exit'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>, <span class="string">'zip'</span>]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>Packages</p><p><br></p><p>包是通过”dotted(.) module names“，来构造Python模块命名空间的一种方式。</p><p>假设你想设计一个模块集(包)来统一处理声音文件和声音数据。有许多不同的声音文件格式。因此你需要创建和维护不断增长的模块集合，以便在各种文件格式之间进行转换。你还可能需要对声音数据执行各种不同的操作，因此你还需要编写无止境的模块流以执行这些操作。</p><p>这可能是一个包结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sound/                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats/                  Subpackage for file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              aiffread.py</span><br><span class="line">              aiffwrite.py</span><br><span class="line">              auread.py</span><br><span class="line">              auwrite.py</span><br><span class="line">              ...</span><br><span class="line">      effects/                  Subpackage for sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              surround.py</span><br><span class="line">              reverse.py</span><br><span class="line">              ...</span><br><span class="line">      filters/                  Subpackage for filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              vocoder.py</span><br><span class="line">              karaoke.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure><p>当导入包时，Python将搜索<code>sys.path</code>，并查找包的子目录。<br>需要<code>__init__.py</code>文件才能使Python将目录视为包含包。这是为了防止具有通用名称的目录(如字符串)无意中隐藏稍后在模块搜索路径中发生的有效模块。<br>在最简单的情况下，<code>__init__.py</code>可以是一个空文件，但它也可以执行包的初始化代码。</p><p>导入包:</p><ul><li><p><code>from package import item</code><br>item可以是子模块，子包，函数，类，变量<br>import语句首先测试项目是否在包中定义。 如果不在，它假定它是一个模块并尝试加载它。如果找不到它，则会引发ImportError异常</p></li><li><p><code>import item.subitem.subsubitem</code><br>相反，当使用这种语法时，除最后一项外必须都是一个包，最后一项可以是模块或包，但不能是类或函数或变量</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br></pre></td></tr></table></figure><p><br></p><h4 id="importing-from-a-package"><a href="#importing-from-a-package" class="headerlink" title="importing * from a package"></a>importing * from a package</h4><p>当输入<code>from sound.effects import *</code>会发生什么？理想情况下，人们会希望以某种方式进入文件系统，查找包中存在哪些子模块，然后将它们全部导入。这可能需要很长时间，并且导入子模块可能具有不希望的副作用，这些副作用在明确导入子模块时才会发生。</p><p>唯一的解决方案是软件包作者提供包的明确索引。<code>import</code>使用以下声明: 如果某个包的<code>__init__.py</code>定义了一个名为<code>__all__</code>的列表，则它将成为<code>from package import *</code>时应该导入的模块名称列表。<br>当软件包新版本发布时，软件包作者需要保持该列表是最新版本。</p><p>栗子<code>sound/effects/__init__.py</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> #这意味着from sound.effects import *只会导入以下子模块</span><br><span class="line">__all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;]</span><br></pre></td></tr></table></figure><p><br></p><p>如果<code>__all__</code>没有被定义，则<code>from sound.effcts import *</code>语句不会将包<code>sound.effects</code>中所有子模块导入到当前命名空间。它只能确保包<code>sound.effects</code>被导入，然后导入包中定义的任何名称。这包括<code>__init__.py</code>定义的任何名称，还包括由以前的导入语句显示加载的软件包的任何子模块。</p><p>请记住，使用<code>from packagee import submodule</code>没有任何问题。事实上，这也是推荐的方法。除非导入模块需要使用不同包中具有相同名称的子模块。</p><p><br></p><h4 id="内部包装"><a href="#内部包装" class="headerlink" title="内部包装"></a>内部包装</h4><p>Intra-package References</p><p>当包被构建为子包时，可以使用绝对导入来引用邻包中的模块。<br>同样，也可以使用相对导入来导入邻包中的模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> #Absolute</span><br><span class="line">from sound.effects import echo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #Relative</span><br><span class="line">from . import echo</span><br><span class="line">from .. import formats</span><br><span class="line">from ..filter import equalizer</span><br></pre></td></tr></table></figure><p><br></p><h4 id="多个目录中的包"><a href="#多个目录中的包" class="headerlink" title="多个目录中的包"></a>多个目录中的包</h4><p>Packages in Multiple Directories</p><p>包还支持一个特殊的属性<code>__path__</code>。在执行该文件中的代码之前，它被初始化为一个包含<code>__init__.py</code>的目录名称的列表。这个变量可以修改，这样做会影响将对包中包含的模块和子包的搜索。</p><p>虽然此功能通常不是必需的，但它可用于扩展包中找到的一组模块。</p><p><br><br><br></p><hr><p><br></p><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>Input and Output<br>有多种方式来呈现程序的输出；数据也可以打印成人类可读的形式，或写入文件供将来使用。</p><p><br></p><h3 id="幻想的输出格式"><a href="#幻想的输出格式" class="headerlink" title="幻想的输出格式"></a>幻想的输出格式</h3><p>Fancier Output Formatting</p><p>到目前为止，我们知晓两种写入值的方法:</p><ul><li>表达式语句</li><li><code>print()</code>函数</li></ul><p>有两种方法可以格式化输出：</p><ul><li>自己完成所有的字符串处理(使用切片和连接操作，你可创建任何你能想到的布局)</li><li>格式化字符串文字或<code>str.format()</code>方法</li></ul><p><br></p><p>string模块提供了一个Template类，它提供了另一种将值替换为字符串的方法。<br>Python有办法将任何值转换为字符串：将它传递给<code>repr()</code>或<code>str()</code>函数。</p><p><code>str()</code>函数，用于返回相当可读(human-readable)的值的表示<br><code>repr()</code>函数，用于生成可由解释器读取的表示<br>对于没有人定义的特定表示的对象，<code>str()</code>将返回与<code>repr()</code>相同的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    print(repr(x).rjust(<span class="number">2</span>), repr(x**<span class="number">2</span>).rjust(<span class="number">3</span>), end=<span class="string">' '</span>)</span><br><span class="line">print(repr(x**<span class="number">3</span>).rjust(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"> <span class="comment">#Or</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    print(<span class="string">'&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;'</span>.format(x, x**<span class="number">2</span>, x**<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">  <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line">  <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line">  <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br></pre></td></tr></table></figure><p><br></p><p>字符串对象的<code>str.rjust()方法</code>，它在给定宽度的字段中通过填充左边的空格来右对齐字符串。类似方法还有: <code>str.ljust()</code>, <code>str.center()</code>。这些方法不写入任何东西，它们只是返回一个新的字符串。</p><p>还有一种<code>str.zfill()</code>方法，它在数字字符串的左边填充数字0，它能识别加号和减号：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'12'</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'00012'</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'-3.14'</span>.zfill(<span class="number">7</span>)</span><br><span class="line"><span class="string">'-003.14'</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'3.1415678'</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'3.1415678'</span></span><br></pre></td></tr></table></figure><p><br></p><p><code>str.format()</code>方法:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#&#123;&#125;</span></span><br><span class="line">print(<span class="string">'We are &#123;&#125; who say &#123;&#125; is "&#123;&#125;!".format('</span>A<span class="string">', '</span>BB<span class="string">', '</span>WONDERFUL<span class="string">'))</span></span><br><span class="line"><span class="string">We are A who say BB is "WONDERFUL!"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> #括号中的数字用来指向传入的位置</span></span><br><span class="line"><span class="string"> #&#123;index&#125;,从0开始</span></span><br><span class="line"><span class="string">print('</span>&#123;<span class="number">0</span>&#125; <span class="keyword">and</span> &#123;<span class="number">1</span>&#125;<span class="string">'.format('</span>A<span class="string">', '</span>BB<span class="string">'))</span></span><br><span class="line"><span class="string">A and BB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print('</span>&#123;<span class="number">1</span>&#125; <span class="keyword">and</span> &#123;<span class="number">0</span>&#125;<span class="string">'.format('</span>A<span class="string">', '</span>BB<span class="string">'))</span></span><br><span class="line"><span class="string">BB and A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> #关键字参数</span></span><br><span class="line"><span class="string">print('</span>My name <span class="keyword">is</span> &#123;name&#125;, I\<span class="string">'m &#123;age&#125; years old!'</span>.format(name=<span class="string">'Zhang21'</span>, age=<span class="number">21</span>))</span><br><span class="line">My name <span class="keyword">is</span> Zhang21, I<span class="string">'m 21 years old!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> #位置参数和关键字参数的组合</span></span><br><span class="line"><span class="string">print('</span>The story of &#123;<span class="number">0</span>&#125;, &#123;<span class="number">1</span>&#125;, <span class="keyword">and</span> &#123;other&#125;<span class="string">'.format('</span>A<span class="string">', '</span>BB<span class="string">', other='</span>CCC<span class="string">'))</span></span><br><span class="line"><span class="string">The story of A, BB, and CCC</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">!a, 应用ascii()</span><br><span class="line">!s, 应用str()</span><br><span class="line">!r, 应用repr()</span><br><span class="line">:, 更好的控制格式</span><br><span class="line">:<span class="number">5</span></span><br><span class="line">:<span class="number">7</span>d</span><br><span class="line">:<span class="number">.3</span>f</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">print('My full name is &#123;!s&#125;'.format('Zhang21'))</span></span><br><span class="line"><span class="string">My full name is Zhang21</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print('My full name is &#123;!r&#125;'.format('Zhang21'))</span></span><br><span class="line"><span class="string">My full name is 'Zhang21'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print('The value of &#123;&#125; is approximately &#123;:.3f&#125;'.format('PI', 3.141567))</span></span><br><span class="line"><span class="string">The value of PI is approximately 3.142</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">info = &#123;'A': 68, 'BB': 79, 'CCC': 89&#125;</span></span><br><span class="line"><span class="string">for k, v in info.items():</span></span><br><span class="line"><span class="string">     print('&#123;0:5&#125; ==&gt; &#123;1:6d&#125;'.format(k, v))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A     ==&gt;     68</span></span><br><span class="line"><span class="string">BB    ==&gt;     79</span></span><br><span class="line"><span class="string">CCC   ==&gt;     89</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print('A: &#123;A:d&#125;; B: &#123;BB:d&#125;, C: &#123;CCC:d&#125;'.format(**info))</span></span><br><span class="line"><span class="string">A: 68; B: 79, C: 89</span></span><br></pre></td></tr></table></figure><p><br></p><p><code>%</code>操作符同样可用于字符格式化:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'The value of %s is approximately %5.3f'</span> % (<span class="string">'PI'</span>, <span class="number">3.1415678</span>))</span><br><span class="line">The value of PI <span class="keyword">is</span> approximately <span class="number">3.142</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>Reading and Writing Files</p><p><code>open()</code>返回一个文件对象，它最常用的两个参数：<code>open(filename, mode)</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'/tmp/1.txt, '</span><span class="string">r')</span></span><br><span class="line"><span class="string">f.readline()</span></span><br><span class="line"><span class="string">'</span><span class="number">1</span>\n<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f.closed</span></span><br><span class="line"><span class="string">Fasle</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string">f.closed</span></span><br><span class="line"><span class="string">True</span></span><br></pre></td></tr></table></figure><p>mode:</p><ul><li><code>r</code>: read only，未指定模式时的默认模式</li><li><code>w</code>: only writing</li><li><code>a</code>: appending</li><li><code>r+</code>: reading and writing</li><li><code>b</code>: binary mode</li></ul><p>通常情况下，文件以文本模式打开，这意味着你可读写文件中的字符串，并以特定编码方式进行编码(如UTF-8)。如果未指定编码，则默认值取决于平台。<br><code>b</code>以二进制模式打开文件，数据以字节对象的形式读写，该模式应该用于所有不包含文本的文件。在读写文件时要非常小心的使用二进制模式。</p><p>推荐使用<code>with</code>关键字处理文件对象，优点是，即使在某个时间点出现异常，文件在其套件结束后也能正常关闭。也比<code>try-finally</code>块短得多。<br>如果没有使用<code>with</code>关键字，则你需要调用<code>f.close()</code>来关闭文件，并立即释放它使用的系统资源。如果你没有明确关闭一个文件，Python的垃圾回收器最终会摧毁这个对象并为你关闭吧这个打开的文件，但这个文件可能会保持打开一段时间。<br>在关闭文件对象之后，尝试使用文件对象将会自动失败。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/tmp/1.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    read_Data = f.read()</span><br><span class="line"></span><br><span class="line">f.closed</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f.read()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: I/O operation on closed file.</span><br></pre></td></tr></table></figure><p><br></p><h4 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h4><p>Methods of File Objects</p><p><code>f.read(size)</code>读取文件内容，以字符串或字节对象的形式返回。size是一个可选的数值参数，当size被忽略或为负数时，文件的全部内容被读取并返回。如果超过内存限制，那就是你的问题了。<br><code>f.readline()</code>从文件读取一行，换行符Unix<code>\n</code>，Windows<code>\r\n</code><br><code>f.readlines()</code>, <code>list(f)</code>读取文件的所有行<br><code>f.write(string)</code>向文件中写入字符内容，并返回写入的字符数<br><code>f.tell()</code>返回一个整数，表示二进制模式下文件开头的字节数<br><code>f.seek(offset, from_what)</code>改变文件对象的位置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'/tmp/1.txt'</span>, <span class="string">'r+'</span>)</span><br><span class="line">f.write(<span class="string">'Line4\n'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">string = (<span class="string">'AAA'</span>, <span class="number">11</span>)</span><br><span class="line">s = str(string)</span><br><span class="line">f.write(s)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'/tmp/1.txt'</span>, <span class="string">'rb+'</span>)</span><br><span class="line">f.write(<span class="string">b'0123456789abcde'</span>)</span><br><span class="line"></span><br><span class="line">f.seek(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">f.read(<span class="number">1</span>)</span><br><span class="line"><span class="string">b'1'</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="使用json保存结构化数据"><a href="#使用json保存结构化数据" class="headerlink" title="使用json保存结构化数据"></a>使用json保存结构化数据</h4><p>Saving structured data with json</p><p>字符串可以很容易地读写文件和从文件读取。当你想要保存更复杂的数据类型——如嵌套列表和字典，手动解析和序列化将变得很复杂。</p><p>JSON格式通常被现代应用程序用于数据交换。<br>Python允许你使用名为JSON的流行数据交换格式。称为json的标准模块可采用Python数据层次结构，并将其转换为字符串表示形式，这个过程被称为序列化(serializing)。重建字符串表示中的数据称为反序列化(deserializing)。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json.dumps([<span class="number">1</span>, <span class="string">'simple'</span>, <span class="string">'list'</span>])</span><br><span class="line"><span class="string">'[1, "simple", "list"]'</span></span><br><span class="line"></span><br><span class="line">json.dump(x, f)</span><br><span class="line">x = json.load(f)</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h2><p>Errors and Exceptions</p><p>至少有两种可区分的错误:</p><ul><li>syntax errors</li><li>exceptions</li></ul><p><br><br><br></p><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>Syntax Errors<br>语法错误，也称为解析错误。这是最常见的语法问题错误。</p><p><br><br><br></p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>Exceptions<br>即使语法是正确的，但在执行时也可能导致错误。执行过程中检查到的错误称为异常。<br>Built-in Exceptions列出了内置的异常及其含义。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &gt;&gt;&gt; <span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt; <span class="number">4</span> + spam*<span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'spam'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt; <span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Can<span class="string">'t convert '</span>int<span class="string">' object to str implicitly</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>Handling Exceptions<br>编写处理选定异常的程序是可能的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = int(input(<span class="string">"Please enter a number: "</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">"Oops!  That was no valid number.  Try again..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#多个异常放入一个元组</span></span><br><span class="line"><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong><code>try</code>语句工作原理：</strong></p><ul><li>首先，<code>try</code>子句(<code>try...except</code>之间的语句)被执行</li><li>如果没有异常发生，则执行<code>try</code>语句并跳过<code>except</code>子句后便结束</li><li>如果在执行<code>try</code>子句时发生异常，则跳过子句的其余部分。然后，如果<strong>异常类型</strong>匹配<code>execpt</code>后面的异常名称，则<code>except</code>子句被执行，然后在<code>try</code>语句后继续执行</li><li>如果产生的异常与<code>except</code>的异常名称不匹配，它将传递给外部<code>try</code>语句。如果没有找到处理程序，则它是一个未处理的异常，执行停止并显示错误消息</li><li><code>try</code>语句可能有多个<code>except</code>子句，用于处理不同的异常。最多只有一个处理程序被执行</li><li>处理程序只处理发生在相应<code>try</code>子句中的异常，而不处理相同<code>try</code>语句的其它处理程序</li><li><code>except</code>子句可将多个异常名放入一个元组</li><li>如果是相同的类或其基类，则<code>except</code>子句中的类与异常兼容</li><li>未使用异常名称的<code>except</code>子句作为通配符<ul><li>请谨慎使用此功能，因为以这种方式很容易掩盖真正的编程错误</li></ul></li><li><code>try...except</code>语句还有一个可选的<code>else</code>子句。当存在时，它必须遵循所有<code>except</code>子句。如果<code>try</code>子句不引发异常，则必须执行该代码</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/tmp/1.txt'</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = int(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'OS error: &#123;&#125;'</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"Could not convert data to an integer."</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Unexpected erros"</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sum = <span class="string">'a'</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    print(<span class="string">'TypeError'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'else: '</span>, sum)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="引发异常"><a href="#引发异常" class="headerlink" title="引发异常"></a>引发异常</h3><p>Raising Exceptions</p><p><code>raise</code>语句允许程序员强制执行指定的异常。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: HiThere</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> NameError:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'An exception flew by!'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span></span><br><span class="line">...</span><br><span class="line">An exception flew by!</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: HiThere</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="用户定义的异常"><a href="#用户定义的异常" class="headerlink" title="用户定义的异常"></a>用户定义的异常</h3><p>User-defined Exceptions</p><p>程序可以通过创建一个新的异常类(exception class)来为自己的异常命名。异常通常应该直接或间接地从 Exception class 派生。</p><p>可以定义异常类，它可以执行任何其它类可以执行的任何操作，但通常很简单，通常只提供一些属性，以便处理程序为异常提取有关错误的信息。<br>创建可引发多个不同错误的模块时，通常的做法是为该模块定义的异常创建基类，并创建用于为不同错误条件创建特定异常类的子类:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""Base class for exceptions in this module."""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="string">"""Exception raised for errors in the input.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        expression -- input expression in which the error occurred</span></span><br><span class="line"><span class="string">        message -- explanation of the error</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, expression, message)</span>:</span></span><br><span class="line">        self.expression = expression</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="string">"""Raised when an operation attempts a state transition that's not</span></span><br><span class="line"><span class="string">    allowed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        previous -- state at beginning of transition</span></span><br><span class="line"><span class="string">        next -- attempted new state</span></span><br><span class="line"><span class="string">        message -- explanation of why the specific transition is not allowed</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, previous, next, message)</span>:</span></span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.next = next</span><br><span class="line">        self.message = message</span><br></pre></td></tr></table></figure><p>大多数异常的名称都以<strong>Error</strong>结尾来定义，类似于标准异常的命名。<br>许多标准模块定义了它们自己的异常，用于在其定义的功能中可能发生的错误。</p><p><br><br><br></p><h3 id="定义清理行为"><a href="#定义清理行为" class="headerlink" title="定义清理行为"></a>定义清理行为</h3><p>Defining Clean-up Actions</p><p>try语句还有一个可选的子句，用于定义在任何情况下都必须执行的清理操作(clean-up actions).</p><p>finally子句总是在离开try语句之前执行，无论是否发生异常。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> KeyboardInterrupt</span><br><span class="line"><span class="meta">... </span><span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Goodbye, world!'</span>)</span><br><span class="line">...</span><br><span class="line">Goodbye, world!</span><br><span class="line">KeyboardInterrupt</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="预定义的清理操作"><a href="#预定义的清理操作" class="headerlink" title="预定义的清理操作"></a>预定义的清理操作</h3><p>Predefined Clean-up Actions</p><p>某些对象定义了在不再需要对象是要执行的标准清楚操作，而不管使用对象的操作是成功还是失败。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"myfile.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>Classes</p><p>类提供了将数据和功能捆绑在一起的手段。每个类实例都可附加属性以保持其状态。类实例也可以有方法来修改其状态。</p><p>与其它编程语言相比，Python的类机制为其添加了最少量的新语法和语义。Python类 提供了面向对象编程的所有标准功能: 类继承机制(inheritance mechanism)允许多个基类(base class)，派生类(derived class)可以重写其基类或类的任何方法，并且方法(method)可以调用具有相同名称的基类的方法。对象(object)可以包含任意数量和种类的数据。与模块一样，类也具有Python的动态特性: 它们是在运行时创建的，并且可以在创建后进一步修改。</p><p><br><br><br></p><h3 id="关于名称和对象"><a href="#关于名称和对象" class="headerlink" title="关于名称和对象"></a>关于名称和对象</h3><p>A Word About Names and Objects</p><p>Objects have individuality, 并且可以将多个名称(在多作用域中)绑定到同一个对象。这在其它语言中被称为别名。别名在不可变类型中被安全地忽略。但对涉及可变对象(dict, list…)的Python代码的语义可能会有惊人的影响。这通常有利于程序，因为别名在某些方面表现得像指针。</p><p><br><br><br></p><h3 id="作用域和命名空间"><a href="#作用域和命名空间" class="headerlink" title="作用域和命名空间"></a>作用域和命名空间</h3><p>Python Scopes and Namespaces</p><p>类定义在命名空间中扮演一些巧妙的技巧，并且你需要知道作用域和命名空间如何工作才能完全理解正在发生的事情。顺便一提，有关此主题的知识对于任何高级Python程序员都很有用。</p><p>让我们从一些定义开始:</p><p>命名空间是名称到对象的映射。大多数命名空间目前都是作为Python字典实现的，但通常不会以任何方式显示。<br>命名空间的例子： 内建名称的集合；模块中的全局名称；函数调用中的本地名称。<br>从某种意义上说，对象的一组属性也构成一个命名空间。了解命名空间的重要之处在于，不同命名空间中的名称之间没有绝对的关系。</p><p>顺便一提，使用单词属性来表示任意一个点<code>.</code>后面的名称——<code>z.real</code>，real是对象z的属性。严格地说，对模块中的名称引用是属性引用——<code>modname.funcname</code>，modname是一个模块对象，并且funcname是它的一个属性。<br>在这种情况下，模块的属性和模块中定义的全局名称之间会有一个直接的映射关系: 它们共享相同的命名空间。</p><p>属性可以是只读或可写。</p><p>命名空间是在不同的时刻创建的，并且具有不同的生命周期。包含内建名称的命名空间是在Python解释器启动时创建的，并且永远不会被删除。读取模块定义时创建模块的全局命名空间，通常，模块命名空间也会持续到解释器退出。<br>由解释器的顶层调用执行的语句，无论是从脚本文件读取还是交互式读取，都被视为名为<code>__main__</code>模块的一部分，因此它们具有其自己的全局命名空间。</p><p>函数的本地命名空间是在调用函数时创建，并在函数返回时删除或引发(raise)不在函数内处理的异常。当然，递归调用每个都有自己的本地命名空间。</p><p>作用域(scope)是Python程序的文本区域，可以直接访问命名空间(namespace)。这意味着对名称的非限定引用(unqualified reference)会尝试在命名空间中查找名称。</p><p>尽管作用域是静态确定的，但它们是动态使用的。在执行期间的任何时候，至少有三个作用域的命名空间都可以直接访问:</p><ul><li>最先搜索的最内层作用域，包含本地名称</li><li>从最近封闭作用域开始搜索的任何封闭函数的作用域，包含非本地名称，也包含非全局名称</li><li>倒数第二个作用域包含当前模块的全局名称</li><li>最外层的作用域是包含内建名称的命名空间</li></ul><p><br></p><p>如果某个名称被声明为全局(global)，则所有的引用(reference)和赋值(assignment)都将直接转到包含模块全局名称的中间作用域。要重新绑定(rebind)最内层作用域外发现的变量，可以使用<code>nonlocal</code>语句；如果没有声明<code>nonlocal</code>，那些变量是只读的。</p><p>通常，本地作用域引用当前函数的本地名称。在外部函数中，本地作用域引用与全局作用域相同的命名空间:模块的命名空间。类定义在本地作用域中放置另一个命名空间。</p><p>认识到作用域是以文本方式确定是很重要的: 模块中定义的函数的全局作用域是该模块的命名空间，无论从何处调用函数或调用函数的别名。另一方面，名称的实际搜索是在运行时动态完成的——但是，在编译时间，语言定义正在向静态名称解析发展，因此不要依赖动态名称解析。</p><p>Python的特殊之处在于——如果<code>global</code>语句没有生效，对名称的赋值总是进入最内层的范围。赋值不会分配数据——它们只是将名称绑定到对象。删除操作也是如此: 语句<code>del x</code>从本地作用域引用的命名空间中删除x的绑定。实际上，所有引用新名称的操作都是用本地作用域: 特别是，<code>import</code>语句和函数定义将模块或函数名称绑定到本地作用域。</p><p><code>global</code>声明可以用来表明特定变量存在于全局作用域内，应该在此rebound(反弹)。<code>nonlocal</code>声明表明特定变量存在于封闭作用域内，应该在那里rebound.</p><p><br></p><p><strong>作用域和命名空间的栗子</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span><span class="params">()</span>:</span></span><br><span class="line">        spam = <span class="string">"local spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> spam</span><br><span class="line">        spam = <span class="string">"nonlocal spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> spam</span><br><span class="line">        spam = <span class="string">"global spam"</span></span><br><span class="line"></span><br><span class="line">    spam = <span class="string">"test spam"</span></span><br><span class="line"></span><br><span class="line">    do_local()</span><br><span class="line">    print(<span class="string">"After local assignment: "</span>, spam)</span><br><span class="line"></span><br><span class="line">    do_nonlocal()</span><br><span class="line">    print(<span class="string">"After nonlocal assignment: "</span>, spam)</span><br><span class="line"></span><br><span class="line">    do_global()</span><br><span class="line">    print(<span class="string">"After global assignment: "</span>, spam)</span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line">print(<span class="string">"In global scope: "</span>, spam)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">After local assignment: test spam</span><br><span class="line">After <span class="keyword">nonlocal</span> assignment: <span class="keyword">nonlocal</span> spam</span><br><span class="line">After <span class="keyword">global</span> assignment: <span class="keyword">nonlocal</span> spam</span><br><span class="line">In <span class="keyword">global</span> scope: <span class="keyword">global</span> spam</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="首先看类"><a href="#首先看类" class="headerlink" title="首先看类"></a>首先看类</h3><p>A first look at class</p><p>类引入了一些新的语法，三种新的对象类型和一些新的语义。</p><p><br></p><h4 id="类定义语法"><a href="#类定义语法" class="headerlink" title="类定义语法"></a>类定义语法</h4><p>Class Definition Syntax</p><p>类定义，像函数定义，必须在它们有效之前被执行。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>实际上，类定义中的语句通常是函数定义，但其他语句是允许的，有时也是有用的。类中的函数定义通常有一个特殊形式的参数列表，由方法的调用约定决定。</p><p>当输入一个类定义时，会创建一个新的命名空间，并将其用作本地作用域——因此，所有对局部变量的赋值都会进入这个新的命名空间。特别是，函数定义在此绑定新函数的名称。</p><p>当类定义保持正常时，会创建一个类对象。这基本上是由类定义创建的命名空间的内容的一个包装。最初的本地作用域被恢复，并且类对象在这里被绑定到类定义头中给出的类名。</p><p><br></p><h4 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h4><p>Class Objects</p><p>类对象支持两种操作: 属性引用(attribute reference)和实例化(instantiation).</p><p>属性引用使用 用于Python中所有属性引用的标准语法: <code>obj.name</code>. 有效的属性名称在创建类对象时时位于类命名空间中的所有名称。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="string">"""A simple example class"""</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p><code>MyClass.i</code>和<code>MyClass.f</code>是有效的属性引用，分别返回一个整数和函数对象。类属性也可以被分配，所以也可以通过赋值来改变<code>MyClass.i</code>的值。<code>__doc__</code>也是一个有效的属性，返回该类的文档字符串”A simple example class”.</p><p>类实例化使用函数表示法。假设类对象是一个返回类的新实例的无参数函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建类的新实例，并将该对象分配给局部变量x</span></span><br><span class="line">x = MyClass()</span><br></pre></td></tr></table></figure><p>实例化操作(“调用”一个类对象)创建一个空对象。许多类喜欢创建具有定制(customized)到特定初始状态(initial state)的实例对象。因此，类可以定义一个名为<code>__init__()</code>的特殊方法。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.data = []</span><br></pre></td></tr></table></figure><p>当一个类定义了一个<code>__init__()</code>方法时，类实例化会自动为新创建的类实例调用<code>__init__()</code>.</p><p>当然，<code>__init__()</code>方法可能有更多灵活的参数。在这种情况下，给类实例化操作符的参数被传递给<code>__init__()</code>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, realpart, imagpart)</span>:</span></span><br><span class="line">        self.r = realpart</span><br><span class="line">        self.i = imagpart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = Complex(<span class="number">3.0</span>, <span class="number">-4.5</span>)</span><br><span class="line">x.r, x.i</span><br><span class="line"><span class="number">3.0</span>, <span class="number">-4.5</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h4><p>Instance Objects</p><p>实例对象理解的唯一操作是属性引用。有两种有效的属性名称，数据属性和方法。</p><p>数据属性不需要声明，像局部变量一样，当它们在第一次分配时就会弹出。<br>另一种实力属性引用是一种方法。方法是属于对象的函数。</p><p>实例对象的有效方法名称取决于它的类。根据定义，作为函数对象的类的所有属性都定义其实例的相应方法。</p><p><br></p><h4 id="方法对象"><a href="#方法对象" class="headerlink" title="方法对象"></a>方法对象</h4><p>Method Objects</p><p>关于方法的特殊之处在于 实例对象作为函数的第一个参数传递。一般来说，调用带有n个参数列表的方法相当于使用通过在第一个参数之前插入方法实例对象创建的参数列表来调用相应的函数。</p><p>当引用不是数据属性的实例属性时，将搜索类。如果名称表示一个有效的类属性，它是一个函数对象，则通过打包实例对象和在抽象对象中一起找到的函数对象来创建方法对象，这就是方法对象。当使用参数列表调用方法对象时，会从实例对象和参数列表构造一个新参数列表，并使用此新参数列表调用函数对象。</p><p><br></p><h4 id="类变量和实例变量"><a href="#类变量和实例变量" class="headerlink" title="类变量和实例变量"></a>类变量和实例变量</h4><p>Class and Instance Variables</p><p>一般来说，实例变量是针对每个实例唯一的数据，而类变量是针对类的所有实例共享的属性和方法。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    kind = <span class="string">'canine'</span>         <span class="comment"># class variable shared by all instances</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name    <span class="comment"># instance variable unique to each instance</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.kind                  <span class="comment"># shared by all dogs</span></span><br><span class="line"><span class="string">'canine'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.kind                  <span class="comment"># shared by all dogs</span></span><br><span class="line"><span class="string">'canine'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.name                  <span class="comment"># unique to d</span></span><br><span class="line"><span class="string">'Fido'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.name                  <span class="comment"># unique to e</span></span><br><span class="line"><span class="string">'Buddy'</span></span><br></pre></td></tr></table></figure><p>共享数据可能会带来令人惊讶的影响，涉及列表和字典等可变对象:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    tricks = []             <span class="comment"># mistaken use of a class variable</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.add_trick(<span class="string">'roll over'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.add_trick(<span class="string">'play dead'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.tricks                <span class="comment"># unexpectedly shared by all dogs</span></span><br><span class="line">[<span class="string">'roll over'</span>, <span class="string">'play dead'</span>]</span><br></pre></td></tr></table></figure><p>正确的类设计应该使用实例变量:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.tricks = []    <span class="comment"># creates a new empty list for each dog</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.add_trick(<span class="string">'roll over'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.add_trick(<span class="string">'play dead'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.tricks</span><br><span class="line">[<span class="string">'roll over'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.tricks</span><br><span class="line">[<span class="string">'play dead'</span>]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="随机备注"><a href="#随机备注" class="headerlink" title="随机备注"></a>随机备注</h3><p>Random Remarks</p><p>数据属性覆盖具有相同名称的方法属性；为了避免意外的名称冲突，这可能会在大型程序中导致难以发现的错误，使用某种最小化冲突几率的约定是明智的。可能的约定(convention)包括: 大写的方法名称，小唯一字符串(可能只是下划线)为数据属性名称加前缀，或者为方法和名词使用动词来表示数据属性。</p><p>数据属性可由方法及对象的普通用户引用。换句话说，累不可用于实现纯粹的抽象数据类型。事实上，Python中没有任何东西可以强制执行数据隐藏——它都基于约定。</p><p>客户端应该小心使用数据属性。请注意，客户端可以将自己的数据属性添加到实例对象，而不会影响方法的有效性，只要避免名称冲突——再次注意，命名约定可在此节省大量令人头痛的问题。</p><p>从方法中引用数据类型没有简写，这增加了方法的可读性: 在浏览方法时，不会混淆局部变量和实例变量。</p><p>通常，方法的第一个参数称为<code>self</code>。这只不过是一个约定: 名字<code>self</code>对Python来说绝对没有特殊含义。但是，请注意，不遵循约定的Python代码对于Python程序员来说可能不易读取。</p><p>任何作为类属性的函数对象都为该类的实例定义了一个方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Function defined outside the class</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(x, x+y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    f = f1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">    h = g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#f, g, h都是类C的所有属性，它们都是指向函数对象的，因此它们都是C实例的所有方法。</span></span><br></pre></td></tr></table></figure><p>方法可以通过使用<code>self</code>参数的方法属性来调用其它方法:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.data.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addtwice</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.add(x)</span><br><span class="line">        self.add(x)</span><br></pre></td></tr></table></figure><p>方法可以像普通函数一样引用全局名称。与方法关联的全局作用域是包含其定义的模块。(一个类永远不会被用作全局作用域) 虽然很少有人在方法中使用全局数据，但全局作用域有许多合法用途: 首先，导入全局作用域的函数和模块可以被方法使用，以及在其中定义的函数和类。通常，包含该方法的类本身是在全局作用域内定义的。</p><p>每个值都是一个对象，因此有一个类(类型)。它被存储为<code>object.__class__</code></p><p><br><br><br></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Inheritance</p><p>当然，如果不支持继承，语言特性就不值得称为”类”。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#派生(derived)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(BaseClassName)</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>基类(BaseClassName)必须在包含派生类(derived class)定义的作用域中定义。代替基类名称，其它表达式也是允许的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当基类在另一个模块中被定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(modname.BaseClassName)</span>:</span></span><br></pre></td></tr></table></figure><p>派生类(derived class)定义的执行过程与基类(base class)相同。当构造(constructed)类对象时，基类将被记住。这用于解析属性引用: 如果在类中未找到请求的属性，则搜索继续查找基类。如果基类本身是从其它类派生的，则此规则将递归应用。</p><p>派生类的实例化么有什么特别的: <code>DerivedXlassName()</code>创建一个新的类实例。方法解析如下: 如果需要，搜索相应的类属性，沿着基类链降序排列，如果产生函数对象，则方法引用是有效的。</p><p>派生类可以覆盖(override)基类的方法。由于方法在调用同一对象的其它方法时没有特殊的权限，因此调用另一个在同一基类中定义的方法的基类方法可能最终会调用派生类的方法来覆盖它。</p><p>派生类的覆盖(override)方法事实上可能需要扩展而不是简单地替换同名的基类方法。有一种简单的方法可以直接调用基类方法: 只需调用<code>BaseClassName.methodname(self, arguments)</code>即可。</p><p><br></p><p>Python有两个与继承有关的内建函数:</p><ul><li><p><code>isinstance()</code><br>检查一个实例的类型。<code>isinstance(obj, int)</code>只有在<code>obj.__class__</code>是int或从int派生的某个类时才为true</p></li><li><p><code>issubclass()</code><br>检查类继承。</p></li></ul><p><br></p><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>Multiple Inheritance</p><p>Python支持多重继承的形式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(Base1, Base2, Base3)</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>在最简单的情况下，你可以将从父类继承的属性视为深度优先(depth first)，从左到右搜索，而不是在同一个类中进行两次搜索，其中层次结构中存在重叠。<br>因此，如果在DerivedClassName中找不到属性，则在Base1中搜索该属性，然后(递归)在Base1的基类中搜索该属性。如果未找到，则在Base2中搜索该属性，依此类推。</p><p>动态排序是必要的，因为多重继承的情况都表现出一个或多个菱形关系。例如，所有类都从对象继承，所以任何多重继承的情况都会提供多条路径来达到对象。为了避免基类被多次访问，动态算法使搜索顺序线性化，以保留没各类众指定的从左到右的顺序，每个父类只调用一次，这是单调的。</p><p><br></p><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><p>Private Variables</p><p>Python中不存在私有(private)实例变量，这些变量除了在对象内部以外不能访问。不过，大多数Python代码都有一个约定，以下划线<code>_spam</code>为前缀的名称应被视为API的非公共部分(无论是函数，方法或数据成员)。</p><p>由于私有类(class-private)成员有一个有效的用例(即为了避免名称与由子类定义的名称的冲突)，所以对这种称为<code>name mangling</code>的机制的支持有限。任何<code>__spam</code>形式的标识符在文本上用<code>_classname__spam</code>替换，其中<code>classname</code>是当前类名称，前导下划线被去除。只要它在类的定义类发生，就不会考虑标识符位置。</p><p>Name mangling 有助于让子类重写方法而不会破坏intraclass方法调用:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mapping</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable)</span>:</span></span><br><span class="line">        self.items_list = []</span><br><span class="line">        self.__update(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, iterable)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">            self.items_list.append(item)</span><br><span class="line"></span><br><span class="line">    __update = update   <span class="comment"># private copy of original update() method</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MappingSubclass</span><span class="params">(Mapping)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, keys, values)</span>:</span></span><br><span class="line">        <span class="comment"># provides new signature for update()</span></span><br><span class="line">        <span class="comment"># but does not break __init__()</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> zip(keys, values):</span><br><span class="line">            self.items_list.append(item)</span><br></pre></td></tr></table></figure><p>请注意，强化规则的设计主要是为了避免事故；它仍然可以访问或修改被认为是私有的变量。<br>注意传递给<code>exec()</code>或<code>eval()</code>的代码并不认为调用类的类名是当前类；这与<code>global</code>语句的效果类似，其效果同样局限于一起进行字节编译的代码。<code>getattr()</code>, <code>setattr()</code>和<code>delattr()</code>以及直接使用<code>__dict__</code>时也有相同的限制。</p><p><br><br><br></p><h3 id="Odds-and-Ends"><a href="#Odds-and-Ends" class="headerlink" title="Odds and Ends"></a>Odds and Ends</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">john = Employee()  <span class="comment"># Create an empty employee record</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill the fields of the record</span></span><br><span class="line">john.name = <span class="string">'John Doe'</span></span><br><span class="line">john.dept = <span class="string">'computer lab'</span></span><br><span class="line">john.salary = <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>一段期望特定抽象数据类型的Python代码通常通常可以传递一个模拟该数据类型方法的类。<br>例如，如果你有一个函数可以格式化文件对象中的某些数据，则可以使用方法<code>read()</code>和<code>readline()</code>来定义一个类，以便从字符串缓冲区总获取数据，然后将其作为参数传递。</p><p><br><br><br></p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>Iterators</p><p>你可能注意到大多数容器对象可以使用for语句循环遍历:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>&#125;:</span><br><span class="line">    print(key)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">"123"</span>:</span><br><span class="line">    print(char)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>这种访问方式清晰，简洁，方便。迭代器的使用贯穿并统一了Python。<code>for</code>语句在容器对象上调用<code>iter()</code>。该函数返回一个迭代器对象，该对象定义一次访问容器中元素的方法<code>__next__()</code>。当没有更多元素是，<code>__next__()</code>引发一个<strong>StopIteration</strong>异常，它告诉<code>for</code>循环终止。<br>你可使用<code>next()</code>内置函数调用<code>__next__()</code>方法:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = iter(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;iterator object at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    next(it)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p><br></p><p>看到了迭代器协议背后的机制，很容易将迭代器行为添加到类中。定义一个<code>__iter__()</code>方法，该方法使用<code>__next__()</code>方法返回一个对象。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span>:</span></span><br><span class="line">    <span class="string">"""Iterator for looping over a sequence backwards."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = len(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.index = self.index - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.data[self.index]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rev = Reverse(<span class="string">'spam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter(rev)</span><br><span class="line">&lt;__main__.Reverse object at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> rev:</span><br><span class="line"><span class="meta">... </span>    print(char)</span><br><span class="line">...</span><br><span class="line">m</span><br><span class="line">a</span><br><span class="line">p</span><br><span class="line">s</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>Generators</p><p>生成器是创建迭代器的简单而强大的工具。它们像常规函数一样编写，但只要它们想返回数据就是用<code>yield</code>语句。每次<code>next()</code>被调用时，生成器都会从停止的地方恢复(它记住所有的数据值以上次执行的代码)。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">yield</span> data[index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">'golf'</span>):</span><br><span class="line"><span class="meta">... </span>    print(char)</span><br><span class="line">...</span><br><span class="line">f</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line">g</span><br></pre></td></tr></table></figure><p>任何可用生成器完成的事情也可用前面的基于类的迭代器完成。使生成器如此紧凑的原因是<code>__iter__()</code>和<code>__next__()</code>方法时自动创建的。</p><p>另一个关键特性是本地变量和执行状态在调用之间自动保存。这使得该函数更容易编写，并且比使用<code>self.index</code>和<code>self.data</code>等实例变量的方法更加清晰。<br>除了自动方法创建和保存程序状态之外，当生成器终止时，它们会自动产生StopIteration。结合起来，这些功能可以轻松创建迭代器，而无需编写常规函数。</p><p><br><br><br></p><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>Generator Expressions</p><p>一些简单的生成器可以使用与列表解析类似的语法简洁地编码为表达式，带括号而不是方括号。这些表达式适用于通过封闭函数立即使用生成器的情况。<br>生成器表达式比完整的生成器定义更紧凑但功能更少，并且倾向于比等效的列表解析更具有内存友好性。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))                 <span class="comment"># sum of squares</span></span><br><span class="line"><span class="number">285</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xvec = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yvec = [<span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x*y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(xvec, yvec))         <span class="comment"># dot product</span></span><br><span class="line"><span class="number">260</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi, sin</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sine_table = &#123;x: sin(x*pi/<span class="number">180</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">91</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unique_words = set(word  <span class="keyword">for</span> line <span class="keyword">in</span> page  <span class="keyword">for</span> word <span class="keyword">in</span> line.split())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>valedictorian = max((student.gpa, student.name) <span class="keyword">for</span> student <span class="keyword">in</span> graduates)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="string">'golf'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(data[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>))</span><br><span class="line">[<span class="string">'f'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>Virtual Environments and Packages</p><p>应用程序有时候需要特定的模块版本，或者某个模块只支持特定Python版本。<br>这就意味着一个Python安装版本可能无法满足每个应用程序的要求。(如某个应用程序支持Python2.7，而某个应用程序支持Python3.x)</p><p>此问题的解决方案是创建一个虚拟环境(virtual environment)——一个包含特定Python安装包和软件包的目录树。<br>这样，不同的应用程序就可以使用不同的虚拟环境。</p><p><br><br><br></p><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>Creating Virtual Environments</p><p>用于创建和管理虚拟环境额模块称为<code>venv</code>.它通常会为你安装最新版本的Python，你也可以选择Python版本。</p><p>激活虚拟环境后，会改变提示符并修改环境，以便提供特定的Python版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#创建虚拟环境</span><br><span class="line">python3 -m venv /tmp/pythonVenv</span><br><span class="line"></span><br><span class="line">#激活</span><br><span class="line">source /tmp/pythonVenv/bin/activate</span><br><span class="line">(pythonVenv) [zhang@zhang21 ~]$</span><br><span class="line"></span><br><span class="line">(pythonVenv) [zhang@zhang21 ~]$ python</span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br><span class="line">[&apos;&apos;, &apos;/usr/lib64/python34.zip&apos;, &apos;/usr/lib64/python3.4&apos;, &apos;/usr/lib64/python3.4/plat-linux&apos;, &apos;/usr/lib64/python3.4/lib-dynload&apos;, &apos;/tmp/pythonVenv/lib64/python3.4/site-packages&apos;, &apos;/tmp/pythonVenv/lib/python3.4/site-packages&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#退出</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="pip包管理"><a href="#pip包管理" class="headerlink" title="pip包管理"></a>pip包管理</h3><p>你可以使用pip程序进行搜索、安装、升级和移除软件包。pip程序默认从<pypi.org>安装软件包。</pypi.org></p><p><code>pip freeze</code> 以requirements的格式输出已安装软件包。这很重要。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pip search sh</span><br><span class="line"></span><br><span class="line">#默认安装最新版本</span><br><span class="line">pip install sh</span><br><span class="line"></span><br><span class="line">#安装指定版本</span><br><span class="line">pip install sh=1.10.2</span><br><span class="line"></span><br><span class="line">pip install --upgrade sh</span><br><span class="line"></span><br><span class="line">pip uninstall sh</span><br><span class="line"></span><br><span class="line">#显示已安装的模块的详细信息</span><br><span class="line">pip show sh</span><br><span class="line"></span><br><span class="line">#列出已安装模块</span><br><span class="line">pip list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">#安装依赖</span><br><span class="line">pip install -r ./requirements.txt</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>参考:</p><ul><li><a href="https://shahriar.svbtle.com/underscores-in-python" target="_blank" rel="noopener">https://shahriar.svbtle.com/underscores-in-python</a></li><li><a href="https://segmentfault.com/a/1190000002611411" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002611411</a></li><li><a href="https://zhuanlan.zhihu.com/p/36173202" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36173202</a></li></ul><p><br></p><p>本节讨论Python中下划线(<code>_</code>)的使用，它的大部分用法都是一种惯例约定。</p><table><thead><tr><th>模式</th><th>栗子</th><th>含义</th></tr></thead><tbody><tr><td>单下划线前缀</td><td><code>_var</code></td><td>命名约定，仅供内部使用。通常不会有Python解释器强制执行，只作为对程序员的提示</td></tr><tr><td>单下划线后缀</td><td><code>var_</code></td><td>按约定使用以避免与Python关键字的命名冲突</td></tr><tr><td>双下划线前缀</td><td><code>__var</code></td><td>当在类上下文中使用时，触发名称修饰</td></tr><tr><td>双下划线前后缀</td><td><code>__var__</code></td><td>表示Python语言定义的特殊方法</td></tr><tr><td>单个下划线</td><td><code>_</code></td><td>三个情况</td></tr></tbody></table><p><br></p><h3 id="单个下划线"><a href="#单个下划线" class="headerlink" title="单个下划线"></a>单个下划线</h3><p>单下划线(<code>_</code>)主要有三种情况:</p><ul><li><strong>解释器中</strong><br>下划线(<code>_</code>)符号指交互式解释器中最后一次执行语句的返回结果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; _</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;_&apos; is not defined</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; 111</span><br><span class="line">111</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; _</span><br><span class="line">111</span><br></pre></td></tr></table></figure><ul><li><p><strong>作为名称使用</strong><br>下划线(<code>_</code>)用作被丢弃的名称。这样可以让阅读你代码的人知道，这是个不会被使用的特定名称。</p></li><li><p><strong>国际化</strong><br>下划线(<code>_</code>)用作函数名。这种情况下，单下划线经常被用作国际化和本地化字符串翻译查询的函数名。<br>在Django中，你可能会看到:</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext <span class="keyword">as</span> _</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    output = _(<span class="string">"Welcome to my site."</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="单下划线前缀的名称"><a href="#单下划线前缀的名称" class="headerlink" title="单下划线前缀的名称"></a>单下划线前缀的名称</h3><p>以单下划线做前缀的名称(如<code>_shahriar</code>)，指定了这个名称是<strong>私有的</strong>。<br>在有些<code>import *</code>的场景中，下一个使用你代码的人会明白这个名称仅供内部使用。<br>下划线前缀的含义是告知其他程序员：以单个下划线开头的变量或方法仅供内部使用。 该约定在PEP 8中有定义。</p><p>如果你写了<code>from module import *</code>，那么以单下划线开头的名称都不会被导入，除非模块或包中的<code>__all__</code>列表显式地包含了它们。</p><p><br><br><br></p><h3 id="单下划线后缀的名称"><a href="#单下划线后缀的名称" class="headerlink" title="单下划线后缀的名称"></a>单下划线后缀的名称</h3><p>以单下划线后缀的名称(如<code>var_</code>)，有时，一个变量的最合适的名称已被一个关键字所占用。在这种情况下，你可以附加一个下划线来解决命名冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def make_object(name, class):</span><br><span class="line">SyntaxError: &quot;invalid syntax&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def make_object(name, class_):</span><br><span class="line">...    pass</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="双下划线前缀的名称"><a href="#双下划线前缀的名称" class="headerlink" title="双下划线前缀的名称"></a>双下划线前缀的名称</h3><p>以双下划线做前缀的名称(如<code>__shahriar</code>)，它对解释器有特定含义。Python中的这种用法是为了避免与子类定义的名称冲突。</p><p><br><br><br></p><h3 id="前后都有双下划线的名称"><a href="#前后都有双下划线的名称" class="headerlink" title="前后都有双下划线的名称"></a>前后都有双下划线的名称</h3><p>前后都有双下划线的名称(如<code>__init__</code>)，是Python的特殊方法名，这是一种惯例，一种确保Python系统中的名称不会跟用户自定义的名称发生冲突的方式。</p><p><br><br><br></p><hr><p><br></p><h1 id="语言参考"><a href="#语言参考" class="headerlink" title="语言参考"></a>语言参考</h1><p>The Python Language Reference</p><p>Python参考手册描述了Python语言的<strong>语法(syntax)</strong>和<strong>核心语义(core semantics)</strong>。</p><p><br><br><br></p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>Introduction</p><p>此参考手册描述了Python编程语言，它并不是一个教程。<br>如果你正在使用Python并且想知道关于改语言的特定区域的精确规则是什么，那么你绝对应该能够在这里找到它们。</p><p><br><br><br></p><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>Lexical analysis</p><p>解析器(parser)读取Python程序。解析器的输入是由词法分析器生成的令牌流(stream of tokens)。本章描述了词法解析器如何将文件分解为令牌。</p><p>Python将程序文本读作<code>Unicode code point</code>，源文件的编码可以通过编码声明给出，默认为<code>UTF-8</code>，具体请参阅<a href="https://www.python.org/dev/peps/pep-3120/" target="_blank" rel="noopener">PEP 320</a>。如果源文件无法被编码，则抛出语法错误。</p><p><br><br><br></p><h3 id="行结构"><a href="#行结构" class="headerlink" title="行结构"></a>行结构</h3><p>Line structure</p><p>Python程序分为许多逻辑行。</p><p><br></p><ul><li><strong>逻辑行</strong><br>Logical lines</li></ul><p>逻辑行的结尾由token NEWLINE表示。语句不能跨过逻辑行边界，除非语法允许NEWLINE。通过遵循显式或隐式的行连接规则，从一个或多个物理行构造逻辑行。</p><p><br></p><ul><li><strong>物理行</strong><br>Physical lines</li></ul><p>物理行是由行尾序列终止的字符序列。在源文件和字符串中，可使用任何标准平台的行终止序列。Unix格式使用ASCII的<code>LF</code>，Windows格式使用ASCII的<code>CR LF</code>，或使用旧的Macintosh格式ASCII <code>CR</code>字符。无论平台如何，所有这些格式都可以平等使用。输入的结尾也充当最终物理行的隐式终止符。<br>嵌入Python时，应使用标准C约定的换行符将源代码字符传递给Python API。</p><p><br></p><ul><li><strong>注释</strong><br>Comments</li></ul><p>注释以哈希字符(<code>#</code>)开头，以物理行的末尾结束。注释表示逻辑行的结束，除非调用隐式行连接规则。语法会直接忽略注释。</p><p><br></p><ul><li><strong>编码声明</strong><br>Encoding declarations</li></ul><p>如果Python脚本中的第一行或第二行中的注释与正则表达式<code>coding[=:]\s*([-\w.]+)</code>相匹配，则此注释将作为编码声明处理。编码声明必须出现在它自己的一行上。若果是第二行，则第一行也必须是仅注释行。<br>编码表达式的推荐格式:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: &lt;encoding-name&gt; -*-</span></span><br></pre></td></tr></table></figure><p>如果未发现编码声明，默认编码为<code>UTF-8</code>。<br>如果声明了编码，则必须有Python识别编码名称。编码用于所有词法分析，包括字符串文字，注释和标识符。</p><p><br></p><ul><li><strong>显式行连接</strong><br>Explicit line joining</li></ul><p>可使用反斜杠(<code>\</code>)将两个或多个物理行连接到逻辑行中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1900</span> &lt; year &lt; <span class="number">2100</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= month &lt;= <span class="number">12</span> \</span><br><span class="line">  <span class="keyword">and</span> <span class="number">1</span> &lt;= day &lt;= <span class="number">31</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= hour &lt; <span class="number">24</span> \</span><br><span class="line">  <span class="keyword">and</span> <span class="number">0</span> &lt;= minute &lt; <span class="number">60</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= secod &lt; <span class="number">60</span>:    <span class="comment">#Look like a valid date</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以反斜杠结尾的行不能编写注释。反斜杠在字符串文字外的一行上的其他位置是非法的。</p><p><br></p><ul><li><strong>隐式行连接</strong><br>Implicit line joining</li></ul><p>括号，方括号，花括号中的表达式可以在不使用反斜杠的情况下分割为多个物理行。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">month_names = [<span class="string">'January'</span>, ‘February<span class="string">', '</span>March<span class="string">',    #comments</span></span><br><span class="line"><span class="string">               '</span>April<span class="string">', '</span>May<span class="string">', '</span>June<span class="string">',            #comments</span></span><br><span class="line"><span class="string">   '</span>July<span class="string">', '</span>Auguest<span class="string">', '</span>Septembe<span class="string">r',    #comments</span></span><br><span class="line"><span class="string">   '</span>October, <span class="string">'November'</span>, <span class="string">'December'</span>]</span><br></pre></td></tr></table></figure><p>隐式的连续行可以带有注释，连续行的缩进并不重要。允许空白的连续行。</p><p><br></p><ul><li><strong>空白行</strong><br>Blank lines</li></ul><p>包含空格，制表符，换页符，注释的逻辑行会被忽略。在标准的交互式解释器中，完全空白的逻辑行终止多行语句。</p><p><br></p><ul><li><strong>缩进</strong><br>Indentation</li></ul><p>逻辑行开头的前导空白(空格和制表符)用于计算行的缩进级别，而后者又用于语句的分组。</p><p><code>tabs</code>被1-8个空格替换(从左到右)，使得包括被替换的字节数总是八的倍数。第一个非空白字符前面的空格总数确定行的缩进。缩进不能够使用反斜杠在多个物理行上分隔。<br>如果源文件以一种方式混合制表符(<code>tab</code>)和空格，使得含义取决于空格中制表符的价值，则缩进被拒绝为不一致。会抛出<code>TabError</code>异常。</p><p>跨平台兼容性说明： 由于non_Unix平台上文本编辑器的性质，在源文件中使用制表符和空格的混合来缩进是不明智的。还应注意，不同平台可以明确地限制最大缩进级别。</p><p><br><br><br></p><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><p>Identifiers and keywords</p><p>标识符也称为名称，标识符的长度不受限制。<br>Python中标识符的语法基于Unicode标准附件UAX-31，详情请参考<a href="https://www.python.org/dev/peps/pep-3131/" target="_blank" rel="noopener">PEP 3131</a><br>在ASCII范围内(<code>U+0001...U+007F</code>)，有效的字符与Python2相同。大小写字母<code>A-z</code>，除第一个字符外的下划线(<code>_</code>)，数字<code>0-9</code>。<br>Python3引入了ASCII范围外的其它字符，对于这些字符，分类使用<code>unicodedata</code>模块中包含的Unicode Character Database的版本。</p><p>Unicode类别代码表示：</p><ul><li>Lu： uppercase letters</li><li>Ll： lowercase letters</li><li>Lt： titlecase letters</li><li>Lm： modifier letters</li><li>Lo： other letters</li><li>Nl： letter numbers</li><li>Mn： nonspacing marks</li><li>Mc： spacing combining marks</li><li>Nd： decimal numbers</li><li>Pc： connector punctuations</li><li>Other_ID_Start： explicit list of characters in PropList.txt to support backwards compatibility</li><li>Other_ID_Continue： likewise</li></ul><p><br></p><p><strong>关键字</strong><br>Keywords</p><p>以下标识符用作保留字或关键字，不能用作普通标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">help(keywords)</span><br><span class="line"></span><br><span class="line">False  class     finally  is        return</span><br><span class="line">None   continue  for      lambda    try</span><br><span class="line">True   def       from     nonlocal  while</span><br><span class="line">and    del       global   not       with</span><br><span class="line">as     elif      if       or        yield</span><br><span class="line">assert else      import   pass</span><br><span class="line">break  except    in       raise</span><br></pre></td></tr></table></figure><p><br></p><p><strong>保留的类标识符</strong><br>Reserved classes of identifiers</p><p>某些类标识符(除了关键字)具有特殊含义。这些类由前导/后置下划线(<code>_</code>)字符标识：</p><ul><li><p><code>_*</code><br>特殊标识符<code>_</code>，用于交互式解释器中存储上次评估的结果，它保存在内建模块中。当不处于交互式模式时，下划线<code>_</code>没有特殊含义，也没有定义。<br>名称<code>_</code>通常与国际化一起使用，这是一种约定。</p></li><li><p><code>__*__</code><br>系统定义的名称。这些名称由解释器及其实现(包括标准库)来定义。在任何情况下，任何使用<code>__*__</code>名称都不会明确记录，在没有任何警告的情况下会受到破坏。</p></li><li><p><code>__*</code><br>私有类(class-private)名称。在类定义的上下文中使用中使用此目录中的名称，名称将被重写，以使用损坏的格式来帮助避免基类和派生类(base and derived class)的私有属性之间的名称冲突。</p></li></ul><p><br><br><br></p><h3 id="文字值"><a href="#文字值" class="headerlink" title="文字值"></a>文字值</h3><p>Literals</p><p>文字值是一些内建类型的常量值的符号。</p><p><br></p><p><strong>字符串和字节文字值</strong><br>String and Bytes literals</p><p>字符串文字值和字节文字值描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">stringliteral   ::=  [stringprefix](shortstring | longstring)</span><br><span class="line">stringprefix    ::=  &quot;r&quot; | &quot;u&quot; | &quot;R&quot; | &quot;U&quot; | &quot;f&quot; | &quot;F&quot;</span><br><span class="line">                     | &quot;fr&quot; | &quot;Fr&quot; | &quot;fR&quot; | &quot;FR&quot; | &quot;rf&quot; | &quot;rF&quot; | &quot;Rf&quot; | &quot;RF&quot;</span><br><span class="line">shortstring     ::=  &quot;&apos;&quot; shortstringitem* &quot;&apos;&quot; | &apos;&quot;&apos; shortstringitem* &apos;&quot;&apos;</span><br><span class="line">longstring      ::=  &quot;&apos;&apos;&apos;&quot; longstringitem* &quot;&apos;&apos;&apos;&quot; | &apos;&quot;&quot;&quot;&apos; longstringitem* &apos;&quot;&quot;&quot;&apos;</span><br><span class="line">shortstringitem ::=  shortstringchar | stringescapeseq</span><br><span class="line">longstringitem  ::=  longstringchar | stringescapeseq</span><br><span class="line">shortstringchar ::=  &lt;any source character except &quot;\&quot; or newline or the quote&gt;</span><br><span class="line">longstringchar  ::=  &lt;any source character except &quot;\&quot;&gt;</span><br><span class="line">stringescapeseq ::=  &quot;\&quot; &lt;any source character&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bytesliteral   ::=  bytesprefix(shortbytes | longbytes)</span><br><span class="line">bytesprefix    ::=  &quot;b&quot; | &quot;B&quot; | &quot;br&quot; | &quot;Br&quot; | &quot;bR&quot; | &quot;BR&quot; | &quot;rb&quot; | &quot;rB&quot; | &quot;Rb&quot; | &quot;RB&quot;</span><br><span class="line">shortbytes     ::=  &quot;&apos;&quot; shortbytesitem* &quot;&apos;&quot; | &apos;&quot;&apos; shortbytesitem* &apos;&quot;&apos;</span><br><span class="line">longbytes      ::=  &quot;&apos;&apos;&apos;&quot; longbytesitem* &quot;&apos;&apos;&apos;&quot; | &apos;&quot;&quot;&quot;&apos; longbytesitem* &apos;&quot;&quot;&quot;&apos;</span><br><span class="line">shortbytesitem ::=  shortbyteschar | bytesescapeseq</span><br><span class="line">longbytesitem  ::=  longbyteschar | bytesescapeseq</span><br><span class="line">shortbyteschar ::=  &lt;any ASCII character except &quot;\&quot; or newline or the quote&gt;</span><br><span class="line">longbyteschar  ::=  &lt;any ASCII character except &quot;\&quot;&gt;</span><br><span class="line">bytesescapeseq ::=  &quot;\&quot; &lt;any ASCII character&gt;</span><br></pre></td></tr></table></figure><p>两种类型的文字值都可用单引号(<code>&#39;</code>)或双引号(<code>&quot;</code>)括起来，也能包含在三个引号中。反斜杠(<code>\</code>)字符用于转义好友特殊含义的字符。<br>字节文字值总是以<code>b</code>或<code>B</code>为前缀，它们生成byte类型的实例，而不是str类型。它们可能只包含ASCII字符(128)，更大的字节必须转义。<br>字符串和字节文字值都可以选择以字母<code>r</code>或<code>R</code>为前缀，如原始字符串将反斜杠视为文字字符。因此，在字符串文字值中，原始字符串中的<code>\u</code>和<code>\U</code>不会被特殊处理。</p><p>公认的转义序列：</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th></tr></thead><tbody><tr><td><code>\newline</code></td><td>Backslash and newline ignored</td></tr><tr><td><code>\\</code></td><td>Backslash ()</td></tr><tr><td><code>\&#39;</code></td><td>Single quote (‘)</td></tr><tr><td><code>\&quot;</code></td><td>Double quote (“)</td></tr><tr><td><code>\a</code></td><td>ASCII Bell (BEL)</td></tr><tr><td><code>\b</code></td><td>ASCII Backspace (BS)</td></tr><tr><td><code>\f</code></td><td>ASCII Formfeed (FF)</td></tr><tr><td><code>\n</code></td><td>ASCII Linefeed (LF)</td></tr><tr><td><code>\r</code></td><td>ASCII Carriage Return (CR)</td></tr><tr><td><code>\t</code></td><td>ASCII Horizontal Tab (TAB)</td></tr><tr><td><code>\v</code></td><td>ASCII Vertical Tab (VT)</td></tr><tr><td><code>\ooo</code></td><td>Character with octal value ooo</td></tr><tr><td><code>\xhh</code></td><td>Character with hex value hh</td></tr></tbody></table><p>仅在字符串文字值中识别的转义序列：</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th></tr></thead><tbody><tr><td><code>\N{name}</code></td><td>Character named name in the Unicode database</td></tr><tr><td><code>\uxxxx</code></td><td>Character with 16-bit hex value xxxx</td></tr><tr><td><code>\Uxxxxxxxx</code></td><td>Character with 32-bit hex value xxxxxxxx</td></tr></tbody></table><p><br></p><p><strong>字符串文字串联</strong><br>String literal concatenation</p><p>多个相邻的字符串或字节文字值(由空格分隔)，可能使用不同的引用约定，并且它们的含义与它们的串联相同。因此，<code>&quot;hello&quot; &#39;world&#39;</code>等同于<code>&quot;helloworld&quot;</code>。此功能可用于减少反斜杠的数量，方便地跨长行分隔长字符串，甚至可以为字符串的某些部分添加注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re.compile(&quot;[A-Za-z]&quot;      #letter or underscore</span><br><span class="line">           &quot;[A-Za-z0-9_]*&quot;  #letter, digit or underscore</span><br><span class="line">          )</span><br></pre></td></tr></table></figure><p>注意，此功能在语法级别上定义，但在编译时实现。必须使用<code>+</code>操作符在运行时连接字符串表达式。</p><p><br></p><p><strong>格式化的字符串文字值</strong><br>Formatted string literals</p><p>格式化的字符串文字值是以<code>f</code>或<code>F</code>为前缀的字符串文字，这些字符串可能包含替换字段——由<code>{}</code>分隔的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f_string          ::=  (literal_char | &quot;&#123;&#123;&quot; | &quot;&#125;&#125;&quot; | replacement_field)*</span><br><span class="line">replacement_field ::=  &quot;&#123;&quot; f_expression [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;&#125;&quot;</span><br><span class="line">f_expression      ::=  (conditional_expression | &quot;*&quot; or_expr)</span><br><span class="line">                         (&quot;,&quot; conditional_expression | &quot;,&quot; &quot;*&quot; or_expr)* [&quot;,&quot;]</span><br><span class="line">                       | yield_expression</span><br><span class="line">conversion        ::=  &quot;s&quot; | &quot;r&quot; | &quot;a&quot;</span><br><span class="line">format_spec       ::=  (literal_char | NULL | replacement_field)*</span><br><span class="line">literal_char      ::=  &lt;any code point except &quot;&#123;&quot;, &quot;&#125;&quot; or NULL&gt;</span><br></pre></td></tr></table></figure><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name = &quot;Fred&quot;</span><br><span class="line">&gt;&gt;&gt; f&quot;He said his name is &#123;name!r&#125;.&quot;</span><br><span class="line">&quot;He said his name is &apos;Fred&apos;.&quot;</span><br><span class="line">&gt;&gt;&gt; f&quot;He said his name is &#123;repr(name)&#125;.&quot;  # repr() is equivalent to !r</span><br><span class="line">&quot;He said his name is &apos;Fred&apos;.&quot;</span><br><span class="line">&gt;&gt;&gt; width = 10</span><br><span class="line">&gt;&gt;&gt; precision = 4</span><br><span class="line">&gt;&gt;&gt; value = decimal.Decimal(&quot;12.34567&quot;)</span><br><span class="line">&gt;&gt;&gt; f&quot;result: &#123;value:&#123;width&#125;.&#123;precision&#125;&#125;&quot;  # nested fields</span><br><span class="line">&apos;result:      12.35&apos;</span><br><span class="line">&gt;&gt;&gt; today = datetime(year=2017, month=1, day=27)</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;today:%B %d, %Y&#125;&quot;  # using date format specifier</span><br><span class="line">&apos;January 27, 2017&apos;</span><br><span class="line">&gt;&gt;&gt; number = 1024</span><br><span class="line">&gt;&gt;&gt; f&quot;&#123;number:#0x&#125;&quot;  # using integer format specifier</span><br><span class="line">&apos;0x400&apos;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>数字文字值</strong><br>Numeric literals</p><p>有三种类型的数字文字值：</p><ul><li>integers</li><li>floating point numbers</li><li>imaginary numbers</li></ul><p>没有复数文字值。<br>请注意，数字文字值不包含符号。像<code>-1</code>实际是由一元运算符<code>-</code>和文字值<code>1</code>组成的表达式。</p><p><strong>整数文字值</strong><br>除了可以存储在可用内存中之外，整数文字值的长度没有限制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">integer      ::=  decinteger | bininteger | octinteger | hexinteger</span><br><span class="line">decinteger   ::=  nonzerodigit ([&quot;_&quot;] digit)* | &quot;0&quot;+ ([&quot;_&quot;] &quot;0&quot;)*</span><br><span class="line">bininteger   ::=  &quot;0&quot; (&quot;b&quot; | &quot;B&quot;) ([&quot;_&quot;] bindigit)+</span><br><span class="line">octinteger   ::=  &quot;0&quot; (&quot;o&quot; | &quot;O&quot;) ([&quot;_&quot;] octdigit)+</span><br><span class="line">hexinteger   ::=  &quot;0&quot; (&quot;x&quot; | &quot;X&quot;) ([&quot;_&quot;] hexdigit)+</span><br><span class="line">nonzerodigit ::=  &quot;1&quot;...&quot;9&quot;</span><br><span class="line">digit        ::=  &quot;0&quot;...&quot;9&quot;</span><br><span class="line">bindigit     ::=  &quot;0&quot; | &quot;1&quot;</span><br><span class="line">octdigit     ::=  &quot;0&quot;...&quot;7&quot;</span><br><span class="line">hexdigit     ::=  digit | &quot;a&quot;...&quot;f&quot; | &quot;A&quot;...&quot;F&quot;</span><br></pre></td></tr></table></figure><p><strong>浮点数文字值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">floatnumber   ::=  pointfloat | exponentfloat</span><br><span class="line">pointfloat    ::=  [digitpart] fraction | digitpart &quot;.&quot;</span><br><span class="line">exponentfloat ::=  (digitpart | pointfloat) exponent</span><br><span class="line">digitpart     ::=  digit ([&quot;_&quot;] digit)*</span><br><span class="line">fraction      ::=  &quot;.&quot; digitpart</span><br><span class="line">exponent      ::=  (&quot;e&quot; | &quot;E&quot;) [&quot;+&quot; | &quot;-&quot;] digitpart</span><br></pre></td></tr></table></figure><p><strong>虚数文字值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imagnumber ::=  (floatnumber | digitpart) (&quot;j&quot; | &quot;J&quot;)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Operators</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+       -       *       **      /       //      %      @</span><br><span class="line">&lt;&lt;      &gt;&gt;      &amp;       |       ^       ~</span><br><span class="line">&lt;       &gt;       &lt;=      &gt;=      ==      !=</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>Delimiters</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(       )       [       ]       &#123;       &#125;</span><br><span class="line">,       :       .       ;       @       =       -&gt;</span><br><span class="line">+=      -=      *=      /=      //=     %=      @=</span><br><span class="line">&amp;=      |=      ^=      &gt;&gt;=     &lt;&lt;=     **=</span><br></pre></td></tr></table></figure><p>Python中以下ASCII字符有重要意义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;       &quot;       #       \</span><br></pre></td></tr></table></figure><p>Python中不使用以下ASCII字符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$    ?</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Data model</p><p><br><br><br></p><hr><p><br></p><h1 id="HOWTOs"><a href="#HOWTOs" class="headerlink" title="HOWTOs"></a>HOWTOs</h1><p>Python HOWTOs是覆盖单个特定主机的文档，并尝试完全包含它。此文档比Python参考库更详细。</p><p><br><br><br></p><hr><p><br></p><h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><p><br><br><br></p><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>Python标准库包含了各种不同类型的组件。</p><p>一些模块提供了特定于Python的接口；一些提供特定于特定操作系统的接口，一些提供特定于特定应用程序的接口。<br>一些模块适用于所有Python版本和端口；一些只有在底层系统支持或需要它们是才可用；还有一些只有在编译和安装Python特定配置时才可用。</p><p><br><br><br></p><h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><p>Python解释器内置了许多功能和类型，它们始终可用。</p><table><thead><tr><th><code></code></th><th><code></code></th><th>内建函数</th><th><code></code></th><th><code></code></th></tr></thead><tbody><tr><td><code>abs()</code></td><td><code>dict()</code></td><td><code>help()</code></td><td><code>min()</code></td><td><code>setattr()</code></td></tr><tr><td><code>all()</code></td><td><code>dir()</code></td><td><code>hex()</code></td><td><code>next()</code></td><td><code>slice()</code></td></tr><tr><td><code>any()</code></td><td><code>divmod()</code></td><td><code>id()</code></td><td><code>object()</code></td><td><code>sorted()</code></td></tr><tr><td><code>ascii()</code></td><td><code>enumerate()</code></td><td><code>input()</code></td><td><code>oct()</code></td><td><code>staticmethod()</code></td></tr><tr><td><code>bin()</code></td><td><code>eval()</code></td><td><code>int()</code></td><td><code>open()</code></td><td><code>str()</code></td></tr><tr><td><code>bool()</code></td><td><code>exec()</code></td><td><code>isinstance()</code></td><td><code>ord()</code></td><td><code>sum()</code></td></tr><tr><td><code>bytearray()</code></td><td><code>filter()</code></td><td><code>issubclass()</code></td><td><code>pow()</code></td><td><code>super()</code></td></tr><tr><td><code>bytes()</code></td><td><code>float()</code></td><td><code>iter()</code></td><td><code>print()</code></td><td><code>tuple()</code></td></tr><tr><td><code>callable()</code></td><td><code>format()</code></td><td><code>len()</code></td><td><code>property()</code></td><td><code>type()</code></td></tr><tr><td><code>chr()</code></td><td><code>frozenset()</code></td><td><code>list()</code></td><td><code>range()</code></td><td><code>vars()</code></td></tr><tr><td><code>classmethod()</code></td><td><code>getattr()</code></td><td><code>locals()</code></td><td><code>repr()</code></td><td><code>zip()</code></td></tr><tr><td><code>compile()</code></td><td><code>globals()</code></td><td><code>map()</code></td><td><code>reversed()</code></td><td><code>__import__()</code></td></tr><tr><td><code>complex()</code></td><td><code>hasattr()</code></td><td><code>max()</code></td><td><code>round()</code></td><td><code></code></td></tr><tr><td><code>delattr()</code></td><td><code>hash()</code></td><td><code>memoryview()</code></td><td><code>set()</code></td><td><code></code></td></tr></tbody></table><p><br></p><ul><li><p><strong>abs(x)</strong><br>返回一个数字的绝对值</p></li><li><p><strong>all(iterable)</strong><br>如果迭代的所有元素均为真(或为空)，返回<code>True</code></p></li><li><p><strong>any(iterable)</strong><br>如果迭代的任一元素为真，返回<code>True</code>；为空返回<code>False</code></p></li><li><p><strong>ascii(object)</strong></p></li><li><p><strong>bin(x)</strong><br>将整数转换为二进制字符串</p></li><li><p><strong>bool([x])</strong><br>返回一个布尔值，<code>True</code>或<code>False</code></p></li><li><p><strong>bytearray()</strong><br>返回一个新的字节数组</p></li><li><p><strong>byte()</strong><br>返回一个新的字节对象，它是一个在<code>0&lt;=x&lt;256</code>范围内的不可变整数序列</p></li><li><p><strong>callable(object)</strong><br>如果对象参数显示为可调用，返回<code>True</code>；否则返回<code>False</code></p></li><li><p><strong>chr(i)</strong><br>返回代表Unicode编码为整数i的字符的字符串</p></li><li><p><strong>classmethod(function)</strong><br>为函数返回一个类方法</p></li><li><p><strong>compile()</strong><br>将源编译为代码或AST对象</p></li><li><p><strong>complex()</strong><br>返回一个复数，或将字符串或数字转换为复数</p></li><li><p><strong>delattr(object, name)</strong><br>这是<code>setattr()</code>的相对值</p></li><li><p><strong>dict(kwarg)</strong><br>创建一个新的字典</p></li><li><p><strong>dir(object)</strong><br>无参数，返回当前本地作用域中的名称列表<br>有参数，尝试返回该对象的有效属性列表</p></li><li><p><strong>divmod(a, b)</strong><br>以两个数字(非复数)为参数，使用整数除法时返回由它们的商和余数组成的一对数字</p></li><li><p><strong>enumerate(iterable, start=0)</strong><br>返回一个枚举对象</p></li><li><p><strong>eval(expression, globals, locals)</strong></p></li><li><p><strong>exec()</strong><br>动态执行Python代码</p></li><li><p><strong>filter(function, iterable)</strong><br>从函数返回true的可迭代元素构造一个迭代器</p></li><li><p><strong>float()</strong><br>返回由数字或字符串构造的浮点数</p></li><li><p><strong>format()</strong><br>将值转换为特定格式</p></li><li><p><strong>frozenset()</strong><br>返回一个新的<code>frozenset</code>对象，可选用来自迭代的元素</p></li><li><p><strong>getattr()</strong><br>返回对象命名属性的值</p></li><li><p><strong>globals()</strong><br>返回表示当前全局符号表的字典</p></li><li><p><strong>hasattr(obj, name)</strong><br>参数是一个对象和一份字符串，如果字符串是对象属性之一的名称，结果为<code>True</code>，否则<code>False</code></p></li><li><p><strong>hash(obj)</strong><br>返回对象的hash值</p></li><li><p><strong>help()</strong><br>调用内建的帮助系统</p></li><li><p><strong>hex(x)</strong><br>将整数转换为十六进制数</p></li><li><p><strong>id(obj)</strong><br>返回一个对象的标识</p></li><li><p><strong>input()</strong><br>从标准输入中读取一行，转换为字符串，然后返回该行</p></li><li><p><strong>int(x)</strong><br>返回一个整数对象，如果没有参数，则返回0</p></li><li><p><strong>isinstance(obj, classinfo)</strong><br>如果对象参数是classinfo参数的实例或其子类的实例，返回true</p></li><li><p><strong>issubclass(class, classinfo)</strong><br>如果class是类信息的子类，返回true</p></li><li><p><strong>iter(obj)</strong><br>返回一个迭代器对象</p></li><li><p><strong>len()</strong><br>返回对象的长度</p></li><li><p><strong>list()</strong><br>列表实际上是一个可变的序列类型，而不是一个函数</p></li><li><p><strong>locals()</strong><br>更新并返回表示当前本地符号表的字典</p></li><li><p><strong>map()</strong><br>返回一个将函数应用于每个迭代项的迭代器，从而产生结果</p></li><li><p><strong>max()</strong><br>返回最大项</p></li><li><p><strong>memoryview(obj)</strong><br>从给定参数返回内存视图对象</p></li><li><p><strong>min()</strong><br>返回最小项</p></li><li><p><strong>next()</strong><br>从迭代器中检索下一项</p></li><li><p><strong>object()</strong><br>返回一个新的无特征的对象</p></li><li><p><strong>oct()</strong><br>将整数转换为八进制字符串</p></li><li><p><strong>open()</strong><br>打开文件并返回相应的文件对象</p></li><li><p><strong>ord()</strong><br>给定一个表示一个Unicode编码的字符，返回一个表示该字符的Unicode编码的整数</p></li><li><p><strong>pow()</strong></p></li><li><p><strong>print()</strong><br>将对象打印到流文件</p></li><li><p><strong>property()</strong><br>返回一个property属性</p></li><li><p><strong>range()</strong><br>范围一个不可变的序列类型，而不是函数</p></li><li><p><strong>repr()</strong><br>返回一个包含对象可打印表示的字符串</p></li><li><p><strong>reversed()</strong><br>返回一个反向迭代器</p></li><li><p><strong>round()</strong><br>返回数字小数点后ndigits精度</p></li><li><p><strong>set()</strong><br>返回一个新的集合对象，可选来自迭代的元素</p></li><li><p><strong>setattr()</strong><br><code>getattr</code>的对应部分</p></li><li><p><strong>slice()</strong><br>返回由范围指定的一组索引的切片(slice)对象</p></li><li><p><strong>sorted()</strong><br>从迭代项中返回一个新的排序列表</p></li><li><p><strong>staticmethod()</strong><br>为函数返回一个静态方法</p></li><li><p><strong>str()</strong><br>返回一个字符串对象</p></li><li><p><strong>sum()</strong><br>对迭代项求和</p></li><li><p><strong>super()</strong><br>返回将方法调用委托个父类或同类的代理对象</p></li><li><p><strong>tuple()</strong><br>元组是一个不可变的序列类型，而不是函数</p></li><li><p><strong>vars()</strong><br>返回对象的<code>__dict__</code>属性</p></li><li><p><strong>zip()</strong><br>制作一个迭代器，用于聚合来自每个迭代器的元素</p></li><li><p><code>__import__</code><br>这个函数被<code>import</code>语句调用</p></li></ul><p><br><br><br></p><h2 id="内建常量"><a href="#内建常量" class="headerlink" title="内建常量"></a>内建常量</h2><p>少量常量存在于命名空间中。</p><ul><li><strong>False</strong></li><li><strong>True</strong></li><li><strong>None</strong></li><li><strong>NotImplemented</strong></li><li><strong>Ellipsis</strong></li><li><code>__debug__</code></li></ul><p><br><br><br></p><h2 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h2><p>主要的内建类型有：</p><ul><li>数字(numeric)</li><li>序列(sequence)</li><li>映射(mapping)</li><li>类(class)</li><li>实例(instance)</li><li>异常(exception)</li></ul><p><br><br><br></p><h3 id="真值测试"><a href="#真值测试" class="headerlink" title="真值测试"></a>真值测试</h3><p>任何对象都可进行真值测试。</p><p><br><br><br></p><h3 id="布尔操作"><a href="#布尔操作" class="headerlink" title="布尔操作"></a>布尔操作</h3><ul><li>and</li><li>or</li><li>not</li></ul><p><br><br><br></p><h3 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h3><p>Python中有8个比较操作：</p><ul><li><code>&lt;</code></li><li><code>&lt;=</code></li><li><code>&gt;</code></li><li><code>&gt;=</code></li><li><code>==</code></li><li><code>!=</code></li><li><code>is</code></li><li><code>isnot</code></li></ul><p><br><br><br></p><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li>int</li><li>float</li><li>complex</li></ul><p><br><br><br></p><h3 id="迭代器类型"><a href="#迭代器类型" class="headerlink" title="迭代器类型"></a>迭代器类型</h3><p>Python支持对容器进行迭代的概念。</p><p><br><br><br></p><h3 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h3><ul><li>list<ul><li>列表是可变序列，通常用于存储同类项目的集合</li></ul></li><li>tuple<ul><li>元组是不可变序列，通常用于存储异构数据的集合</li></ul></li><li>range<ul><li>范围表示一个不可变的数字序列，通常用于<code>for</code>循环</li><li>range(start, stop, step)</li></ul></li></ul><p><br></p><h4 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h4><ul><li><code>in</code></li><li><code>not in</code></li><li><code>+</code></li><li><code>*</code></li><li><code>[i]</code></li><li><code>[i:j]</code></li><li><code>[i:j:k]</code></li><li><code>len()</code></li><li><code>min()</code></li><li><code>max()</code></li><li><code>count()</code></li><li><code>index()</code></li></ul><p><br></p><h4 id="不可变序列类型"><a href="#不可变序列类型" class="headerlink" title="不可变序列类型"></a>不可变序列类型</h4><p><br></p><h4 id="可变序列类型"><a href="#可变序列类型" class="headerlink" title="可变序列类型"></a>可变序列类型</h4><p>可变定义类型的操作：</p><ul><li><code>[i]</code></li><li><code>[i:j]</code></li><li><code>del [i:j:k]</code></li><li><code>append()</code></li><li><code>clear()</code></li><li><code>copy()</code></li><li><code>+=</code></li><li><code>*=</code></li><li><code>insert()</code></li><li><code>pop</code></li><li><code>remove()</code></li><li><code>reverse()</code></li></ul><p><br><br><br></p><h3 id="文本序列类型"><a href="#文本序列类型" class="headerlink" title="文本序列类型"></a>文本序列类型</h3><p>Python中的文本数据由str对象处理，字符串是Unicode编码点的不可变序列。</p><p>字符串以各种方式书写：</p><ul><li>单引号</li><li>双引号</li><li>三引号</li></ul><p><br></p><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><ul><li><a href="https://docs.python.org/3.5/library/stdtypes.html#string-methods" target="_blank" rel="noopener">https://docs.python.org/3.5/library/stdtypes.html#string-methods</a></li></ul><p><br></p><h4 id="样式字符串格式"><a href="#样式字符串格式" class="headerlink" title="样式字符串格式"></a>样式字符串格式</h4><p>字符串对象有一个唯一的内建操作: <code>%</code>操作符，也称为字符串格式化操作符。</p><p>转换类型：</p><ul><li><code>%</code></li><li><code>s</code></li><li><code>i</code></li><li><code>x</code></li><li><code>f</code></li><li><code>c</code></li></ul><p><br><br><br></p><h3 id="二进制序列类型"><a href="#二进制序列类型" class="headerlink" title="二进制序列类型"></a>二进制序列类型</h3><ul><li>bytes<ul><li>字节对象是单字节的不可变序列</li></ul></li><li>bytearray<ul><li>是字节对象的可变对象</li></ul></li><li>memoryview<ul><li>运行Python代码访问支持缓冲区协议的对象的内部数据，而无需复制</li></ul></li></ul><p>字节和字节数组对象操作符都支持普通序列操作符，同样也支持字节格式。</p><p><br><br><br></p><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><ul><li>set</li><li>frozenset</li></ul><p>集合对象是不同可散列对象的无序集合。常见用途包含成员测试、删除重复项，数学计算(交集，并集，差集)</p><p><br><br><br></p><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><ul><li>dict</li></ul><p>映射对象可将散列值映射到任意对象，它是可变对象。</p><p><br></p><h4 id="字典视图对象"><a href="#字典视图对象" class="headerlink" title="字典视图对象"></a>字典视图对象</h4><ul><li><code>dict.keys()</code></li><li><code>dict.values()</code></li><li><code>dict.items()</code></li></ul><p><br><br><br></p><h3 id="上下文管理类型"><a href="#上下文管理类型" class="headerlink" title="上下文管理类型"></a>上下文管理类型</h3><p>Python的<code>with</code>语句支持由上下文管理器定义的运行时上下文的概念。</p><p><br><br><br></p><h3 id="其它内建类型"><a href="#其它内建类型" class="headerlink" title="其它内建类型"></a>其它内建类型</h3><h4 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h4><h4 id="类和类实例"><a href="#类和类实例" class="headerlink" title="类和类实例"></a>类和类实例</h4><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h4 id="代码对象"><a href="#代码对象" class="headerlink" title="代码对象"></a>代码对象</h4><h4 id="类型对象"><a href="#类型对象" class="headerlink" title="类型对象"></a>类型对象</h4><h4 id="null对象"><a href="#null对象" class="headerlink" title="null对象"></a>null对象</h4><h4 id="ellipsis对象"><a href="#ellipsis对象" class="headerlink" title="ellipsis对象"></a>ellipsis对象</h4><h4 id="notImplimented对象"><a href="#notImplimented对象" class="headerlink" title="notImplimented对象"></a>notImplimented对象</h4><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><h4 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h4><p><br><br><br></p><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><p>一些特殊的只读属性：</p><ul><li><code>object.__dict__</code></li><li><code>instance.__class__</code></li><li><code>class.__bases__</code></li><li><code>definition.__name__</code></li><li><code>definition.__qualname__</code></li><li><code>class.__mro__</code></li><li><code>class.__subclasses__()</code></li></ul><p><br><br><br></p><h2 id="内建异常"><a href="#内建异常" class="headerlink" title="内建异常"></a>内建异常</h2><p>在Python中，所有异常(exception)都必须是派生自Baseexception的类的实例。</p><p><br><br><br></p><h3 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h3><ul><li>BaseException</li><li>Exception</li><li>ArithmeticError</li><li>bufferError</li><li>LookupError</li></ul><p><br><br><br></p><h3 id="具体异常"><a href="#具体异常" class="headerlink" title="具体异常"></a>具体异常</h3><ul><li>AssertionError</li><li>AttributeError</li><li>EOFError</li><li>FloatingPointError</li><li>GeneratorExit</li><li>ImportError</li><li>IndexError</li><li>KeyError</li><li>KerboardInterrupt</li><li>MemoryError</li><li>NameError</li><li>NotImplementedError</li><li>OSError</li><li>OverflowError</li><li>RecursionError</li><li>ReferenceError</li><li>RuntimeError</li><li>StopAsyncIteration</li><li>SyntaxError</li><li>IndentationError</li><li>TabError</li><li>SystemError</li><li>SystemExit</li><li>TypeError</li><li>UnboundLocalError</li><li>UnicodeError</li><li>UnicodeEncodeError</li><li>UnicodeDecodeError</li><li>UnicodeTranslateError</li><li>ValueError</li><li>ZeroDivisionError</li><li>EnvironmentError</li><li>IOError</li></ul><p><br><br><br></p><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p><code>string</code>模块，字符串操作</p><p><br><br><br></p><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><p><code>re</code>模块，提供了正则表达式匹配操作。</p><p><strong>字符串模式匹配</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r'f[a-z]*'</span>, <span class="string">'which foot or hand fell fastest'</span>)</span><br><span class="line">[<span class="string">'foot'</span>, <span class="string">'fell'</span>, <span class="string">'fastest'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#替换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'aaa and bbb'</span>.replace(<span class="string">'bbb'</span>, <span class="string">'BBB'</span>)</span><br><span class="line"><span class="string">'aaa and BBB'</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="difflib"><a href="#difflib" class="headerlink" title="difflib"></a>difflib</h3><p>difflib，助手计算三角洲。<br>该模块提供用于比较序列的类和函数。</p><p><br><br><br></p><h3 id="textwrap"><a href="#textwrap" class="headerlink" title="textwrap"></a>textwrap</h3><p><code>textwrap</code>模块，文本环绕和填充。<br>将段落文本格式化以适应给定的屏幕宽度。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = <span class="string">""" 1111 1111 1111 1111 1111 1111</span></span><br><span class="line"><span class="string"><span class="meta">... </span>2222 2222 2222 2222 2222 2222</span></span><br><span class="line"><span class="string"><span class="meta">... </span>3333 3333 3333 3333 3333 3333"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(textwrap.fill(doc, width=<span class="number">50</span>))</span><br><span class="line"> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">2222</span> <span class="number">2222</span> <span class="number">2222</span> <span class="number">2222</span></span><br><span class="line"><span class="number">2222</span> <span class="number">2222</span> <span class="number">3333</span> <span class="number">3333</span> <span class="number">3333</span> <span class="number">3333</span> <span class="number">3333</span> <span class="number">3333</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="unicodedata"><a href="#unicodedata" class="headerlink" title="unicodedata"></a>unicodedata</h3><p>unicodedata，Unicode数据库。<br>该模块提供对Unicode字符数据库(UCD)的访问，此数据库为所有Unicode字符定义字符属性。</p><p><br><br><br></p><h3 id="stringprep"><a href="#stringprep" class="headerlink" title="stringprep"></a>stringprep</h3><p>stringprep，因特网字符串准备。</p><p><br><br><br></p><h3 id="readline"><a href="#readline" class="headerlink" title="readline"></a>readline</h3><p>readline，GNU读行接口。<br>该模块定义了许多方便Python解释器完成和读写历史文件的函数。</p><p><br><br><br></p><h3 id="rlcompleter"><a href="#rlcompleter" class="headerlink" title="rlcompleter"></a>rlcompleter</h3><p>rlcompleter，GNU读行的完成函数。<br>该模块通过完成有效的Python标识符合关键字来定义适用于readline模块的完成函数。</p><p><br><br><br></p><h2 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h2><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><p><code>struct</code>模块，将字节解释为打包的二进制数据。<br>提供了<code>pack()</code>和<code>unpack()</code>函数来处理可变长度的二进制记录格式。</p><p><br><br><br></p><h3 id="codecs"><a href="#codecs" class="headerlink" title="codecs"></a>codecs</h3><p>codes，编解码注册和基类。</p><p><br><br><br></p><h2 id="数据和时间"><a href="#数据和时间" class="headerlink" title="数据和时间"></a>数据和时间</h2><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p><code>time</code>模块，提供了许多操作时间值(time value)的函数，用于取得Unix纪元时间戳。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#Unix时间</span></span><br><span class="line">time.time()</span><br><span class="line"><span class="comment">#1531364576.3187952</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#delay for a number of seconds given as a float</span></span><br><span class="line">time.sleep()</span><br><span class="line">time.time();time.sleep(<span class="number">10</span>);time.time()</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><p><code>datetime</code>模块，基本日期和时间类型。<br>支持日期和时间计算，并对输出做格式化处理。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">datetime.datetime.now()</span><br><span class="line"><span class="comment">#datetime.datetime(2018, 7, 12, 13, 45, 43, 127838)</span></span><br><span class="line">datetime.datetime.now().year, datetime.datetime.now().month, datetime.datetime.now().hour</span><br><span class="line"></span><br><span class="line"><span class="comment">#Unix纪元转换</span></span><br><span class="line">datetime.datetime.fromtimestamp(<span class="number">1531374507.8268566</span>)</span><br><span class="line"><span class="comment">#datetime.datetime.fromtimestamp(time.time())</span></span><br><span class="line"><span class="comment">#datetime.datetime(2018, 7, 12, 13, 48, 27, 826857)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#日期比较</span></span><br><span class="line">yesterday = datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00000</span>)</span><br><span class="line">today = datetime.datetime.now()</span><br><span class="line">future = datetime.datetime(<span class="number">2018</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00000</span>)</span><br><span class="line">today &gt; yesterday</span><br><span class="line"><span class="keyword">while</span> future &gt; today:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#timedelta表示一段时间</span></span><br><span class="line"><span class="comment">#周，时，分，秒，毫秒，微秒</span></span><br><span class="line">period = datetime.timedelta(days=<span class="number">7</span>, hours=<span class="number">6</span>, minutes=<span class="number">20</span>, seconds=<span class="number">55</span>)</span><br><span class="line">str(period)</span><br><span class="line"><span class="comment">#'7 days, 6:20:55'</span></span><br></pre></td></tr></table></figure><p><code>datetime.datetime.strftime()</code>将<code>datetime</code>对象转换为字符串<br><code>datetime.datetime.strptime()</code>将字符串转换为<code>datetime</code>对象<br>格式栗子:</p><ul><li><code>%Y</code>: 2018</li><li><code>%y</code>: 18</li><li><code>%m</code>: 07</li><li><code>%B</code>: July</li><li><code>%b</code>: Jul</li><li><code>%d</code>: 一月中的第几天</li><li><code>%j</code>: 一年中的第几天</li><li><code>%w</code>: 一周中的第几天(0-6)</li><li><code>%A</code>: Thursday</li><li><code>%a</code>: Thu</li><li><code>%H</code>: 14(00-23)</li><li><code>%I</code>: 2(0-12)</li><li><code>%M</code>: 分(00-59)</li><li><code>%S</code>: 秒(00-59)</li><li><code>%p</code>: AM/PM</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="comment">#'2018-07-12 14:11:20'</span></span><br><span class="line"></span><br><span class="line">datetime.datetime.strptime(<span class="number">2018</span><span class="number">-07</span><span class="number">-12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">20</span><span class="string">', '</span>%Y-%m-%d %H:%M:%S<span class="string">')</span></span><br><span class="line"><span class="string">#datetime.datetime(2018, 7, 12, 14, 11, 20)</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="calendar"><a href="#calendar" class="headerlink" title="calendar"></a>calendar</h3><p>calendar，日历相关函数。</p><p><br><br><br></p><h3 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h3><p>collections，容器数据类型。</p><p><br><br><br></p><h3 id="collections-abc"><a href="#collections-abc" class="headerlink" title="collections.abc"></a>collections.abc</h3><p>collections.abc，容器的抽象基类</p><p><br><br><br></p><h3 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h3><p>heapq，堆队列算法。</p><p><br><br><br></p><h3 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h3><p>bisect，数组二等分算法。</p><p><br><br><br></p><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p><code>array</code>模块，有效的数值数组。<br>它提供了一个<code>array()</code>对象，就像一个只存储同质数据并将其存储更紧凑的列表。</p><p><br><br><br></p><h3 id="weakref"><a href="#weakref" class="headerlink" title="weakref"></a>weakref</h3><p>weakref，弱引用。<br>weakref模块提供了用于跟踪对象而不创建参考的工具。当不再需要该对象时，它将自动从弱参考表中移除，并为弱参考对象触发回调。</p><p>Python支持自动内存管理，内存在最后一次被删除后不久就被释放。</p><p><br><br><br></p><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>copy，浅层和深层操作。</p><p><br><br><br></p><h3 id="pprint"><a href="#pprint" class="headerlink" title="pprint"></a>pprint</h3><p><code>pprint</code>模块，漂亮打印。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pprint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t =[[[[<span class="string">'black'</span>, <span class="string">'cyan'</span>], <span class="string">'white'</span>, [<span class="string">'green'</span>, <span class="string">'red'</span>]], [[<span class="string">'magenta'</span>,<span class="string">'yellow'</span>], <span class="string">'blue'</span>]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(t, width=<span class="number">30</span>)</span><br><span class="line">[[[[<span class="string">'black'</span>, <span class="string">'cyan'</span>],</span><br><span class="line">   <span class="string">'white'</span>,</span><br><span class="line">   [<span class="string">'green'</span>, <span class="string">'red'</span>]],</span><br><span class="line">  [[<span class="string">'magenta'</span>, <span class="string">'yellow'</span>],</span><br><span class="line">   <span class="string">'blue'</span>]]]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="reprlib"><a href="#reprlib" class="headerlink" title="reprlib"></a>reprlib</h3><p><code>reprlib</code>模块，提供repr自定义显示</p><p><br><br><br></p><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p>enum，支持枚举。</p><p><br><br><br></p><h2 id="数字和数学"><a href="#数字和数学" class="headerlink" title="数字和数学"></a>数字和数学</h2><h3 id="numbers"><a href="#numbers" class="headerlink" title="numbers"></a>numbers</h3><p>numbers，数字抽象基类。</p><p><br><br><br></p><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>按指定精度四舍五入一个浮点数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">round(1.23456, 4)</span><br><span class="line">#1.236</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><p><code>math</code>模块，数学函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.sin(math.pi / <span class="number">2</span>)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.log(<span class="number">256</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">8.0</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="cmath"><a href="#cmath" class="headerlink" title="cmath"></a>cmath</h3><p>cmath，复数数学函数。</p><p><br><br><br></p><h3 id="decimal"><a href="#decimal" class="headerlink" title="decimal"></a>decimal</h3><p>decimal，十进制定点和浮点运算。</p><p><br><br><br></p><h3 id="fractions"><a href="#fractions" class="headerlink" title="fractions"></a>fractions</h3><p>fractions，有理数。</p><p><br><br><br></p><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>random，生成伪随机数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample(range(<span class="number">10</span>), <span class="number">2</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()</span><br><span class="line"><span class="number">0.9714711378164909</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="statistics"><a href="#statistics" class="headerlink" title="statistics"></a>statistics</h3><p><code>statistics</code>模块，数学统计函数。<br>计算基本的统计属性：</p><ul><li>平均数(mean)</li><li>中位数(median)</li><li>方差(variance)</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> statistics</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>statistics.mean(num)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>statistics.median(num)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>statistics.variance(num)</span><br><span class="line"><span class="number">2.5</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="函数式编程模块"><a href="#函数式编程模块" class="headerlink" title="函数式编程模块"></a>函数式编程模块</h2><p>本章模块提供了支持函数式编程风格的函数和类，以及可调用函数的一般操作。</p><p><br><br><br></p><h3 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h3><p>itertools，为高校循环创建迭代器。</p><p><br><br><br></p><h3 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h3><p>functools，可调用对象的高阶函数和操作</p><p><br><br><br></p><h3 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h3><p>operator，作为函数的标准操作符</p><p><br><br><br></p><h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><p>本章介绍的模块处理磁盘文件和目录。</p><p><br><br><br></p><h3 id="pathlib"><a href="#pathlib" class="headerlink" title="pathlib"></a>pathlib</h3><p>pathlib，面向对象的文件系统路径<br>此模块提供了代表文件系统路径的类，其语义适用于不同的操作系统。</p><p><br><br><br></p><h3 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h3><p>os.path，通用路径名操作<br>该模块在路径名上实现了一些有用的功能。</p><p><br><br><br></p><h3 id="fileinput"><a href="#fileinput" class="headerlink" title="fileinput"></a>fileinput</h3><p>fileinput，迭代来自多个输入流的行<br>该模块实现了从一个帮助类和函数，可在标准输入或文件列表上快速编写循环。</p><p><br><br><br></p><h3 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h3><p>stat，解释<code>stat()</code>结果<br>此模块定义用于解释<code>os.stat()</code>,<code>os.fstat()</code>,<code>os.lstat()</code>的结果的常量和函数。</p><p><br><br><br></p><h3 id="filecmp"><a href="#filecmp" class="headerlink" title="filecmp"></a>filecmp</h3><p>filecmp，文件和目录比较<br>此模块定义了比较文件和目录的函数，以及各种可选的时间和权衡。</p><p><br><br><br></p><h3 id="tempfile"><a href="#tempfile" class="headerlink" title="tempfile"></a>tempfile</h3><p>tempfile，生成临时文件和目录<br>此模块创建临时文件和目录。</p><p><br><br><br></p><h3 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h3><p>glob，Unix样式路径名称模式扩展<br>此模块根据Unix shell使用的规则查找与指定模式匹配的所有路径名，结果以任意顺序返回。</p><p><br><br><br></p><h3 id="fnmatch"><a href="#fnmatch" class="headerlink" title="fnmatch"></a>fnmatch</h3><p>fnmatch，Unix文件名模式匹配<br>此模块提供了对Unix shell风格的通配符的支持，它与正则表达式不同。</p><p>通配符:</p><ul><li><code>*</code></li><li><code>?</code></li><li><code>[seq]</code></li><li><code>[!seq]</code></li></ul><p><br><br><br></p><h3 id="linecache"><a href="#linecache" class="headerlink" title="linecache"></a>linecache</h3><p>linecache，随机访问文本行<br>此模块允许从Python源文件中获取任意行，同时尝试使用缓存进行内部优化，这是一种从单个文件中读取多行的常见情况。</p><p><br><br><br></p><h3 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a>shutil</h3><p>shutil，高级文件操作<br>此模块提供了许多关于文件和文件集合的高级操作。</p><ul><li>目录和文件操作<ul><li>copytree</li><li>rmtree</li></ul></li><li>归档操作</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.copyfile(<span class="string">'/tmp/1.txt'</span>, <span class="string">'/tmp/111.txt'</span>)</span><br><span class="line"><span class="string">'/tmp/111.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.move(<span class="string">'/tmp/today'</span>, <span class="string">'/tmp/TODAY'</span>)</span><br><span class="line"><span class="string">'/tmp/TODAY</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="glob-1"><a href="#glob-1" class="headerlink" title="glob"></a>glob</h3><p><code>glob</code>模块，从通配符中搜索创建文件列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> glob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'/tmp/*.txt'</span>)</span><br><span class="line">[<span class="string">'/tmp/1.txt'</span>, <span class="string">'/tmp/2.txt'</span>, <span class="string">'/tmp/111.txt'</span>]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>本章介绍的模块支持将Python数据持久化存储到磁盘上。</p><p><br><br><br></p><h3 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h3><p>pickle，Python对象序列化<br>此模块用于实现序列化(serializing)和反序列化Python对象结构的二进制协议。</p><p><br><br><br></p><h3 id="copyreg"><a href="#copyreg" class="headerlink" title="copyreg"></a>copyreg</h3><p>copyreg，注册pickle支持函数<br>该模块提供了一种定义胭脂(pickle)特定对象时使用的函数方法。</p><p><br><br><br></p><h3 id="shelve"><a href="#shelve" class="headerlink" title="shelve"></a>shelve</h3><p>shelve，Python对象持久化<br>shelf是一个持久的，类似字典的对象。</p><p><br><br><br></p><h3 id="marshal"><a href="#marshal" class="headerlink" title="marshal"></a>marshal</h3><p>marshal，内部Python对象序列化<br>此模块包含了可以以二进制格式读写Python值得函数。</p><p><br><br><br></p><h3 id="dbm"><a href="#dbm" class="headerlink" title="dbm"></a>dbm</h3><p>dbm，到Unix数据库的接口<br>dbm是DBM数据库变体的通用接口。</p><p><br><br><br></p><h3 id="sqlite3"><a href="#sqlite3" class="headerlink" title="sqlite3"></a>sqlite3</h3><p>sqlite3，SQLite数据库的DB-API 2.0接口<br>SQLite是一个C库，它提供了一个轻量级的基于磁盘的数据库，它不需要单独的服务器进程，并允许使用SQL查询语言的非标准变体访问数据库。</p><p><br><br><br></p><h2 id="数据压缩和归档"><a href="#数据压缩和归档" class="headerlink" title="数据压缩和归档"></a>数据压缩和归档</h2><p>本章介绍的模块，支持使用zlib, gzip, bzip2, lzma算法进行数据压缩，以及创建zip和tar格式的归档文件。</p><p><br><br><br></p><h3 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h3><p>zlib，兼容gzip的压缩<br>对于需要数据压缩的应用程序，此模块中的功能允许使用zlib库进行压缩(compression)和解压缩(decompression)。</p><p><br><br><br></p><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>gzip，支持gzip文件<br>此模块提供了一个简单的接口来压缩和解压缩文件，就行GNU程序gzip和gunzip一样。</p><p><br><br><br></p><h3 id="bz2"><a href="#bz2" class="headerlink" title="bz2"></a>bz2</h3><p>bz2，支持bz2压缩<br>该模块提供了一个全面的接口，用于使用bzip2压缩算法进行压缩和解压缩数据。</p><p><br><br><br></p><h3 id="lzma"><a href="#lzma" class="headerlink" title="lzma"></a>lzma</h3><p>lzma，使用lzma算法进行压缩<br>该模块提供了类和函数，用于使用lzma进行压缩和解压缩数据。</p><p><br><br><br></p><h3 id="zipfile"><a href="#zipfile" class="headerlink" title="zipfile"></a>zipfile</h3><p>zipfile，使用zip归档<br>zip文件格式是一个常用的归档和压缩标准。此模块提供了工具，用于创建，读写，追加和列出zip文件的工具。</p><p><br><br><br></p><h3 id="tarfile"><a href="#tarfile" class="headerlink" title="tarfile"></a>tarfile</h3><p>tarfile，读写tar归档文件<br>该模块可读写tar归档文件，包括使用gzip，bz2和lzma压缩。</p><p><br><br><br></p><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><p>本章描述的模块，解析各种各样的文件格式，不包含标记语言和e-mail。</p><p><br><br><br></p><h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><p>csv，读写CSV文件</p><p>所谓的CSV(comma separated values)逗号分隔值，它是一种简化的电子表格，保存为纯文本文件。是电子表格和数据库最常用的导入和导出格式。<br>该模块实现了以CSV格式读写表格数据。</p><p>CSV文件很简单，缺少了Excel表格的许多功能：</p><ul><li>值没有类型，都是字符串</li><li>没有字体大小或颜色</li><li>没有多个工作表</li><li>不能指定单元格的宽度和高度</li><li>不能合并单元格</li><li>不能签入图像和图标</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line"></span><br><span class="line">file = open(&apos;/tmp/test.csv&apos;)</span><br><span class="line">reader = csv.reader(file)</span><br><span class="line">data = list(reder)</span><br><span class="line"></span><br><span class="line">#写</span><br><span class="line">file = open(&apos;/tmp/test.csv&apos;, &apos;w&apos;, newline=&apos;&apos;)</span><br><span class="line">writer = csv.writer(file)</span><br><span class="line">writer.writerow(&apos;[1, 11, 111]&apos;)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="configparser"><a href="#configparser" class="headerlink" title="configparser"></a>configparser</h3><p>configparser，配置文件解析器<br>此模块提供了ConfigParser类，它实现了一种基本配置，你可以使用它来编写可由最终用户轻松定制的Python程序。</p><p><br><br><br></p><h3 id="netrc"><a href="#netrc" class="headerlink" title="netrc"></a>netrc</h3><p>netrc文件处理<br>netrc类解析和封装Unix FTP程序和其它FTP客户端使用的netrc文件格式。</p><p><br><br><br></p><h3 id="xdrlib"><a href="#xdrlib" class="headerlink" title="xdrlib"></a>xdrlib</h3><p>xdrlib，编码(encode)和解码(decode)XDR数据<br>该模块支持外部数据表示标准(External Data Representation Standard)。此模块定义了两个类，一个将变量打包(packing)到XDR，另一个从XDR中解包(unpack)。</p><p><br><br><br></p><h2 id="加密服务"><a href="#加密服务" class="headerlink" title="加密服务"></a>加密服务</h2><p>本章描述的模块，实现了各种加密(cryptographic)算法</p><p><br><br><br></p><h3 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h3><p>hashlib，安全散列和消息摘要(digest)<br>该模块为许多不同安全散列和消息摘要算法实现了通用接口。</p><ul><li>SHA1</li><li>SHA224</li><li>SHA256</li><li>SHA384</li><li>MD5</li></ul><p><br><br><br></p><h3 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h3><p>hmac，用于消息认证的键控散列</p><p><br><br><br></p><h2 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h2><p>本章介绍的模块，提供了操作系统功能的接口。</p><p><br><br><br></p><h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><p><code>os</code>，各种操作系统接口<br>该模块为使用操作系统相关的功能提供了一种便携方式。</p><ul><li>文件名，命令行参数，环境变量</li><li>进程参数</li><li>文件对象创建</li><li>文件描述符操作</li><li>文件和目录的Linux扩展属性</li><li>进程管理</li><li>调度程序的接口</li><li>各种各样的系统信息</li><li>各种各样的功能</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/zhang'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">'/tmp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在shell中运行命令</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">'mkdir /tmp/today'</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="io"><a href="#io" class="headerlink" title="io"></a>io</h3><p>io，流处理的核心工具<br>该模块提供了Python用于处理各种类型I/O的主要工具。</p><ul><li>text i/o</li><li>binary i/o</li><li>raw i/o</li></ul><p><br><br><br></p><h3 id="time-1"><a href="#time-1" class="headerlink" title="time"></a>time</h3><p>time，访问和转换时间<br>此模块提供了各种与时间相关的函数</p><p><br><br><br></p><h3 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h3><p>argparse，解析命令行选项、参数和子命令<br>该模块可以轻松编写用户友好的命令行接口。</p><p><br><br><br></p><h3 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h3><p>getopt，用于命令行选项的C风格解析器<br>该模块帮助脚本解析<code>sys.argv</code>中的命令行参数。</p><p><br><br><br></p><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><p>logging，Python的日志工具<br>该模块定义了函数和类，为应用程序和库实现灵活事件记录系统</p><p>log level:</p><ul><li><p>DEBUG<br>最低级别。用于小细节，通常只有在诊断问题时，才需要关心这些信息。</p></li><li><p>INFO<br>用于记录程序中的一般事件的信息。</p></li><li><p>WARNING<br>用于表示可能的问题</p></li><li><p>ERROR<br>用于记录错误</p></li><li><p>CRITICAL<br>最高级别，用于表示致命的错误</p></li></ul><p><br></p><p><strong>日志级别是一种建议。归根到底，还是由你来决定日志消息属于哪一种类型。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s - %(levelname)s - %(lineno)d - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'Debugging information'</span>)</span><br><span class="line">logging.info(<span class="string">'Informational message'</span>)</span><br><span class="line">logging.warning(<span class="string">'Warning:config file %s not found'</span>, <span class="string">'server.conf'</span>)</span><br><span class="line">logging.error(<span class="string">'Error occurred'</span>)</span><br><span class="line">logging.critical(<span class="string">'Critical error -- shutting down'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-10</span> <span class="number">14</span>:<span class="number">50</span>:<span class="number">13</span>,<span class="number">060</span> - INFO - <span class="number">6</span> - Informational message</span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-10</span> <span class="number">14</span>:<span class="number">50</span>:<span class="number">13</span>,<span class="number">061</span> - WARNING - <span class="number">7</span> - Warning:config file server.conf <span class="keyword">not</span> found</span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-10</span> <span class="number">14</span>:<span class="number">50</span>:<span class="number">13</span>,<span class="number">061</span> - ERROR - <span class="number">8</span> - Error occurred</span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-10</span> <span class="number">14</span>:<span class="number">50</span>:<span class="number">13</span>,<span class="number">061</span> - CRITICAL - <span class="number">9</span> - Critical error -- shutting down</span><br></pre></td></tr></table></figure><p><br></p><p>log format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|  %(name)s            Name of the logger (logging channel)</span><br><span class="line">|  %(levelno)s         Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class="line">|  %(levelname)s       Text logging level for the message (&quot;DEBUG&quot;, &quot;INFO&quot;, &quot;WARNING&quot;, &quot;ERROR&quot;, &quot;CRITICAL&quot;)</span><br><span class="line">|  %(pathname)s        Full pathname of the source file where the logging call was issued (if available)</span><br><span class="line">|  %(filename)s        Filename portion of pathname</span><br><span class="line">|  %(module)s          Module (name portion of filename)</span><br><span class="line">|  %(lineno)d          Source line number where the logging call was issued (if available)</span><br><span class="line">|  %(funcName)s        Function name</span><br><span class="line">|  %(created)f         Time when the LogRecord was created (time.time() return value)</span><br><span class="line">|  %(asctime)s         Textual time when the LogRecord was created</span><br><span class="line">|  %(msecs)d           Millisecond portion of the creation time</span><br><span class="line">|  %(relativeCreated)d Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded (typically at application startup time)</span><br><span class="line">|  %(thread)d          Thread ID (if available)</span><br><span class="line">|  %(threadName)s      Thread name (if available)</span><br><span class="line">|  %(process)d         Process ID (if available)</span><br><span class="line">|  %(message)s         The result of record.getMessage(), computed just as the record is emitted</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="logging-config"><a href="#logging-config" class="headerlink" title="logging.config"></a>logging.config</h3><p>logging.config，日志配置</p><p><br><br><br></p><h3 id="logging-handlers"><a href="#logging-handlers" class="headerlink" title="logging.handlers"></a>logging.handlers</h3><p>logging.handlers，日志处理程序</p><p><br><br><br></p><h3 id="getpass"><a href="#getpass" class="headerlink" title="getpass"></a>getpass</h3><p>getpass，便携式密码输入</p><p><br><br><br></p><h3 id="curses"><a href="#curses" class="headerlink" title="curses"></a>curses</h3><p>curses，字符单元显示的终端处理</p><p><br><br><br></p><h3 id="curses-textpad"><a href="#curses-textpad" class="headerlink" title="curses.textpad"></a>curses.textpad</h3><p>curses.textpad，用于curses程序的文本输入小部件<br>此模块提供了一个Textbox类，他在curses窗口中处理基本的文本编辑。</p><p><br><br><br></p><h3 id="curses-ascii"><a href="#curses-ascii" class="headerlink" title="curses.ascii"></a>curses.ascii</h3><p>curses.ascii，用于ASCII字符的使用程序<br>该模块为ASCII字符提供名称常量，并为各种ASCII字符类中的成员测试函数。</p><p><br><br><br></p><h3 id="curses-panel"><a href="#curses-panel" class="headerlink" title="curses.panel"></a>curses.panel</h3><p>curses.panel，curses的面板堆栈扩展<br>面板是具有深度附加功能的窗口，因此它可堆叠在彼此的顶部，并且只显示每个窗口的可见部分。</p><p><br><br><br></p><h3 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h3><p>platform，访问底层平台的识别数据</p><p><br><br><br></p><h3 id="errno"><a href="#errno" class="headerlink" title="errno"></a>errno</h3><p>errno，标准的errno系统符号</p><p><br><br><br></p><h3 id="ctypes"><a href="#ctypes" class="headerlink" title="ctypes"></a>ctypes</h3><p>ctypes，一个Python的外部函数库<br>该模块提供了C兼容的数据类型，并允许在DLL或共享中调用函数。</p><p><br><br><br></p><h2 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h2><p>本章介绍的模块，为并发执行(consurrent execution)代码提供了支持。</p><p><br><br><br></p><h3 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h3><p>threading，基于线程的并行<br>此模块在较低级别的<code>_thread</code>模块之上构建较高级别的线程接口。</p><p>如果多线程同时读写变量，导致互相干扰，就会发生所谓的并发问题。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line">print(<span class="string">'thread start.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wakeup</span><span class="params">(times)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">n = times</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(<span class="string">'Wake Up!'</span>)</span><br><span class="line"></span><br><span class="line">thread01 = threading.Thread(target=wakeup, args=[<span class="number">3</span>])</span><br><span class="line"><span class="comment">#thread01 = threading.Thread(target=wakeup, kwargs=&#123;'times': 3&#125;)</span></span><br><span class="line">thread01.start()</span><br><span class="line">print(<span class="string">'End of program!'</span>)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><p>multiprocessing，基于进程的并行<br>它是一个使用类似线程模块的API来支持产生进程的包。</p><p><br><br><br></p><h3 id="concurrent"><a href="#concurrent" class="headerlink" title="concurrent"></a>concurrent</h3><p>concurrent包中只有一个模块<br>concurrent.futures，启动并行任务<br>该模块为异步(asynchronously)执行可调用提供了一个高级的接口。</p><p><br><br><br></p><h3 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h3><p>subprocess，子进程管理<br>该模块允许你生成新的进程，连接到它们的input/output/error pipes，并获得它们返回的代码。<br>每个进程可以有多个线程。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment">#在Python脚本中启动一个外部程序</span></span><br><span class="line">subprocess.Popen(‘/tmp/hello.py’)</span><br><span class="line"><span class="comment">#hello world!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用Popen传递参数，这需要传递一个列表</span></span><br><span class="line">subprocess.Popen([‘/tmp/hello.py’, <span class="string">'argv1'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#它还有许多参数</span></span><br><span class="line">help(subprocess.Popen)</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><h3 id="sched"><a href="#sched" class="headerlink" title="sched"></a>sched</h3><p>sched，事件调度程序(scheduler)<br>该模块定义了一个实现通用时间调度器的类。</p><p><br><br><br></p><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>queue，一个同步队列类<br>该模块实现了多生产者、多消费者队列。当信息必须在多线程之间安全地交换时，它在线程编程中特别有用。</p><p><br><br><br></p><h2 id="进程间的通信和网络"><a href="#进程间的通信和网络" class="headerlink" title="进程间的通信和网络"></a>进程间的通信和网络</h2><p>本章介绍的模块，提供了不同进程进行通信的机制。</p><p><br><br><br></p><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p>socket，低级网络接口<br>该模块提供了对BSD socket的访问。</p><p>Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。<br>tcp需要建立连接，udp不需要建立连接，因此udp每次需要指定发送地址。</p><p>socket类型：</p><ul><li><p><code>socket.AF_UNIX</code><br>本机通信</p></li><li><p><code>socket.AF_INET</code><br>服务器间的网络通信</p></li><li><p><code>socket.AF_INET6</code><br>IPv6的服务器间的通信</p></li><li><p><code>socket.SOCK_STREAM</code><br>基于TCP的流式socket通信</p></li><li><p><code>socket.SOCK_DGRAM</code><br>基于UDP数据包的socket通信</p></li><li><p><code>socket.SOCK_RAM</code><br>原始套接字</p></li><li><p><code>socket.SOCK_SEQPACKET</code><br>可靠的连续数据包服务</p></li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#服务端socket函数：</span><br><span class="line">bind()    在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port))</span><br><span class="line">listen()    可设置挂起的最大连接数</span><br><span class="line">accept()    接收tcp连接并返回(conn, address), conn是新的套接字对象, address是客户端地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#客户端socket函数：</span><br><span class="line">connect()</span><br><span class="line">connect_ex()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#公共socket函数</span><br><span class="line">#tcp</span><br><span class="line">recv()    接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量</span><br><span class="line">send()</span><br><span class="line">sendall()    完整发送tcp数据</span><br><span class="line">#udp</span><br><span class="line">recvfrom()</span><br><span class="line">sendto()</span><br><span class="line"></span><br><span class="line">close()</span><br></pre></td></tr></table></figure><p><br></p><p>socket编程思想：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#Server-side</span><br><span class="line">1. 创建socket</span><br><span class="line">2. 监听</span><br><span class="line">3. 接收client请求</span><br><span class="line">4. 接收C端数据</span><br><span class="line">5. 关闭头街子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Client-side</span><br><span class="line">1. 创建socket</span><br><span class="line">2. 连接到S端</span><br><span class="line">3. 发送数据</span><br><span class="line">4. 关闭套接字</span><br></pre></td></tr></table></figure><p><br></p><p><strong>注意</strong><br>在Python3.x中，byte strings 和 unicodestrings是两种不同的类型，相互之间需要进行<code>decode()</code>和<code>encode()</code><br><code>send()</code>和<code>recv()</code>都是bytes类型，需要与str类型进行转换。</p><p><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tcp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#S端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">5678</span></span><br><span class="line">bf = <span class="number">1024</span></span><br><span class="line">maxConn = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">tcpS = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">tcpS.bind((host, port))</span><br><span class="line">tcpS.listen(maxConn)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Server start at &#123;host&#125;:&#123;port&#125;'</span>.format(host=host, port=port))</span><br><span class="line">print(<span class="string">'Waiting for connection...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    conn, addr = tcpS.accept()</span><br><span class="line">    print(<span class="string">'Connected by: &#123;addr&#125;'</span>.format(addr=addr))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = conn.recv(bf)</span><br><span class="line">        print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        conn.send(<span class="string">'server received message.'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    tcpS.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#C端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">5678</span></span><br><span class="line">bf = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">tcpC = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">tcpC.connect((host, port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg = input(<span class="string">'Please input message: \n'</span>)</span><br><span class="line">    tcpC.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    data = tcpC.recv(bf)</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#udp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#S端</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> socket, datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">5679</span></span><br><span class="line">bf = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">mongoPort = <span class="number">27017</span></span><br><span class="line">mongoUser = <span class="string">'zhang'</span></span><br><span class="line">mongoPw = <span class="string">'password'</span></span><br><span class="line">mongoDb = <span class="string">'zhang'</span></span><br><span class="line">mongoColl = <span class="string">'udpS'</span></span><br><span class="line"></span><br><span class="line">udpS = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">udpS.bind((host, port))</span><br><span class="line"></span><br><span class="line">collection = MongoClient(host=host, port=mongoPort, \</span><br><span class="line">             username=mongoUser, password=mongoPw).zhang.udpS</span><br><span class="line"></span><br><span class="line">print(<span class="string">'udp socket on &#123;host&#125;:&#123;port&#125;...'</span>.format(host=host, port=port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    data, addr = udpS.recvfrom(bf)</span><br><span class="line">    print(<span class="string">'Received from &#123;addr&#125;'</span>.format(addr=addr))</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">'Server has recived!\n'</span></span><br><span class="line">    udpS.sendto(msg.encode(<span class="string">'utf-8'</span>), addr)</span><br><span class="line"></span><br><span class="line">    dateTime = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    post = &#123;</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'Server'</span>,</span><br><span class="line">      <span class="string">'date'</span>: dateTime,</span><br><span class="line">      <span class="string">'message'</span>: data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    collection.insert_one(post)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#C端</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> socket, datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">5679</span></span><br><span class="line">bf = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">mongoPort = <span class="number">27017</span></span><br><span class="line">mongoUser = <span class="string">'zhang'</span></span><br><span class="line">mongoPw = <span class="string">'password'</span></span><br><span class="line">mongoDb = <span class="string">'zhang'</span></span><br><span class="line">mongoColl = <span class="string">'udpC'</span></span><br><span class="line"></span><br><span class="line">udpC = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">collection = MongoClient(host=host, port=mongoPort, \</span><br><span class="line">             username=mongoUser, password=mongoPw).zhang.udpC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg = str(input(<span class="string">'Please input message: \n'</span>))</span><br><span class="line">    udpC.sendto(msg.encode(<span class="string">'utf-8'</span>), (host, port))</span><br><span class="line">    data = udpC.recv(bf)</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    dateTime = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    post = &#123;</span><br><span class="line">      <span class="string">'author'</span>: <span class="string">'Client'</span>,</span><br><span class="line">      <span class="string">'date'</span>: dateTime,</span><br><span class="line">      <span class="string">'message'</span>: data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    collection.insert_one(post)</span><br><span class="line"></span><br><span class="line">    udpC.close()</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="ssl"><a href="#ssl" class="headerlink" title="ssl"></a>ssl</h3><p>ssl，套接字对象的TLS/SSL封装<br>此模块提供了对网络套接字的传输层安全(通常称为安全套接字层)的加密和对等身份验证功能。</p><p><br><br><br></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select，等待I/O完成<br>该模块提供对大多数操作系统中可用的<code>select()</code>和<code>poll()</code>函数的访问。</p><p><br><br><br></p><h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><p>selector，高级I/O复用<br>该模块基于<code>select()</code>模块构建，有序高级和高效的I/O复用。</p><p><br><br><br></p><h3 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h3><p>asyncio，异步I/O，事件循环，协同程序和任务<br>该模块提供了使用协同程序编写单线程并发代码的基础结构，在套接字和其它资源上多路复用I/O访问，运行网络客户端和服务器以及其它相关基元。</p><p><br><br><br></p><h3 id="asyncore"><a href="#asyncore" class="headerlink" title="asyncore"></a>asyncore</h3><p>asyncore，异步套接字处理器<br>该模块为编写异步套接字服务(客户端和服务端)提供了基本的基础结构。</p><p><br><br><br></p><h3 id="asynchat"><a href="#asynchat" class="headerlink" title="asynchat"></a>asynchat</h3><p>asynchat，异步套接字命令/响应处理器<br>该模块构建在asyncore之上，简化了异步客户端和服务端，并更容易处理其元素被任何字符串终止和长度可变的协议。</p><p><br><br><br></p><h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h3><p>signal，为异步事件设置处理器<br>该模块提供了在Python中使用信号处理程序的机制。</p><p><br><br><br></p><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>mmap，内存映射文件支持<br>内存映射文件对象的行为与bytearray和文件对象类似。</p><p><br><br><br></p><h2 id="网络数据处理"><a href="#网络数据处理" class="headerlink" title="网络数据处理"></a>网络数据处理</h2><p>本章介绍的模块，支持处理常用网络数据格式。</p><p><br><br><br></p><h3 id="email"><a href="#email" class="headerlink" title="email"></a>email</h3><p>email，一个email和MIME处理包<br>该包是用于管理电子邮件信息的库，包含MIME和其它基于RFC 2822的消息文档。</p><p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展，是一种标准化的方式来标识文档的性质和格式。浏览器通常使用MIME类型(而不是文件扩展名)来确定如何处理文档。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type/subtype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text/plain</span><br><span class="line">text/html</span><br><span class="line">image/jpeg</span><br><span class="line">image/png</span><br><span class="line">audio/mpeg</span><br><span class="line">audio/ogg</span><br><span class="line">audio/*</span><br><span class="line">video/mp4</span><br><span class="line">application/octet-stream</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p><br></p><h4 id="email-message"><a href="#email-message" class="headerlink" title="email.message"></a>email.message</h4><p>表示一个电子邮件信息</p><p><br></p><h4 id="email-parser"><a href="#email-parser" class="headerlink" title="email.parser"></a>email.parser</h4><p>解析电子邮件信息</p><p><br></p><h4 id="email-generator"><a href="#email-generator" class="headerlink" title="email.generator"></a>email.generator</h4><p>生成MIME文档</p><p><br></p><h4 id="email-policy"><a href="#email-policy" class="headerlink" title="email.policy"></a>email.policy</h4><p>政策对象</p><p><br></p><h4 id="email-headerregistry"><a href="#email-headerregistry" class="headerlink" title="email.headerregistry"></a>email.headerregistry</h4><p>自定义头对象</p><p><br></p><h4 id="email-contentmanager"><a href="#email-contentmanager" class="headerlink" title="email.contentmanager"></a>email.contentmanager</h4><p>管理MIME内容</p><p><br></p><h4 id="email-mime"><a href="#email-mime" class="headerlink" title="email.mime"></a>email.mime</h4><p>从抓挠中创建电子邮件和MIME对象。</p><p><br></p><h4 id="email-header"><a href="#email-header" class="headerlink" title="email.header"></a>email.header</h4><p>Internationalized headers</p><p><br></p><h4 id="email-charset"><a href="#email-charset" class="headerlink" title="email.charset"></a>email.charset</h4><p>表示字符集</p><p><br></p><h4 id="email-encoders"><a href="#email-encoders" class="headerlink" title="email.encoders"></a>email.encoders</h4><p>编码器</p><p><br></p><h4 id="email-errors"><a href="#email-errors" class="headerlink" title="email.errors"></a>email.errors</h4><p>异常和缺陷类</p><p><br></p><h4 id="email-utils"><a href="#email-utils" class="headerlink" title="email.utils"></a>email.utils</h4><p>各种各样的功能</p><p><br></p><h4 id="email-iterators"><a href="#email-iterators" class="headerlink" title="email.iterators"></a>email.iterators</h4><p>迭代器</p><p><br><br><br></p><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>json，JSON编码器和解码器<br>JSON(JavaScript Object Notation)，是一个受JavaScript对象语法启发的轻量级的数据交换格式。</p><p>json只能包含如下Python数据类型的值：</p><ul><li>字符串</li><li>整型</li><li>浮点数</li><li>布尔型</li><li>列表</li><li>字典</li><li>NoneType</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">JSONDATA = &apos;&#123;&quot;name&quot;: &quot;zhang&quot;, &quot;age&quot;: 21, &quot;likeFootball&quot;: true&#125;</span><br><span class="line"></span><br><span class="line">loadData = json.loads(JSONDATA)</span><br><span class="line">dumpData = json.dumps(jsonData)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="mailcap"><a href="#mailcap" class="headerlink" title="mailcap"></a>mailcap</h3><p>mailcap，mailcap文件处理<br>mailcap文件用于配置感知MIME的应用程序(如邮件阅读器和Web浏览器)，如何对具有不同MIME类型的文件做出反应。</p><p><br><br><br></p><h3 id="mailbox"><a href="#mailbox" class="headerlink" title="mailbox"></a>mailbox</h3><p>mailbox，以各种格式操作邮箱<br>该模块定义了两个类: Mailbox和Message，用于访问和操作磁盘邮箱及其包含的邮件。</p><p><br><br><br></p><h3 id="mimetypes"><a href="#mimetypes" class="headerlink" title="mimetypes"></a>mimetypes</h3><p>mimetypes，将文件名映射到MIME类型<br>该模块在文件名或URL和MIME类型之间进行转换。</p><p><br><br><br></p><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>base64，base16、base32，base64，base85数据编码<br>该模块提供了将二进制数据编码为可打印的ASCII字符，并将这些编码解码回二进制数据的函数。</p><p><br><br><br></p><h3 id="binhex"><a href="#binhex" class="headerlink" title="binhex"></a>binhex</h3><p>binhex，编码和解码binhex4文件</p><p><br><br><br></p><h3 id="binascii"><a href="#binascii" class="headerlink" title="binascii"></a>binascii</h3><p>binascii，在二进制和ASCII之间进行转换<br>该模块包含了许多方法，用于转换在二进制和各种ASCII编码的二进制表示之进行转换的方法。</p><p><br><br><br></p><h3 id="quopri"><a href="#quopri" class="headerlink" title="quopri"></a>quopri</h3><p>quopri，编码和解码MIME引用打印数据</p><p><br><br><br></p><h3 id="uu"><a href="#uu" class="headerlink" title="uu"></a>uu</h3><p>uu，编码和解码uuencode文件<br>该模块以uuencode格式对文件进行编码和解码，允许任意二进制数据仅通过ASCII连接进行传输。</p><p><br><br><br></p><h2 id="结构化标记处理工具"><a href="#结构化标记处理工具" class="headerlink" title="结构化标记处理工具"></a>结构化标记处理工具</h2><p>Python支持用以处理各种形式的结构化数据标记的模块。</p><ul><li>标准通用标记语言，SGML()</li><li>超文本标记语言，HTML</li><li>扩展标记语言，XML</li></ul><p><br><br><br></p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>html，支持超文本标记语言<br>该模块定义了用以操作HTML的实用程序。</p><p><br><br><br></p><h3 id="html-parser"><a href="#html-parser" class="headerlink" title="html.parser"></a>html.parser</h3><p>html.parser，简单HTML和XHTML解析器<br>该模块提供了一个类，用来解析HTML和XHTML格式的文本文件的基础。</p><p><br><br><br></p><h3 id="html-entities"><a href="#html-entities" class="headerlink" title="html.entities"></a>html.entities</h3><p>html.entities，HTML一般实体的定义</p><p><br><br><br></p><h3 id="XML处理模块"><a href="#XML处理模块" class="headerlink" title="XML处理模块"></a>XML处理模块</h3><p>用于处理XML的Python接口被分组到xml包</p><p><br><br><br></p><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>本章介绍的模块，实现了网络协议并支持相关技术。</p><p><br><br><br></p><h3 id="webbrowser"><a href="#webbrowser" class="headerlink" title="webbrowser"></a>webbrowser</h3><p>webbrowser - Interfaces for launching and remotely controlling Web browsers.<br>webbrowser，便利的web浏览器控制器<br>该模块提供了一个高级interface，允许向用户显示基于web的文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import webbrowser</span><br><span class="line"></span><br><span class="line">webbrowser.open(&apos;https://www.baidu.com&apos;)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="cgi"><a href="#cgi" class="headerlink" title="cgi"></a>cgi</h3><p>cgi，通用网关接口支持<br>CGI 脚本的支持模块；<br>该模块定义了许多用Python编写的CGI脚本的实用功能。</p><p><br><br><br></p><h3 id="cgitb"><a href="#cgitb" class="headerlink" title="cgitb"></a>cgitb</h3><p>cgitb，CGI脚本的追溯管理器<br>此模块为Python脚本提供了一个特殊的异常处理程序。</p><p><br><br><br></p><h3 id="wsgiref"><a href="#wsgiref" class="headerlink" title="wsgiref"></a>wsgiref</h3><p>wsgiref，WSGI功能和参考实现<br>Web服务器网关接口(WSGI)，是Web服务器软件和Web应用程序(Python编写)之间的标准接口。拥有标准接口可以轻松使用支持WSGI和多个不同Web服务器的应用程序。</p><p><br><br><br></p><h3 id="urllb"><a href="#urllb" class="headerlink" title="urllb"></a>urllb</h3><p><code>urllib</code>模块，处理URL</p><p><br><br><br></p><h3 id="urllib-request"><a href="#urllib-request" class="headerlink" title="urllib.request"></a>urllib.request</h3><p><code>urllib.request</code>模块，用于打开URL的可扩展库<br>该模块定义了函数和类，用于在复杂的世界中打开URL——基本和身份认证，重定向，cookie等</p><p><br><br><br></p><h3 id="urllib-response"><a href="#urllib-response" class="headerlink" title="urllib.response"></a>urllib.response</h3><p>urllib.response，响应类<br>该模块定义了向接口这样的最小文件的函数和类。</p><p><br><br><br></p><h3 id="urllib-parse"><a href="#urllib-parse" class="headerlink" title="urllib.parse"></a>urllib.parse</h3><p>urllib.parse，将URL解析为组件<br>此模块定义了一个标准接口，用于在组件中分解统一资源定位符(URL)字符串，将组件重新组合为URL，并将相对URL转换为基本URL的绝对URL。</p><p><br><br><br></p><h3 id="urlllib-error"><a href="#urlllib-error" class="headerlink" title="urlllib.error"></a>urlllib.error</h3><p>urllib.error，由urllib.request引起的异常类<br>该模块定义了由urllib.request引发的异常类。</p><p><br><br><br></p><h3 id="urllib-robotparser"><a href="#urllib-robotparser" class="headerlink" title="urllib.robotparser"></a>urllib.robotparser</h3><p>urllib.robotparser，解析robot.txt<br>此模块提供了一个<code>RobotFileParser</code>类，它回答了有关特定用户代理是否可以在发布robots.txt文件的Web站点上获取URL的问题。</p><p><br><br><br></p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>http，HTTP模块</p><p><br><br><br></p><h3 id="http-client"><a href="#http-client" class="headerlink" title="http.client"></a>http.client</h3><p>http.client，HTTP协议客户端<br>该模块定义了实现HTTP和HTTPS协议客户端的类。</p><p><br><br><br></p><h3 id="ftplib"><a href="#ftplib" class="headerlink" title="ftplib"></a>ftplib</h3><p>ftplib，FTP协议客户端<br>此模块定义了FTP类和一些相关项。FTP类实现了FTP协议的客户端。</p><p><br><br><br></p><h3 id="poplib"><a href="#poplib" class="headerlink" title="poplib"></a>poplib</h3><p>poplib，POP3协议客户端<br>此模块定义了POP3类，它封装了一个到POP3服务器的连接，并实现了该协议。</p><p><br><br><br></p><h3 id="imaplib"><a href="#imaplib" class="headerlink" title="imaplib"></a>imaplib</h3><p>imaplib，IMAP4协议客户端<br>此模块定义了三个类，封装一个到IMAP服务器的连接，并实现IAP4客户端协议的大部分子集。</p><p><br><br><br></p><h3 id="nntplib"><a href="#nntplib" class="headerlink" title="nntplib"></a>nntplib</h3><p>nntplib，NNTP协议客户端<br>此模块定义了NNTP类，它实现网络新闻传输协议(NNTP)客户端。</p><p><br><br><br></p><h3 id="smtplib"><a href="#smtplib" class="headerlink" title="smtplib"></a>smtplib</h3><p><code>smtplib</code>模块，SMTP协议客户端<br>此模块定义了一个SMTP客户端会话对象，可使用SMTP守护进程发送邮件给任一互联网计算机。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line"><span class="comment">#send = smtplib.STMP('smtp.example.com', port=xxx)</span></span><br><span class="line">send = smtplib.SMTP_SSL(‘smpt.exmail.qq.com’, <span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">send.helo()</span><br><span class="line"><span class="comment">#(250, b'smtp.qq.com')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录需要提前设置邮箱授权码，使用授权码作为密码登录</span></span><br><span class="line">send.login(user, passed)</span><br><span class="line"></span><br><span class="line">send.sendmail(<span class="keyword">from</span>, to, message)</span><br><span class="line">send.quti()</span><br></pre></td></tr></table></figure><h3 id="smtpd"><a href="#smtpd" class="headerlink" title="smtpd"></a>smtpd</h3><p>smtpd，SMTP服务器<br>该模块提供了几个类来实现SMTP服务器。</p><p><br><br><br></p><h3 id="telnetlib"><a href="#telnetlib" class="headerlink" title="telnetlib"></a>telnetlib</h3><p>telnetlib，Telnet客户端<br>此模块提供了一个telnet类，用于执行Telnet协议。</p><p><br><br><br></p><h3 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h3><p>uuid，UUID对象<br>此模块提供了不可修改的UUID对象和uuid[1-5]函数。</p><p><br><br><br></p><h3 id="socketserver"><a href="#socketserver" class="headerlink" title="socketserver"></a>socketserver</h3><p>socketserver，一个网络服务器的框架<br>此模块简化了编写网络服务器的任务。</p><p><br><br><br></p><h3 id="http-server"><a href="#http-server" class="headerlink" title="http.server"></a>http.server</h3><p>http.server，HTTP服务器<br>此模块定义了类，用于实现HTTP服务器。</p><p><br><br><br></p><h3 id="http-cookie"><a href="#http-cookie" class="headerlink" title="http.cookie"></a>http.cookie</h3><p>http.cookie，HTTP状态管理<br>此模块定义了类，用于抽象cookie概念(HTTP状态管理机制)。</p><p><br><br><br></p><h3 id="http-cookiejar"><a href="#http-cookiejar" class="headerlink" title="http.cookiejar"></a>http.cookiejar</h3><p>http.cookiejar，HTTP客户端的cookie处理<br>此模块定义了类，用于自动处理HTTPcookie。</p><p><br><br><br></p><h3 id="xmlrpc"><a href="#xmlrpc" class="headerlink" title="xmlrpc"></a>xmlrpc</h3><p>xmlrpc，XMLRPC服务器和客户端模块<br>XML-RPC是一种远程过程调用方法，它使用通过HTTP传递的XML传输。</p><p><br><br><br></p><h3 id="xmlrpc-client"><a href="#xmlrpc-client" class="headerlink" title="xmlrpc.client"></a>xmlrpc.client</h3><p>xmlrpc.client，XML-RPC客户端访问</p><p><br><br><br></p><h3 id="xmlrpc-server"><a href="#xmlrpc-server" class="headerlink" title="xmlrpc.server"></a>xmlrpc.server</h3><p>xmlrpc.server，基本的XML-RPC服务器</p><p><br><br><br></p><h3 id="ipaddress"><a href="#ipaddress" class="headerlink" title="ipaddress"></a>ipaddress</h3><p>ipaddress，IPv4/IPv6操作库<br>此模块提供了创建、修改和操作IPv4和IPv6和网络的功能。</p><p><br><br><br><br><br></p><h2 id="多媒体服务"><a href="#多媒体服务" class="headerlink" title="多媒体服务"></a>多媒体服务</h2><p>本章介绍的模块，实现了用于多媒体应用的各种算法和接口。</p><p><br><br><br></p><h3 id="audioop"><a href="#audioop" class="headerlink" title="audioop"></a>audioop</h3><p>audioop，操作原始音频数据<br>此模块包含一些对声音片段有用的操作。</p><p><br><br><br></p><h3 id="aifc"><a href="#aifc" class="headerlink" title="aifc"></a>aifc</h3><p>aifc，读写AIFF和AIFC文件<br>此模块提供了对读写AIFF和AIFC文件的支持。</p><ul><li>AIFF is Audio Interchange File Format<ul><li>一种用于将数字音频样本存储在文件中的格式</li></ul></li><li>AIFC是一种更新的格式，包括压缩音频数据</li></ul><p><br><br><br></p><h3 id="sunau"><a href="#sunau" class="headerlink" title="sunau"></a>sunau</h3><p>sunau，读写Sun AU文件<br>此模块为Sun AU声音格式提供了一个便利的接口。</p><p><br><br><br></p><h3 id="wave"><a href="#wave" class="headerlink" title="wave"></a>wave</h3><p>wave，读写WAV文件<br>此模块为WAV声音格式提供了一个便利的接口。</p><p><br><br><br></p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>chunk，读取IFF分块数据<br>此模块为读取使用EA IFF块的文件提供了接口。</p><p><br><br><br></p><h3 id="colorsys"><a href="#colorsys" class="headerlink" title="colorsys"></a>colorsys</h3><p>colorsys，颜色系统之家的转换<br>此模块定义了计算机显示器RGB和其它三个坐标系统：YIQ, HLS, HSV中使用的RGB颜色空间中表示的颜色之间的颜色值的双向转换。</p><p><br><br><br></p><h3 id="imghdr"><a href="#imghdr" class="headerlink" title="imghdr"></a>imghdr</h3><p>imghdr，确定图像类型<br>此模块确定文件或字节流中包含的图像类型。</p><p><br><br><br></p><h3 id="sndhdr"><a href="#sndhdr" class="headerlink" title="sndhdr"></a>sndhdr</h3><p>sndhdr，确定声音文件类型<br>此模块提供了实用功能，视图确定文件中的声音数据类型。</p><p><br><br><br></p><h3 id="ossaudiodev"><a href="#ossaudiodev" class="headerlink" title="ossaudiodev"></a>ossaudiodev</h3><p>ossaudiodev，访问与OSS兼容的音频设备<br>此模块允许你访问OSS(open sound system)音频接口。OSS是Linux和FreeBSD的标准音频接口。</p><p><br><br><br><br><br></p><h2 id="语言环境"><a href="#语言环境" class="headerlink" title="语言环境"></a>语言环境</h2><p>本章介绍的模块，可帮助你编写独立于语言和语言环境的软件。</p><p><br><br><br></p><h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a>gettext</h3><p>gettext，多语言国际化服务<br>此模块为你的Python模块和应用程序提供了国际化和本地化服务。</p><p><br><br><br></p><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><p><code>locale</code>语言环境模块，打开对POSIX语言环境数据库和功能的访问。</p><p><br><br><br><br><br></p><h2 id="程序框架"><a href="#程序框架" class="headerlink" title="程序框架"></a>程序框架</h2><p>本章介绍的模块，是基本上决定程序结构的框架。</p><p><br><br><br></p><h3 id="turtle"><a href="#turtle" class="headerlink" title="turtle"></a>turtle</h3><p>turtle，乌龟图形<br>乌龟图形是向孩子们介绍编程的一种流行方式。</p><p><br><br><br></p><h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><p>cmd，支持面向行的命令解释器<br>此类为编写面向行的命令解释器提供了一个简单的框架。</p><p><br><br><br></p><h3 id="shlex"><a href="#shlex" class="headerlink" title="shlex"></a>shlex</h3><p>shlex，简单的词法分析<br>此类可以容易地编写词法分析器，以获得类似Unix shell的简单语法。</p><p><br><br><br><br><br></p><h2 id="带有Tk的图形用户界面"><a href="#带有Tk的图形用户界面" class="headerlink" title="带有Tk的图形用户界面"></a>带有Tk的图形用户界面</h2><p>Tk/Tcl是Python的一部分。它提供了一个强大且独立于平台的窗口工具包，可供Python程序员使用的tkinter包。</p><ul><li>Tcl(Tool Command Language)，是一种脚本语言</li><li>Tk，是基于Tcl的图形界面开发工具箱</li></ul><p><br><br><br></p><h3 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h3><p>tkinter，与Tcl/Tk的Python接口<br>此包是到Tk GUI工具箱的标准Python接口。</p><p><br><br><br></p><h3 id="tkinter-ttk"><a href="#tkinter-ttk" class="headerlink" title="tkinter.ttk"></a>tkinter.ttk</h3><p>tkinter.ttk，Tk主题小部件<br>此模块提供了对Tk主题小部件集的访问。</p><p><br><br><br></p><h3 id="tkinter-tix"><a href="#tkinter-tix" class="headerlink" title="tkinter.tix"></a>tkinter.tix</h3><p>tkinter，Tk扩展小工具<br>此模块提供了一组额外的小工具。</p><p><br><br><br></p><h3 id="tkinter-scrolledtext"><a href="#tkinter-scrolledtext" class="headerlink" title="tkinter.scrolledtext"></a>tkinter.scrolledtext</h3><p>滚动(scrolled)文本工具<br>此模块提供了一个相同名称的类，它实现了基本的文本小部件，具有一个垂直滚动条，用于执行正确的事情。</p><p><br><br><br></p><h3 id="IDEL"><a href="#IDEL" class="headerlink" title="IDEL"></a>IDEL</h3><p>IDEL是Python的集成开发和学习环境。</p><p><br><br><br></p><h3 id="其它GUI包"><a href="#其它GUI包" class="headerlink" title="其它GUI包"></a>其它GUI包</h3><ul><li>PyGObject</li><li>PyGTK</li><li>PyQt</li><li>PySide</li><li>wxPython</li></ul><p><br><br><br><br><br></p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>本章介绍的模块可帮助你你编写软件。</p><p>开发高质量软件的一种方法是在开发过程中为每个函数编写测试，并在开发过程中频繁运行这些测试。</p><p><br><br><br></p><h3 id="typing"><a href="#typing" class="headerlink" title="typing"></a>typing</h3><p>typing，支持类型提示<br>此模块支持PEP 484指定的类型提示。</p><p><br><br><br></p><h3 id="pydoc"><a href="#pydoc" class="headerlink" title="pydoc"></a>pydoc</h3><p>pydoc，文档生成器和在线帮助系统<br>此模块从Python模块自动生成文档，文档可作为控制台上的文本页面呈现，提供个Web浏览器或保存到HTML文件。</p><p><br><br><br></p><h3 id="doctest"><a href="#doctest" class="headerlink" title="doctest"></a>doctest</h3><p><code>doctest</code>模块，测试交互式Python示例<br>此模块搜索类似于交互式Python会话的文本片段，然后执行这些会话以验证它们是否完全安装所示工作。</p><p><br><br><br></p><h3 id="unittest"><a href="#unittest" class="headerlink" title="unittest"></a>unittest</h3><p>unittest，单元测试框架</p><p><br><br><br></p><h3 id="2to3"><a href="#2to3" class="headerlink" title="2to3"></a>2to3</h3><p>2to3，自动翻译Python2-3代码<br>获取Python2源代码并应用一系列修复程序将其转换为有效的Python3代码。</p><p><br><br><br></p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>test，用于Python的回归测试包<br>此包包含了Python的所有回归测试。</p><p><br><br><br></p><h3 id="test-support"><a href="#test-support" class="headerlink" title="test.support"></a>test.support</h3><p>test.support，Python测试套件功能</p><p><br><br><br><br><br></p><h2 id="调试和分析"><a href="#调试和分析" class="headerlink" title="调试和分析"></a>调试和分析</h2><ul><li>调试器(Debugger)使你能遍历代码，分析堆栈并设置断点</li><li>分析器(Profiler)运行代码并给出执行时间的详细分类，使你识别程序中的瓶颈</li></ul><p><br><br><br></p><h3 id="bdb"><a href="#bdb" class="headerlink" title="bdb"></a>bdb</h3><p>bdb，调试器框架<br>此模块处理基本的调试器功能。</p><p><br><br><br></p><h3 id="faulthandler"><a href="#faulthandler" class="headerlink" title="faulthandler"></a>faulthandler</h3><p>faulthandler，转储Python回溯(traceback)</p><p><br><br><br></p><h3 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h3><p>pdb，Python调试器<br>此模块为Python程序定义了一个交互式源代码调试器。</p><p><br><br><br></p><h3 id="Python分析器"><a href="#Python分析器" class="headerlink" title="Python分析器"></a>Python分析器</h3><p>cProfile和profile提供了Python程序的确定性分析。</p><p><br><br><br></p><h3 id="timeit"><a href="#timeit" class="headerlink" title="timeit"></a>timeit</h3><p><code>timeit</code>模块，测量小代码片段的执行时间<br>此模块提供了一个简单的方法类计算一小段Python代码的时间。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Timer(<span class="string">'a,b = b,a'</span>, <span class="string">'a=1; b=2'</span>).timeit()</span><br><span class="line"><span class="number">0.020318730967119336</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h3><p>trace，追踪Python语句的执行<br>此模块允许你追踪程序执行，生成带注释的语句覆盖列表，打印调用关系和在程序运行期间执行的函数列表。</p><p><br><br><br></p><h3 id="tracemalloc"><a href="#tracemalloc" class="headerlink" title="tracemalloc"></a>tracemalloc</h3><p>tracemalloc，追踪内存分配<br>此模块是一个追踪由Python分配的内存块的调试工具。</p><p><br><br><br><br><br></p><h2 id="软件打包和分发"><a href="#软件打包和分发" class="headerlink" title="软件打包和分发"></a>软件打包和分发</h2><p>这些库可帮助你发布和安装Python软件。这些模块被设计来与PyPi结合使用，但它们也可以与本地索引服务器一起使用，或根本不需要任何索引服务器。</p><p><br><br><br></p><h3 id="distutils"><a href="#distutils" class="headerlink" title="distutils"></a>distutils</h3><p>distutils，构建和安装Python模块<br>此软件包为构建和安装其它模块到Python提供支持。</p><p><br><br><br></p><h3 id="ensurepip"><a href="#ensurepip" class="headerlink" title="ensurepip"></a>ensurepip</h3><p>ensurepip，引导pip安装程序<br>此软件包支持将pip安装程序引导到现有的Python或虚拟环境中。</p><p><br><br><br></p><h3 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h3><p>venv，创建虚拟环境<br>此模块为创建轻量虚拟环境提供支持，可选地域系统目录隔离。</p><p><br><br><br></p><h3 id="zipapp"><a href="#zipapp" class="headerlink" title="zipapp"></a>zipapp</h3><p>zipapp，管理可执行的python zip归档<br>Python提供了管理创建包含Python代码的zip文件的工具。</p><p><br><br><br><br><br></p><h2 id="Python服务组件"><a href="#Python服务组件" class="headerlink" title="Python服务组件"></a>Python服务组件</h2><p>本章介绍的模块，提供了与Python解释器及其与环境交互相关的各种服务。</p><p><br><br><br></p><h3 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h3><p><code>sys</code>模块，系统特定的参数和功能<br>此模块提供了对解释器使用或维护的一些变量以及与解释器交互的函数非访问。</p><p><strong>命令行参数</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure><p><strong>错误输出重定向和程序终止(termination)</strong><br><code>sys</code>模块还具有stdin, stdout, stderr属性。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stderr.write(<span class="string">'Warning, log file not found starting a new one\n'</span>)</span><br><span class="line">Warning, log file <span class="keyword">not</span> found starting a new one</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="sysconfig"><a href="#sysconfig" class="headerlink" title="sysconfig"></a>sysconfig</h3><p>sysconfig，提供对Python配置信息的访问<br>此模块提供对Python配置信息的访问，如安装路径列表和当前平台相关的配置变量。</p><p><br><br><br></p><h3 id="builtins"><a href="#builtins" class="headerlink" title="builtins"></a>builtins</h3><p>builtins，内建对象<br>此模块提供了对Python所有内置标识符的直接访问。例如，<code>builtins.open</code>是内建函数<code>open()</code>的全名。</p><p><br><br><br></p><h3 id="main"><a href="#main" class="headerlink" title="__main__"></a><code>__main__</code></h3><p><code>__main__</code>，顶级脚本环境<br><code>__main__</code>是顶级代码执行的范围的名称。从标准输入、脚本或交互式提示读取时，模块的<code>__name__</code>设置为等于<code>__main__</code></p><p><br><br><br></p><h3 id="warnings"><a href="#warnings" class="headerlink" title="warnings"></a>warnings</h3><p>warnings，警告控制<br>警告信息通常在有用的情况下发出，以提醒用户程序中的某些条件，该条件不能保证引发异常并终止程序。<br>Python程序员通过调用此模块中的<code>warn()</code>函数来发出警告。</p><p><br><br><br></p><h3 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h3><p>contextlib，with语句上下文实用程序<br>此模块为涉及with语句的常见任务提供使用程序。</p><p><br><br><br></p><h3 id="abc"><a href="#abc" class="headerlink" title="abc"></a>abc</h3><p>abc，抽象基类(Abstract Base Classes)<br>此模块提供了在Python中定义抽象基类的基础结构。</p><p><br><br><br></p><h3 id="atexit"><a href="#atexit" class="headerlink" title="atexit"></a>atexit</h3><p>atexit，退出处理程序<br>此模块定义了注册和注销清理函数的函数。</p><p><br><br><br></p><h3 id="traceback"><a href="#traceback" class="headerlink" title="traceback"></a>traceback</h3><p>traceback，打印或取回堆栈回溯<br>该模块提供了一个标准接口，用来提取、格式化和打印Python程序的堆栈追踪。</p><p><br><br><br></p><h3 id="future"><a href="#future" class="headerlink" title="__future__"></a><code>__future__</code></h3><p><code>__future__</code>，未来的声明定义</p><p><br><br><br></p><h3 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h3><p>gc，垃圾收集器接口(Garbage Collector interface)<br>此模块为可选的垃圾收集器提供了一个接口。</p><p><br><br><br></p><h3 id="inspect"><a href="#inspect" class="headerlink" title="inspect"></a>inspect</h3><p>inspect，检查活对象(Inspect live objects)<br>此模块提供了几个有用的功能来帮助获取有关活动对象的信息，如模块、类、函数、回溯、框架对象和代码对象。</p><p><br><br><br></p><h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><p>site，Site-specific configuration hook</p><p><br><br><br></p><h3 id="fpectl"><a href="#fpectl" class="headerlink" title="fpectl"></a>fpectl</h3><p>fpectl，浮点异常控制(Floating point exception control)</p><p><br><br><br><br><br></p><h2 id="自定义Python解释器"><a href="#自定义Python解释器" class="headerlink" title="自定义Python解释器"></a>自定义Python解释器</h2><p>本章介绍的模块，允许编写类似于Python的交互式解释器接口。</p><p><br><br><br></p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>code，解释器基本类<br>此模块提供了一些工具，来实现Python的read-eval-print循环。</p><p><br><br><br></p><h3 id="codeop"><a href="#codeop" class="headerlink" title="codeop"></a>codeop</h3><p>codeop，编译Python代码<br>此模块提供了实用程序，用于模拟Python read-eval-print循环，像code模块中做的那样</p><p><br><br><br><br><br></p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>本章介绍的模块，提供了导入其它Python模块和以自定义导入进程的hook的新方法。</p><p><br><br><br></p><h3 id="zipimport"><a href="#zipimport" class="headerlink" title="zipimport"></a>zipimport</h3><p>zipimport，从zip归档文件导入模块<br>此模块增加了从Zip格式的归档中导入Python模块和软件包的功能。<br>通常不需要明确使用zipimport模块，内置导入机制将自动使用zip归档文件的路径(sys.path)。</p><p><br><br><br></p><h3 id="pkgutil"><a href="#pkgutil" class="headerlink" title="pkgutil"></a>pkgutil</h3><p>pkgutil，包扩展程序<br>此模块为导入system提供实用程序，尤其是软件包的支持。</p><p><br><br><br></p><h3 id="modulefinder"><a href="#modulefinder" class="headerlink" title="modulefinder"></a>modulefinder</h3><p>modulefinder，查找脚本使用的模块<br>此模块可用于确定脚本导入的模块集。</p><p><br><br><br></p><h3 id="runpy"><a href="#runpy" class="headerlink" title="runpy"></a>runpy</h3><p>runpy，定位和执行Python模块<br>此模块用于定位和运行Python模块，而不必先导入它们。</p><p><br><br><br></p><h3 id="importlib"><a href="#importlib" class="headerlink" title="importlib"></a>importlib</h3><p>importlib，执行import<br>此软件包有两个目的：</p><ul><li>在Python源代码中提供import语句的实现(<code>__import__</code>函数)</li><li>实现import组件暴露在此软件包中，使用户更容易创建它们自己的定制对象参与导入过程</li></ul><p><br><br><br><br><br></p><h2 id="Python语言服务"><a href="#Python语言服务" class="headerlink" title="Python语言服务"></a>Python语言服务</h2><p>Python提供了许多模块来协助处理Python语言。包括：</p><ul><li>标记</li><li>解析</li><li>语法分析</li><li>字节码反汇编</li><li>…</li></ul><p><br><br><br></p><h3 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h3><p>parser，访问Python解析树<br>此模块为python内部解析器和字节码编译器提供了一个接口。</p><p><br><br><br></p><h3 id="ast"><a href="#ast" class="headerlink" title="ast"></a>ast</h3><p>ast，抽象语法树(Abstract Syntax Trees)<br>此模块帮助Python应用程序处理Python抽象语法的树。</p><p><br><br><br></p><h3 id="symtable"><a href="#symtable" class="headerlink" title="symtable"></a>symtable</h3><p>symtable，访问编译器的符号<br>符号表由AST编译器在字节码生成之前生成。</p><p><br><br><br></p><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>symbol，用于Python解析的常量<br>该模块提供了，表示解析树内部节点数值的常量。</p><p><br><br><br></p><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>token，与Python解析树一起使用的常量<br>此模块提供了，表示解析树(终端令牌)的叶子节点数值的常量。</p><p><br><br><br></p><h3 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a>keyword</h3><p>keyword，测试Python关键字<br>此模块允许Python程序确定字符串是否为关键字。</p><p><br><br><br></p><h3 id="tokenize"><a href="#tokenize" class="headerlink" title="tokenize"></a>tokenize</h3><p>tokenize，用于Python源代码的令牌器<br>此模块为Python源代码提供了一个用Python实现的语言扫描器。</p><p><br><br><br></p><h3 id="tabnanny"><a href="#tabnanny" class="headerlink" title="tabnanny"></a>tabnanny</h3><p>tabnanny，检查不明确的缩进(Detection of ambiguous indentation)</p><p><br><br><br></p><h3 id="pyclbr"><a href="#pyclbr" class="headerlink" title="pyclbr"></a>pyclbr</h3><p>pyclbr，Python类浏览器支持<br>此模块可用于，确定有关模块中定义的类、方法和顶级函数的一些限制信息。</p><p><br><br><br></p><h3 id="py-compile"><a href="#py-compile" class="headerlink" title="py_compile"></a>py_compile</h3><p><code>py_compile</code>，编译Python源文件<br>此模块提供了功能，从源文件生成字节码文件，以及当模块源文件作为脚本被调用时使用。</p><p><br><br><br></p><h3 id="compileall"><a href="#compileall" class="headerlink" title="compileall"></a>compileall</h3><p>compileall，字节编译Python库<br>此模块提供了实用功能来支持安装Python库。</p><p><br><br><br></p><h3 id="dis"><a href="#dis" class="headerlink" title="dis"></a>dis</h3><p>dis，用于Python字节码的反汇编器<br>此模块支持通过反汇编来支持CPython字节码的分析。</p><p><br><br><br></p><h3 id="pickletools"><a href="#pickletools" class="headerlink" title="pickletools"></a>pickletools</h3><p>pickletools，pickle开发者的工具<br>此模块包含了各种常量，涉及到pickle模块的细节，一些关于实现的冗长的评论，一些用于分析pickle数据的有用函数。</p><p><br><br><br><br><br></p><h2 id="杂项服务"><a href="#杂项服务" class="headerlink" title="杂项服务"></a>杂项服务</h2><p>本章介绍的模块，提供了在所有Python版本中可用的杂项(miscellaneous)服务。</p><p><br><br><br></p><h3 id="formatter"><a href="#formatter" class="headerlink" title="formatter"></a>formatter</h3><p>formatter，通用输出格式<br>此模块支持两种接口定义，每种都有多种实现方式：</p><ul><li>格式化接口</li><li>格式化接口所需的写入接口</li></ul><p><br><br><br><br><br></p><h2 id="Windows特定服务"><a href="#Windows特定服务" class="headerlink" title="Windows特定服务"></a>Windows特定服务</h2><p>本章介绍的模块仅可在MS windows平台上可获取。</p><p><br><br><br></p><h3 id="msilib"><a href="#msilib" class="headerlink" title="msilib"></a>msilib</h3><p>msillib，读写微软安装程序文件<br>此模块支持创建Microsoft Installer (<code>.msi</code>) 文件。</p><p><br><br><br></p><h3 id="msvcrt"><a href="#msvcrt" class="headerlink" title="msvcrt"></a>msvcrt</h3><p>msvcrt，MS VC++运行时的有用例程<br>此函数可访问Windows平台上的一些有用功能。</p><p><br><br><br></p><h3 id="winreg"><a href="#winreg" class="headerlink" title="winreg"></a>winreg</h3><p>winreg，Windows注册表访问<br>此模块将Windows注册表的API暴露给Python。</p><p><br><br><br></p><h3 id="winsound"><a href="#winsound" class="headerlink" title="winsound"></a>winsound</h3><p>winsound，Windows的声音播放接口<br>此模块提供了对Windows平台提供的基本声音播放机器的访问。</p><p><br><br><br><br><br></p><h2 id="Unix特定服务"><a href="#Unix特定服务" class="headerlink" title="Unix特定服务"></a>Unix特定服务</h2><p>本章介绍的模块，提供了Unix操作系统(Unix-Like)特有的功能的接口。</p><p><br><br><br></p><h3 id="posix"><a href="#posix" class="headerlink" title="posix"></a>posix</h3><p>posix，最基本的POSIX系统调用<br>此模块提供了对由C标准和POSIX标准 标准化的操作系统功能的访问。</p><p><br><br><br></p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>pwd， The password database<br>此模块提供了对Unix用户账户和密码数据库的访问。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pwd</span><br><span class="line"></span><br><span class="line">pwd.getpwdnam(<span class="string">'zhang'</span>)</span><br><span class="line">pwd.struct_passwd(pw_name=<span class="string">'zhang'</span>, pw_passwd=<span class="string">'x'</span>, pw_uid=<span class="number">1000</span>, pw_gid=<span class="number">1000</span>, pw_gecos=<span class="string">'zhang'</span>, pw_dir=<span class="string">'/home/zhang'</span>, pw_shell=<span class="string">'/bin/bash'</span>)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="spwd"><a href="#spwd" class="headerlink" title="spwd"></a>spwd</h3><p>spwd，The shadow password database<br>此模块提供了对Unix shadow password database的访问。</p><p><br><br><br></p><h3 id="grp"><a href="#grp" class="headerlink" title="grp"></a>grp</h3><p>grp，The group database<br>此模块提供了对Unix group database的访问。</p><p><br><br><br></p><h3 id="crypt"><a href="#crypt" class="headerlink" title="crypt"></a>crypt</h3><p>crypt，Function to check Unix passwords<br>此模块实现crypt(3)例程的接口，该例程是基于修改的DES算法的单向散列函数。</p><p><br><br><br></p><h3 id="termios"><a href="#termios" class="headerlink" title="termios"></a>termios</h3><p>termios，POSIX风格的tty控件<br>此模块提供了一个接口，用于I/O控制的POSIX调用。</p><p><br><br><br></p><h3 id="tty"><a href="#tty" class="headerlink" title="tty"></a>tty</h3><p>tty，终端控制函数<br>此模块定义了将tty置入cbreak和raw模式的函数。</p><p><br><br><br></p><h3 id="pty"><a href="#pty" class="headerlink" title="pty"></a>pty</h3><p>pty，伪(Pseudo)终端程序<br>此模块定义了处理伪终端概念的操作： 启动另一个进程并以编程方式写入和读取其控制终端。</p><p><br><br><br></p><h3 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h3><p>fcntl，The fcntl and ioctl system calls<br>此模块对文件描述符执行文件控制和I/O控制。</p><p><br><br><br></p><h3 id="pipes"><a href="#pipes" class="headerlink" title="pipes"></a>pipes</h3><p>pipes，shell pipelines的接口<br>此模块定义了一个类来抽象管道的概念——从一个文件到另一个文件的一系列转换器。</p><p><br><br><br></p><h3 id="resource"><a href="#resource" class="headerlink" title="resource"></a>resource</h3><p>resource，资源使用信息<br>此模块提供了测量和控制程序使用系统资源的基本机制。</p><p><br><br><br></p><h3 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h3><p>syslog，Unix syslog library routines<br>此模块为Unix系统日志库例程提供了一个接口。</p><p><br><br><br></p><hr><p><br></p><h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><p>基本上可将第三方库理解为开源库！</p><p><br></p><p>Awesome-Python: <a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a><br>PyPI: <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a></p><p><br><br><br></p><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li>sh</li><li>Watchdog</li></ul><p><br><br><br></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>PyMySQL</li><li>pymongo</li><li>redis</li></ul><p><br></p><h3 id="PyMySQL"><a href="#PyMySQL" class="headerlink" title="PyMySQL"></a>PyMySQL</h3><p>PyMySQL：<a href="https://pypi.org/project/PyMySQL/" target="_blank" rel="noopener">https://pypi.org/project/PyMySQL/</a></p><p><br></p><p><strong>首先创建数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin</span><br><span class="line">AUTO_INCREMENT=<span class="number">1</span> ;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>连接</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">connection = pymysql.connect(</span><br><span class="line">    host=<span class="string">'localhost'</span>,</span><br><span class="line">    user=<span class="string">'username'</span>,</span><br><span class="line">    password=<span class="string">'password'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    db=<span class="string">'DBname'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span>,</span><br><span class="line">    cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        sql = <span class="string">"INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)"</span></span><br><span class="line">        cursor.execute(sql, (<span class="string">'webmaster@python.org'</span>, <span class="string">'very-secret'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#commit to save</span></span><br><span class="line">    connection.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        sql = <span class="string">"SELECT `id`, `password` FROM `users` WHERE `email`=%s"</span></span><br><span class="line">        cursor.execute(sql, (<span class="string">'webmaster@python.org'</span>,))</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        print(result)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connection.close()</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="pyMongo"><a href="#pyMongo" class="headerlink" title="pyMongo"></a>pyMongo</h3><p>pyMongo Docs: <a href="https://api.mongodb.com/python/current/" target="_blank" rel="noopener">https://api.mongodb.com/python/current/</a></p><p>pyMongo是一个用于使用MongoDB的工具的Python发行版，并且是从Python工作于MongoDB的推荐方式。</p><p><br></p><p><strong>依赖</strong></p><ul><li>mongodb</li><li>pyMongo</li></ul><p><br></p><p><strong>连接</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment">#host and port</span></span><br><span class="line">client = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#url format</span></span><br><span class="line">client = MongoClient(<span class="string">'mongodb://localhost:27017'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#认证</span></span><br><span class="line">client = MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>, username=<span class="string">'user'</span>, password=<span class="string">'pass'</span>)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>获取数据库</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db = client.$&#123;database&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line"></span><br><span class="line">db = client[<span class="string">'$&#123;database&#125;'</span>]</span><br></pre></td></tr></table></figure><p><br></p><p><strong>获取集合</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collection = db.$&#123;collection&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">collection = db[<span class="string">'$&#123;collection&#125;'</span>]</span><br></pre></td></tr></table></figure><p><br></p><p><strong>文档</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">post = &#123;</span><br><span class="line">  <span class="string">'_id'</span>: <span class="string">'post01'</span>,</span><br><span class="line">  <span class="string">'author'</span>: <span class="string">'Zhang21'</span>,</span><br><span class="line">  <span class="string">'text'</span>: <span class="string">'My first post!'</span>,</span><br><span class="line">  <span class="string">'tags'</span>: [ <span class="string">'mongodb'</span>, <span class="string">'python'</span>, <span class="string">'pymongo'</span> ],</span><br><span class="line">  <span class="string">'date'</span>: datetime.datetime.now()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>插入文档</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建集合</span></span><br><span class="line">$&#123;collection&#125; = db.posts</span><br><span class="line">$&#123;collection&#125;.insert_one(post)</span><br><span class="line"></span><br><span class="line"><span class="comment">#已有集合</span></span><br><span class="line">collection.insert_one(post)</span><br></pre></td></tr></table></figure><p><strong>批量插入</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">new_post = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'_id'</span>: <span class="string">'post02'</span>,</span><br><span class="line">    <span class="string">'author'</span>: <span class="string">'Zhang02'</span>,</span><br><span class="line">    <span class="string">'text'</span>: <span class="string">'2nd post'</span>,</span><br><span class="line">    <span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>],</span><br><span class="line">    <span class="string">'date'</span>: datetime.datetime.now()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'_id'</span>: <span class="string">'post03'</span>,</span><br><span class="line">    <span class="string">'author'</span>: <span class="string">'Zhang03'</span>,</span><br><span class="line">    <span class="string">'text'</span>: <span class="string">'3rd post'</span>,</span><br><span class="line">    <span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>],</span><br><span class="line">    <span class="string">'date'</span>: datetime.datetime.now()</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">collection.insert_many(new_post)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>获取文档</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">collection.find_one()</span><br><span class="line"></span><br><span class="line">collection.find_one(&#123; <span class="string">'_id'</span>: <span class="string">'post01'</span>&#125;)</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">collection.find_one(&#123;<span class="string">'author'</span>: <span class="string">'Zhang21'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">pprint.pprint(collection.find_one(&#123; <span class="string">'_id'</span>: <span class="string">'post01'</span>&#125;))</span><br></pre></td></tr></table></figure><p><strong>查询多个文档</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> post <span class="keyword">in</span> collection.find():</span><br><span class="line">    pprint.pprint(post)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'_id'</span>: <span class="string">'post01'</span>,</span><br><span class="line"> <span class="string">'author'</span>: <span class="string">'Zhang21'</span>,</span><br><span class="line"> <span class="string">'date'</span>: datetime.datetime(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">372000</span>),</span><br><span class="line"> <span class="string">'tags'</span>: [<span class="string">'mongodb'</span>, <span class="string">'python'</span>, <span class="string">'pymongo'</span>],</span><br><span class="line"> <span class="string">'text'</span>: <span class="string">'My first post!'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: <span class="string">'post02'</span>,</span><br><span class="line"> <span class="string">'author'</span>: <span class="string">'Zhang02'</span>,</span><br><span class="line"> <span class="string">'date'</span>: datetime.datetime(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">34</span>, <span class="number">47</span>, <span class="number">93000</span>),</span><br><span class="line"> <span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>],</span><br><span class="line"> <span class="string">'text'</span>: <span class="string">'2nd post'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: <span class="string">'post03'</span>,</span><br><span class="line"> <span class="string">'author'</span>: <span class="string">'Zhang03'</span>,</span><br><span class="line"> <span class="string">'date'</span>: datetime.datetime(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">34</span>, <span class="number">47</span>, <span class="number">93000</span>),</span><br><span class="line"> <span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>],</span><br><span class="line"> <span class="string">'text'</span>: <span class="string">'3rd post'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line"><span class="keyword">for</span> post <span class="keyword">in</span> collection.find(&#123;<span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>]&#125;):</span><br><span class="line">     pprint.pprint(post)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'_id'</span>: <span class="string">'post02'</span>,</span><br><span class="line"> <span class="string">'author'</span>: <span class="string">'Zhang02'</span>,</span><br><span class="line"> <span class="string">'date'</span>: datetime.datetime(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">34</span>, <span class="number">47</span>, <span class="number">93000</span>),</span><br><span class="line"> <span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>],</span><br><span class="line"> <span class="string">'text'</span>: <span class="string">'2nd post'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: <span class="string">'post03'</span>,</span><br><span class="line"> <span class="string">'author'</span>: <span class="string">'Zhang03'</span>,</span><br><span class="line"> <span class="string">'date'</span>: datetime.datetime(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">34</span>, <span class="number">47</span>, <span class="number">93000</span>),</span><br><span class="line"> <span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>],</span><br><span class="line"> <span class="string">'text'</span>: <span class="string">'3rd post'</span>&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>删除文档</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collection.delete_one(&#123;<span class="string">"_id"</span> : <span class="string">"post01"</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除多个</span></span><br><span class="line">collection.delete_many(&#123;<span class="string">"_id"</span> : <span class="string">"post02"</span>, <span class="string">"_id"</span> : <span class="string">"post03"</span>&#125;)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>计数</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collection.count()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">collection.count(&#123;<span class="string">'tags'</span>: [<span class="string">'bulk'</span>, <span class="string">'insert'</span>]&#125;)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><br></p><p>**索引</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = db.profiles.create_index([(<span class="string">'user_id'</span>, pymongo.ASCENDING)],</span><br><span class="line">                                 unique=<span class="keyword">True</span>)</span><br><span class="line">sorted(list(db.profiles.index_information()))</span><br><span class="line">[<span class="string">u'_id_'</span>, <span class="string">u'user_id_1'</span>]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>The Python interface to the Redis key-value store.<br>redis模块: <a href="https://pypi.org/project/redis/" target="_blank" rel="noopener">https://pypi.org/project/redis/</a></p><p><br></p><p>redis模块提供两个类Redis和StrictRedis用于实现Redis的命令:</p><ul><li>redis.Strictredis(推荐)<br>StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">help(redis.StrictRedis)</span><br><span class="line"></span><br><span class="line">__init__(self, host=&apos;localhost&apos;, port=6379, db=0, password=None, socket_timeout=None, socket_connect_timeout=None, socket_keepalive=None, socket_keepalive_options=None, connection_pool=None, unix_socket_path=None, encoding=&apos;utf-8&apos;, encoding_errors=&apos;strict&apos;, charset=None, errors=None, decode_responses=False, retry_on_timeout=False, ssl=False, ssl_keyfile=None, ssl_certfile=None, ssl_cert_reqs=None, ssl_ca_certs=None, max_connections=None)</span><br></pre></td></tr></table></figure><ul><li>redis.Redis(不推荐)<br>Redis是StrictRedis的子类，用于向后兼容旧版本的redis模块</li></ul><p><br></p><p><strong>连接</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">r = redis.StrictRedis()</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">r = redis.StrictRedis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串操作</span></span><br><span class="line">r.set(<span class="string">'name'</span>, <span class="string">'Zhang21'</span>)</span><br><span class="line">r.get(<span class="string">'name'</span>)</span><br><span class="line">r.type(<span class="string">'name'</span>)</span><br><span class="line">r.delete(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表操作</span></span><br><span class="line">r.rpush(<span class="string">'LIST'</span>, <span class="string">'list-01'</span>, <span class="string">'list-02'</span>)</span><br><span class="line">r.type(<span class="string">'LIST'</span>)</span><br><span class="line">r.llen(<span class="string">'LIST'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#help(r.lrane)</span></span><br><span class="line"><span class="comment">#lrange(name, start, end)</span></span><br><span class="line">lrange(<span class="string">'LIST'</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#其它redis数据类型操作方法类同</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>Connection Pools</strong><br>假设Redis服务器与客户端分处在异地，虽然基于内存的Redis数据库有着超高的性能，但是底层的网络通信却占用了一次数据请求的大量时间，因为每次数据交互都需要先建立连接，假设一次数据交互总共用时30ms，超高性能的Redis数据库处理数据所花的时间可能不到1ms，也即是说前期的连接占用了29ms，连接池则可以实现在客户端建立多个链接并且不释放，当需要使用连接的时候通过一定的算法获取已经建立的连接，使用完了以后则还给连接池，这就免去了数据库连接所占用的时间。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#help(redis.ConnectionPool)</span></span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool()</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, passeord=<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">r = redis.StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Web抓取"><a href="#Web抓取" class="headerlink" title="Web抓取"></a>Web抓取</h2><ul><li>request</li><li>BeautifulSoup</li><li>selenium</li></ul><p><br><br><br></p><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>从Internet上下载文件和网页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests, pprint</span><br><span class="line"></span><br><span class="line">#help(requests)</span><br><span class="line"></span><br><span class="line">r = request.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">r.status_code</span><br><span class="line">r.headers</span><br><span class="line">r.url</span><br><span class="line">r.text</span><br><span class="line">pprint.pprint(r.text)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h3><p>解析HTML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install beautifulsoup4</span><br><span class="line"></span><br><span class="line">import bs4</span><br></pre></td></tr></table></figure><p>栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests, bs4</span><br><span class="line"></span><br><span class="line">r = request.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">soup = bs4.BeautifulSoup(r.text)</span><br><span class="line">type(soup)</span><br><span class="line"></span><br><span class="line">#soup.select()</span><br><span class="line">#soup.find()</span><br></pre></td></tr></table></figure></p><p><br><br><br></p><h3 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h3><p>启动并控制一个Web浏览器。selenium能够填写表单，并模拟鼠标在此浏览器找那个点击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(&apos;https://www.baidu.com&apos;)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="文档处理"><a href="#文档处理" class="headerlink" title="文档处理"></a>文档处理</h2><ul><li>openpyxl</li><li>PyPDF2</li><li>pytho-docx</li></ul><p><br><br><br></p><h3 id="openpyxl"><a href="#openpyxl" class="headerlink" title="openpyxl"></a>openpyxl</h3><p>openpyxl is a Python library to read/write Excel 2010 xlsx/xlsm/xltx/xltm files.</p><p><strong>关于Excel电子表格：</strong><br>一个Excel电子表格文档称为一个工作簿。一个工作簿保存在扩展名为<code>.xlsx</code>的文件中。每个工作簿可以包含多个表(工作表)。用户当前查看的表被称为活动表。<br>每个表有一些列(地址为从A开始的字母)，一些行(地址从1开始的数字)。在特定行和列的方格被称为单元格。单元格形成的网格和数据构成了表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pip3 install openpyxl</span><br><span class="line"></span><br><span class="line">import openpyxl</span><br><span class="line"></span><br><span class="line">workbook = openpyxl.load_workbook(&apos;/tmp/test.xlsx&apos;)</span><br><span class="line">type(workbook)</span><br><span class="line">#&lt;class &apos;openpyxl.workbook.workbook.Workbook&apos;&gt;</span><br><span class="line"></span><br><span class="line">workbook.get_sheet_names()</span><br><span class="line">#[&apos;Sheet1&apos;, &apos;Sheet2&apos;, &apos;Sheet3&apos;]</span><br><span class="line"></span><br><span class="line">sheet1 = workbook.get_sheet_by_name(&apos;Sheet1&apos;)</span><br><span class="line">type(sheet1)</span><br><span class="line"></span><br><span class="line">sheet1.title</span><br><span class="line">#&apos;Sheet1&apos;</span><br><span class="line"></span><br><span class="line">workbook.get_active_sheet()</span><br><span class="line">#&lt;Worksheet &quot;Sheet1&quot;&gt;</span><br><span class="line"></span><br><span class="line">sheet1[&apos;A1&apos;].value</span><br><span class="line">#&apos;1A&apos;</span><br><span class="line">sheet1[&apos;A1&apos;].row</span><br><span class="line">#1</span><br><span class="line">sheet1[&apos;A1&apos;].colume</span><br><span class="line">#A</span><br><span class="line"></span><br><span class="line">sheet1.cell(row=2, column=2).value</span><br><span class="line">#2B</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="PyPDF2"><a href="#PyPDF2" class="headerlink" title="PyPDF2"></a>PyPDF2</h3><p>PDF和Word文档是二进制文件，它们比文本文件要复制得多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip3 install PyPDF2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import PyPDF2</span><br><span class="line"></span><br><span class="line">pdfFile = open(&apos;/tmp/test.pdf&apos;, &apos;rb&apos;)</span><br><span class="line">pdfReader = PyPDF2.pdfFileReader(pdfFile)</span><br><span class="line">pdfWriter = PyPDF2.pdfFileWriter()</span><br><span class="line"></span><br><span class="line">page = pdfReader.getPage()</span><br><span class="line">page.extractText()</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="python-docx"><a href="#python-docx" class="headerlink" title="python-docx"></a>python-docx</h3><p>利用python-docx模块，Python可创建和修改Word文档，它带有<code>.docx</code>文件扩展名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pip3 insntall python-docx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import docx</span><br><span class="line"></span><br><span class="line">doc = docx.Document(&apos;/tmp/test.docx&apos;)</span><br><span class="line">len(doc.paragraphs)</span><br><span class="line"></span><br><span class="line">#paragraphs和run属性</span><br><span class="line">doc.paragraphs[0].text</span><br><span class="line">doc.paragraphs[0].run[0].text</span><br><span class="line"></span><br><span class="line">#写入</span><br><span class="line">doc.add_paragraph(&apos;Add line01&apos;)</span><br><span class="line">doc.add_paragraph(&apos;Add line02&apos;).add_run(&apos;tail !&apos;)</span><br><span class="line">doc.save(&apos;/tmp/test.docx&apos;)</span><br><span class="line"></span><br><span class="line">#标题</span><br><span class="line">doc.add_heading(&apos;Header 0&apos;, 0)</span><br><span class="line">doc.add_heading(&apos;Header 4&apos;, 4)</span><br><span class="line"></span><br><span class="line">#分页</span><br><span class="line">doc.add_page_broke()</span><br><span class="line"></span><br><span class="line">#图像</span><br><span class="line">doc.add_picture(xxx)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><ul><li>pillow(PIL)</li></ul><p><br><br><br></p><h3 id="pillow"><a href="#pillow" class="headerlink" title="pillow"></a>pillow</h3><p>PIL - the Python Imaging Library.</p><p>请了解RGB和CMYK颜色方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pillow</span><br><span class="line"></span><br><span class="line">import PIL</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><ul><li>elasticsearch</li></ul><p><br><br><br></p><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>Python Elasticsearch Client</p><p>pypi: <a href="https://pypi.org/project/elasticsearch" target="_blank" rel="noopener">https://pypi.org/project/elasticsearch</a><br>github: <a href="https://github.com/elastic/elasticsearch-py" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch-py</a><br>docs: <a href="https://elasticsearch-py.readthedocs.io" target="_blank" rel="noopener">https://elasticsearch-py.readthedocs.io</a></p><p><br></p><p>几个ES概念：</p><ul><li>index</li><li>document</li><li>type</li><li>id</li></ul><p><br></p><p>安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install elasticsearch</span><br></pre></td></tr></table></figure><p>栗子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#curl localhost:9200/?pretty</span></span><br><span class="line"><span class="comment">#default http://localhost:9200</span></span><br><span class="line">es=Elasticsearch()</span><br><span class="line">es.info()</span><br><span class="line"></span><br><span class="line"><span class="comment">#auth</span></span><br><span class="line"><span class="comment">#es=Elasticsearch('https://url:port', http_auth=('elastic', 'passwd'))</span></span><br><span class="line"><span class="comment">#es.info</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ssl</span></span><br><span class="line"><span class="keyword">from</span> ssl <span class="keyword">import</span> create_default_context</span><br><span class="line">es = Elasticsearch(<span class="string">'https://url:port'</span>, ssl_context=context, http_auth=(<span class="string">'ealstic'</span>, <span class="string">'passwd'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#es.index</span></span><br><span class="line"><span class="comment">#es.create</span></span><br><span class="line"><span class="comment">#es.update</span></span><br><span class="line"><span class="comment">#es.delete</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建索引</span></span><br><span class="line">es.indices.create(index=<span class="string">'my-index'</span>)</span><br><span class="line"><span class="comment">#&#123;'acknowledged': True, 'shards_acknowledged': True, 'index': 'my-index'&#125;</span></span><br><span class="line"><span class="comment">#curl localhost:9200/_cat/indices</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加或修改某个索引的文档格式</span></span><br><span class="line">es.index(index=<span class="string">'my-index'</span>, doc_type=<span class="string">'test-type'</span>, id=<span class="number">2018</span>, body=&#123;<span class="string">'any'</span>: <span class="string">'data'</span>, <span class="string">'timestamp'</span>: datetime.now()&#125;)</span><br><span class="line"><span class="comment">#es.create(index='my-index', doc_type='test-type', id=2018, body=&#123;'any': 'data', 'timestamp': datetime.now()&#125;)</span></span><br><span class="line"><span class="comment">#&#123;'result': 'created', '_primary_term': 1, '_index': 'my-index', '_shards': &#123;'total': 2, 'failed': 0, 'successful': 1&#125;, '_type': 'test-type', '_id': '2018', '_version': 1, '_seq_no': 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看索引</span></span><br><span class="line">es.get(index=<span class="string">'my-index'</span>, doc_type=<span class="string">'test-type'</span>, id=<span class="number">2018</span>)</span><br><span class="line"><span class="comment">#&#123;'_index': 'my-index', '_source': &#123;'timestamp': '2018-07-18T11:34:49.573721', 'any': 'data'&#125;, '_type': 'test-type', 'found': True, '_id': '2018', '_version': 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不指定id，es会自动生成，但查询时候需要id</span></span><br><span class="line">data=&#123;</span><br><span class="line">  <span class="string">'timestamp'</span>: datetime.now(),</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'zhang21'</span>,</span><br><span class="line">  <span class="string">'msg'</span>: <span class="string">'Hello'</span></span><br><span class="line">&#125;</span><br><span class="line">es.index(index=<span class="string">'my-index'</span>, doc_type=<span class="string">'test-type'</span>, body=data)</span><br><span class="line"><span class="comment">#&#123;'result': 'created', '_primary_term': 1, '_index': 'my-index', '_shards': &#123;'total': 2, 'failed': 0, 'successful': 1&#125;, '_type': 'test-type', '_id': 'C_vnq2QBmuTERb-Wz39W', '_version': 1, '_seq_no': 0&#125;</span></span><br><span class="line">es.get(index=<span class="string">'my-index'</span>, doc_type=<span class="string">'test-type'</span>, id=<span class="string">'C_vnq2QBmuTERb-Wz39W'</span>)</span><br><span class="line"><span class="comment">#&#123;'_index': 'my-index', '_source': &#123;'name': 'Zhang21', 'timestamp': '2018-07-18T13:40:04.005192', 'msg': 'Hello'&#125;, '_type': 'test-type', 'found': True, '_id': 'C_vnq2QBmuTERb-Wz39W', '_version': 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询</span></span><br><span class="line">es.search(index=<span class="string">'my-index'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#批量操作</span></span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helper</span><br><span class="line">help(helper.bulk)</span><br><span class="line"><span class="comment">#bulk()支持index, create, delete, upsate动作</span></span><br><span class="line">package=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    rom=&#123;</span><br><span class="line">  <span class="string">'count'</span>: i,</span><br><span class="line">  <span class="string">'timestamp'</span>: datetime.now()</span><br><span class="line">&#125;</span><br><span class="line">package.append(row)</span><br><span class="line"></span><br><span class="line">actions=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'_op_type'</span>: <span class="string">'index'</span>,</span><br><span class="line"><span class="string">'_index'</span>: <span class="string">'my-index'</span>,</span><br><span class="line"><span class="string">'_type'</span>: <span class="string">'test-type'</span>,</span><br><span class="line"><span class="string">'_source'</span>: i</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> package</span><br><span class="line">]</span><br><span class="line">pprint(actions)</span><br><span class="line">helpers.bulk(es, actions)</span><br><span class="line">pprint(es.search(index=<span class="string">'my-index'</span>))</span><br></pre></td></tr></table></figure><p>具体信息请查看文档！</p><p><br><br><br><br><br></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>基于《Python Data Analysis》一书！<br>强烈建议使用<a href="https://www.anaconda.com/" target="_blank" rel="noopener">Anaconda</a>安装Python和Jupyter。</p><ul><li>ipython</li><li>jupyter</li><li>pandas</li><li>numpy</li><li>statsmodels</li><li>matplotlib</li></ul><p><br><br><br></p><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><ul><li>site: <anaconda.com></anaconda.com></li><li>doc: <docs.anaconda.com anaconda=""></docs.anaconda.com></li><li>参考: <www.zhihu.com 58033789="" 254673663="" question="" answer=""></www.zhihu.com></li></ul><p>Anaconda 是一种Python语言的免费增值开源发行版，用于进行大规模数据处理, 预测分析, 和科学计算, 致力于简化包的管理和部署。Anaconda使用软件包管理系统Conda进行包管理。<br>你可能已经安装了Python，那为什么还需要Anaconda？</p><ul><li>Anaconda附带了一大批常用的数据科学包</li><li>Conda管理包</li><li>管理环境</li></ul><p><br></p><p><strong>安装</strong><br>到官网下载不同平台的包进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">bash ./Anaconda3-5.2.0-Linux-x86_64.sh</span><br><span class="line">#之后可设置安装路径和环境变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">conda --version</span><br><span class="line"></span><br><span class="line">#更新所有包</span><br><span class="line">conda upgrade --all</span><br></pre></td></tr></table></figure><p><br></p><p><strong>包管理</strong><br>conda is a tool for managing and deploying applications, environments and packages.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#它会自动安装依赖</span></span><br><span class="line"><span class="comment">#其实和pip差不多</span></span><br><span class="line">conda install &lt;package&gt;</span><br><span class="line">conda install requests=1.10.0</span><br><span class="line">conda install pandas numpy</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">conda remove &lt;package&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line">conda update &lt;package&gt;</span><br><span class="line">conda update &lt;package&gt; --all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出</span></span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索</span></span><br><span class="line">conda search</span><br></pre></td></tr></table></figure><p><br></p><p><strong>环境管理</strong><br>为不同项目创建不同的运行环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#conda create -h</span><br><span class="line">#创建环境</span><br><span class="line">#默认为 ~/.conda/envs/&lt;evn_name&gt;</span><br><span class="line">conda create -n &lt;env_name&gt; &lt;package_names&gt;</span><br><span class="line">conda create -n py3 pandas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定Python版本</span><br><span class="line">conda create -n py3 python=3</span><br><span class="line">conda create -n py2 python=2</span><br><span class="line">conda create -n py36 python=3.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#使用环境</span><br><span class="line">source activate &lt;env_name&gt;</span><br><span class="line">#或</span><br><span class="line">conda activeate &lt;env_name&gt;</span><br><span class="line"></span><br><span class="line">#关闭环境</span><br><span class="line">source deactivate</span><br><span class="line">#或</span><br><span class="line">conda deactivate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#自定义目录</span><br><span class="line">conda create -p /path/py2 python=2.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除环境</span><br><span class="line">conda env remove -n &lt;env_name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#列出环境</span><br><span class="line">conda env list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看环境库</span><br><span class="line">conda list -n &lt;env_name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#环境变量</span><br><span class="line">#导出</span><br><span class="line">cond env export &gt; envName.yaml</span><br><span class="line">#或</span><br><span class="line">pip freeze &gt; evnName.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#导入</span><br><span class="line">conda env update -f=/path/envName.yaml</span><br><span class="line">#或</span><br><span class="line">pip install -r /path/envName.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#列出</span><br><span class="line">conda env list</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h3><ul><li>site: <ipython.org></ipython.org></li><li>github: <github.com ipython=""></github.com></li><li>pypi: <pypi.org project="" ipython=""></pypi.org></li></ul><p><br></p><p>Python Shell有很多弊端，所以使用功能更强大的ipython。<br>ipython提供了丰富的工具包，可帮助你以交互的方式充分利用Python:</p><ul><li>强大的交互式Shell</li><li>Jupyter的内核</li><li>支持交互式数据可视化和GUI工具箱</li><li>灵活，可嵌入式的解释器，可加载到自己的项目中</li><li>使用方便，高性能的并行计算工具</li></ul><p><br></p><p>安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bash</span></span><br><span class="line">sudo pip3 install ipython</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用Anaconda</span></span><br><span class="line">conda install ipython</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">ipython</span><br><span class="line">Python 3.6.6 |Anaconda, Inc.| (default, Jun 28 2018, 17:14:51)</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> or <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython 6.5.0 -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><ul><li>site: <jupyter.org></jupyter.org></li><li>github: <pypi.org project="" jupyter=""></pypi.org></li><li>pypi: <pypi.org project="" jupyter=""></pypi.org></li></ul><p><br></p><p>Jupyter notebook是一种Web应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。</p><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#bash</span><br><span class="line">sudo pip3 install jupyter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Anaconda</span><br><span class="line">conda install jupyter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#运行</span><br><span class="line">jupyter notebook --no-browser --ip=0.0.0.0</span><br><span class="line">#建议先设置密码</span><br><span class="line">jupyter notebook password</span><br><span class="line"></span><br><span class="line">jupyter notebook --no-browser --ip=192.168.31.119 --notebook-dir=/tmp/notebook</span><br></pre></td></tr></table></figure><p>打开浏览器访问，输入密码：</p><p><img src="/images/Python/jupyter_login.png" alt=""></p><p>Anaconda虚拟环境目录：</p><p><img src="/images/Python/jupyter_dash.png" alt="虚拟环境"></p><p>栗子：</p><p><img src="/images/Python/jupyter_test.png" alt="栗子"></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7x86_64&lt;/li&gt;
&lt;li&gt;Python3.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python教程: &lt;a href=&quot;https://docs.python.org/3.5/tutorial/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3.5/tutorial/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python词汇表: &lt;a href=&quot;https://docs.python.org/3.5/glossary.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3.5/glossary.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python语言参考: &lt;a href=&quot;https://docs.python.org/3.5/reference/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3.5/reference/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python HOWTOs: &lt;a href=&quot;https://docs.python.org/3.5/howto/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3.5/howto/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python标准库: &lt;a href=&quot;https://docs.python.org/3.5/library/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3.5/library/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyPI: &lt;a href=&quot;https://pypi.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Awesome-Python&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vinta/awesome-python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vinta/awesome-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jobbole/awesome-python-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/jobbole/awesome-python-cn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zhang21.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://zhang21.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Elatic Stack</title>
    <link href="https://zhang21.github.io/2018/04/15/Elastic/"/>
    <id>https://zhang21.github.io/2018/04/15/Elastic/</id>
    <published>2018-04-15T14:08:11.000Z</published>
    <updated>2018-08-13T05:50:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>Elastic指南: <a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/index.html</a></li><li>Elasticsearch文档: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></li><li>Logstash文档: <a href="https://www.elastic.co/guide/en/logstash/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/index.html</a></li><li>Kibana文档: <a href="https://www.elastic.co/guide/en/kibana/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/current/index.html</a></li><li>Filebeat文档: <a href="https://www.elastic.co/guide/en/beats/filebeat/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/index.html</a></li><li>Metricbeat文档: <a href="https://www.elastic.co/guide/en/beats/metricbeat/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/metricbeat/current/index.html</a></li><li>Lucence查询语法: <a href="https://wizardforcel.gitbooks.io/mastering-elasticsearch/content/chapter-1/114_README.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/mastering-elasticsearch/content/chapter-1/114_README.html</a></li></ul><p>环境：</p><ul><li>CentOS7.x86_64</li><li>Elastcisearch v6.2.3</li><li>Kibana v6.2.3</li><li>Logstash v6.2.3</li><li>Beats v6.2.3</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>开源的 Elastic Stack:<br>能够安全可靠地获取任何来源、任何格式的数据，并且能够实时地对数据进行搜索、分析和可视化。</p><p><br></p><p><img src="/images/ELK/ELK.jpg" alt="ELK流程图"></p><p><img src="/images/ELK/elk.png" alt="ELK流程图"></p><p><br></p><p>Elastic指的是<a href="https://www.elastic.co" target="_blank" rel="noopener">elastic</a>公司下的几款产品：</p><ul><li>Elasticsearch</li><li>Logstash</li><li>Kibana</li><li>Beats</li><li>X-Pack</li></ul><p><br><br><br></p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul><li>开放源码且自由使用</li><li>License: Apache License 2.0</li><li>GitHub: <a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a></li><li>Doc: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></li></ul><p><br></p><p>搜索、分析和存储您的数据。<br>Elasticsearch 是基于 JSON 的分布式搜索和分析引擎，专为实现水平扩展、高可用和管理便捷性而设计。<br>Elasticsearch 是一个分布式的 RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p><p>基于Lucene。Lucene是一套用于全文检索和搜寻的开放源码程式库，由Apache软件基金会支持和提供。<br>Lucene提供了一个简单却强大的应用程式介面，能够做全文索引和搜寻，在Java开发环境里Lucene是一个成熟的免费开放原始码工具；就其本身而论，Lucene是现在并且是这几年，最受欢迎的免费Java资讯检索程式库。</p><p><br><br><br></p><h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><ul><li>开放源码且自由使用</li><li>GitHub: <a href="https://github.com/elastic/logstash" target="_blank" rel="noopener">https://github.com/elastic/logstash</a></li><li>Doc: <a href="https://www.elastic.co/guide/en/logstash/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/index.html</a></li></ul><p><br></p><p>集中、转换和存储数据<br>Logstash 是动态数据收集管道，拥有可扩展的插件生态系统，能够与 Elasticsearch 产生强大的协同作用。<br>Logstash 是开源的服务器端数据处理管道，能够同时 从多个来源采集数据、转换数据，然后将数据发送到您最喜欢的 “存储库” 中。（我们的存储库当然是 Elasticsearch。）</p><p><br><br><br></p><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><ul><li>开放源码且自由使用</li><li>GitHub: <a href="https://github.com/elastic/kibana" target="_blank" rel="noopener">https://github.com/elastic/kibana</a></li><li>Doc: <a href="https://www.elastic.co/guide/en/kibana/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/current/index.html</a></li></ul><p><br></p><p>实现数据可视化<br>Kibana 让您能够可视化 Elasticsearch 中的数据并操作 Elastic Stack，因此您可以在这里解开任何疑问：例如，为何会在凌晨 2:00 被传呼，雨水会对季度数据造成怎样的影响。</p><p><br><br><br></p><h2 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h2><ul><li>开放源码且自由使用</li><li>GitHub: <a href="https://github.com/elastic/beats" target="_blank" rel="noopener">https://github.com/elastic/beats</a></li><li>Doc: <a href="https://www.elastic.co/guide/en/beats/libbeat/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/libbeat/current/index.html</a></li></ul><p><br></p><p>Beats 是轻量型采集器的平台，从边缘机器向 Logstash 和 Elasticsearch 发送数据。<br>Beats 平台集合了多种单一用途数据采集器。这些采集器安装后可用作轻量型代理，从成百上千或成千上万台机器向 Logstash 或 Elasticsearch 发送数据。</p><p><br><br><br></p><h2 id="X-Pack"><a href="#X-Pack" class="headerlink" title="X-Pack"></a>X-Pack</h2><ul><li>Doc: <a href="https://www.elastic.co/guide/en/x-pack/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/x-pack/current/index.html</a></li></ul><p><br></p><p>一个程序包，带来丰富的可能性<br>单就其自身而言，Elastic Stack 就是一款值得考虑的强大工具。X-Pack 将诸多强大功能集合到一个单独的程序包中，更将它带上了一个新的层次。<br>X-Pack 是集成了多种便捷功能的单个插件 — security、alerting、monitoring、reporting、graph 探索和 machine learning — 您可以在 Elastic Stack 中放心地使用这些功能。</p><p><br><br><br></p><hr><p><br></p><h1 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h1><p>docker hub里面有ELK的镜像，可以直接拉取使用。推荐使用官方ELK镜像。</p><p>我自己做了一个ELK的image，上传到了我的docker hub里。我自己做这个镜像不推荐，因为使用了centos7，导致了镜像很大，这应该避免。</p><p><br></p><p><strong>在docker中运行centos7</strong></p><p>直接拉取的centos没有systemd的权限，需要在运行添加<code>docker run -id --privileged &lt;image-id&gt; /usr/sbin/init</code>选项。</p><p>或者使用Docker Hub上CentOS提供的支持systemd的Dockerfile来构建centos: <a href="https://hub.docker.com/_/centos/" target="_blank" rel="noopener">https://hub.docker.com/_/centos/</a><br>其实Dockfile就是有这条命令<code>CMD [&quot;/usr/sbin/init</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              e934aafc2206        2 weeks ago         199MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行docker</span></span><br><span class="line"><span class="comment">#此处如果没有/bin/bash的话，生成的container立马就停止了</span></span><br><span class="line"><span class="comment">#端口映射什么的后面再弄</span></span><br><span class="line">docker run -d -i &lt;image-id&gt; /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器</span></span><br><span class="line">docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">27b10f5015be        e934aafc2206        <span class="string">"/bin/bash"</span>         About an hour ago   Up About an hour                        ecstatic_boyd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入docker</span></span><br><span class="line">docke <span class="built_in">exec</span> -it &lt;container-id&gt; /bin/bash</span><br><span class="line"><span class="comment">#当然，你也可以运行SSHD，通过端口映射，连接到docker内</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[root@27b10f5015be /]#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在docker中安装各类需要的软件了</span></span><br><span class="line"><span class="comment">#可能需要设置一下/etc/resolv.conf</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>将安装了各类软件的容器构建为一个新的镜像</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从运行的容器中重构镜像</span></span><br><span class="line"><span class="comment">#docker commit -m "centos7+elk" &lt;container-id&gt; user/repo:tag</span></span><br><span class="line">docker commit -m <span class="string">'centos7+elk'</span> 27b10f5015be zhang21/centos7:elk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看新镜像</span></span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhang21/centos7     elk                 0b22d93f7353        16 minutes ago      1.04GB</span><br><span class="line">centos              latest              e934aafc2206        2 weeks ago         199MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行新镜像</span></span><br><span class="line">docker run -id -p 80:80 9200:9200 &lt;image-id&gt; /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处遇到一个错，因为docker的网络是通过iptables来转发的，因此主机上不能关闭firewalld，不能无法启动容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入新容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处无法使用systemctl，原因已写到前面</span></span><br><span class="line"><span class="comment">#Failed to get D-Bus connection: Operation not permitted</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获得systemd权限启动</span></span><br><span class="line">docker run -id --privileged -p 80:80 &lt;image-id&gt; /usr/sbin/init</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nginx</span></span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p><br></p><p><strong>将新镜像上传到Hub</strong></p><p>我用的是Docker Hub免费版，当然线上的话可能是阿里云或腾讯云。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker login -u zhang21</span><br><span class="line"></span><br><span class="line">#上传镜像到我的Hub</span><br><span class="line">docker push zhang21/centos7:elk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#拉取镜像</span><br><span class="line">docker pull zhang21/centos7:elk</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装步骤：</p><ul><li>Elasticsearch</li><li>Kibana</li><li>Logstash</li><li>Install X-Pack into Elasticsearch</li><li>Install X-Pack into Kibana</li></ul><p><br></p><h2 id="安装ELKF"><a href="#安装ELKF" class="headerlink" title="安装ELKF"></a>安装ELKF</h2><p>需要依赖JDK（java），请先安装。<br>我是直接使用的RPM包安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#安装Java</span><br><span class="line">yum install java-1.8.0-openjdk-headless-1.8.0.161-0.b14.el7_4.x86_64 -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#编写repo</span><br><span class="line">vim /etc/yum.repo.d/elk.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[elasticsearch-6.x]</span><br><span class="line">name=Elasticsearch repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#安装</span><br><span class="line">yum install -y elasticsearch logstash kibana filebeat</span><br></pre></td></tr></table></figure><p><br></p><p><strong>由于elk默认将软件安装到<code>/usr/share/</code>下，因此我把它们的<code>bin</code>路径加入PATH。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/usr/share/elasticsearch/bin:/usr/share/kibana/bin:/usr/share/logstash/bin:/usr/share/elasticsearch/bin/x-pack:/usr/share/filebeat/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#执行</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p><br></p><p>ELKF使用RPM安装的布局说明：</p><ul><li>主目录<ul><li><code>/usr/share/elasticsearch</code></li><li><code>/usr/share/kibana</code></li><li><code>/usr/share/logstash</code></li><li><code>/usr/share/filebeat</code></li></ul></li><li>二进制文件<ul><li><code>/usr/share/elasticsearch/bin</code></li><li><code>/usr/share/kibana/bin</code></li><li><code>/usr/share/logstash/bin</code></li><li><code>/usr/share/filebeat/bin</code></li></ul></li><li>配置文件<ul><li><code>/etc/elastcisearch</code></li><li><code>/etc/kibana</code></li><li><code>/etc/logstash</code></li><li><code>/etc/filebeat</code></li></ul></li><li>环境变量<ul><li><code>/etc/sysconfig/elasticsearch</code></li></ul></li><li>插件<ul><li><code>/usr/share/elastcisearch/plugins</code></li><li><code>/usr/share/kibana/plugins</code></li></ul></li></ul><p><br><br><br></p><h2 id="安装X-Pack"><a href="#安装X-Pack" class="headerlink" title="安装X-Pack"></a>安装X-Pack</h2><blockquote><p><strong>注意</strong><br>由于自动升级到Elastic v6.3自带了X-Pack，不需要额外安装。之前安装的一些插件会导致Elastic无法运行，请卸载这些插件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-plugin list</span><br><span class="line">elasticsearch-plugin remove x-pack</span><br><span class="line"></span><br><span class="line">kibana-plugin remove x-pack</span><br><span class="line"></span><br><span class="line">logstash-plugin remove x-pack</span><br></pre></td></tr></table></figure><p><br></p><p>安装X-Pack前，请先安装ELK。<br>请安装匹配版本的X-Pack。</p><ul><li>Install X-Pack on Elasticsearch</li><li>Install X-Pack on Kibana</li><li>Install X-Pack on Logstash</li></ul><p><br></p><p><img src="/images/ELK/InstallationFlow.jpg" alt="安装流程图"></p><p><br></p><p><strong>启用或禁用X-Pack功能</strong></p><p>有些功能默认开启，有些默认关闭。请在配置文件中查看详情。<br>添加某些功能可能导致软件无法启动，请注意查看日志。</p><p>在以下文件中配置它们：</p><ul><li><code>elasticsearch.yml</code></li><li><code>kibana.yml</code></li><li><code>logstash.yml</code></li><li><code>filebeat.yml</code></li></ul><p>X-Pack功能：</p><table><thead><tr><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>xpack.graph.enabled</td><td>X-Pack图形功能</td></tr><tr><td>xpack.ml.enabled</td><td>X-Pack机器学习功能</td></tr><tr><td>xpack.monitoring.enabled</td><td>X-Pack监视功能</td></tr><tr><td>xpack.reporting.enabled</td><td>X-Pack报告功能</td></tr><tr><td>xpack.security.enabled</td><td>X-Pack安全功能</td></tr><tr><td>xpack.watcher.enabled</td><td>X-Pack观察器</td></tr></tbody></table><p><br></p><p><strong>在ELK中启动X-Pack monitoring功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#xpack.graph.enabled</span><br><span class="line">#xpack.ml.enabled</span><br><span class="line">#xpack.monitoring.enabled</span><br><span class="line">#xpack.reporting.enabled</span><br><span class="line">#xpack.security.enabled</span><br><span class="line">#xpack.watcher.enabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在Elasticsearch和kibana中禁用验证后，不用在logstash中输入，否则会报错。</span><br><span class="line">xpack.security.enabled: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启用验证</span><br><span class="line">#具体可参考官方文档</span><br><span class="line"></span><br><span class="line">#在logstash.yml中配置xpack.monitoring</span><br><span class="line">xpack.monitoring.enabled: true</span><br><span class="line">#xpack.monitoring.elasticsearch.url: &quot;http://127.0.0.1:9200&quot;</span><br><span class="line">#xpack.monitoring.elasticsearch.username: logstash_system</span><br><span class="line">#xpack.monitoring.elasticsearch.password: logstash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在Filebeat中添加monitoring</span><br><span class="line">xpack.monitoring:</span><br><span class="line">  enabled: true</span><br><span class="line">  #elasticsearch:</span><br><span class="line">        #url: &quot;http://localhost:9200&quot;</span><br><span class="line">#usernaem: &quot;elastic&quot;</span><br><span class="line">#password: &quot;elastic&quot;</span><br></pre></td></tr></table></figure><p><br></p><p>安装：<br>建议使用密码！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#Elastcisearch安装X-Pack</span><br><span class="line">elasticsearch-plugin install x-pack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">#9200, 9300端口</span><br><span class="line">#elasticsearch不能使用root启动，所以我把elastic用户修改为/bin/bash</span><br><span class="line">su elasticsearch</span><br><span class="line">elasticsearch -d</span><br><span class="line">#elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#生成默认用户密码，此密码针对elastic和kibana用户</span><br><span class="line">#/usr/share/elasticsearch/bin/x-pack</span><br><span class="line">#将此加入PATH</span><br><span class="line">setup-passwords auto</span><br><span class="line"></span><br><span class="line">#或手动输入密码</span><br><span class="line">setup-passwords interactive</span><br><span class="line">elastic</span><br><span class="line">#elastic</span><br><span class="line">kibana</span><br><span class="line">#kibana</span><br><span class="line">logstash_system</span><br><span class="line">#logstash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Kibana安装X-Pack</span><br><span class="line">kibana-plugin install x-pack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#对kibana.yml添加用户和密码</span><br><span class="line">#此密码是前面默认生成的</span><br><span class="line">vim /etc/kibana/kibana.yml`</span><br><span class="line"></span><br><span class="line">elasticsearch.username: &quot;elastic&quot;</span><br><span class="line">elasticsearch.password:  &quot;elastic&quot;</span><br><span class="line">#修改监听地址</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line"></span><br><span class="line">logging.dest: /var/log/kibana/kibana.log</span><br><span class="line">#kibana日志默认是stdout</span><br><span class="line">#修改为/var/log/kibana/kibana.log</span><br><span class="line">mkdir /var/log/kibana</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动kibana</span><br><span class="line">#5601端口</span><br><span class="line">#kibana可用root启动</span><br><span class="line">kibana</span><br><span class="line">#或</span><br><span class="line">systemctl start kibana</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Logstash安装X-Pack</span><br><span class="line">logstash-plugin install x-pack</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="启动ELK"><a href="#启动ELK" class="headerlink" title="启动ELK"></a>启动ELK</h2><p>建议给他们加上密码！<br>不知道为什么，我的ElasticStack都能用systemd来管理了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#最便捷</span><br><span class="line">systemctl start elasticsearch logstash filebeat metricbeat heartbeat packetbeat auditbeat</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#Elasticsearch</span><br><span class="line">su elasticsearch</span><br><span class="line">#elasticsearch，查看输出</span><br><span class="line">elasticsearch -d</span><br><span class="line">#kill -15 pid &amp;&amp; elasticsearch -d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Kibana</span><br><span class="line">kibana&amp;</span><br><span class="line">systemctl start kibana</span><br><span class="line">#kill -15 pid &amp;&amp; kibana&amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Logstash</span><br><span class="line">#logstash -f xxx.conf</span><br><span class="line">systemctl start logstash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Filebeat</span><br><span class="line">#filebeat -e -c filebeat.yml，查看输出信息</span><br><span class="line">systemctl start filebeat</span><br></pre></td></tr></table></figure><p><br></p><p><strong>启动时可能遇到的问题</strong></p><ol><li><p>can not run elasticsearch as root</p><ul><li>专门建立一个管理ELK的用户，切换到此用户后运行，注意修改ELK相关目录权限</li><li>或者修改ELK各自用户的/etc/passwd，切换到对应用户后运行。注意权限 – <code>su elasticsearch &amp;&amp; elasticsearch</code></li></ul></li><li><p>elasticsearch process is too low, increase to at least [65536]</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* soft nofile 655350</span><br><span class="line">* hard nofile 655350</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ulimit -a</span><br></pre></td></tr></table></figure><p><br></p><p><strong>访问elasticsearch</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ip:9200</span><br><span class="line">#此处访问是需要用户名和密码的</span><br><span class="line">#使用前面X-Pack生成的默认用户名和密码</span><br><span class="line"></span><br><span class="line">elastic elastic</span><br><span class="line">#登录之后便可看到node，cluster相关信息</span><br></pre></td></tr></table></figure><p><img src="/images/ELK/9200auth.png" alt="认证后相关信息"></p><p><br></p><p><strong>访问kibana</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#5601端口</span><br><span class="line">http://0.0.0.0:5601</span><br></pre></td></tr></table></figure><p><img src="/images/ELK/5601kibana.png" alt=""></p><p><br><br><br></p><h2 id="启用xpack注意事项"><a href="#启用xpack注意事项" class="headerlink" title="启用xpack注意事项"></a>启用xpack注意事项</h2><p>启用X-PACK后，请注意在kibana配置文件中认证Elasticsearch用户和密码，并且使用Elasticsearch的用户和密码登录Kibana的前端界面。</p><p>由于我使用kibana用户登录，导致很多地方访问Elasticsearch都没有权限。请注意。</p><p>这样使用Elasticsearch登录后，便可以之间在<code>Dev Tools</code>中通过REST API获取和更新相关信息，并且创建和管理相关用户和角色。</p><p><br><br><br></p><h2 id="安装Filebeat"><a href="#安装Filebeat" class="headerlink" title="安装Filebeat"></a>安装Filebeat</h2><p>由于前面我们添加了ELK-repo，所以这里我们可以直接安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install -y filebeat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启X-Pack monitor</span></span><br><span class="line"><span class="comment">#默认关闭</span></span><br><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line">xpack.monitoring.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="修改ELK-jvm内存大小"><a href="#修改ELK-jvm内存大小" class="headerlink" title="修改ELK jvm内存大小"></a>修改ELK jvm内存大小</h2><p>在此版本中，可直接在配置文件目录下的<code>jvm.options</code>里修改JVM 内存大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#最小</span><br><span class="line">-Xms</span><br><span class="line">#最大</span><br><span class="line">-Xmx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim /etc/elasticsearch/jvm.options</span><br><span class="line"></span><br><span class="line">-Xms4g</span><br><span class="line">-Xmx4g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#其它如此</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="与Nginx结合使用"><a href="#与Nginx结合使用" class="headerlink" title="与Nginx结合使用"></a>与Nginx结合使用</h1><p>将Kibana展现到Nginx上的话，便可以不对Kibana开放外网访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#安装Nginx</span><br><span class="line"></span><br><span class="line">vim /etc/yum.repo.d/nginx.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install -y nginx  nginx-mod-stream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置</span><br><span class="line">vim /etc/nginx/conf.d/kibana.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#可把IP换成kibana相应的域名</span><br><span class="line">#再将域名解析到此IP</span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 172.16.129.150;</span><br><span class="line"></span><br><span class="line">#Kibana</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:5601;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>可能会遇到的问题</strong></p><ul><li>Nignx错误日志: Permission denied) while connecting to upstream</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/log/audit/audit.log | grep nginx | grep denied</span><br><span class="line"></span><br><span class="line">#后来判断是SELinux的问题</span><br><span class="line">getenforce</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改SELinux</span><br><span class="line">vim /etc/selinux/config</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="Logstash文档"><a href="#Logstash文档" class="headerlink" title="Logstash文档"></a>Logstash文档</h1><p><br></p><p><img src="/images/ELK/basic_logstash_pipeline.png" alt="logstash流程图"></p><p><br></p><p>Logstash的pipeline有两个必须的元素：</p><ul><li>input<ul><li>消耗来自source的数据</li></ul></li><li>output<ul><li>将修改后的数据写入destination</li></ul></li></ul><p>以及一个可选元素：</p><ul><li>filter<ul><li>根据你的定义来修改数据</li></ul></li></ul><p><br><br><br></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Logstash是一个具有实时流水线(pipeling)功能的开源数据收集引擎。它可以动态统一来自不同source的数据，并将数据正常化的你的destination。</p><p>任何类型的事件都可以通过大量的输入、过滤和输出插件进行丰富和转换，通过本地编解码器进一步简化了摄取过程。</p><p><br><br><br></p><h3 id="Logstash的能量"><a href="#Logstash的能量" class="headerlink" title="Logstash的能量"></a>Logstash的能量</h3><p>具有强大的Elasticsearch和Kibana系统的水平可伸缩数据处理流水线。</p><p><img src="/images/ELK/logstash.png" alt=""></p><p><br><br><br></p><h4 id="Logstash喜欢的数据"><a href="#Logstash喜欢的数据" class="headerlink" title="Logstash喜欢的数据"></a>Logstash喜欢的数据</h4><p>所有数据来者不拒！</p><p><br></p><h4 id="Logs-and-Metrics"><a href="#Logs-and-Metrics" class="headerlink" title="Logs and Metrics"></a>Logs and Metrics</h4><ul><li>处理所有类型的日志数据<ul><li>Apache</li><li>Nginx</li><li>Syslog</li></ul></li><li>使用<strong>Filebeat</strong>享受互补的安全日志转发功能</li><li>从<code>Ganglia</code>, <code>JMx</code>, <code>NetFlow</code>和<code>TCP</code>,<code>UDP</code>收集<strong>metrics</strong></li></ul><p><br></p><h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><ul><li>将<code>http request</code>转换为<code>events</code><ul><li>分析Web服务</li><li>支持Webhook</li></ul></li><li>通过轮询<code>HTTP endpoint</code>创建事件<ul><li>通过Web API捕获健康状况、性能和其它类型的数据</li></ul></li></ul><p><br></p><h4 id="数据存储和流"><a href="#数据存储和流" class="headerlink" title="数据存储和流"></a>数据存储和流</h4><p>从你已经拥有的数据中发现更多价值。</p><p><br></p><h4 id="Sensors-and-IoT"><a href="#Sensors-and-IoT" class="headerlink" title="Sensors and IoT"></a>Sensors and IoT</h4><p>探索广泛的其它数据。</p><p><br><br><br></p><h3 id="轻松丰富一切"><a href="#轻松丰富一切" class="headerlink" title="轻松丰富一切"></a>轻松丰富一切</h3><p>在摄取过程中清理并转换数据，以便在index或output时立即获得实时信息。Logstash具有许多聚合和突变以及模式匹配，地理映射和动态查找功能。</p><ul><li><strong>Grok</strong>是Logstash filter的金刚钻，用于从非结构化数据中派生出结构化数据</li><li>通过解析来自IP的地理坐标，标准化提起复杂性，简单K-V对和CSV数据，并通过本地查找或Elasticsearch查询进一步丰富你的数据，从而扩展你的视野</li><li>编解码器通常用于缓解JSON和多行事件等常见事件结构的处理</li></ul><p><br><br><br></p><h3 id="选择你的储藏室"><a href="#选择你的储藏室" class="headerlink" title="选择你的储藏室"></a>选择你的储藏室</h3><p>将数据放在最重要的位置。通过存储，分析和对数据采取行动，解锁各种downstream分析和操作用例。</p><ul><li>Analysis<ul><li>Elasticsearch</li><li>Data stores(MongoDB, Redis)</li></ul></li><li>Archiving<ul><li>HDFS</li><li>S3</li></ul></li><li>Monitoring<ul><li>Nagios</li><li>Zabbix</li><li>Ganglia</li></ul></li><li>Alerting<ul><li>Watcher(Elasticsearch)</li><li>Email</li></ul></li></ul><p><br><br><br></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>安装，储藏，解析，汇聚多个Input/Output。</p><p><br><br><br></p><h3 id="储藏第一个事件"><a href="#储藏第一个事件" class="headerlink" title="储藏第一个事件"></a>储藏第一个事件</h3><p><strong>测试Logstash和运行一个基本的pipeline</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&apos;</span><br><span class="line"></span><br><span class="line">#等待启动，输入hello world</span><br><span class="line">#Logstash将时间戳和主机名添加到message</span><br><span class="line">#2018-04-13T08:17:51.702Z zhang22 helloworld</span><br></pre></td></tr></table></figure><p><br></p><p>启动logstsh时的一个问题： <code>WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash</code></p><p>虽然通过RPM安装Logstash存在<code>/etc/logstash</code>文件，但是还是会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/logstash/bin</span><br><span class="line"></span><br><span class="line">ln -s /etc/logstash ./config</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="通过Logstash解析Logs"><a href="#通过Logstash解析Logs" class="headerlink" title="通过Logstash解析Logs"></a>通过Logstash解析Logs</h3><p>前面我们创建了一个基本的Logstash pipeline来测试Logstash，但真正处理logs的Logstash pipeline不会这么简单，它可能会有多个input, filter, output。</p><p>本节利用一个Filebeat，将Nginx Web Logs作为Logstash pipeline的input，解析这些logs中创建的特定命名字段，并将解析的数据写入Elasticsearch集群。</p><p><br></p><p><strong>配置Filebeat以发送Log Lines到Logstash</strong></p><p>在创建Logstash pipeline之前，你将配置Filebeat以发送Log lines到Logstash。Filebeat从服务器上的文件收集日志，并将这些日志转发给Logstash实例进行处理。<br>Filebeat专为可靠性和低延迟而设计。它占用的资源极少，<code>beats input</code>插件(默认安装)最大限度地减少了Logstash实例的资源需求。任何Beat框架编写的beat都可以讲事件数据发送到Logstash。</p><p>在你的<strong>data source</strong>主机上安装Filebeat。安装之后，配置<code>filebeat.yml</code>文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- type: log</span><br><span class="line">#需要处理的日志的路径，如Nginx</span><br><span class="line">  paths:</span><br><span class="line">  - /var/log/nginx/*.log</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;localhost:5044&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#运行Filebeat</span><br><span class="line">Filebeat -e -c filebeat.yml -d &quot;publish&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Filebeat将会尝试连接到5044端口，在Logstash以一个活动的beats plugin开始前，不会有任何应答。</span><br></pre></td></tr></table></figure><p><br></p><p><strong>为Filebeat Input配置Logstash</strong></p><p>配置一个Logstash pipeline，使用beat input plugin接受来自beats的事件。<br>格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/logstash/conf.d</span><br><span class="line">vim ./first-pipeline.conf</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#filter部分可选</span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#实例</span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">    port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">stdout &#123;</span><br><span class="line">    codec =&gt; dubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#验证配置</span><br><span class="line">logstash -f first-pipe.conf --config.tst_and_exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#消息</span><br><span class="line">2018-04-17T14:15:46.187+0800    ERROR   pipeline/output.go:74   Failed to connect: dial tcp [::1]:5044: getsockopt: connection refused</span><br><span class="line">2018-04-17T14:15:46.607+0800    INFO    log/harvester.go:241    File is inactive: /var/log/nginx/access.log. Closing because close_inactive of 5m0s reached.</span><br><span class="line">2018-04-17T14:15:46.607+0800    INFO    log/harvester.go:241    File is inactive: /var/log/nginx/error.log. Closing because close_inactive of 5m0s reached.</span><br><span class="line">2018-04-17T14:15:46.923+0800    INFO    log/harvester.go:241    File is inactive: /var/log/secure-20180409. Closing because close_inactive of 5m0s reached.</span><br><span class="line">2018-04-17T14:15:51.096+0800    INFO    log/harvester.go:241    File is inactive: /var/log/secure-20180401. Closing because close_inactive of 5m0s reached.</span><br><span class="line">2018-04-17T14:15:52.687+0800    INFO    log/harvester.go:241    File is inactive: /var/log/secure-20180415. Closing because close_inactive of 5m0s reached.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动Logstash</span><br><span class="line">#修改配置后可动态载入</span><br><span class="line">logstash -f first-pipe.conf --config.reload.automatic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#消息</span><br><span class="line">2018-04-17T14:18:41.542+0800    INFO    [monitoring]    log/log.go:124  Non-zero metrics in the last 30s        &#123;&quot;monitoring&quot;: &#123;&quot;metrics&quot;: &#123;&quot;beat&quot;:&#123;&quot;cpu&quot;:&#123;&quot;system&quot;:&#123;&quot;ticks&quot;:150,&quot;time&quot;:159&#125;,&quot;total&quot;:&#123;&quot;ticks&quot;:450,&quot;time&quot;:468,&quot;value&quot;:450&#125;,&quot;user&quot;:&#123;&quot;ticks&quot;:300,&quot;time&quot;:309&#125;&#125;,&quot;info&quot;:&#123;&quot;ephemeral_id&quot;:&quot;84cbf5cd-dfff-4391-9631-2b8e77329696&quot;,&quot;uptime&quot;:&#123;&quot;ms&quot;:480009&#125;&#125;,&quot;memstats&quot;:&#123;&quot;gc_next&quot;:11030992,&quot;memory_alloc&quot;:6588088,&quot;memory_total&quot;:40882600&#125;&#125;,&quot;filebeat&quot;:&#123;&quot;harvester&quot;:&#123;&quot;open_files&quot;:5,&quot;running&quot;:8&#125;&#125;,&quot;libbeat&quot;:&#123;&quot;config&quot;:&#123;&quot;module&quot;:&#123;&quot;running&quot;:2&#125;&#125;,&quot;pipeline&quot;:&#123;&quot;clients&quot;:8,&quot;events&quot;:&#123;&quot;active&quot;:4118&#125;&#125;&#125;,&quot;registrar&quot;:&#123;&quot;states&quot;:&#123;&quot;current&quot;:10&#125;&#125;,&quot;system&quot;:&#123;&quot;load&quot;:&#123;&quot;1&quot;:4.86,&quot;15&quot;:4.41,&quot;5&quot;:4.53,&quot;norm&quot;:&#123;&quot;1&quot;:2.43,&quot;15&quot;:2.205,&quot;5&quot;:2.265&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用Grok filter plugin解析Web Logs</strong></p><p>在某些时候，可能输出的日志信息的格式并不理想。你想要解析log以创建特定的命名字段。</p><p><code>grok</code>过滤插件使你能够将非结构化的日志数据解析为结构化和可查询的内容。<br>由于<code>grok</code>过滤器插件在传入的日志数据中查找模式，因此配置插件需要你作出关于如何识别你的用例。</p><p>你可以使用<code>%{COMBINEDAPACHELOG}</code> grok模式，它从如下模式的日志中构建行：</p><table><thead><tr><th>信息</th><th>Field Name</th></tr></thead><tbody><tr><td>IP Add</td><td>clientip</td></tr><tr><td>User ID</td><td>ident</td></tr><tr><td>User Auth</td><td>auth</td></tr><tr><td>timestamp</td><td>timestamp</td></tr><tr><td>HTTP Verb</td><td>verb</td></tr><tr><td>Request body</td><td>request</td></tr><tr><td>HTTP Status code</td><td>respone</td></tr><tr><td>Referer URL</td><td>referer</td></tr><tr><td>User agent</td><td>agent</td></tr></tbody></table><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim first-pipline.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">beats &#123;</span><br><span class="line">    port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">        &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动查看效果</span><br></pre></td></tr></table></figure><p><br></p><p><strong>通过Geoip过滤插件增强数据</strong></p><p>除了解析日志数据以获得更好的搜索外，过滤插件还可从现有的数据中后去补充信息。<br><code>geoip</code>插件查找IP地址，从IP地址获取地理位置信息，并将该位置信息添加到日志中。</p><p>配置Logstash实例来使用geoip过滤插件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim first-pipeline.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    geoip &#123;</span><br><span class="line">        source =&gt; &quot;clientip&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重启服务</span><br></pre></td></tr></table></figure><p><br></p><p><strong>索引数据到Elasticsearch</strong></p><p>现在Web log已经被处理为指定的字段，现在Logstash pipeline便可以索引数据到一个Elasticsearch集群中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim first-pipeline.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    geoip &#123;</span><br><span class="line">        source =&gt; &quot;clientip&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [ &quot;localhost:9200&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#重启服务</span><br></pre></td></tr></table></figure><p><strong>验证：</strong></p><p>这里遇到一个错误：</p><ul><li><code>index_not_found_exception</code></li></ul><p>这里要将<code>logstash-$DATE</code>反映索引的实际名称，也就是在通过下面的命令得到的<code>logstash-2018.04.13</code>。把我坑惨了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/logstash-$DATE/_search?pretty&amp;q=response=200&apos;</span><br><span class="line"></span><br><span class="line">#索引名称使用的日期基于UTC，而不是Logstash正在运行的timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看可用索引列表</span><br><span class="line">curl &apos;localhost:9200/_cat/indices?v&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   logstash-2018.04.13             dRW2veUgS2ObZmP3lepqsQ   5   1        154            0    266.6kb        266.6kb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -XGET &apos;localhost:9200/logstash-2018.04.13/_search?pretty&amp;q=response=200&apos;</span><br></pre></td></tr></table></figure><p><img src="/images/ELK/logstash-20180413.png" alt="访问图"></p><p><br></p><p>Kibana中的可视化效果：</p><p><img src="/images/ELK/kibana-20180413.png" alt=""></p><p><br><br><br></p><h3 id="拼接多个输入和输出插件"><a href="#拼接多个输入和输出插件" class="headerlink" title="拼接多个输入和输出插件"></a>拼接多个输入和输出插件</h3><p>你需要管理的信息通常来自多个不同的source，并且可能需要多个不同的destination来存储数据。Lostash pipeline可以使用多个输入和输出插件来处理这些需求。</p><p><br></p><p>官方文档中使用Twitter and Filebeat这两者作为Logstash input，并将信息输出到Elasticsearch和file。</p><ul><li>配置Logstash实例使用Filebeat input plugin</li><li>配置Logstash实例写入Elasticsearch多节点(cluster)</li><li>配置Logstash pipeline将数据写入file</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#配置Filebeat发送Log Line到Logstash</span><br><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/*.log</span><br><span class="line">  fields:</span><br><span class="line">    type: syslog</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;localhost:5044&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">########################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /etc/logstash/conf.d</span><br><span class="line"></span><br><span class="line">vim 2nd-pipeline.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">twitter &#123;</span><br><span class="line">        consumer_key =&gt; &quot;enter_your_consumer_key_here&quot;</span><br><span class="line">        consumer_secret =&gt; &quot;enter_your_secret_here&quot;</span><br><span class="line">        keywords =&gt; [&quot;cloud&quot;]</span><br><span class="line">        oauth_token =&gt; &quot;enter_your_access_token_here&quot;</span><br><span class="line">        oauth_token_secret =&gt; &quot;enter_your_access_token_secret_here&quot;</span><br><span class="line">    &#125;</span><br><span class="line">beats &#123;</span><br><span class="line">    prot =&gt; &quot;5044&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;hosts1:port1&quot;, &quot;host2:port2&quot;...]</span><br><span class="line">    &#125;</span><br><span class="line">    file &#123;</span><br><span class="line">    path =&gt; &quot;/path/to/target/file&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重启服务</span><br><span class="line">#测试，Replace $DATE with the current date, in YYYY.MM.DD format.</span><br><span class="line">curl -XGET &apos;localhost:9200/logstash-$DATE/_search?pretty&amp;q=fields.type:syslog&apos;</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入插件可以使特定的事件源由Logstash读取。</p><p>可用的输入插件：<br>我只列出了常见的，具体请参考: <a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/input-plugins.html</a></p><table><thead><tr><th>插件</th><th>描述</th></tr></thead><tbody><tr><td>beats</td><td>从Elastic框架接收事件</td></tr><tr><td>couchdb_changes</td><td>从CouchDB的<code>_changes</code>URI流式传输事件</td></tr><tr><td>dead_letter_queue</td><td>从Logstash的dead letter queue读取事件</td></tr><tr><td>elasticsearch</td><td>从Elasticsearch集群中读取查询结果</td></tr><tr><td>exec</td><td>抓取shell命令的输出作为事件</td></tr><tr><td>file</td><td>来自文件的流事件</td></tr><tr><td>github</td><td>从GitHub webhook读取事件</td></tr><tr><td>heartbeat</td><td>为测试生成心跳事件</td></tr><tr><td>http</td><td>通过HTTP/HTTPS接收事件</td></tr><tr><td>http_poller</td><td>解码HTTP API输出为事件</td></tr><tr><td>imap</td><td>从IMAP服务器读取邮件</td></tr><tr><td>jmx</td><td>通过JVM从java程序检索标准</td></tr><tr><td>kafka</td><td>从kafka中读取事件</td></tr><tr><td>log4j</td><td>通过TCP socket从Log4j对象读取事件</td></tr><tr><td>pipe</td><td>从长时间运行的命令管道中获取流事件</td></tr><tr><td>rabbitmq</td><td>从Redis实例读取事件</td></tr><tr><td>sqlite</td><td>基于SQLite数据库中的行创建事件</td></tr><tr><td>stdin</td><td>从标准输入中读取事件</td></tr><tr><td>syslog</td><td>读取系统日志作为事件</td></tr><tr><td>tcp</td><td>从TCP socket读取事件</td></tr><tr><td>udp</td><td>从UDP读取事件</td></tr><tr><td>unix</td><td>通过Unix socket读取事件</td></tr><tr><td>websocket</td><td>从一个websocket读取事件</td></tr></tbody></table><p><br></p><p><strong>input filter通用选项: </strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>add_field</td><td>hash</td><td>No</td></tr><tr><td>codec</td><td>codec</td><td>No</td></tr><tr><td>enable_metric</td><td>boolean</td><td>No</td></tr><tr><td>id</td><td>string</td><td>No</td></tr><tr><td>tags</td><td>array</td><td>No</td></tr><tr><td>type</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>add_field</code><br>添加一个字段到一个事件，默认值为<code>{}</code></p></li><li><p><code>codec</code><br>用于输入数据的编解码器。默认值是<code>plain</code></p></li><li><p><code>enable_metric</code><br>为特定插件实例禁用或启用度量标准日志记录，默认值为<code>true</code></p></li><li><p><code>id</code><br>为插件配置添加一个唯一的ID，如果未指定，Logstash会自动生成一个</p></li><li><p><code>tags</code><br>为事件添加任意数量的任意标签</p></li><li><p><code>type</code><br>为所有input处理的事件添加一个<code>type</code></p></li></ul><p><br><br><br></p><h3 id="beats"><a href="#beats" class="headerlink" title="beats"></a>beats</h3><p>此插件使Logstash能够从Elasticsearch框架中接收事件。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;localhost:9200&quot;</span><br><span class="line">#hosts =&gt; [&quot;hosts1&quot;, &quot;hosts2&quot;, ...]</span><br><span class="line">    manage_template =&gt; false</span><br><span class="line">    index =&gt; &quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    document_type =&gt; &quot;%&#123;[@metadata][type]&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Beats Input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>cipher_suites</td><td>array</td><td>No</td></tr><tr><td>client_inactivity_timeout</td><td>number</td><td>No</td></tr><tr><td>host</td><td>string</td><td>No</td></tr><tr><td>include_codec_tag</td><td>boolean</td><td>No</td></tr><tr><td>port</td><td>number</td><td>Yes</td></tr><tr><td>ssl</td><td>boolean</td><td>No</td></tr><tr><td>ssl_certificate</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>ssl_certificate_authorities</td><td>array</td><td>No</td></tr><tr><td>ssl_handshake_timeout</td><td>number</td><td>No</td></tr><tr><td>ssl_key</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>ssl_key_passphrase</td><td>password</td><td>No</td></tr><tr><td>ssl_verify_mode</td><td>string, one of [none, peer,force_peer]</td><td>No</td></tr><tr><td>tls_max_version</td><td>number</td><td>No</td></tr><tr><td>tls_min_version</td><td>number</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p><strong>Elasticsearch Input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>ca_file</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>docinfo</td><td>boolean</td><td>No</td></tr><tr><td>docinfo_fields</td><td>array</td><td>No</td></tr><tr><td>docinfo_target</td><td>string</td><td>No</td></tr><tr><td>hosts</td><td>array</td><td>No</td></tr><tr><td>index</td><td>string</td><td>No</td></tr><tr><td>password</td><td>password</td><td>No</td></tr><tr><td>query</td><td>string</td><td>No</td></tr><tr><td>schedule</td><td>string</td><td>No</td></tr><tr><td>scroll</td><td>string</td><td>No</td></tr><tr><td>size</td><td>number</td><td>No</td></tr><tr><td>ssl</td><td>boolean</td><td>No</td></tr><tr><td>user</td><td>string</td><td>No</td></tr></tbody></table><p><br></p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;es.production.mysite.org&quot;</span><br><span class="line">    index =&gt; &quot;mydata-2018.09.*&quot;</span><br><span class="line">    query =&gt; &apos;&#123; &quot;query&quot;: &#123; &quot;query_string&quot;: &#123; &quot;query&quot;: &quot;*&quot; &#125; &#125; &#125;&apos;</span><br><span class="line">    size =&gt; 500</span><br><span class="line">    scroll =&gt; &quot;5m&quot;</span><br><span class="line">    docinfo =&gt; true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    index =&gt; &quot;copy-of-production.%&#123;[@metadata][_index]&#125;&quot;</span><br><span class="line">    document_type =&gt; &quot;%&#123;[@metadata][_type]&#125;&quot;</span><br><span class="line">    document_id =&gt; &quot;%&#123;[@metadata][_id]&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>定期运行shell命令，并抓取整个输出为事件。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  exec &#123;</span><br><span class="line">    command =&gt; &quot;ls&quot;</span><br><span class="line">    interval =&gt; 30</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>exec Input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>command</td><td>string</td><td>Yes</td></tr><tr><td>interval</td><td>number</td><td>No</td></tr><tr><td>schedule</td><td>string</td><td>No</td></tr></tbody></table><p>此调度表示方法如同Linux中定时任务<code>* 5 * 1-3 *</code>。</p><p><br><br><br></p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>从文件读取流事件。</p><p><strong>file input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>close_older</td><td>number</td><td>No</td></tr><tr><td>delimiter</td><td>string</td><td>No</td></tr><tr><td>discover_interval</td><td>number</td><td>No</td></tr><tr><td>exclude</td><td>array</td><td>No</td></tr><tr><td>ignore_older</td><td>number</td><td>No</td></tr><tr><td>max_open_files</td><td>number</td><td>No</td></tr><tr><td>path</td><td>array</td><td>Yes</td></tr><tr><td>sincedb_path</td><td>string</td><td>No</td></tr><tr><td>sincedb_write_interval</td><td>number</td><td>No</td></tr><tr><td>start_position</td><td>string, one of [“beginning”, “end”]</td><td>No</td></tr><tr><td>stat_interval</td><td>number</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p><strong>github input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>drop_invalid</td><td>boolean</td><td>No</td></tr><tr><td>ip</td><td>string</td><td>No</td></tr><tr><td>port</td><td>number</td><td>Yes</td></tr><tr><td>secret_token</td><td>string</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-kafka.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-kafka.html</a></p><p><br><br><br></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>从redis实例读取事件，它支持redis的channel和list类型。</p><p><strong>redis input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>batch_count</td><td>number</td><td>No</td></tr><tr><td>data_type</td><td>string, one of [list,channel,pattern_channel]</td><td>Yes</td></tr><tr><td>db</td><td>number</td><td>No</td></tr><tr><td>host</td><td>string</td><td>No</td></tr><tr><td>path</td><td>string</td><td>No</td></tr><tr><td>key</td><td>string</td><td>Yes</td></tr><tr><td>password</td><td>password</td><td>No</td></tr><tr><td>port</td><td>number</td><td>No</td></tr><tr><td>ssl</td><td>boolean</td><td>No</td></tr><tr><td>threads</td><td>number</td><td>No</td></tr><tr><td>timeout</td><td>number</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  sqlite &#123;</span><br><span class="line">    path =&gt; &quot;/tmp/example.db&quot;</span><br><span class="line">    type =&gt; weblogs</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    debug =&gt; true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sqlite input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>batch</td><td>number</td><td>No</td></tr><tr><td>exclude_tables</td><td>array</td><td>No</td></tr><tr><td>path</td><td>string</td><td>Yes</td></tr></tbody></table><p><br><br><br></p><h3 id="stdin"><a href="#stdin" class="headerlink" title="stdin"></a>stdin</h3><p><br><br><br></p><h3 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  syslog &#123;</span><br><span class="line">    port =&gt; 12345</span><br><span class="line">    codec =&gt; cef</span><br><span class="line">    syslog_field =&gt; &quot;syslog&quot;</span><br><span class="line">    grok_pattern =&gt; &quot;&lt;%&#123;POSINT:priority&#125;&gt;%&#123;SYSLOGTIMESTAMP:timestamp&#125; CUSTOM GROK HERE&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>syslog input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>facility_labels</td><td>array</td><td>No</td></tr><tr><td>grok_pattern</td><td>string</td><td>No</td></tr><tr><td>host</td><td>string</td><td>No</td></tr><tr><td>locale</td><td>string</td><td>No</td></tr><tr><td>port</td><td>number</td><td>No</td></tr><tr><td>proxy_protocol</td><td>boolean</td><td>No</td></tr><tr><td>severity_labels</td><td>array</td><td>No</td></tr><tr><td>syslog_field</td><td>string</td><td>No</td></tr><tr><td>timezone</td><td>string</td><td>No</td></tr><tr><td>use_labels</td><td>boolean</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 12345</span><br><span class="line">    codec =&gt; json</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>tcp input配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>host</td><td>string</td><td>No</td></tr><tr><td>mode</td><td>string, one of [server, client]</td><td>No</td></tr><tr><td>port</td><td>number</td><td>Yes</td></tr><tr><td>proxy_protocol</td><td>boolean</td><td>No</td></tr><tr><td>ssl_cert</td><td>a valid file system path</td><td>No</td></tr><tr><td>ssl_enable</td><td>boolean</td><td>No</td></tr><tr><td>ssl_extra_chain_certs</td><td>array</td><td>No</td></tr><tr><td>ssl_key</td><td>a valid file system path</td><td>No</td></tr><tr><td>ssl_key_passphrase</td><td>password</td><td>No</td></tr><tr><td>ssl_verify</td><td>boolean</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h3><p><br><br><br></p><h3 id="unix"><a href="#unix" class="headerlink" title="unix"></a>unix</h3><p><br><br><br></p><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p><br><br><br></p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出将事件数据发送到特定的目标。输出是事件管道的最后阶段。</p><p>输出列表：</p><ul><li>boundary</li><li>circonus</li><li>CSV</li><li>datadog</li><li>Elasticsearch</li><li>email</li><li>exec</li><li>file</li><li>gelf</li><li>ganglia</li><li>http/https</li><li>influxdb</li><li>irc</li><li>kafka</li><li>librato</li><li>loggly</li><li>lumberjack</li><li>metriccatcher</li><li>mongodb</li><li>nagios</li><li>opentsdb</li><li>pipe</li><li>rabbitmq</li><li>redis</li><li>redmine</li><li>stdout</li><li>syslog</li><li>tcp</li><li>udp</li><li>websocket</li><li>zabbix</li></ul><p><br></p><p><strong>output通用配置项： </strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>codec</td><td>codec</td><td>No</td></tr><tr><td>enable_metric</td><td>boolean</td><td>No</td></tr><tr><td>id</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>codec</code><br>用于输出数据的编解码器，默认值是<code>json_lines</code></p></li><li><p><code>enable_metric</code><br>为特定插件实例启用或禁用度量日志记录，默认值是<code>true</code></p></li><li><p><code>id</code><br>为插件配置添加一个唯一的ID，如果未指定ID，Logstash会自动生成。</p></li></ul><p><br><br><br></p><h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><p><strong>csv output配置选项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>create_if_deleted</td><td>boolean</td><td>No</td></tr><tr><td>csv_options</td><td>hash</td><td>No</td></tr><tr><td>dir_mode</td><td>number</td><td>No</td></tr><tr><td>fields</td><td>array</td><td>Yes</td></tr><tr><td>file_mode</td><td>number</td><td>No</td></tr><tr><td>filename_failure</td><td>string</td><td>No</td></tr><tr><td>flush_interval</td><td>number</td><td>No</td></tr><tr><td>gzip</td><td>boolean</td><td>No</td></tr><tr><td>path</td><td>string</td><td>Yes</td></tr><tr><td>spreadsheet_safe</td><td>boolean</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="elasticsearch-1"><a href="#elasticsearch-1" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p><strong>Elasticsearch output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>action</td><td>string</td><td>No</td></tr><tr><td>bulk_path</td><td>string</td><td>No</td></tr><tr><td>cacert</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>doc_as upsert</td><td>boolean</td><td>No</td></tr><tr><td>document_id</td><td>string</td><td>No</td></tr><tr><td>document_type</td><td>string</td><td>No</td></tr><tr><td>failure_type logging whitelist</td><td>array</td><td>No</td></tr><tr><td>healthcheck_path</td><td>string</td><td>No</td></tr><tr><td>hosts</td><td>uri</td><td>No</td></tr><tr><td>http_compression</td><td>boolean</td><td>No</td></tr><tr><td>index</td><td>string</td><td>No</td></tr><tr><td>keystore</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>keystore_password</td><td>password</td><td>No</td></tr><tr><td>manage_template</td><td>boolean</td><td>No</td></tr><tr><td>parameters</td><td>hash</td><td>No</td></tr><tr><td>parent</td><td>string</td><td>No</td></tr><tr><td>password</td><td>password</td><td>No</td></tr><tr><td>path</td><td>string</td><td>No</td></tr><tr><td>pipeline</td><td>string</td><td>No</td></tr><tr><td>pool_max</td><td>number</td><td>No</td></tr><tr><td>pool_max per route</td><td>number</td><td>No</td></tr><tr><td>proxy</td><td>uri</td><td>No</td></tr><tr><td>resurrect_delay</td><td>number</td><td>No</td></tr><tr><td>retry_initial interval</td><td>number</td><td>No</td></tr><tr><td>retry_max_interval</td><td>number</td><td>No</td></tr><tr><td>retry_on_conflict</td><td>number</td><td>No</td></tr><tr><td>routing</td><td>string</td><td>No</td></tr><tr><td>script</td><td>string</td><td>No</td></tr><tr><td>script_lang</td><td>string</td><td>No</td></tr><tr><td>script_type</td><td>string, one of [inline, indexed, file]</td><td>No</td></tr><tr><td>script_var_name</td><td>string</td><td>No</td></tr><tr><td>scripted_upsert</td><td>boolean</td><td>No</td></tr><tr><td>sniffing</td><td>boolean</td><td>No</td></tr><tr><td>sniffing_delay</td><td>number</td><td>No</td></tr><tr><td>sniffing_path</td><td>string</td><td>No</td></tr><tr><td>ssl</td><td>boolean</td><td>No</td></tr><tr><td>ssl_certificate verification</td><td>boolean</td><td>No</td></tr><tr><td>template</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>template_name</td><td>string</td><td>No</td></tr><tr><td>template_overwrite</td><td>boolean</td><td>No</td></tr><tr><td>timeout</td><td>number</td><td>No</td></tr><tr><td>truststore</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>truststore_password</td><td>password</td><td>No</td></tr><tr><td>upsert</td><td>string</td><td>No</td></tr><tr><td>user</td><td>string</td><td>No</td></tr><tr><td>validate_after inactivity</td><td>number</td><td>No</td></tr><tr><td>version</td><td>string</td><td>No</td></tr><tr><td>version_type</td><td>string, one of [internal, external, external gt, external gte, force]</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="exec-1"><a href="#exec-1" class="headerlink" title="exec"></a>exec</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  if [type] == &quot;abuse&quot; &#123;</span><br><span class="line">    exec &#123;</span><br><span class="line">      command =&gt; &quot;iptables -A INPUT -s %&#123;clientip&#125; -j DROP&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>exec output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>command</td><td>string</td><td>Yes</td></tr><tr><td>quiet</td><td>boolean</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="file-1"><a href="#file-1" class="headerlink" title="file"></a>file</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line"> file &#123;</span><br><span class="line">   path =&gt; ...</span><br><span class="line">   codec =&gt; line &#123; format =&gt; &quot;custom format: %&#123;message&#125;&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>file output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>create_if_deleted</td><td>boolean</td><td>No</td></tr><tr><td>dir_mode</td><td>number</td><td>No</td></tr><tr><td>file_mode</td><td>number</td><td>No</td></tr><tr><td>filename_failure</td><td>string</td><td>No</td></tr><tr><td>flush_interval</td><td>number</td><td>No</td></tr><tr><td>gzip</td><td>boolean</td><td>No</td></tr><tr><td>path</td><td>string</td><td>Yes</td></tr><tr><td>write_behavior</td><td>string</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="kafka-1"><a href="#kafka-1" class="headerlink" title="kafka"></a>kafka</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    codec =&gt; json</span><br><span class="line">    topic_id =&gt; &quot;mytopic&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>kafka output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>acks</td><td>string, one of [0, 1, all]</td><td>No</td></tr><tr><td>batch_size</td><td>number</td><td>No</td></tr><tr><td>bootstrap_servers</td><td>string</td><td>No</td></tr><tr><td>buffer_memory</td><td>number</td><td>No</td></tr><tr><td>client_id</td><td>string</td><td>No</td></tr><tr><td>compression_type</td><td>string, one of [none, gzip, snappy, lz4]</td><td>No</td></tr><tr><td>jaas_path</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>kerberos_config</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>key_serializer</td><td>string</td><td>No</td></tr><tr><td>linger_ms</td><td>number</td><td>No</td></tr><tr><td>max_request size</td><td>number</td><td>No</td></tr><tr><td>message_key</td><td>string</td><td>No</td></tr><tr><td>metadata_fetch_timeout_ms</td><td>number</td><td>No</td></tr><tr><td>metadata_max_age_ms</td><td>number</td><td>No</td></tr><tr><td>receive_buffer_bytes</td><td>number</td><td>No</td></tr><tr><td>reconnect_backoff_ms</td><td>number</td><td>No</td></tr><tr><td>request_timeout_ms</td><td>string</td><td>No</td></tr><tr><td>retries</td><td>number</td><td>No</td></tr><tr><td>retry_backoff_ms</td><td>number</td><td>No</td></tr><tr><td>sasl_kerberos_service name</td><td>string</td><td>No</td></tr><tr><td>sasl_mechanism</td><td>string</td><td>No</td></tr><tr><td>security_protocol</td><td>string, one of [PLAINTEXT, SSL, SASL PLAINTEXT, SASL SSL]</td><td>No</td></tr><tr><td>send_buffer_bytes</td><td>number</td><td>No</td></tr><tr><td>ssl_key_password</td><td>password</td><td>No</td></tr><tr><td>ssl_keystore_location</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>ssl_keystore_password</td><td>password</td><td>No</td></tr><tr><td>ssl_keystore_type</td><td>string</td><td>No</td></tr><tr><td>ssl_truststore_location</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>ssl_truststore_password</td><td>password</td><td>No</td></tr><tr><td>ssl_truststore_type</td><td>string</td><td>No</td></tr><tr><td>topic_id</td><td>string</td><td>Yes</td></tr><tr><td>value_serializer</td><td>string</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h3><p><strong>mongodb output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>bulk</td><td>boolean</td><td>No</td></tr><tr><td>bulk_interval</td><td>number</td><td>No</td></tr><tr><td>bulk_size</td><td>number</td><td>No</td></tr><tr><td>collection</td><td>string</td><td>Yes</td></tr><tr><td>database</td><td>string</td><td>Yes</td></tr><tr><td>generateId</td><td>boolean</td><td>No</td></tr><tr><td>isodate</td><td>boolean</td><td>No</td></tr><tr><td>retry_delay</td><td>number</td><td>No</td></tr><tr><td>uri</td><td>string</td><td>Yes</td></tr></tbody></table><p><br><br><br></p><h3 id="redis-1"><a href="#redis-1" class="headerlink" title="redis"></a>redis</h3><p>将Redis作为消息队列缓存能极大降低系统负载，减轻系统压力。</p><p><strong>redis output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>batch</td><td>boolean</td><td>No</td></tr><tr><td>batch_events</td><td>number</td><td>No</td></tr><tr><td>batch_timeout</td><td>number</td><td>No</td></tr><tr><td>congestion_interval</td><td>number</td><td>No</td></tr><tr><td>congestion_threshold</td><td>number</td><td>No</td></tr><tr><td>data_type</td><td>string, one of [list, channel]</td><td>No</td></tr><tr><td>db</td><td>number</td><td>No</td></tr><tr><td>host</td><td>array</td><td>No</td></tr><tr><td>key</td><td>string</td><td>No</td></tr><tr><td>password</td><td>password</td><td>No</td></tr><tr><td>port</td><td>number</td><td>No</td></tr><tr><td>reconnect_interval</td><td>number</td><td>No</td></tr><tr><td>shuffle_hosts</td><td>boolean</td><td>No</td></tr><tr><td>timeout</td><td>number</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="redmine"><a href="#redmine" class="headerlink" title="redmine"></a>redmine</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  redmine &#123;</span><br><span class="line">    url =&gt; &quot;http://redmineserver.tld&quot;</span><br><span class="line">    token =&gt; &apos;token&apos;</span><br><span class="line">    project_id =&gt; 200</span><br><span class="line">    tracker_id =&gt; 1</span><br><span class="line">    status_id =&gt; 3</span><br><span class="line">    priority_id =&gt; 2</span><br><span class="line">    subject =&gt; &quot;Error ... detected&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>redmine output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>assigned_to_id</td><td>number</td><td>No</td></tr><tr><td>categorie_id</td><td>number</td><td>No</td></tr><tr><td>description</td><td>string</td><td>No</td></tr><tr><td>fixed_version_id</td><td>number</td><td>No</td></tr><tr><td>parent_issue_id</td><td>number</td><td>No</td></tr><tr><td>priority_id</td><td>number</td><td>Yes</td></tr><tr><td>project_id</td><td>number</td><td>Yes</td></tr><tr><td>ssl</td><td>boolean</td><td>No</td></tr><tr><td>status_id</td><td>number</td><td>Yes</td></tr><tr><td>subject</td><td>string</td><td>No</td></tr><tr><td>token</td><td>string</td><td>Yes</td></tr><tr><td>tracker_id</td><td>number</td><td>Yes</td></tr><tr><td>url</td><td>string</td><td>Yes</td></tr></tbody></table><p><br><br><br></p><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  stdout &#123; codec =&gt; json &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="syslog-1"><a href="#syslog-1" class="headerlink" title="syslog"></a>syslog</h3><p><strong>syslog output配置：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>appname</td><td>string</td><td>No</td></tr><tr><td>facility</td><td>string</td><td>No</td></tr><tr><td>host</td><td>string</td><td>Yes</td></tr><tr><td>message</td><td>string</td><td>No</td></tr><tr><td>msgid</td><td>string</td><td>No</td></tr><tr><td>port</td><td>number</td><td>Yes</td></tr><tr><td>priority</td><td>string</td><td>No</td></tr><tr><td>procid</td><td>string</td><td>No</td></tr><tr><td>protocol</td><td>string, one of [tcp, udp, ssl-tcp]</td><td>No</td></tr><tr><td>reconnect interval</td><td>number</td><td>No</td></tr><tr><td>rfc</td><td>string, one of [rfc3164, rfc5424]</td><td>No</td></tr><tr><td>severity</td><td>string</td><td>No</td></tr><tr><td>sourcehost</td><td>string</td><td>No</td></tr><tr><td>ssl_cacert</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>ssl_cert</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>ssl_key</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>ssl_key passphrase</td><td>password</td><td>No</td></tr><tr><td>ssl_verify</td><td>boolean</td><td>No</td></tr><tr><td>use_labels</td><td>boolean</td><td>No</td></tr></tbody></table><p><br><br><br></p><h3 id="zabbix"><a href="#zabbix" class="headerlink" title="zabbix"></a>zabbix</h3><p><strong>zabbix output配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>multi_value</td><td>array</td><td>No</td></tr><tr><td>timeout</td><td>number</td><td>No</td></tr><tr><td>zabbix_host</td><td>string</td><td>Yes</td></tr><tr><td>zabbix_key</td><td>string</td><td>No</td></tr><tr><td>zabbix_server host</td><td>string</td><td>No</td></tr><tr><td>zabbix_server port</td><td>number</td><td>No</td></tr><tr><td>zabbix_value</td><td>string</td><td>No</td></tr></tbody></table><p><br><br><br><br><br></p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li><a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/filter-plugins.html</a></li></ul><p>过滤器插件对事件执行中介(intermediary)处理，过滤器通常根据事件的特征有条件的应用。</p><p>下面是Elastic支持的插件列表:</p><table><thead><tr><th>插件</th><th>描述</th></tr></thead><tbody><tr><td>aggregate</td><td>汇总来自单个任务的多个事件的信息</td></tr><tr><td>alter</td><td>对mutate过滤器无法处理的字段进行常规更改</td></tr><tr><td>cidr</td><td>根据网络块列表检查IP地址</td></tr><tr><td>cipher</td><td>对事件应用或移除cipher(密码)</td></tr><tr><td>clone</td><td>重复事件</td></tr><tr><td>csv</td><td>将csv(comma separated value)解析为单个字段</td></tr><tr><td>date</td><td>解析字段中的日期，以用作事件的Logstash timestamp</td></tr><tr><td>de_dot</td><td>Computationally expensive filter that removes dots from a field name</td></tr><tr><td>dissect</td><td>使用分隔符将非结构化事件数据提取到字段中</td></tr><tr><td>dns</td><td>执行标准或反向DNS查询</td></tr><tr><td>drop</td><td>删除所有事件</td></tr><tr><td>elapsed</td><td>计算一对事件之间的经过时间</td></tr><tr><td>elasticsearch</td><td>将Elasticsearch中以前的日志事件的字段复制到当前事件中</td></tr><tr><td>environment</td><td>将环境变量存储为元数据子字段</td></tr><tr><td>extractnumbers</td><td>从字符串中提取数字</td></tr><tr><td>fingerprint</td><td>由一致的散列值的替换值的指纹字段</td></tr><tr><td>geoip</td><td>添加有关IP地址的地理信息</td></tr><tr><td>grok</td><td>将非结构化事件数据解析到字段中</td></tr><tr><td>i18n</td><td>从字段中删除特定字符</td></tr><tr><td>jdbc_static</td><td>使用从远程数据库预加载的数据来丰富事件</td></tr><tr><td>jdbc_streaming</td><td>用你的数据库数据丰富事件</td></tr><tr><td>json</td><td>解析JSON事件</td></tr><tr><td>json_encode</td><td>将字段序列化为JSON</td></tr><tr><td>kv</td><td>解析键值对</td></tr><tr><td>metricize</td><td>处理包含多个度量标准的复杂事件并将它们分成多个事件，每个事件都包含一个度量标准</td></tr><tr><td>metrics</td><td>汇总指标(Aggregates metrics)</td></tr><tr><td>mutate</td><td>对字段执行突变</td></tr><tr><td>prune</td><td>将基于字段列表的事件数据精简为黑名单或白名单</td></tr><tr><td>range</td><td>检查指定的字段是否在给定的大小或长度限制内</td></tr><tr><td>ruby</td><td>执行任意Ruby代码</td></tr><tr><td>sleep</td><td>休息一段指定的时间</td></tr><tr><td>split</td><td>将多行消息拆分成不同的事件</td></tr><tr><td>syslog_pri</td><td>解析syslog消息的优先字段</td></tr><tr><td>throttle</td><td>限制事件的数量</td></tr><tr><td>tld</td><td>用你在配置中指定的任何内容替换默认消息字段的内容</td></tr><tr><td>translate</td><td>根据散列或YAML文件，替换字段内容</td></tr><tr><td>truncate</td><td>截断长度超过给定长度的字段</td></tr><tr><td>urldecode</td><td>解码URL编码的字段</td></tr><tr><td>useragent</td><td>将用户代理字符串解析到字段中</td></tr><tr><td>uuid</td><td>为事件添加UUID</td></tr><tr><td>xml</td><td>将XML解析到字段</td></tr></tbody></table><p><br></p><p><strong>所有过滤器都支持的配置选项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>add_field</td><td>hash</td><td>No</td></tr><tr><td>add_tag</td><td>array</td><td>No</td></tr><tr><td>enable_metric</td><td>boolean</td><td>No</td></tr><tr><td>id</td><td>string</td><td>No</td></tr><tr><td>periodic_flush</td><td>boolean</td><td>No</td></tr><tr><td>remove_field</td><td>array</td><td>No</td></tr><tr><td>remove_tag</td><td>array</td><td>No</td></tr></tbody></table><ul><li><p><code>add_field</code><br>如果此过滤器成功，添加任意字段到此事件。字段名称可以是动态的，并使用<code>%{field}</code>包含事件的部分内容</p></li><li><p><code>add_tag</code><br>如果此过滤器成功，添加任意标签到此事件。标签可以是动态的，并使用<code>%{field}</code>语法包含事件的部分内容</p></li><li><p><code>enable_metric</code><br>为特定插件实例启用/禁用度量标准日志记录</p></li><li><p><code>id</code><br>为插件配置添加一个唯一的ID，如果没有指定ID，Logstash会生成一个。强烈建议在配置中设置此ID<br>当你有多个相同类型的插件时，这特别有用</p></li><li><p><code>periodic_flush</code><br>定期调用过滤器flush方法</p></li><li><p><code>remove_field</code><br>如果此过滤器成功，从事件中移除任意字段</p></li><li><p><code>remove_tag</code><br>如果此过滤器成功，从事件中移除任意标签</p></li></ul><p><br><br><br></p><h3 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h3><p>此过滤器的目的是聚合属于同一任务的多个事件(通常是日志行)中可用的信息，并将最终聚合信息推送到最终任务事件中。</p><p><br></p><p><strong>Aggregate Filter Configuration Options: </strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>aggregate_maps_path</td><td>string, a valid filesystem path</td><td>No</td></tr><tr><td>code</td><td>string</td><td>Yes</td></tr><tr><td>end_of_task</td><td>boolean</td><td>No</td></tr><tr><td>inactivity_timeout</td><td>number</td><td>No</td></tr><tr><td>map_action</td><td>string, one of [“create”, “update”, “create_or_update”]</td><td>No</td></tr><tr><td>push_map_as_event_on_timeout</td><td>boolean</td><td>No</td></tr><tr><td>push_previous_map_as_event</td><td>boolean</td><td>No</td></tr><tr><td>task_id</td><td>string</td><td>Yes</td></tr><tr><td>timeout</td><td>number</td><td>No</td></tr><tr><td>timeout_code</td><td>string</td><td>No</td></tr><tr><td>timeout_tags</td><td>array</td><td>No</td></tr><tr><td>timeout_task_id_field</td><td>string</td><td>No</td></tr><tr><td>timeout_timestamp_field</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>aggregate_maps_path</code><br>Logstash停止时存储聚合地图的文件路径，以及Logstash启动时加载的路径。<br>如果未定义，聚合映射将不会存储在Logstash中，并且会丢失。</p></li><li><p><code>code</code><br>使用当前事件执行更新map的代码；或使用当前的map执行更新事件的代码<br>你将有一个可用的map variable 和 event variable</p></li><li><p><code>end_of_task</code><br>告诉过滤器该任务已结束，因此在代码执行后删除聚合map</p></li><li><p><code>inactivity_timeout</code><br>一个任务被认为已到期的秒数<br>当某个任务超时时，其聚合map将被逐出<br>必须小于timeout</p></li><li><p><code>map_action</code></p><ul><li><code>create</code></li><li><code>update</code></li><li><code>create_or_update</code><br>告诉过滤器如何处理聚合map</li></ul></li><li><p><code>push_map_as_event_on_timeout</code><br>每次检测到任务超时时，它都会将任务集合映射推送为新的Logstash事件</p></li><li><p><code>push_previous_map_as_event</code><br>每次聚合插件检测到新任务ID时，它会将先前的聚合映射推送为新的Logstash事件，然后为下一个任务创建新的空映射</p></li><li><p><code>task_id</code><br>定义了关联日志的任务ID的表达式<br>该值必须唯一标识任务</p></li><li><p><code>timeout</code></p></li><li><p><code>time_code</code></p></li><li><p><code>timeout_tags</code><br>在生成超时事件添加的标记</p></li><li><p><code>timeout_task_id_field</code></p></li><li><p><code>timeout_timestamp_field</code><br>默认情况下，使用系统时间计算超时</p></li></ul><p><br></p><p><strong>栗子：</strong></p><p>给定日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO - 12345 - TASK_START - start</span><br><span class="line">INFO - 12345 - SQL - sqlQuery1 - 12</span><br><span class="line">INFO - 12345 - SQL - sqlQuery2 - 34</span><br><span class="line">INFO - 12345 - TASK_END - end</span><br></pre></td></tr></table></figure><p>过滤器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; [ &quot;message&quot;, &quot;%&#123;LOGLEVEL:loglevel&#125; - %&#123;NOTSPACE:taskid&#125; - %&#123;NOTSPACE:logger&#125; - %&#123;WORD:label&#125;( - %&#123;INT:duration:int&#125;)?&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if [logger] == &quot;TASK_START&quot; &#123;</span><br><span class="line">    aggregate &#123;</span><br><span class="line">      task_id =&gt; &quot;%&#123;taskid&#125;&quot;</span><br><span class="line">      code =&gt; &quot;map[&apos;sql_duration&apos;] = 0&quot;</span><br><span class="line">      map_action =&gt; &quot;create&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if [logger] == &quot;SQL&quot; &#123;</span><br><span class="line">    aggregate &#123;</span><br><span class="line">      task_id =&gt; &quot;%&#123;taskid&#125;&quot;</span><br><span class="line">      code =&gt; &quot;map[&apos;sql_duration&apos;] += event.get(&apos;duration&apos;)&quot;</span><br><span class="line">      map_action =&gt; &quot;update&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if [logger] == &quot;TASK_END&quot; &#123;</span><br><span class="line">    aggregate &#123;</span><br><span class="line">      task_id =&gt; &quot;%&#123;taskid&#125;&quot;</span><br><span class="line">      code =&gt; &quot;event.set(&apos;sql_duration&apos;, map[&apos;sql_duration&apos;])&quot;</span><br><span class="line">      map_action =&gt; &quot;update&quot;</span><br><span class="line">      end_of_task =&gt; true</span><br><span class="line">      timeout =&gt; 120</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Alter"><a href="#Alter" class="headerlink" title="Alter"></a>Alter</h3><p>alter filter允许对未包含在正常变异过滤器中的字段进行一般更改。</p><p><br></p><p><strong>安装: </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin install logstash-filter-alter</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置项: </strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>coalesce</td><td>array</td><td>No</td></tr><tr><td>condrewrite</td><td>array</td><td>No</td></tr><tr><td>condrewriteother</td><td>array</td><td>No</td></tr></tbody></table><ul><li><p><code>coalesce</code><br>将file_name的值设置为其参数的第一个非空表达式</p></li><li><p><code>condrewrite</code><br>如果实际内容等于预期内容，则将字段内容更改为指定值</p></li><li><p><code>condrewriteother</code><br>如果另一个字段内容等于预期内容，则将字段内容更改为指定值</p></li></ul><p><br><br><br></p><h3 id="cidr"><a href="#cidr" class="headerlink" title="cidr"></a>cidr</h3><p>CIDR filter用于检查时间中的IP地址与可能包含它的网络块列表。可以针对多个网络检查多个地址，任何匹配都可以成功。成功后，可将其它标记/字段添加到事件中。</p><p><br></p><p><strong>配置项: </strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>address</td><td>array</td><td>No</td></tr><tr><td>network</td><td>array</td><td>No</td></tr><tr><td>network_path</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>refresh_interval</td><td>number</td><td>No</td></tr><tr><td>separator</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>address</code><br>要检查的IP地址</p></li><li><p><code>network</code><br>要检查的IP网络</p></li><li><p><code>network_path</code><br>包含过滤器应检查的网络的外部文件的完整路径</p></li><li><p><code>refresh_interval</code><br>检查外部文件的更新频率</p></li><li><p><code>seperator</code><br>从network_path指定的外部文件解析网络的分隔符</p></li></ul><p><br><br><br></p><h3 id="csv-1"><a href="#csv-1" class="headerlink" title="csv"></a>csv</h3><p>csv filter处理包含csv数据的事件字段，解析它，并将其存储为单个字段<br>此过滤器还可解析使用任何分隔符的数据，而不仅仅是逗号</p><p><br></p><p><strong>配置项: </strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>autodetect_column_names</td><td>boolean</td><td>No</td></tr><tr><td>autogenerate_column_names</td><td>boolean</td><td>No</td></tr><tr><td>columns</td><td>array</td><td>No</td></tr><tr><td>convert</td><td>hash</td><td>No</td></tr><tr><td>quote_char</td><td>string</td><td>No</td></tr><tr><td>separator</td><td>string</td><td>No</td></tr><tr><td>skip_empty_columns</td><td>boolean</td><td>No</td></tr><tr><td>skip_empty_rows</td><td>boolean</td><td>No</td></tr><tr><td>skip_header</td><td>boolean</td><td>No</td></tr><tr><td>source</td><td>string</td><td>No</td></tr><tr><td>target</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>autodetect_column_names</code><br>是否应该从标题列自动检测列名称，默认false</p></li><li><p><code>autogenerate_column_names</code><br>是否应该自动生成列名，默认true。<br>如果设置为false，那么没有指定header的列将不会被解析</p></li><li><p><code>columns</code><br>列名称的列表</p></li><li><p><code>convert</code><br>应用于列的数据类型转换的集合，可能的转换: integer, float, date, date_time, boolean</p></li><li><p><code>quote_char</code><br>用于引用csv字段的字符，默认<code>&quot;</code></p></li><li><p><code>separator</code><br>列分隔符值。默认值comma<code>,</code></p></li><li><p><code>skip_empty_columns</code><br>是否应该跳过空列，默认false</p></li><li><p><code>skip_empty_rows</code><br>是否应该跳过空行，默认false</p></li><li><p><code>skip_header</code><br>是否应该跳过header，默认false</p></li><li><p><code>source</code><br>源字段值中的csv数据将被扩展为数据结构</p></li><li><p><code>target</code><br>放置数据的目标字段</p></li></ul><p><br><br><br></p><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>date filter从字段中解析日期，然后使用该日期或时间戳作为事件的Logstash时间戳。它对事件排序和回填旧数据尤其重要。<br>在没有此过滤器的情况下，如果timestamp尚未在事件中设置，则Logstash将根据首次查看事件是(input time)选择一个时间戳。</p><p><br></p><p><strong>date filter配置项：</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>locale</td><td>string</td><td>No</td></tr><tr><td>match</td><td>array</td><td>No</td></tr><tr><td>tag_on_failure</td><td>array</td><td>No</td></tr><tr><td>target</td><td>string</td><td>No</td></tr><tr><td>timezone</td><td>string</td><td>No</td></tr></tbody></table><p><strong>locale</strong><br>使用POSIX语言标记指定用于日期解析的环境(locale)，如<code>en</code>,<code>en_US</code><br>如果未指定，则将使用平台默认值</p><p><strong>match</strong><br>有字段名称和格式模式的数组，[ field, formats…]</p><p>如果时间字段有多种格式，你可这样做:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">match =&gt; [ &quot;filed-name&quot;, &quot;MMM dd yyyy HH:mm:ss&quot;,</span><br><span class="line">          &quot;MMM  d yyyy HH:mm:ss&quot;, &quot;ISO8601&quot; ]</span><br><span class="line"></span><br><span class="line">嵌套字段表示</span><br><span class="line">[foo][bar]</span><br></pre></td></tr></table></figure><p>有几个例外:</p><ul><li><code>ISO8601</code>: 解析任何有效的ISO8601时间戳，如<code>2011-04-19T03:44:01.103Z</code></li><li><code>UNIX</code>: 解析float/int Unix原子时间(s)</li><li><code>UNIX_MS</code>: 解析int Unix原子时间</li><li><code>TAI64N</code>: 解析tai64n时间值</li></ul><p>语法细节:<br>用于解析日期和时间文本的语法使用字母来指示时间值的种类，以及重复的字母来指示该值的形式。</p><p>以下是可用于解析日期和时间的内容：</p><ul><li><p>y year</p><ul><li>yyyy<br>完整年号，如<code>2018</code></li><li>yy<br>  两位数年份，如<code>18</code></li></ul></li><li><p>M month of the year</p><ul><li>M<br>最小数字月份,<code>1-12</code></li><li>MM<br>两位数字月份，<code>01-12</code></li><li>MMM<br>缩写的月份文本，<code>Jan, Feb...</code></li><li>MMMM<br>完整的月份文本，<code>January, February...</code></li></ul></li><li><p>d day of the month</p><ul><li>d<br>最小数字日，<code>1, 2...</code></li><li>dd<br>两位数字日，<code>01, 02...</code></li></ul></li><li><p>H hour of the day</p><ul><li>H<br>最小数字小时，<code>0, 1...</code></li><li>HH<br>两位数字小时，<code>00, 01...</code></li></ul></li><li><p>m minutes of the hour</p><ul><li>m<br>最小数字分钟，<code>0, 1...</code></li><li>mm<br>两位数字分钟，<code>00, 01...</code></li></ul></li><li><p>s seconds of the minute</p><ul><li>s<br>最小数字秒数，<code>0, 1...</code></li><li>ss<br>两位数字秒数，<code>00, 01...</code></li></ul></li><li><p>S 秒的最大精度(毫秒)，附加零</p><ul><li>S<br>十分之一秒</li><li>SS<br>百分之一秒</li><li>SSS<br>千分之一秒</li></ul></li><li><p>Z time zone offset or identity</p><ul><li>Z<br>时区偏移量结构为HHmm(如上海)，<code>+0800</code></li><li>ZZ<br>时区偏移量结构为HH:mm，<code>+08:00</code></li><li>ZZZ<br>时区身份(如上海)，<code>Asia/Shanghai</code></li></ul></li><li><p>z time zone names. <strong>Time zone names (z) cannot be parsed</strong></p></li><li><p>w week of the year</p><ul><li>w<br>最小数字周数，<code>1, 2...</code></li><li>ww<br>两位数字周数，<code>01, 02...</code></li></ul></li><li><p>D day of the year</p></li><li><p>e day of the week(number)</p></li><li><p>E day of the week(text)</p><ul><li>E, EE, EEE<br>星期几的缩写，<code>Mon, Tue, Wed, Thu, Fri, Sat, Sun</code></li><li>EEEE<br>星期几的全文，<code>Monday, Tuesday...</code></li></ul></li></ul><p>对于非格式化的语法，你需要在值的周围放置单引号字符。如”yyyy-MM-dd’T’HH:mm:ss”</p><p><br></p><p><strong>tag_on_failure</strong><br>没有成功匹配时，将值附加到tag字段，默认值<code>[&quot;_dateparsefailure&quot;]</code></p><p><strong>target</strong><br>将匹配的timestamp存储到给定目标字段中。如果未提供，则默认更新事件的<code>@timestamp</code>字段</p><p><strong>timezone</strong><br>指定用于日期分析的时区标准ID，如<code>Asia/Shanghai</code></p><p><br><br><br></p><h3 id="dissect"><a href="#dissect" class="headerlink" title="dissect"></a>dissect</h3><p>dissect filter是一种拆分操作。与对整个字符串应用一个分隔符的常规拆分操作不同，此操作将一组分隔符应用于字符串值。dissect不使用正则表达式，所以速度非常快。<br>但是，如果文本结构因行而异，则Grok更适合。有一种混合的情况，dissect可用来结构可靠地重复部分，然后Grok用于余下的字段值，并具有更多的正则表达式可预测性和更少的整体工作。</p><p>一组字段和分隔符被称为dissection，它使用一组<code>%</code>来描述:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">field: %&#123;a&#125;</span><br><span class="line">delimiter: -</span><br><span class="line">%&#123;a&#125; - %&#123;b&#125; - %&#123;c&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>dissect filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Input type</th><th>Required</th></tr></thead><tbody><tr><td>convert_datatype</td><td>hash</td><td>No</td></tr><tr><td>mapping</td><td>hash</td><td>No</td></tr><tr><td>tag_on_failure</td><td>array</td><td>No</td></tr></tbody></table><ul><li><code>convert_datatype</code><br>可以指定int, float数据类型转换。这些将在mapping发生后完成，如果没有mapping部分，请自由使用此设置。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  dissect &#123;</span><br><span class="line">    convert_datatype =&gt; &#123;</span><br><span class="line">      cpu =&gt; &quot;float&quot;</span><br><span class="line">      code =&gt; &quot;int&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mapping</code><br>A hash of dissections of <code>field =&gt; value</code><br>不要在值中使用具有转移的<code>\n</code>，它会被看做两个字符<code>\+n+</code>而不是实际的换行符。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  dissect &#123;</span><br><span class="line">    mapping =&gt; &#123;</span><br><span class="line">      # using an actual line break</span><br><span class="line">      &quot;message&quot; =&gt; &apos;&quot;%&#123;field1&#125;&quot; &quot;%&#123;field2&#125;&quot;</span><br><span class="line"> &quot;%&#123;description&#125;&quot;&apos;</span><br><span class="line">      &quot;description&quot; =&gt; &quot;%&#123;field3&#125; %&#123;field4&#125; %&#123;field5&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>tag_on_failure</code><br>dissection失败时，将值添加到tag字段。默认值为<code>[&quot;_dissectfailure&quot;]</code></li></ul><p><br><br><br></p><h3 id="geoip"><a href="#geoip" class="headerlink" title="geoip"></a>geoip</h3><p>geoip filter根据Maxmind GeoLite2数据库的数据，添加有关IP地址的地理位置信息。</p><p>此插件与GeoLite City Database数据库捆绑在一起。GeoLite2是免费的IP地址位置数据库，与MaxMind的GeoIP2数据库相比，不如其精确。<br>如果需要使用捆绑的DeoLite之外的数据库，可从MaxMind下载它: <a href="https://dev.maxmind.com/geoip/geoip2/geolite2/" target="_blank" rel="noopener">https://dev.maxmind.com/geoip/geoip2/geolite2/</a></p><p>如果GeoIP返回查找到的经度(latitude)和纬度(longitude)，则会创建<code>[geoip][location]</code>字段。</p><p><br></p><p><strong>Geoip Filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Inpu_type</th><th>Required</th></tr></thead><tbody><tr><td>cache_size</td><td>number</td><td>No</td></tr><tr><td>database</td><td>a valid filesystem path</td><td>No</td></tr><tr><td>default_database_type</td><td>City or ASN</td><td>No</td></tr><tr><td>fields</td><td>array</td><td>No</td></tr><tr><td>source</td><td>string</td><td>Yes</td></tr><tr><td>tag_on_failure</td><td>array</td><td>No</td></tr><tr><td>target</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>cache_size</code><br>默认值为1000。GeoIP查询的成本非常高昂。缓存设置的越高，项目在缓存中的可能性就越大，并且此filter运行的越快。但是，如果设置得太高，则会耗费太多内存。如果缓存已满，则无法添加更多记录。尝试使用此选项的不同值来为数据集找到最佳性能。<br>这个值必须大于0。</p></li><li><p><code>database</code><br>地理数据库的文件路径，如果未指定，则默认为logstash自带的GeoLite2-City数据库。</p></li><li><p><code>default_database_type</code><br>默认值是City。唯一可接受的值是City和ASN。</p></li><li><p><code>fields</code><br>包含在事件中的geoip字段数组。可能的字段取决于数据库类型。</p></li><li><p><code>source</code><br>包含要通过geoip映射的IP地址或主机名的字段。</p></li><li><p><code>tag_on_failure</code><br>默认值为<code>[&quot;_geoip_lookup_failure&quot;]</code>.</p></li><li><p><code>target</code><br>默认值为<code>geoip</code>.指定Logstash应该存储的geoip数据的字段。</p></li></ul><p><br><br><br></p><h3 id="grok"><a href="#grok" class="headerlink" title="grok"></a>grok</h3><p>Parse arbitrary text and structure it.<br>Grok是将非结构化日志数据解析为结构化和可查询的好方法。</p><p>它非常适用于syslog, apache or webserver logs, mysql logs以及通常为人类而不是计算机编写的任何日志格式。</p><p>默认情况下，Logstash ship附带了大约120种模式。它们在这: <a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="noopener">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a><br>要grok某类日志文件的时候，可以先到上面的地址查看有无对应的模式。然后复制对应内容到<code>patterns_dir</code>下，再在filter中使用。<br>当然，你也可以自定义模式来匹配你的日志。在这测试: <a href="http://grokdebug.herokuapp.com" target="_blank" rel="noopener">http://grokdebug.herokuapp.com</a></p><p><br></p><p><strong>Grok filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>break_on_match</td><td>boolean</td><td>No</td></tr><tr><td>keep_empty_captures</td><td>boolean</td><td>No</td></tr><tr><td>match</td><td>hash</td><td>No</td></tr><tr><td>named_captures_only</td><td>boolean</td><td>No</td></tr><tr><td>overwrite</td><td>array</td><td>No</td></tr><tr><td>pattern_definitions</td><td>hash</td><td>No</td></tr><tr><td>patterns_dir</td><td>array</td><td>No</td></tr><tr><td>patterns_files_glob</td><td>string</td><td>No</td></tr><tr><td>tag_on_failure</td><td>array</td><td>No</td></tr><tr><td>tag_on_timeout</td><td>string</td><td>No</td></tr><tr><td>timeout_millis</td><td>number</td><td>No</td></tr></tbody></table><ul><li><p><code>break_on_match</code><br>Break on first match. grok的第一个成功的匹配将导致filter结束。如果你想grok尝试所有的模式，请将其设置为<code>false</code>。默认值为<code>true</code>。</p></li><li><p><code>keep_empty_captures</code><br>默认值为<code>false</code>。如果为<code>true</code>，则将空捕获保留为事件字段。</p></li><li><p><code>match</code><br>field ⇒ value的散列匹配，默认值为<code>{}</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  grok &#123; match =&gt; &#123; &quot;message&quot; =&gt; [ &quot;Duration: %&#123;NUMBER:duration&#125;&quot;, &quot;Speed: %&#123;NUMBER:speed&#125;&quot; ] &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>named_captures_only</code><br>默认值为<code>true</code>。如果为<code>true</code>，只保存来自grok的命名捕获。</p></li><li><p><code>overwrite</code><br>要覆盖的字段，这使你可覆盖已存在的字段中的值。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGBASE&#125; %&#123;DATA:message&#125;&quot; &#125;</span><br><span class="line">    overwrite =&gt; [ &quot;message&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>pattern_definitions</code><br>默认值为<code>{}</code><br>模式名称和模式元组的散列，用于定义当前过滤器要使用的自定义模式。匹配现用名称的模式将覆盖预先存在的定义。</p></li><li><p><code>patterns_dir</code><br>默认值为<code>[]</code><br>logstash默认提供了一堆模式，除非添加额外模式，否则不需要自定义模式。你可以使用此设置指向多个模式目录。grok将读取与<code>patterns_files_glob</code>匹配的目录汇总的所有文件，并假定它为模式文件。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patterns_dir =&gt; [&quot;/opt/logstash/patterns&quot;, &quot;/opt/logstash/extra_patterns&quot;]</span><br></pre></td></tr></table></figure><ul><li><p><code>patterns_files_glob</code><br>默认值为<code>&quot;*&quot;</code><br>Glob模式，用于从patterns_dir目录中选择模式文件。</p></li><li><p><code>tag_on_failure</code><br>默认值为<code>[&quot;_grokparsefailure&quot;]</code><br>匹配没有成功时，将值添加到tags字段。</p></li><li><p><code>tag_on_timeout</code><br>默认值为<code>&quot;_groktimeout&quot;</code><br>如果grok正则表达式超时，则应用此tag.</p></li><li><p><code>timeout_millis</code><br>默认值为<code>30000</code><br>尝试在这段时间后终止正则表达式。设置为0以禁用超时。</p></li></ul><p><br></p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>Grok工作方式，将文本模式组合成与你的日志模式相匹配的内容。</p><p>Grok模式的语法为 <code>%{SYNTAX:SEMANTIC}</code></p><ul><li><code>SYNTAX</code>, 文本匹配的模式的名称</li><li><code>SEMANTIC</code>, 正在匹配的文本的标识符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;NUMBER:duration&#125; %&#123;IP:client&#125;</span><br></pre></td></tr></table></figure><p>你也可以将数据类型转换添加到Grok模式。默认情况下，所有的语义(semantic)都保存为字符串(strings)。<br>如果你想转换语义的数据类型，如将string转换为int。例如<code>%{NUMBER:num:int}</code>将num语义从string转换为integer。当前情况下，只支持转换为int和float.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">日志格式</span><br><span class="line">55.3.244.1 GET /index.html 15824 0.043</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grok pattern</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;&quot; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grok filter之后的格式</span><br><span class="line">client: 55.3.244.1</span><br><span class="line">method: GET</span><br><span class="line">request: /index.html</span><br><span class="line">bytes: 15824</span><br><span class="line">duration: 0.043</span><br></pre></td></tr></table></figure><p><br></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>Grok位于正则表达式之上，所以任何正则表达式在grok中都是有效的。<br>Regular Expression Library: <a href="https://github.com/kkos/oniguruma/blob/master/doc/RE" target="_blank" rel="noopener">https://github.com/kkos/oniguruma/blob/master/doc/RE</a></p><p><br></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>grok处理nginx/access.log日志:<br>首先针对nginx.conf中日志格式来决定如何写logstash pattern</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/logstash/patterns</span><br><span class="line"></span><br><span class="line">vim nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NGINX_ACCESS %&#123;IPORHOST:clientip&#125; (?:-|(%&#123;WORD&#125;.%&#123;WORD&#125;)) %&#123;USER:ident&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:forwarder&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grok &#123;</span><br><span class="line">  patterns_dir =&gt; &quot;/etc/logstash/patterns&quot;</span><br><span class="line">  match =&gt; &#123; &quot;message&quot; =&gt; %&#123;NGINX_ACCESS&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="grok-debugger"><a href="#grok-debugger" class="headerlink" title="grok debugger"></a>grok debugger</h4><p><img src="/images/ELK/grok.png" alt="grok debugger"></p><p><br></p><p><strong>grok-patterns</strong><br>这是grok官方写得patterns，当然，你也可以自己写。就像Nginx日志那样！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">USERNAME [a-zA-Z0-9._-]+</span><br><span class="line">USER %&#123;USERNAME&#125;</span><br><span class="line">EMAILLOCALPART [a-zA-Z][a-zA-Z0-9_.+-=:]+</span><br><span class="line">EMAILADDRESS %&#123;EMAILLOCALPART&#125;@%&#123;HOSTNAME&#125;</span><br><span class="line">INT (?:[+-]?(?:[0-9]+))</span><br><span class="line">BASE10NUM (?&lt;![0-9.+-])(?&gt;[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+)))</span><br><span class="line">NUMBER (?:%&#123;BASE10NUM&#125;)</span><br><span class="line">BASE16NUM (?&lt;![0-9A-Fa-f])(?:[+-]?(?:0x)?(?:[0-9A-Fa-f]+))</span><br><span class="line">BASE16FLOAT \b(?&lt;![0-9A-Fa-f.])(?:[+-]?(?:0x)?(?:(?:[0-9A-Fa-f]+(?:\.[0-9A-Fa-f]*)?)|(?:\.[0-9A-Fa-f]+)))\b</span><br><span class="line"></span><br><span class="line">POSINT \b(?:[1-9][0-9]*)\b</span><br><span class="line">NONNEGINT \b(?:[0-9]+)\b</span><br><span class="line">WORD \b\w+\b</span><br><span class="line">NOTSPACE \S+</span><br><span class="line">SPACE \s*</span><br><span class="line">DATA .*?</span><br><span class="line">GREEDYDATA .*</span><br><span class="line">QUOTEDSTRING (?&gt;(?&lt;!\\)(?&gt;&quot;(?&gt;\\.|[^\\&quot;]+)+&quot;|&quot;&quot;|(?&gt;&apos;(?&gt;\\.|[^\\&apos;]+)+&apos;)|&apos;&apos;|(?&gt;`(?&gt;\\.|[^\\`]+)+`)|``))</span><br><span class="line">UUID [A-Fa-f0-9]&#123;8&#125;-(?:[A-Fa-f0-9]&#123;4&#125;-)&#123;3&#125;[A-Fa-f0-9]&#123;12&#125;</span><br><span class="line"># URN, allowing use of RFC 2141 section 2.3 reserved characters</span><br><span class="line">URN urn:[0-9A-Za-z][0-9A-Za-z-]&#123;0,31&#125;:(?:%[0-9a-fA-F]&#123;2&#125;|[0-9A-Za-z()+,.:=@;$_!*&apos;/?#-])+</span><br><span class="line"></span><br><span class="line"># Networking</span><br><span class="line">MAC (?:%&#123;CISCOMAC&#125;|%&#123;WINDOWSMAC&#125;|%&#123;COMMONMAC&#125;)</span><br><span class="line">CISCOMAC (?:(?:[A-Fa-f0-9]&#123;4&#125;\.)&#123;2&#125;[A-Fa-f0-9]&#123;4&#125;)</span><br><span class="line">WINDOWSMAC (?:(?:[A-Fa-f0-9]&#123;2&#125;-)&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;)</span><br><span class="line">COMMONMAC (?:(?:[A-Fa-f0-9]&#123;2&#125;:)&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;)</span><br><span class="line">IPV6 ((([0-9A-Fa-f]&#123;1,4&#125;:)&#123;7&#125;([0-9A-Fa-f]&#123;1,4&#125;|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;6&#125;(:[0-9A-Fa-f]&#123;1,4&#125;|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;)|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;5&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,2&#125;)|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;)|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;4&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,3&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;3&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,4&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,2&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;2&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,5&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,3&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;1&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,6&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,4&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(:(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,7&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,5&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:)))(%.+)?</span><br><span class="line">IPV4 (?&lt;![0-9])(?:(?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5]))(?![0-9])</span><br><span class="line">IP (?:%&#123;IPV6&#125;|%&#123;IPV4&#125;)</span><br><span class="line">HOSTNAME \b(?:[0-9A-Za-z][0-9A-Za-z-]&#123;0,62&#125;)(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]&#123;0,62&#125;))*(\.?|\b)</span><br><span class="line">IPORHOST (?:%&#123;IP&#125;|%&#123;HOSTNAME&#125;)</span><br><span class="line">HOSTPORT %&#123;IPORHOST&#125;:%&#123;POSINT&#125;</span><br><span class="line"></span><br><span class="line"># paths</span><br><span class="line">PATH (?:%&#123;UNIXPATH&#125;|%&#123;WINPATH&#125;)</span><br><span class="line">UNIXPATH (/([\w_%!$@:.,+~-]+|\\.)*)+</span><br><span class="line">TTY (?:/dev/(pts|tty([pq])?)(\w+)?/?(?:[0-9]+))</span><br><span class="line">WINPATH (?&gt;[A-Za-z]+:|\\)(?:\\[^\\?*]*)+</span><br><span class="line">URIPROTO [A-Za-z]([A-Za-z0-9+\-.]+)+</span><br><span class="line">URIHOST %&#123;IPORHOST&#125;(?::%&#123;POSINT:port&#125;)?</span><br><span class="line"># uripath comes loosely from RFC1738, but mostly from what Firefox</span><br><span class="line"># doesn&apos;t turn into %XX</span><br><span class="line">URIPATH (?:/[A-Za-z0-9$.+!*&apos;()&#123;&#125;,~:;=@#%&amp;_\-]*)+</span><br><span class="line">#URIPARAM \?(?:[A-Za-z0-9]+(?:=(?:[^&amp;]*))?(?:&amp;(?:[A-Za-z0-9]+(?:=(?:[^&amp;]*))?)?)*)?</span><br><span class="line">URIPARAM \?[A-Za-z0-9$.+!*&apos;|()&#123;&#125;,~@#%&amp;/=:;_?\-\[\]&lt;&gt;]*</span><br><span class="line">URIPATHPARAM %&#123;URIPATH&#125;(?:%&#123;URIPARAM&#125;)?</span><br><span class="line">URI %&#123;URIPROTO&#125;://(?:%&#123;USER&#125;(?::[^@]*)?@)?(?:%&#123;URIHOST&#125;)?(?:%&#123;URIPATHPARAM&#125;)?</span><br><span class="line"></span><br><span class="line"># Months: January, Feb, 3, 03, 12, December</span><br><span class="line">MONTH \b(?:[Jj]an(?:uary|uar)?|[Ff]eb(?:ruary|ruar)?|[Mm](?:a|ä)?r(?:ch|z)?|[Aa]pr(?:il)?|[Mm]a(?:y|i)?|[Jj]un(?:e|i)?|[Jj]ul(?:y)?|[Aa]ug(?:ust)?|[Ss]ep(?:tember)?|[Oo](?:c|k)?t(?:ober)?|[Nn]ov(?:ember)?|[Dd]e(?:c|z)(?:ember)?)\b</span><br><span class="line">MONTHNUM (?:0?[1-9]|1[0-2])</span><br><span class="line">MONTHNUM2 (?:0[1-9]|1[0-2])</span><br><span class="line">MONTHDAY (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])</span><br><span class="line"></span><br><span class="line"># Days: Monday, Tue, Thu, etc...</span><br><span class="line">DAY (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?)</span><br><span class="line"></span><br><span class="line"># Years?</span><br><span class="line">YEAR (?&gt;\d\d)&#123;1,2&#125;</span><br><span class="line">HOUR (?:2[0123]|[01]?[0-9])</span><br><span class="line">MINUTE (?:[0-5][0-9])</span><br><span class="line"># &apos;60&apos; is a leap second in most time standards and thus is valid.</span><br><span class="line">SECOND (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)</span><br><span class="line">TIME (?!&lt;[0-9])%&#123;HOUR&#125;:%&#123;MINUTE&#125;(?::%&#123;SECOND&#125;)(?![0-9])</span><br><span class="line"># datestamp is YYYY/MM/DD-HH:MM:SS.UUUU (or something like it)</span><br><span class="line">DATE_US %&#123;MONTHNUM&#125;[/-]%&#123;MONTHDAY&#125;[/-]%&#123;YEAR&#125;</span><br><span class="line">DATE_EU %&#123;MONTHDAY&#125;[./-]%&#123;MONTHNUM&#125;[./-]%&#123;YEAR&#125;</span><br><span class="line">ISO8601_TIMEZONE (?:Z|[+-]%&#123;HOUR&#125;(?::?%&#123;MINUTE&#125;))</span><br><span class="line">ISO8601_SECOND (?:%&#123;SECOND&#125;|60)</span><br><span class="line">TIMESTAMP_ISO8601 %&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125;[T ]%&#123;HOUR&#125;:?%&#123;MINUTE&#125;(?::?%&#123;SECOND&#125;)?%&#123;ISO8601_TIMEZONE&#125;?</span><br><span class="line">DATE %&#123;DATE_US&#125;|%&#123;DATE_EU&#125;</span><br><span class="line">DATESTAMP %&#123;DATE&#125;[- ]%&#123;TIME&#125;</span><br><span class="line">TZ (?:[APMCE][SD]T|UTC)</span><br><span class="line">DATESTAMP_RFC822 %&#123;DAY&#125; %&#123;MONTH&#125; %&#123;MONTHDAY&#125; %&#123;YEAR&#125; %&#123;TIME&#125; %&#123;TZ&#125;</span><br><span class="line">DATESTAMP_RFC2822 %&#123;DAY&#125;, %&#123;MONTHDAY&#125; %&#123;MONTH&#125; %&#123;YEAR&#125; %&#123;TIME&#125; %&#123;ISO8601_TIMEZONE&#125;</span><br><span class="line">DATESTAMP_OTHER %&#123;DAY&#125; %&#123;MONTH&#125; %&#123;MONTHDAY&#125; %&#123;TIME&#125; %&#123;TZ&#125; %&#123;YEAR&#125;</span><br><span class="line">DATESTAMP_EVENTLOG %&#123;YEAR&#125;%&#123;MONTHNUM2&#125;%&#123;MONTHDAY&#125;%&#123;HOUR&#125;%&#123;MINUTE&#125;%&#123;SECOND&#125;</span><br><span class="line"></span><br><span class="line"># Syslog Dates: Month Day HH:MM:SS</span><br><span class="line">SYSLOGTIMESTAMP %&#123;MONTH&#125; +%&#123;MONTHDAY&#125; %&#123;TIME&#125;</span><br><span class="line">PROG [\x21-\x5a\x5c\x5e-\x7e]+</span><br><span class="line">SYSLOGPROG %&#123;PROG:program&#125;(?:\[%&#123;POSINT:pid&#125;\])?</span><br><span class="line">SYSLOGHOST %&#123;IPORHOST&#125;</span><br><span class="line">SYSLOGFACILITY &lt;%&#123;NONNEGINT:facility&#125;.%&#123;NONNEGINT:priority&#125;&gt;</span><br><span class="line">HTTPDATE %&#123;MONTHDAY&#125;/%&#123;MONTH&#125;/%&#123;YEAR&#125;:%&#123;TIME&#125; %&#123;INT&#125;</span><br><span class="line"></span><br><span class="line"># Shortcuts</span><br><span class="line">QS %&#123;QUOTEDSTRING&#125;</span><br><span class="line"></span><br><span class="line"># Log formats</span><br><span class="line">SYSLOGBASE %&#123;SYSLOGTIMESTAMP:timestamp&#125; (?:%&#123;SYSLOGFACILITY&#125; )?%&#123;SYSLOGHOST:logsource&#125; %&#123;SYSLOGPROG&#125;:</span><br><span class="line"></span><br><span class="line"># Log Levels</span><br><span class="line">LOGLEVEL ([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>这是一个json解析过滤器。</p><p><br></p><p><strong>Json Filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>skip_on_invalid_json</td><td>boolean</td><td>No</td></tr><tr><td>source</td><td>string</td><td>Yes</td></tr><tr><td>tag_on_failure</td><td>array</td><td>No</td></tr><tr><td>target</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>skip_on_invalid_json</code><br>默认值是false.允许跳过无效json上的过滤器。</p></li><li><p><code>source</code><br>json filter的配置<br>如，从message字段中解析json</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    source =&gt; &quot;message&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>target</code><br>定义放置解析数据的目标字段。如果目标字段已存在，则它会被覆盖。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  json &#123;</span><br><span class="line">    target =&gt; &quot;doc&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="kv"><a href="#kv" class="headerlink" title="kv"></a>kv</h3><p>此过滤器有助于自动解析<code>key=value</code>类型的消息。<br>这对于postfix, iptables和倾向于key=value语法类型的日志非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#before</span><br><span class="line">ip=1.2.3.4 error=REFUSED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  kv &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#after</span><br><span class="line">ip: 1.2.3.4</span><br><span class="line">error: REFUSED</span><br></pre></td></tr></table></figure><p><br></p><p><strong>kv filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>allow_duplicate_values</td><td>boolean</td><td>No</td></tr><tr><td>default_keys</td><td>hash</td><td>No</td></tr><tr><td>exclude_keys</td><td>array</td><td>No</td></tr><tr><td>field_split</td><td>string</td><td>No</td></tr><tr><td>include_brackets</td><td>boolean</td><td>No</td></tr><tr><td>include_keys</td><td>array</td><td>No</td></tr><tr><td>prefix</td><td>string</td><td>No</td></tr><tr><td>recursive</td><td>boolean</td><td>No</td></tr><tr><td>remove_char_key</td><td>string</td><td>No</td></tr><tr><td>remove_char_value</td><td>string</td><td>No</td></tr><tr><td>source</td><td>string</td><td>No</td></tr><tr><td>target</td><td>string</td><td>No</td></tr><tr><td>transform_key</td><td>string,</td><td>one of [“lowercase”, “uppercase”, “capitalize”]</td><td>No</td></tr><tr><td>transform_value</td><td>string,</td><td>one of [“lowercase”, “uppercase”, “capitalize”]</td><td>No</td></tr><tr><td>trim_key</td><td>string</td><td>No</td></tr><tr><td>trim_value</td><td>string</td><td>No</td></tr><tr><td>value_split</td><td>string</td><td>No</td></tr></tbody></table><ul><li><p><code>allow_duplicate_values</code><br>默认值为true.用于删除重复 键/值对的布尔选项。</p></li><li><p><code>default_keys</code><br>默认值为{}.一个散列，用于指定在解析源字段中不存在的键时应添加到事件中的默认值及其值。</p></li><li><p><code>exclude_keys</code><br>默认值为[].一个数组，用于指定不应添加到事件中的解析键。默认情况下，没有键被排除。</p></li><li><p><code>field_split</code><br>默认值为<code>&quot; &quot;</code>.用作解析出键值对后的单字符字段分隔符的字符串。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line">name=zhang21&amp;age=25&amp;email=ab123@gamil.com</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  kv &#123;</span><br><span class="line">    field_split =&gt; &quot;&amp;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>field_split_pattern</code><br>一个正则表达式，用作字段分隔符来解析键值对。用于定义多字符字段分隔符。<br>它优先于<code>field_split</code>选项。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line">k1=v1:k2=v2:::k3=v3::k4=v4</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  kv &#123;</span><br><span class="line">    field_split_pattern =&gt; &quot;:+&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>include_brackets</code><br>默认值为true.一个布尔值，指定是否将 方括号[square bracket]，尖括号<angle bracket="">和括号(bracket) 视为的包装器(wrapper)，是否应该从值中删除。</angle></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line">one=(o n e) two=[t w o] three=&lt;t h r e e&gt;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  kv &#123;</span><br><span class="line">    include_brackets =&gt; tree</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#after</span><br><span class="line">one: o n e</span><br><span class="line">two: t w o</span><br><span class="line">three: t h r e e</span><br></pre></td></tr></table></figure><ul><li><p><code>include_keys</code><br>默认值为[].一个数字，用于指定应该添加到解析的键。默认情况下，所有的键都会被添加。</p></li><li><p><code>prefix</code><br>默认值为空。预先添加到所有提取的键的字符串。</p></li><li><p><code>recursive</code><br>默认值为false.一个布尔值，执行是否向下提取值并递归获取更多的键值对。</p></li><li><p><code>remove_char_key</code><br>要从键中移除的字符串。</p></li><li><p><code>remove_char_value</code><br>要从值中移除的字符串。</p></li><li><p><code>source</code><br>默认值为message.要在其上执行key=value搜索的字段。</p></li><li><p><code>target</code><br>将所有键值对放入的容器的名称。</p></li><li><p><code>transform_key</code><br>将键转换为大写，小写。</p></li><li><p><code>transform_value</code><br>将值转换为大写，小写</p></li><li><p><code>trim_key</code><br>从键中修建的字符串。如果键包含在括号中或以空格开头，这很有用。</p></li><li><p><code>trim_value</code><br>从值中修建的字符串。如果你的值包含在括号中或以逗号结尾。这很有用。</p></li><li><p><code>value_split</code><br>默认值为<code>=</code>.一个非空字符串，用作解析出键值对的单字符分隔符。</p></li><li><p><code>value_split_pattern</code><br>用作值分隔符来解析出键值对的正则表达式。优先级高于<code>value_split</code>。</p></li></ul><p><br><br><br></p><h3 id="metrics"><a href="#metrics" class="headerlink" title="metrics"></a>metrics</h3><p>metrics filter用于聚合度量(aggregating metrics).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#计算每种http响应吗</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  metrics &#123;</span><br><span class="line">    meter =&gt; [ &quot;http_%&#123;response&#125;&quot; ]</span><br><span class="line">    add_tag =&gt; &quot;metric&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>metrics filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>clear_interval</td><td>number</td><td>No</td></tr><tr><td>flush_interval</td><td>number</td><td>No</td></tr><tr><td>ignore_older_than</td><td>number</td><td>No</td></tr><tr><td>meter</td><td>array</td><td>No</td></tr><tr><td>percentiles</td><td>array</td><td>No</td></tr><tr><td>rates</td><td>array</td><td>No</td></tr><tr><td>timer</td><td>hash</td><td>No</td></tr></tbody></table><ul><li><p><code>clear_interval</code><br>默认值为<code>-1</code>.清理间隔，所有的计数器都被重置。</p></li><li><p><code>flush_interval</code><br>默认值为<code>5</code>.刷新间隔，当metrics事件被创建时。此值必须是5的倍数。</p></li><li><p><code>ignore_older_than</code><br>默认值为<code>0</code>.不要跟着<code>@timestamp</code>超过某个秒数的事件。</p></li><li><p><code>meter</code><br>语法: <code>meter =&gt; [ &quot;name of metric&quot;, &quot;name of metric&quot; ]</code></p></li><li><p><code>percentiles</code><br>默认值为<code>percentiles</code>.计时器值应该测量和发出的百分位数。</p></li><li><p><code>rates</code><br>默认值为<code>[1, 5, 15]</code>.应该按分钟测量的比率。</p></li><li><p><code>timer</code><br>语法: <code>timer =&gt; [ &quot;name of metric&quot;, &quot;%{time_value}&quot; ]</code></p></li></ul><p><br></p><p><strong>meter values</strong><br><code>meter =&gt; &quot;something&quot;</code>, 会收到如下字段:</p><ul><li>“[thing][count]” - the total count of events</li><li>“[thing][rate_1m]” - the per-second event rate in a 1-minute sliding window</li><li>“[thing][rate_5m]” - the per-second event rate in a 5-minute sliding window</li><li>“[thing][rate_15m]” - the per-second event rate in a 15-minute sliding window</li></ul><p><strong>timer values</strong><br><code>timer =&gt; { &quot;thing&quot; =&gt; &quot;%{duration}&quot;}</code>, 会收到如下字段:</p><ul><li>“[thing][count]” - the total count of events</li><li>“[thing][rate_1m]” - the per-second average value in a 1-minute sliding window</li><li>“[thing][rate_5m]” - the per-second average value in a 5-minute sliding window</li><li>“[thing][rate_15m]” - the per-second average value in a 15-minute sliding window</li><li>“[thing][min]” - the minimum value seen for this metric</li><li>“[thing][max]” - the maximum value seen for this metric</li><li>“[thing][stddev]” - the standard deviation for this metric</li><li>“[thing][mean]” - the mean for this metric</li><li>“[thing][pXX]” - the XXth percentile for this metric (see percentiles)</li></ul><p><br><br><br></p><h3 id="mutate"><a href="#mutate" class="headerlink" title="mutate"></a>mutate</h3><p>mutate filter允许你在字段上执行常规突变。你可以重命名，删除，替换和修改事件中的字段。</p><p><br></p><p><strong>mutate filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>convert</td><td>hash</td><td>No</td></tr><tr><td>copy</td><td>hash</td><td>No</td></tr><tr><td>gsub</td><td>array</td><td>No</td></tr><tr><td>join</td><td>hash</td><td>No</td></tr><tr><td>lowercase</td><td>array</td><td>No</td></tr><tr><td>merge</td><td>hash</td><td>No</td></tr><tr><td>coerce</td><td>hash</td><td>No</td></tr><tr><td>rename</td><td>hash</td><td>No</td></tr><tr><td>replace</td><td>hash</td><td>No</td></tr><tr><td>split</td><td>hash</td><td>No</td></tr><tr><td>strip</td><td>array</td><td>No</td></tr><tr><td>update</td><td>hash</td><td>No</td></tr><tr><td>uppercase</td><td>array</td><td>No</td></tr><tr><td>capitalize</td><td>array</td><td>No</td></tr></tbody></table><ul><li><p><code>convert</code><br>将字段的值转换为其它类型，如将string转换为int.如果只为数组，则所有成员都将转换；如果是散列，则不处理。</p></li><li><p><code>copy</code><br>将现有字段复制到另一个字段(会覆盖)。</p></li><li><p><code>gsub</code><br>将正则表达式与字段值进行匹配，并用替换字符替换所有匹配项。<br>只支持string或string array.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    gsub =&gt; [</span><br><span class="line">  &quot;field1&quot;, &quot;value&quot;, &quot;replacement string&quot;,</span><br><span class="line">]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>join</code><br>加入一个带分隔符的数组。对非数组字段没有任何作用。</p></li><li><p><code>lowercase</code><br>将字符串转换为小写</p></li><li><p><code>merge</code><br>合并数组或散列的两个字段。字符串字段将被自动转换为数组。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    merge =&gt; &#123; &quot;dest_field&quot; =&gt; &quot;added_field&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>coerce</code><br>为已存在但为空的字段设置默认值。</p></li><li><p><code>rename</code><br>重命名一个或多个字段。</p></li><li><p><code>replace</code><br>用新值替换一个字段。新值可以包含<code>%{foo}</code>字符串，以帮助你从事件的其它部分创建新值。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    replace =&gt; &#123;</span><br><span class="line">  &quot;message&quot; =&gt; &quot;%&#123;source_host&#125;: My new message&quot;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>split</code><br>使用分隔符将字段拆分为数组。只适用于字符串字段。</p></li><li><p><code>strip</code><br>从字段剥离空白符。</p></li><li><p><code>update</code><br>用新值更新现有字段。</p></li></ul><p><br><br><br></p><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><p>XML filter.获取包含XML的字段并将其展开为实际的数据结构。</p><p><strong>XML Filter配置项</strong></p><table><thead><tr><th>Setting</th><th>Input_type</th><th>Required</th></tr></thead><tbody><tr><td>force_array</td><td>boolean</td><td>No</td></tr><tr><td>force_content</td><td>boolean</td><td>No</td></tr><tr><td>namespaces</td><td>hash</td><td>No</td></tr><tr><td>remove_namespaces</td><td>boolean</td><td>No</td></tr><tr><td>source</td><td>string</td><td>Yes</td></tr><tr><td>store_xml</td><td>boolean</td><td>No</td></tr><tr><td>suppress_empty</td><td>boolean</td><td>No</td></tr><tr><td>target</td><td>string</td><td>No</td></tr><tr><td>xpath</td><td>hash</td><td>No</td></tr></tbody></table><ul><li><p><code>force_array</code><br>默认值为true.过滤器强制单个元素为数组。将其设置为false防止在数组中存储单个元素。</p></li><li><p><code>force_content</code><br>默认值为false.过滤器将以不同于标签内的内容的方式展开属性。</p></li><li><p><code>namespace</code><br>默认值为<code>{}</code>.这允许配置所有命名空间声明来解析XML文档。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  xml &#123;</span><br><span class="line">    namespaces =&gt; &#123;</span><br><span class="line">      &quot;xsl&quot; =&gt; &quot;http://www.w3.org/1999/XSL/Transform&quot;</span><br><span class="line">      &quot;xhtml&quot; =&gt; &quot;http://www.w3.org/1999/xhtml&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>remove_namespaces</code><br>从文档中的所有节点中删除所有命名空间。</p></li><li><p><code>source</code></p></li><li><p><code>store_xml</code><br>默认为true.过滤器会将整个解析的XML存储在目标字段中。</p></li><li><p><code>suppress_empty</code><br>默认值为true.默认情况下，如果元素为空，这不输出。如果设置为false,则空元素将产生一个空的散列对象。</p></li><li><p><code>target</code><br>定义放置数据的目标。</p></li></ul><p><br><br><br></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>使用条件判断决定filter和output处理特定的事件。</p><p>Logstash条件类似于编程语言，条件语句，可以嵌套：</p><ul><li><code>if</code></li><li><code>else if</code></li><li><code>else</code></li></ul><p><br></p><p>比较操作：</p><ul><li><code>==</code></li><li><code>!=</code></li><li><code>&lt;</code></li><li><code>&gt;</code></li><li><code>&lt;=</code></li><li><code>&gt;=</code></li><li><code>=~</code> 匹配正则</li><li><code>!~</code> 不匹配正则</li><li><code>in</code> 包含</li><li><code>not in</code> 不包含</li></ul><p><br></p><p>布尔操作：</p><ul><li><code>and</code></li><li><code>or</code></li><li><code>nand</code></li><li><code>xor</code></li></ul><p><br></p><p>一元运算符：</p><ul><li><code>!</code> 取反</li><li><code>()</code> 复合表达式</li></ul><p><br></p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  if [path] == &quot;/var/nginx/access.log&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">  hosts =&gt;</span><br><span class="line">  user =&gt;</span><br><span class="line">  password =&gt;</span><br><span class="line">  index =&gt; &quot;nginx-access-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else if [path] == &quot;/var/nginx/error.log&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">  hosts =&gt;</span><br><span class="line">  user =&gt;</span><br><span class="line">  password =&gt;</span><br><span class="line">  index =&gt; &quot;nginx-error-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="Filebeat文档"><a href="#Filebeat文档" class="headerlink" title="Filebeat文档"></a>Filebeat文档</h1><p><br></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>filebeat是一个beat，它基于libbeat框架。</p><p>Filebeat是一个本地文件的日志数据搬运(shipper)。作为Agent安装，filebeat监视日志目录或指定的日志文件，并将它们转发给Elasticsearch或logstash进行索引。<br>启动filebeat时，它会启动一个或多个<strong>prospectors</strong>(勘探者)，查看为日志指定的本地路径。对于prospectors所在的每个日志文件，filebeat启动harvester。每个harvester为新内容读取单一日志文件，并将新日志发送到filebeat配置的输出。</p><p><br></p><p><img src="/images/ELK/filebeat.png" alt="filebeat流程图"></p><p><br><br><br></p><h2 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h2><p>开始filebeat前，请确保安装和配置了如下产品：</p><ul><li>Elasticsearch(存储和索引数据)</li><li>Kibana(UI)</li><li>Logstash(可选)</li></ul><p><br></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>filebeat module为常用日志格式提供了入门体验。</p><p><img src="/images/ELK/filebeat002.png" alt=""></p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filebeat.prospectors:</span><br><span class="line"> -type: log</span><br><span class="line">   enabled: true</span><br><span class="line">   paths:</span><br><span class="line">     - /var/log/*.log</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [ &quot;ip:9200&quot; ]</span><br><span class="line">  #username</span><br><span class="line">  #password</span><br><span class="line"></span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;localhost:5601&quot;</span><br><span class="line">  #username</span><br><span class="line">  #password</span><br></pre></td></tr></table></figure><p><br></p><h3 id="配置filebeat使用logstash"><a href="#配置filebeat使用logstash" class="headerlink" title="配置filebeat使用logstash"></a>配置filebeat使用logstash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [ &quot;127.0.0.1:5044&quot; ]</span><br><span class="line"></span><br><span class="line">#logstash需要配置监听beats</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="在Elasticsearch中载入索引模板"><a href="#在Elasticsearch中载入索引模板" class="headerlink" title="在Elasticsearch中载入索引模板"></a>在Elasticsearch中载入索引模板</h3><p>在Elasticsearch中，索引模板用于定义设置(setting)和映射(mapping)，以确定如何分析字段(fields)。</p><p>filebeat推荐的索引模板文件有filebeat软件包安装。在成功连接到Elasticsearch后，它会默认自动载入索引模板(<code>fields.yml</code>)。如果模板存在，它不会覆盖除，除非你配置要覆盖。<br>通过修改配置文件，你也可以禁用自动载入模板，或者载入你自己的模板。</p><p><br></p><p><strong>配置模板载入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup.template.name: &quot;template-name&quot;</span><br><span class="line">setup.template.fields: &quot;/path/xxx/xxx.yml&quot;</span><br><span class="line"></span><br><span class="line">#强制覆盖已存在模板</span><br><span class="line">setup.template.overwrite: true</span><br><span class="line"></span><br><span class="line">#关闭自动载入模板</span><br><span class="line">setup.template.enabled: false</span><br></pre></td></tr></table></figure><p><br></p><p><strong>修改索引名</strong></p><ul><li>filebeat的默认索引名为 <code>filebeat-&lt;version&gt;-yyyy.MM.dd</code></li><li>在output.elasticsearch设置选项</li><li>你指定的索引名称应该包含索引的根名、索引版本和日期信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch.index: &quot;customname-%&#123;[version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.template.name: &quot;customname&quot;</span><br><span class="line">setup.template.pattern: &quot;customname-*&quot;</span><br><span class="line">setup.dashboards.index: &quot;customname-*&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>手动载入模板</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebeat setup --template</span><br></pre></td></tr></table></figure><p><br></p><p><strong>强制Kibana查看最新文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &apos;http://localhost:9200/filebeat-*&apos;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="设置Kibana面板"><a href="#设置Kibana面板" class="headerlink" title="设置Kibana面板"></a>设置Kibana面板</h3><p>Filebeat附带了实例的Kibana dashboards, visualization和可视化搜索。<br>在使用仪表板前，你需要创建索引<code>filebeat-*</code>，并将仪表板加载到Kibana中。你可使用<code>setup</code>命令或配置文件加载它。</p><p><br></p><h3 id="启动Filebeat"><a href="#启动Filebeat" class="headerlink" title="启动Filebeat"></a>启动Filebeat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start filebeat</span><br><span class="line"></span><br><span class="line">#前台启动并查看相关信息</span><br><span class="line">filebeat -e -c filebeat.yml</span><br></pre></td></tr></table></figure><p><br></p><h3 id="查看示例Kibana仪表板"><a href="#查看示例Kibana仪表板" class="headerlink" title="查看示例Kibana仪表板"></a>查看示例Kibana仪表板</h3><p>访问你的kibana web端(<code>localhost:5601</code>)，可用Nginx做反向代理，再加上域名解析。</p><p><br></p><h3 id="快速开始常见日志格式"><a href="#快速开始常见日志格式" class="headerlink" title="快速开始常见日志格式"></a>快速开始常见日志格式</h3><p>filebeat提供了一套预构建模块，可使用它快速实施和部署日志监视方案。</p><p>先决条件：</p><ul><li>安装和配置<code>Elastic Stack</code></li><li>安装<code>filebeat</code></li><li>安装<code>Ingest Node GeoIP</code>和<code>User Agent plugins</code></li><li>验证Elasticsearch和Kibana能从filebeat接收数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-plugin install ingest-geoip</span><br><span class="line">elasticsearch-plugin install ingest-user-agent</span><br></pre></td></tr></table></figure><p><br></p><p><strong>运行filebeat模块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#启用模块</span><br><span class="line">filebeat modules enable nginx system</span><br><span class="line"></span><br><span class="line">#配置path</span><br><span class="line">cd /etc/filebeat/modules.d</span><br><span class="line"></span><br><span class="line">vim nginx.yml</span><br><span class="line">vim system.yml</span><br></pre></td></tr></table></figure><p>最后就可以在Kibana中可视化查看日志。</p><p>查看dashboard时，遇到一个错误: <code>Could not locate that index-pattern (id: filebeat-*)</code></p><p>解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#重新载入索引模板</span><br><span class="line">filebeat setup</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h2><p>我们可根据系统的负载情况将Filebeat的output到合适的地方，output只能有一个！<br>如果有时候系统负载过高的话，可以考虑output到Redis或Elasticsearch。</p><p>redis和logstash都还需要logstash的pipeline转交给Elasticsearch，但你可以filter。而直接使用Elasticsearch便不能过滤。</p><ul><li>Logstash</li><li>Elasticsearch</li><li>Redis</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#找到output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#redis</span><br><span class="line">output.redis:</span><br><span class="line">  hosts: &quot;localhost&quot;</span><br><span class="line">  port: 6379</span><br><span class="line">  key: &quot;filebeat&quot;</span><br><span class="line">  #自定义key-name</span><br><span class="line">  #password:</span><br><span class="line">  #db:</span><br><span class="line">  #data_type: &apos;list&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#logstash</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [ &quot;localhost:5044&quot; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Elasticsearch</span><br><span class="line">elasticsearch.output:</span><br><span class="line">  hosts: [ &quot;localhost:9200&quot; ]</span><br><span class="line">  #username:</span><br><span class="line">  #name:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">#redis对应的pipeline</span><br><span class="line">vim /etc/logstash/conf.d/redis-pipeline.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    data_type =&gt; &quot;list&quot;</span><br><span class="line">    key =&gt; &quot;filebeat&quot;</span><br><span class="line">    host =&gt; &quot;localhost&quot;</span><br><span class="line">    port =&gt; 6379</span><br><span class="line">#password =&gt;</span><br><span class="line">#db =&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#filter&#123; &#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">  hosts =&gt; [ &quot;localhost:9200&quot; ]</span><br><span class="line">#user</span><br><span class="line">#password</span><br><span class="line">index =&gt; &quot;filebeat-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="定义索引"><a href="#定义索引" class="headerlink" title="定义索引"></a>定义索引</h3><p>为filebeat定义index:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line"># Optional index name. The default is &quot;filebeat&quot; plus date</span><br><span class="line"># and generates [filebeat-]YYYY.MM.DD keys.</span><br><span class="line"># In case you modify this pattern you must update setup.template.name and setup.template.pattern accordingly.</span><br><span class="line">#index: &quot;filebeat-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">#写到事件中的索引名，默认 &quot;filebeat-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">#如果更改此设置，还需要配置setup.template.name和setup.template.pattern选项</span><br><span class="line">#如果使用的是预先构建的kibana dashboard，还需要配置setup.dashboards.index选项</span><br><span class="line"></span><br><span class="line">#定义索引</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;10.0.1.8:9002&quot;, &quot;10.0.1.7:9002&quot;, &quot;10.0.1.9:9002&quot;]</span><br><span class="line">  loadbalance: true</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: xxx</span><br><span class="line">  index: &quot;filebeat-publish-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#添加这几项</span><br><span class="line">setup.template.name: &quot;filebeat&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeat-*&quot;</span><br><span class="line">setup.template.fields: &quot;fields.yml&quot;</span><br><span class="line">setup.template.overwrite: false</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>RPM安装的配置文件默认是<code>/etc/filebeat/filebeat.yml</code>，还有一个完整的示例配置文件<code>/etc/filebeat/filebeat.reference.yml</code>，显示了所有未弃用的选项。配置文件使用YAML语法。</p><p><br></p><h3 id="指定运行module"><a href="#指定运行module" class="headerlink" title="指定运行module"></a>指定运行module</h3><p>Specify which modules to run</p><p>Filebeat module提供了一种快速处理常见日志格式的方法。它包含默认配置。</p><p>有几种不同方法来启用modules:</p><ul><li>配置<code>modules.d</code>目录</li><li><code>filebeat命令启动</code></li><li>配置<code>filebeat.yml</code>文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#modules.d</span><br><span class="line">filebeat modules list</span><br><span class="line">filebeat modules enable nginx</span><br><span class="line">#filebeat modules disable nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#filebeat命令</span><br><span class="line">./filebeat -e --modules nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#filebeat.yml</span><br><span class="line">filebeat.modules:</span><br><span class="line">- module: nginx</span><br><span class="line">- module: system</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="指定变量设置"><a href="#指定变量设置" class="headerlink" title="指定变量设置"></a>指定变量设置</h4><p>Specify variable settings</p><p>每个模块和文件集合都有变量，你可以设置这些变量来更改木块的默认行为。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- module: nginx</span><br><span class="line">  access:</span><br><span class="line">    var.path: [&quot;/var/log/nginx/access.log*&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">filebeat -M &quot;nginx.access.var.paths=[/var/log/access.log*]&quot;</span><br><span class="line">filebeat --modules nginx -M &quot;nginx.access.var.paths=[/var/log/nginx/access.log*]&quot; -M &quot;nginx.error.var.paths=[/var/log/nginx/error.log*]&quot;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h4><p>在幕后，每个木块都会启动filebeat input。高级用户可以添加或覆盖任何input设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- module: nginx</span><br><span class="line">  access:</span><br><span class="line">    input:</span><br><span class="line">  close_eof: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">filebeat -M &quot;nginx.access.input.close_eof=true&quot;</span><br><span class="line"></span><br><span class="line">filebeat --modules nginx -M &quot;nginx.access.input.close_eof=true&quot;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="读取动态文件名"><a href="#读取动态文件名" class="headerlink" title="读取动态文件名"></a>读取动态文件名</h3><p>filbeat配置文件虽然可以将索引设置为: <code>indexname-%{+yyyy.MM.dd}</code> 的日志格式，但这个是发送给ES的，ES可以处理此配置，但filebeat是无法直接处理的，它会把它当做普通字符。<br>假如我要读取一个按日期取名的日志文件，如<code>service_20180808.log</code>，filebeat配置文件中是无法直接配置和处理。<br>后来想到，可以用<code>sh</code>写一个脚本来做此操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yesterday=`/bin/date +%Y%m%d --date=<span class="string">'-1days'</span>`</span><br><span class="line">today=`/bin/date +%Y%m%d`</span><br><span class="line"></span><br><span class="line">/bin/sed -i <span class="string">"s/service_err_<span class="variable">$&#123;yesterday&#125;</span>/service_err_<span class="variable">$&#123;today&#125;</span>/"</span> /etc/filebeat/filebeat.yml</span><br><span class="line">/bin/filebeat <span class="built_in">test</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ] ;<span class="keyword">then</span></span><br><span class="line">    /bin/systemctl restart filebeat</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><strong>DEPRECATED: prospectors are deprecated, Use <code>inputs</code> instead. Will be removed in version: 7.0.0</strong><br>要手动配置filebeat(而不是使用modules)，需要在<code>filebeat.yml</code>的<code>filebeat.inputs</code>部分指定输入列表(一个YAML 数据)。你可指定多个输入，并可多次指定相同的输入类型。</p><p><strong>input types</strong></p><ul><li>log</li><li>stdin</li><li>redis</li><li>udp</li><li>docker</li><li>tcp</li><li>syslog</li></ul><p><br></p><p>input 通用选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#启用/禁用inputs</span><br><span class="line">enabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#增加tags字段</span><br><span class="line">tags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#向输出添加其他信息</span><br><span class="line">fields</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  fields:</span><br><span class="line">    author: zhang21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#自定义字段存储为输出文档中的顶级字段，而不是在字段子字典下分组。如果与filebeat冲突，则会覆盖源字段</span><br><span class="line">fields_under_root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#应用于inputs的处理器列表</span><br><span class="line">#已被弃用</span><br><span class="line">processors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#为input生成的事件设置ingest node pipeline id</span><br><span class="line">pipeline</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p>使用log input从日志文件中读取行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/messages</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/*.log</span></span><br></pre></td></tr></table></figure><p>你可以将其它配置设置(fields, include_lines, exclude_lines, mutiline)应用于从日志文件获取的行。这里指定的选项将应用于input的所有文件。<br>将不同的配置应用于不同的文件，需要定义多个input sections:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/1.log</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/2.log</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/var/log/appache/*"</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    apache:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  fields_under_root:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>log input 配置项</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">paths</span></span><br><span class="line"><span class="comment">#将读取的基于全局路径的列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">recursive_glob.enabled</span></span><br><span class="line"><span class="comment">#true允许扩展为递归模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">encoding</span></span><br><span class="line"><span class="comment">#读取数据的文件编码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">exclude_lines</span></span><br><span class="line"><span class="comment">#正则表达式列表，用于匹配你希望filebeat排除的行</span></span><br><span class="line"></span><br><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  exclude_lines:</span> <span class="string">['^debug']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">include_lines</span></span><br><span class="line"><span class="comment">#正则表达式列表，用于匹配你希望filebeat包含的行。</span></span><br><span class="line"><span class="comment">#如果`exclude_lines`和`include_lines`都定义了，filebeat首先执行`include_lines`，之后才执行`exclude_lines`。</span></span><br><span class="line"></span><br><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  include_lines:</span> <span class="string">['^ERR',</span> <span class="string">'^WARN'</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">harvester_buffer_size</span></span><br><span class="line"><span class="comment">#每个收集器在获取文件时使用的buffer大小，默认 16 384Byte。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">max_bytes</span></span><br><span class="line"><span class="comment">#单日志消息可以具有的最大字节数。默认 10MB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">json</span></span><br><span class="line"><span class="comment">#此选项使filebeat解码日志结构为json消息。filebeat逐行处理日志，因此每一行要有json对象才有效。</span></span><br><span class="line"></span><br><span class="line"><span class="string">json.keys_under_root</span></span><br><span class="line"><span class="string">json.overwrite_keys</span></span><br><span class="line"><span class="string">json.add_error_key</span></span><br><span class="line"><span class="string">json.message_key</span></span><br><span class="line"><span class="string">json.ignore_decoding_error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">mutiline</span></span><br><span class="line"><span class="comment">#控制filebeat如果处理跨越多行的日志消息。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">exclude_files</span></span><br><span class="line"><span class="comment">#正则表达式列表，用于匹配你希望filebeat忽略的文件。默认无。</span></span><br><span class="line"></span><br><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  exclude_files:</span> <span class="string">['\.gz$']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">ignore_older</span></span><br><span class="line"><span class="comment">#如果启用此选项，filebeat将忽略在指定的事件跨度之前修改的所有文件。</span></span><br><span class="line"></span><br><span class="line"><span class="string">close_*</span></span><br><span class="line"><span class="comment">#用于在某个标准或时间后关闭收集器。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">close_inactive</span></span><br><span class="line"><span class="comment">#如果文件尚未在指定的时间内收获，则filebeat将关闭文件句柄。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">close_renamed</span></span><br><span class="line"><span class="comment">#filebeat会在重命名文件时关闭文件处理程序，请注意日志轮询。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">close_removed</span></span><br><span class="line"><span class="comment">#删除文件后，filebeat会关闭收集器。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">close_eof</span></span><br><span class="line"><span class="comment">#一旦到达文件末尾，filebeat就会关闭文件。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">clean_*</span></span><br><span class="line"><span class="comment">#用于清理注册表文件中的状态条目。</span></span><br><span class="line"></span><br><span class="line"><span class="string">clean_inactive</span></span><br><span class="line"><span class="comment">#filebeat在指定的不活动事件段过去后删除文件的状态。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">clean_removed</span></span><br><span class="line"><span class="comment">#如果在最后一个已知名称下无法在磁盘上找到文件，则filebeat会清除注册表中的文件。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">scan_frequency</span></span><br><span class="line"><span class="comment">#filebeat检查指定路径文件的频率。官方不建议将此值设置为小于1s。默认 10s。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">tail_files</span></span><br><span class="line"><span class="comment">#filebeat开始在每个文件的末尾而不是开头读取新文件。默认 false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">symlinks</span></span><br><span class="line"><span class="comment">#允许filebeat收集符号链接，它读取符号链接的原始文件。</span></span><br><span class="line"><span class="string">由于此选项可能会导致数据丢失，默认</span> <span class="string">disabled</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">backoff</span></span><br><span class="line"><span class="comment">#指定filebeat如何积极地抓取打开的文件以进行更新。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">max_backoff</span></span><br><span class="line"><span class="comment">#在到达eof后再次检查文件之间filebeat等待的最长时间。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">backoff_factor</span></span><br><span class="line"><span class="comment">#指定等待时间增加的速度。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">harvester_limit</span></span><br><span class="line"><span class="comment">#限制一个input并行启动的收集器数量。</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="stdin-1"><a href="#stdin-1" class="headerlink" title="stdin"></a>stdin</h4><p>使用<code>stdin input</code>从标准输入读取事件。<strong>此输入不可与其它输入类型同时运行。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">stdin</span></span><br></pre></td></tr></table></figure><p>stdin input 配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">encoding</span></span><br><span class="line"></span><br><span class="line"><span class="string">exclude_lines</span></span><br><span class="line"><span class="string">include_lines</span></span><br><span class="line"></span><br><span class="line"><span class="string">harvester_buffer_size</span></span><br><span class="line"></span><br><span class="line"><span class="string">max_bytes</span></span><br><span class="line"></span><br><span class="line"><span class="string">json</span></span><br><span class="line"></span><br><span class="line"><span class="string">multiline</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="udp-1"><a href="#udp-1" class="headerlink" title="udp"></a>udp</h4><p>使用 udp input通过udp读取事件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">udp</span></span><br><span class="line"><span class="attr">  max_message_size:</span> <span class="number">10</span><span class="string">KB</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">"localhost:5678"</span></span><br></pre></td></tr></table></figure><p>udp input 配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过udp接收的最大消息大小，默认 10KB</span></span><br><span class="line"><span class="string">max_message_size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#udp host</span></span><br><span class="line"><span class="string">host</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="tcp-1"><a href="#tcp-1" class="headerlink" title="tcp"></a>tcp</h4><p>使用 tcp input 通过tcp读取事件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">tcp</span></span><br><span class="line"><span class="attr">    max_message_size:</span> <span class="number">10</span><span class="string">MB</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">"localhost:5679"</span></span><br></pre></td></tr></table></figure><p>tcp input 配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">max_message_size</span></span><br><span class="line"><span class="comment">#通过tcp接收的最大消息大小， 默认 10MB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#host and tcp port</span></span><br><span class="line"><span class="string">host</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定用于拆分事件的字符，默认 \n</span></span><br><span class="line"><span class="string">line_delimiter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭连接前不活动的秒数， 默认 300s</span></span><br><span class="line"><span class="string">timeout</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>使用docker input从docker container读取日志。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">docke</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">"/var/lib/docker/containers"</span></span><br><span class="line"><span class="attr">stream:</span> <span class="string">"all"</span></span><br><span class="line"><span class="attr">ids:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span></span><br><span class="line"><span class="comment">#必须填写容器ID</span></span><br></pre></td></tr></table></figure><p>docker input 配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">container.ids</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认 /var/lib/docker/containers</span></span><br><span class="line"><span class="string">container.path</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#从指定stream读取: all/stdout/stderr，默认 all</span></span><br><span class="line"><span class="string">container.stream</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">encoding</span></span><br><span class="line"></span><br><span class="line"><span class="string">exclude_line</span></span><br><span class="line"></span><br><span class="line"><span class="string">include_line</span></span><br><span class="line"></span><br><span class="line"><span class="string">harvester_buffer_size</span></span><br><span class="line"></span><br><span class="line"><span class="string">max_bytes</span></span><br><span class="line"></span><br><span class="line"><span class="string">json</span></span><br><span class="line"></span><br><span class="line"><span class="string">multiline</span></span><br><span class="line"></span><br><span class="line"><span class="string">exclude_files</span></span><br><span class="line"></span><br><span class="line"><span class="string">ignore_older</span></span><br><span class="line"></span><br><span class="line"><span class="string">close_*</span></span><br><span class="line"></span><br><span class="line"><span class="string">close_inactive</span></span><br><span class="line"></span><br><span class="line"><span class="string">close_renamed</span></span><br><span class="line"></span><br><span class="line"><span class="string">close_removed</span></span><br><span class="line"></span><br><span class="line"><span class="string">close_eof</span></span><br><span class="line"></span><br><span class="line"><span class="string">close_timeout</span></span><br><span class="line"></span><br><span class="line"><span class="string">clean_*</span></span><br><span class="line"></span><br><span class="line"><span class="string">clean_inactive</span></span><br><span class="line"></span><br><span class="line"><span class="string">clean_removed</span></span><br><span class="line"></span><br><span class="line"><span class="string">sacn_frequency</span></span><br><span class="line"></span><br><span class="line"><span class="string">tail_files</span></span><br><span class="line"></span><br><span class="line"><span class="string">symlinks</span></span><br><span class="line"></span><br><span class="line"><span class="string">backoff</span></span><br><span class="line"></span><br><span class="line"><span class="string">max_backoff</span></span><br><span class="line"></span><br><span class="line"><span class="string">backoff_factor</span></span><br><span class="line"></span><br><span class="line"><span class="string">harvester_limit</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="syslog-2"><a href="#syslog-2" class="headerlink" title="syslog"></a>syslog</h4><p>使用 syslog input通过tcp/udp/读取事件。</p><p>修改syslog配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rsyslog.d/filebeat.conf</span><br><span class="line"></span><br><span class="line">*.* @127.0.0.1:5678</span><br><span class="line"></span><br><span class="line">#重启服务</span><br><span class="line">systemctl restart rsyslog</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">syslog</span></span><br><span class="line">  <span class="string">protocol.udp:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">"localhost:5678"</span></span><br><span class="line"><span class="attr">max_message_size:</span> <span class="number">100</span><span class="string">KB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义索引</span></span><br><span class="line"><span class="string">setup.template.name:</span> <span class="string">"filebeat"</span></span><br><span class="line"><span class="string">setup.template.pattern:</span> <span class="string">"filebeat-*"</span></span><br><span class="line"><span class="string">setup.template.fields:</span> <span class="string">"fields.yml"</span></span><br><span class="line"><span class="string">setup.template.overwrite:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">out.elastisearch：</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["localhost:9200"]</span></span><br><span class="line"><span class="attr">  index:</span> <span class="string">"syslog-<span class="template-variable">%&#123;+yyyy.MM.dd&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>它的配置项就是tcp/udp的配置项。</p><p>之后查看主机端口情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -nltup | grep 5678</span><br><span class="line"></span><br><span class="line">udp        0      0 127.0.0.1:5678          0.0.0.0:*                           12434/filebeat</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="output-2"><a href="#output-2" class="headerlink" title="output"></a>output</h3><p>你可以通过在<code>filebet.yml</code>配置文件的<code>output</code>部分设置选项来配置filebeat以特定方式输出。只能定义一个输出。</p><p>filebeat支持如下输出：</p><ul><li>Elasticsearch</li><li>Logstash</li><li>Kafka</li><li>Redis</li><li>File</li><li>Console</li></ul><p><br></p><h4 id="elasticsearch-2"><a href="#elasticsearch-2" class="headerlink" title="elasticsearch"></a>elasticsearch</h4><p>filebeat使用es http api将事务发送到es。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;https://localhost:9200&quot;]</span><br><span class="line">  username: &quot;filebeat_internal&quot;</span><br><span class="line">  password: &quot;YOUR_PASSWORD&quot;</span><br><span class="line">  index: &quot;filebeat-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">  #ssl.certificate_authorities: [&quot;/etc/pki/root/ca.pem&quot;]</span><br><span class="line">  #ssl.certificate: &quot;/etc/pki/client/cert.pem&quot;</span><br><span class="line">  #ssl.key: &quot;/etc/pki/client/cert.key&quot;</span><br></pre></td></tr></table></figure><p>配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用/禁用output，默认 true</span></span><br><span class="line"><span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">hosts</span></span><br><span class="line"><span class="comment">#["hsot1:port1", "host2:port2", "host3:port3"]</span></span><br><span class="line"><span class="string">username</span></span><br><span class="line"><span class="comment">#建议为filebeat创建一个专门的用户用于发送事件，而不是使用es的用户</span></span><br><span class="line"><span class="string">password</span></span><br><span class="line"></span><br><span class="line"><span class="string">compression_level</span></span><br><span class="line"><span class="comment">#gzip压缩等级, 0-9，默认 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">worker</span></span><br><span class="line"><span class="comment">#每个配置主机向es发布事件的worker数，默认 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">parameters</span></span><br><span class="line"><span class="comment">#http 参数字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">protocol</span></span><br><span class="line"><span class="comment">#网络协议, http/https</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">path</span></span><br><span class="line"><span class="comment">#http api调用前面的http路径前缀</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">headers</span></span><br><span class="line"><span class="comment">#定义headers</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">proxy_url</span></span><br><span class="line"><span class="comment">#代理的url</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">index</span></span><br><span class="line"><span class="comment">#写到事件中的索引名，默认 "filebeat-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line"><span class="comment">#如果更改此设置，还需要配置setup.template.name和setup.template.pattern选项</span></span><br><span class="line"><span class="comment">#如果使用的是预先构建的kibana dashboard，还需要配置setup.dashboards.index选项</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">indices</span></span><br><span class="line"><span class="comment">#支持条件的索引选择器规则数组，基于格式字符串的字段访问和名称映射。</span></span><br><span class="line"><span class="string">indices.index:</span> <span class="string">要使用的索引格式字符串</span></span><br><span class="line"><span class="string">indices.mapping：</span> <span class="string">映射</span></span><br><span class="line"><span class="string">indices.default：</span> <span class="string">如果映射找不到匹配项的默认字符串值</span></span><br><span class="line"><span class="string">indices.when：</span> <span class="string">成功的条件才执行当前规则</span></span><br><span class="line"></span><br><span class="line"><span class="string">output.elasticsearch:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["http://localhost:9200"]</span></span><br><span class="line"><span class="attr">  index:</span> <span class="string">"logs-<span class="template-variable">%&#123;[beat.version]&#125;</span>-<span class="template-variable">%&#123;+yyyy.MM.dd&#125;</span>"</span></span><br><span class="line"><span class="attr">  indices:</span></span><br><span class="line"><span class="attr">    - index:</span> <span class="string">"critical-<span class="template-variable">%&#123;[beat.version]&#125;</span>-<span class="template-variable">%&#123;+yyyy.MM.dd&#125;</span>"</span></span><br><span class="line">      <span class="string">when.contains:</span></span><br><span class="line"><span class="attr">        message:</span> <span class="string">"CRITICAL"</span></span><br><span class="line"><span class="attr">    - index:</span> <span class="string">"error-<span class="template-variable">%&#123;[beat.version]&#125;</span>-<span class="template-variable">%&#123;+yyyy.MM.dd&#125;</span>"</span></span><br><span class="line">      <span class="string">when.contains:</span></span><br><span class="line"><span class="attr">        message:</span> <span class="string">"ERR"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">pipeline</span></span><br><span class="line"><span class="comment">#与indices类似，管道选择器配置数组</span></span><br><span class="line"></span><br><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  paths:</span> <span class="string">["/var/log/app/normal/*.log"]</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">"normal"</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  paths:</span> <span class="string">["/var/log/app/critical/*.log"]</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">"critical"</span></span><br><span class="line"></span><br><span class="line"><span class="string">output.elasticsearch:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["http://localhost:9200"]</span></span><br><span class="line"><span class="attr">  index:</span> <span class="string">"filebeat-<span class="template-variable">%&#123;[beat.version]&#125;</span>-<span class="template-variable">%&#123;+yyyy.MM.dd&#125;</span>"</span></span><br><span class="line"><span class="attr">  pipelines:</span></span><br><span class="line"><span class="attr">    - pipeline:</span> <span class="string">critical_pipeline</span></span><br><span class="line">      <span class="string">when.equals:</span></span><br><span class="line">        <span class="string">fields.type:</span> <span class="string">"critical"</span></span><br><span class="line"><span class="attr">    - pipeline:</span> <span class="string">normal_pipeline</span></span><br><span class="line">      <span class="string">when.equals:</span></span><br><span class="line">        <span class="string">fields.type:</span> <span class="string">"normal"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">max_retries</span></span><br><span class="line"></span><br><span class="line"><span class="string">bulk_max_size</span></span><br><span class="line"><span class="comment">#单个es批量挨批索引请求中要批量处理的最大事件数，默认 50</span></span><br><span class="line"></span><br><span class="line"><span class="string">backoff.init</span></span><br><span class="line"><span class="comment">#在网络错误之后尝试重连到es之前等待的秒数，默认 1s</span></span><br><span class="line"></span><br><span class="line"><span class="string">backoff.max</span></span><br><span class="line"><span class="comment">#在网络错误后尝试连接到es之前等待的最大秒数，默认 60s</span></span><br><span class="line"></span><br><span class="line"><span class="string">timeout</span></span><br><span class="line"><span class="comment">#超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="string">ssl</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h4><p><br><br><br></p><h4 id="kafka-2"><a href="#kafka-2" class="headerlink" title="kafka"></a>kafka</h4><p><br><br><br></p><h4 id="redis-2"><a href="#redis-2" class="headerlink" title="redis"></a>redis</h4><p>redis output将事件插入redis list或redis channel。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">output.redis:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">"localhost"</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">"filebeat"</span></span><br><span class="line">  <span class="comment">#自定义key-name</span></span><br><span class="line">  <span class="comment">#password:</span></span><br><span class="line">  <span class="comment">#db:</span></span><br><span class="line">  <span class="comment">#data_type: 'list'</span></span><br></pre></td></tr></table></figure><p>配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用/禁用output</span></span><br><span class="line"><span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">hosts</span></span><br><span class="line"><span class="string">port</span></span><br><span class="line"><span class="comment">#可将端口写在hosts里，默认6379</span></span><br><span class="line"><span class="string">username</span></span><br><span class="line"><span class="string">password</span></span><br><span class="line"><span class="string">db</span></span><br><span class="line"><span class="string">key</span></span><br><span class="line"><span class="string">datatype</span></span><br><span class="line"><span class="comment">#默认 list</span></span><br><span class="line"><span class="string">codec</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">keys</span></span><br><span class="line"><span class="string">keys.key</span></span><br><span class="line"><span class="string">keys.mapping</span></span><br><span class="line"><span class="string">keys.default</span></span><br><span class="line"><span class="string">keys.when</span></span><br><span class="line"></span><br><span class="line"><span class="string">output.redis:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["localhost"]</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">"default_list"</span></span><br><span class="line"><span class="attr">  keys:</span></span><br><span class="line"><span class="attr">    - key:</span> <span class="string">"info_list"</span>   <span class="comment"># send to info_list if `message` field contains INFO</span></span><br><span class="line">      <span class="string">when.contains:</span></span><br><span class="line"><span class="attr">        message:</span> <span class="string">"INFO"</span></span><br><span class="line"><span class="attr">    - key:</span> <span class="string">"debug_list"</span>  <span class="comment"># send to debug_list if `message` field contains DEBUG</span></span><br><span class="line">      <span class="string">when.contains:</span></span><br><span class="line"><span class="attr">        message:</span> <span class="string">"DEBUG"</span></span><br><span class="line"><span class="attr">    - key:</span> <span class="string">"<span class="template-variable">%&#123;[fields.list]&#125;</span>"</span></span><br><span class="line"><span class="attr">      mapping:</span></span><br><span class="line"><span class="attr">        "http":</span> <span class="string">"frontend_list"</span></span><br><span class="line"><span class="attr">        "nginx":</span> <span class="string">"frontend_list"</span></span><br><span class="line"><span class="attr">        "mysql":</span> <span class="string">"backend_list"</span></span><br><span class="line"></span><br><span class="line"><span class="string">loadbalance</span></span><br><span class="line"><span class="comment">#如果配置了多个主机，则输出插件会将已发布的事件负载均衡到所有redis主机上</span></span><br><span class="line"></span><br><span class="line"><span class="string">timeout</span></span><br><span class="line"><span class="string">max_retries</span></span><br><span class="line"><span class="string">bulk_max_size</span></span><br><span class="line"><span class="string">ssl</span></span><br><span class="line"><span class="string">proxy_url</span></span><br><span class="line"><span class="string">proxy_use_local_resolver</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="file-2"><a href="#file-2" class="headerlink" title="file"></a>file</h4><p>file output将事务转储到文件中，每个事务都是json格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">output.file:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">"/tmp/filebeat"</span></span><br><span class="line"><span class="attr">  filename:</span> <span class="string">filebeat</span></span><br></pre></td></tr></table></figure><p>配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="string">path</span></span><br><span class="line"></span><br><span class="line"><span class="string">filename</span></span><br><span class="line"></span><br><span class="line"><span class="string">rotate_every_kb</span></span><br><span class="line"><span class="comment">#默认 10 240KB</span></span><br><span class="line"></span><br><span class="line"><span class="string">number_of_files</span></span><br><span class="line"><span class="comment">#路径下要保存的最大文件数</span></span><br><span class="line"></span><br><span class="line"><span class="string">permissions</span></span><br><span class="line"><span class="comment">#创建的文件权限， 默认 0600</span></span><br><span class="line"></span><br><span class="line"><span class="string">codec</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="console"><a href="#console" class="headerlink" title="console"></a>console</h4><p>console output将事件以json格式输出到标准输出。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">output.console:</span></span><br><span class="line"><span class="attr">  pretty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pretty</span></span><br><span class="line"><span class="comment">#美化输出， 默认 false</span></span><br><span class="line"></span><br><span class="line"><span class="string">codec</span></span><br><span class="line"></span><br><span class="line"><span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="string">bulk_max_size</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="loadbalance"><a href="#loadbalance" class="headerlink" title="loadbalance"></a>loadbalance</h3><p>filebeat提供配置项，用于将事件发送到多个主机时微调负载均衡。<br>loadbalance对redis, logstash, es output可用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">output.logstash:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["localhost:5044",</span> <span class="string">"localhost:5045"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  loadbalance:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="Kibana文档"><a href="#Kibana文档" class="headerlink" title="Kibana文档"></a>Kibana文档</h1><p>Kibana是一个开源分析和可视化平台，旨在与Elasticsearch合作。你可使用Kibana来检索(search)，查看(view)存储在Elasticsearch索引中的数据并与其进行交互(interact)。你可以很轻松地执行高级数据分析，并在各种图表、表格和地图中可视化你的数据。<br>Kibana可以很容易地理解大量的数据。基于浏览器的接口能够快速创建和分享动态仪表盘，实时显示Elasticsearch查询的变化。</p><p><br><br><br></p><h2 id="入门-2"><a href="#入门-2" class="headerlink" title="入门"></a>入门</h2><p>在开始前，请确保已安装Kibana并与Elasticsearch建立了连接。</p><p><br><br><br></p><h3 id="载入示例数据"><a href="#载入示例数据" class="headerlink" title="载入示例数据"></a>载入示例数据</h3><p>本节依赖如下示例数据：</p><ul><li>shakespeare.json: <a href="https://download.elastic.co/demos/kibana/gettingstarted/shakespeare_6.0.json" target="_blank" rel="noopener">https://download.elastic.co/demos/kibana/gettingstarted/shakespeare_6.0.json</a></li><li>accounts.zip: <a href="https://download.elastic.co/demos/kibana/gettingstarted/accounts.zip" target="_blank" rel="noopener">https://download.elastic.co/demos/kibana/gettingstarted/accounts.zip</a><ul><li><code>uzip accounts.zip</code></li></ul></li><li>logs.jsonl.gz: <a href="https://download.elastic.co/demos/kibana/gettingstarted/logs.jsonl.gz" target="_blank" rel="noopener">https://download.elastic.co/demos/kibana/gettingstarted/logs.jsonl.gz</a><ul><li><code>gunzip logs.jsonl.gz</code></li></ul></li></ul><p><br></p><p>shakespeare按以下模式组织：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"line_id"</span>: INT,</span><br><span class="line">    <span class="attr">"play_name"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"speech_number"</span>: INT,</span><br><span class="line">    <span class="attr">"line_number"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"speaker"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"text_entry"</span>: <span class="string">"String"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>accounts按以下模式组织：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"account_number"</span>: INT,</span><br><span class="line">    <span class="attr">"balance"</span>: INT,</span><br><span class="line">    <span class="attr">"firstname"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"lastname"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: INT,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"M or F"</span>,</span><br><span class="line">    <span class="attr">"address"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"employer"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"String"</span>,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"String"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>日志数据的模式有许多不同的字段，此例使用字段如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"memory"</span>: INT,</span><br><span class="line">    <span class="attr">"geo.coordinates"</span>: <span class="string">"geo_point"</span>,</span><br><span class="line">    <span class="attr">"@timestamp"</span>: <span class="string">"date"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>载入数据前，需要为字段设置映射。<br>映射将索引中的文档分成逻辑组，并指定字段特性。如可搜索性、标记化、分解为单独的单词。</p><p>在Kibana界面中的<code>Dev Tools</code>中输入如下命令，为shakespeare数据设置映射。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /shakespeare</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"mappings"</span>: &#123;</span><br><span class="line">  <span class="string">"doc"</span>: &#123;</span><br><span class="line">   <span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"speaker"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">    <span class="string">"play_name"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">    <span class="string">"line_id"</span>: &#123;<span class="string">"type"</span>: <span class="string">"integer"</span>&#125;,</span><br><span class="line">    <span class="string">"speech_number"</span>: &#123;<span class="string">"type"</span>: <span class="string">"integer"</span>&#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>日志数据集<code>logs.jsonl</code>需要映射才能将日志中的经纬度标记为地理位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /logstash-2015.05.18</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;geo&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;coordinates&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /logstash-2015.05.19</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;geo&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;coordinates&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /logstash-2015.05.20</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;geo&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;coordinates&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><code>accounts</code>数据集不需要映射，这一点上使用Elasticsearch的<code>bulk</code> API去载入数据集：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这些命令要花一些时间</span></span><br><span class="line"></span><br><span class="line">curl -H <span class="string">'Content-Type: application/x-ndjson'</span> -XPOST <span class="string">'localhost:9200/bank/account/_bulk?pretty'</span> --data-binary @accounts.json</span><br><span class="line">curl -H <span class="string">'Content-Type: application/x-ndjson'</span> -XPOST <span class="string">'localhost:9200/shakespeare/doc/_bulk?pretty'</span> --data-binary @shakespeare_6.0.json</span><br><span class="line">curl -H <span class="string">'Content-Type: application/x-ndjson'</span> -XPOST <span class="string">'localhost:9200/_bulk?pretty'</span> --data-binary @logs.jsonl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line"><span class="comment">#在Kibana中的DevTools中运行</span></span><br><span class="line">GET /_cat/indices?v</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="定义你的索引模式"><a href="#定义你的索引模式" class="headerlink" title="定义你的索引模式"></a>定义你的索引模式</h3><p>加载到Elasticsearch的每组数据集都有一个索引模式(index pattern)。索引模式是一个带有可匹配多个索引的可使用通配符的字符串。</p><p>在前面，Shakespeare数据集有一个名为: <code>shakespeare</code> 的索引；Account数据集有一个名为：<code>bank</code> 的索引。<br>如，在常见的日志文件中，一个典型的索引包含<code>YYYY.MM.DD</code>日期格式，类似于<code>logstash-2015.05.*</code>。</p><p>进入Kibana界面，点击<strong>Management</strong>， <strong>Index Patterns</strong>， <strong>Create Index Pattern</strong> 来创建一个索引模式。</p><p><code>shakespeare</code>和<code>account</code>数据集不包含 <code>time-series data</code>。确保为此数据集创建索引模式时，不包含基于时间的事件。<code>logs</code>数据集包含了时序数据，因此索引需要包含基于时间的事件。</p><ul><li><code>shakes*</code></li><li><code>ba*</code></li><li><code>logstash-2015*</code></li></ul><p><br></p><p><strong>定义索引模式时，与Elasticsearch匹配的索引必须存在。</strong></p><p>在Kibana的DevTools中输入: <code>GET _cat/indices</code> 来查看索引。</p><p><br><br><br></p><h3 id="数据发现"><a href="#数据发现" class="headerlink" title="数据发现"></a>数据发现</h3><p>点击Kibana界面中的Discover以显示数据发现功能。</p><p><br><br><br></p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>Visualize</p><p>Visualize允许你在Elasticsearch索引中创建数据的可视化。然后可以构建显示相关可视化的仪表盘。</p><p>Kibana的可视化基于Elasticsearch查询。通过使用一系列Elasticsearch聚合来提取和处理你的数据。你可以创建图标来显示你需要了解的趋势。</p><p><br></p><h3 id="创建可视化"><a href="#创建可视化" class="headerlink" title="创建可视化"></a>创建可视化</h3><p><br><br><br></p><hr><p><br></p><h1 id="Elasticsearch文档"><a href="#Elasticsearch文档" class="headerlink" title="Elasticsearch文档"></a>Elasticsearch文档</h1><h2 id="入门-3"><a href="#入门-3" class="headerlink" title="入门"></a>入门</h2><p>Elasticsearch是一个高度可扩展的开源全文搜索和分析引擎。它允许你快速、近乎实时地存储、搜索和分析大量数据。</p><p>Elasticsearch的几个例子：</p><ul><li>使用Elasticsearch来存储产品目录和库存，并为其提供搜索和建议</li><li>收集日志或交易数据，并分析和挖掘数据以便于查找趋势、统计数据、汇总或异常信息</li><li>价格提醒平台，允许顾客制定规则，收到相应规则信息</li><li>分析智能需求，快速调查、分析、可视化并对大量数据提出特别的问题</li></ul><p><br><br><br></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>Near Realtime(NRT)</strong><br>Elasticsearch是一个近乎实时的搜索平台。这意味着从索引文档到可搜索之间存在轻微的延迟(通常为1s)</p><p><br></p><p><strong>Cluster</strong><br>集群是一个或多个节点(服务器)的集合，它们一起保存所有数据，并提供跨节点的联合索引和搜索功能。集群由默认名为<code>elasticsearch</code>的唯一名称标识，它很重要。<br>确保不要在不同的环境中重复使用相同集群名称，否则可能会导致节点加入错误的集群。<br>集群可以只有一个节点！你也可以拥有多个独立的集群，每个集群有自己唯一的集群名称。</p><p><br></p><p><strong>Node</strong><br>节点是属于集群一部分的单个服务器，存储数据并参与集群的索引和索引。<br>与集群一样，一个节点由一个名称来标识，启动时随机分配的UUID。你也可以自定义节点名。<br>配置节点通过集群名称加入特定的集群，默认加入<code>elasticsearch</code>集群。<br>在单集群中，你可以拥有任意数量的节点。</p><p><br></p><p><strong>Index</strong><br>索引是一些具有相似特征的文档集合。例如，客户数据的索引，产品目录的索引，订单数据的索引……<br>索引由名称标识(必须全小写)，文档执行索引、搜索、更新和删除操作时引用索引。<br>在一个单集群中，你可以定义任何你想要的索引。</p><p><br></p><p><strong>Document</strong><br>文档是可被索引的基本信息单位。例如，单个客户的文档，单个产品的文档，单个订单的文档…<br>文档以JSON格式表示。<br>一条记录就是一个文档。</p><p><br></p><p><strong>Shards和Replicas</strong><br>索引可潜在地存储大量数据，这些数据可能会超多单个节点的硬件限制。例如，占用1TB磁盘空间的十亿文档的单个索引可能不适合单个节点的磁盘，或者可能太慢而无法单独向单个节点提供搜索请求。<br>为了解决这个问题，Elasticsearch提供了将索引细分为称为分片的多个碎片上。当你创建索引时，你可以简单定义所需的分片数量。<br>每个分片本身都是一个功能齐全且独立的索引，可以在集群中的任何节点上进行托管。</p><p>分片重要的两个原因：</p><ul><li>允许你水平分割/缩放内容量</li><li>允许分布和并行操作跨分片，从而提高性能和吞吐量(throughput)</li></ul><p>在任何时候都可能出现的网络环境中，强烈建议使用故障切换机制，以防止分片/节点因任何原因而消失。为此，Elasticsearch允许你将索引分片制作为一个或多个称为副本分片的副本集。<br>副本集分片永远不会分配到与原始分片相同的节点上。</p><p>副本集重要的原因：</p><ul><li>在分片/节点失效的情况下提供高可用性</li><li>因为搜索可以在所有副本上并行执行，它允许你扩展搜索量和吞吐量</li></ul><p>总而言之，每个索引都可以分成多个分片，索引也可以被复制。一旦复制，每个索引将具有主分片和副本分片。在创建索引时，可为每个索引定义分片和副本数量。在索引创建之后，你可以动态更改副本的数量，但无法更改分片的数量。</p><p>默认情况下，Elasticsearch中的每个索引都分配了5个主分片和副本。</p><p>每个Elasticsearch分片都是一个Lucene索引。单个Lucene索引有最大文档数量限制。</p><p><br><br><br></p><h2 id="探索你的集群"><a href="#探索你的集群" class="headerlink" title="探索你的集群"></a>探索你的集群</h2><p><strong>The REST API</strong><br>REST(Representational State Transfer)表现层状态转换，是一种万维网软件架构风格，目的是便于不同程序在网络中互相传递信息。REST通常使用HTTP, URI, XML和HTML这些协议和标准。</p><p>启动节点，下一步便是理解如何与它通信。幸运的是，Elasticsearch提供了一个非常全面(comprehensive)和强大的REST API，可以使用它与集群进行交互。</p><p>使用API可以完成如下几件事：</p><ul><li>检查集群、节点和索引的健康、状态和统计信息</li><li>管理集群、节点、索引数据和元数据</li><li>执行CRUD(create, read, update, delete)</li><li>执行高级搜索操作(分页、排序、过滤、脚本、聚合…)</li></ul><p><br><br><br></p><h3 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康"></a>集群健康</h3><p>基本健康检查，看看集群正在做什么。<br>使用<code>_cat</code>API检查集群健康。可使用Kibana Console或curl等工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Kibana</span><br><span class="line">GET /_cat/health?v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#cmd</span><br><span class="line">curl -X GET &quot;localhost:9200/_cat/health?v&quot; -u elastic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">epoch      timestamp cluster    status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1525330981 15:03:01  docker-elk yellow          1         1     32  32    0    0        6             0                  -                 84.2%</span><br></pre></td></tr></table></figure><p>集群健康：</p><ul><li>green: 万事OK(集群功能齐全)</li><li>yellow: 所有数据可用，但一些副本尚未分配(集群功能齐全)</li><li>red: 一些数据因某种原因不可用(集群部分功能)</li></ul><p>集群名称：</p><ul><li>集群名称被修改为<code>docker-elk</code></li></ul><p><br></p><p>列出集群中的节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/nodes?v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">127.0.0.1           47          74  93    3.18    3.13     2.90 mdi       *      LGrAIE5</span><br></pre></td></tr></table></figure><p>随机节点名： <code>LGrAIE5</code></p><p><br><br><br></p><h3 id="列出所有索引"><a href="#列出所有索引" class="headerlink" title="列出所有索引"></a>列出所有索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/indicies?v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">health status index                             uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">green  open   .monitoring-kibana-6-2018.04.27   bsKsurh7TKaCsnekwHs3yg   1   0        870            0    328.1kb        328.1kb</span><br><span class="line">green  open   .watcher-history-7-2018.04.28     zuq3rjI8S0OSS7vcZl7kSQ   1   0        954            0      1.4mb          1.4mb</span><br><span class="line">green  open   .kibana                           8t_7lqq4TFSfelA7phgv5g   1   0        142           18    191.8kb        191.8kb</span><br><span class="line">green  open   .monitoring-es-6-2018.04.28       vtUSjqaITT28CMHArpfNoA   1   0      20436            0      9.6mb          9.6mb</span><br><span class="line">yellow open   filebeat-6.2.4-2018.05.03         sK3lIvMXS8GoRbWYCjdgzg   3   1        568            0    348.6kb        348.6kb</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>创建一个名为<code>customer</code>的索引，然后列出索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#pretty漂亮JSON显示</span><br><span class="line">PUT /customer?pretty</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">curl -X PUT &quot;localhost:9200/zhang&quot; -u elastic:elastic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /_cat/indices?v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pri主分片，rep副本</span><br><span class="line">health status index                             uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   customer                          WQ3qEnPQRW6FpVIHYVJ7yA   5   1          0            0      1.1kb          1.1kb</span><br><span class="line">yellow open   zhang                             nkOUPOWERsS1PT_wEui67g   5   1          0            0      1.1kb          1.1kb</span><br></pre></td></tr></table></figure><p>你可能注意到了，索引的健康状态是<code>yellow</code>，表明有一些副本尚未分配。<br>这个索引发生这种情况的原因是Elasticsearch默认为这个索引创建了一个副本。由于此刻我们只有一个节点在运行，因此只有在其它几点加入集群后才能分配一个副本。一旦副本分配到另外的节点，健康状态会变成<code>green</code>。</p><p><br><br><br></p><h3 id="索引和查询文档"><a href="#索引和查询文档" class="headerlink" title="索引和查询文档"></a>索引和查询文档</h3><p>现在让我们把一些东西放入<code>customer</code>索引中。讲一个简单的customer文档放入customer索引中，ID为1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT /customer/_doc/1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">curl -X PUT -u elastic:elastic &quot;localhost:9200/customer/_doc/1?pretty&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;customer&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;result&quot; : &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 0,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /customer/_doc/1?pretty</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;customer&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#name:John Doe _id:1 _type:_doc _index:customer _score:1</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELETE /customer?pretty</span><br><span class="line"></span><br><span class="line">curl -X DELETE &quot;localhost:9200/customer?pretty&quot; -u elastic:elastic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>Elasticsearch几乎提示提供数据操作和搜索功能。从索引、更新、删除数据时可能会有1s延迟。数据在事物完成后立即可用。</p><p><strong>索引/替换 文档</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /customer/_doc/1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#如果我修改此处文档信息，则Elasticsearch会替换之前的文档</span><br><span class="line">PUT /customer/_doc/1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Zhang&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#name:Zhang _id:1 _type:_doc _index:customer _score:1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#或者新增一个文档</span><br><span class="line">PUT /customer/_doc/2?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Zhang&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#name:Zhang _id:2 _type:_doc _index:customer _score:1</span><br></pre></td></tr></table></figure><p><br></p><p><strong>未指定ID：</strong><br>ID是可选的。如果未指定ID，Elasticsearch会生成随机ID。<br>注意，此时使用<code>POST</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/_doc?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Zhang&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#name:Zhang _id:76xJJWMBddhqcmsO07A_ _type:_doc _index:customer _score:1</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>除了能够索引和替换文档，我们还可以更新文档。<br>Elasticsearch实际上并没有在原地就地更新，它是先删除旧文档，然后一次性更新索引新文档。</p><p>更新同样能够使用简单的脚本。<br>Elasticsearch提供了通过查询条件(类似于<code>SQL-UPDATE-WHERE</code>)更细多个文档的能力。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/_doc/1/_update?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123; &quot;name&quot;: &quot;Jane Doe&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#继续更新</span><br><span class="line">POST /customer/_doc/1/_update?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123; &quot;name&quot;: &quot;Jane Doe&quot;, &quot;age&quot;: 20&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#简单脚本</span><br><span class="line">#ctx._source指即将更新的当前源文档</span><br><span class="line">POST /customer/_doc/1/_update?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &quot;ctx._source.age += 5&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>也可通过API匹配查询，删除所匹配的文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /customer/_doc/2?pretty</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h3><p>Elasticsearch同样提供了使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/docs-bulk.html" target="_blank" rel="noopener"><code>_bulk</code>API</a>批量执行上述任何操作的功能。这是一种高效的机制，尽可能快地完成多项操作。</p><p>Bulk API不会因其中一个操作失败而停止，它将继续处理后面的动作。当它完成是，它会返回每个操作的状态，以便你可以检查是否失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /customer/_doc/_bulk?pretty</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_id&quot;: &quot;1&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;name&quot;: &quot;John Doe&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_id&quot;: &quot;2&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;name&quot;: &quot;Jane Doe&quot; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">POST /customer/_doc/_bulk?pretty</span><br><span class="line">&#123;&quot;update&quot;: &#123; &quot;_id&quot;: &quot;1&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;doc&quot;: &#123; &quot;name&quot;: &quot;John Doe becomes Jane Doe&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;delete&quot;: &#123; &quot;_id&quot;: &quot;2&quot; &#125; &#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="探索你的数据"><a href="#探索你的数据" class="headerlink" title="探索你的数据"></a>探索你的数据</h2><p><strong>简单数据集</strong><br>准备一个更加真实的数据集。如下生成的JSON文档，每个文档都有如下要点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;account_number&quot;: 0,</span><br><span class="line">    &quot;balance&quot;: 16623,</span><br><span class="line">    &quot;firstname&quot;: &quot;Bradshaw&quot;,</span><br><span class="line">    &quot;lastname&quot;: &quot;Mckenzie&quot;,</span><br><span class="line">    &quot;age&quot;: 29,</span><br><span class="line">    &quot;gender&quot;: &quot;F&quot;,</span><br><span class="line">    &quot;address&quot;: &quot;244 Columbus Place&quot;,</span><br><span class="line">    &quot;employer&quot;: &quot;Euron&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;bradshawmckenzie@euron.com&quot;,</span><br><span class="line">    &quot;city&quot;: &quot;Hobucken&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;CO&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>载入这个数据集</strong><br>下载Elasticsearch提供的<a href="https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json" target="_blank" rel="noopener">accounts.json</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application/json&quot; -u elastic:elastic -XPOST &quot;localhost:9200/bank/_doc/_bulk?pretty&amp;refresh&quot; --data-binary &quot;@accounts.json&quot;</span><br><span class="line">curl &quot;localhost:9200/_cat/indices?v&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">health status index                             uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   bank                              PGSvNwQwQIOhMDr1nmXIuw   5   1       1000            0    474.7kb        474.7kb</span><br></pre></td></tr></table></figure><p>这样我们成功批量索引了1000个文档到bank索引。</p><p><br><br><br></p><h3 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h3><p>现在让我们做一些简单的搜索(search)。有两种基本搜索方式：</p><ul><li>REST request URI</li><li>REST request body<ul><li>以可读的JSON格式定义你的搜索，推荐方式</li></ul></li></ul><p><br></p><p>搜索的REST API可从<code>_search</code>端点访问:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#在bank索引下的_search端点搜索</span><br><span class="line">#匹配所有文档，并以账户字段顺序排列</span><br><span class="line">#最后以可读的JSON格式输出结果</span><br><span class="line">GET /bank/_search?q=*&amp;sort=account_number:asc&amp;pretty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 63,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1000,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;0&quot;,</span><br><span class="line">      &quot;sort&quot;: [0],</span><br><span class="line">      &quot;_score&quot; : null,</span><br><span class="line">      &quot;_source&quot; : &#123;&quot;account_number&quot;:0,&quot;balance&quot;:16623,&quot;firstname&quot;:&quot;Bradshaw&quot;,&quot;lastname&quot;:&quot;Mckenzie&quot;,&quot;age&quot;:29,&quot;gender&quot;:&quot;F&quot;,&quot;address&quot;:&quot;244 Columbus Place&quot;,&quot;employer&quot;:&quot;Euron&quot;,&quot;email&quot;:&quot;bradshawmckenzie@euron.com&quot;,&quot;city&quot;:&quot;Hobucken&quot;,&quot;state&quot;:&quot;CO&quot;&#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;bank&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;sort&quot;: [1],</span><br><span class="line">      &quot;_score&quot; : null,</span><br><span class="line">      &quot;_source&quot; : &#123;&quot;account_number&quot;:1,&quot;balance&quot;:39225,&quot;firstname&quot;:&quot;Amber&quot;,&quot;lastname&quot;:&quot;Duke&quot;,&quot;age&quot;:32,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;880 Holmes Lane&quot;,&quot;employer&quot;:&quot;Pyrami&quot;,&quot;email&quot;:&quot;amberduke@pyrami.com&quot;,&quot;city&quot;:&quot;Brogan&quot;,&quot;state&quot;:&quot;IL&quot;&#125;</span><br><span class="line">    &#125;, ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>took</code>: Elasticsearch执行搜索花费的事件(ms)</li><li><code>timed_out</code>: 查询超时与否</li><li><code>_shards</code>: 搜索了多少分片，包含成功和失败的次数</li><li><code>hits</code>: 搜索结果</li><li><code>hits.total</code>: 匹配搜索的文档数</li><li><code>hits.hits</code>: 搜索结果数组(默认前十个文档)</li><li><code>hits.sort</code>: 结果的排序键</li><li><code>hits._score</code>, <code>max_score</code>: 忽略的字段</li></ul><p><br></p><p>REST request body方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123; &quot;account_number&quot;: &quot;asc&quot; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h3><p>Elasticsearch提供了可用于执行查询的JSON格式语言，这被称为 <strong>Query DSL</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#上一个查询栗子</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理<code>query</code>参数，我们还可以传递其它参数来搜索结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#size参数，返回从from开始多少个文档</span><br><span class="line">#from未指定，就默认为0</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#from参数，指定从哪个文档索引开始</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;from&quot;: 10,</span><br><span class="line">  &quot;size&quot;: 10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#sort参数</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: &#123; &quot;balance&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="执行搜索"><a href="#执行搜索" class="headerlink" title="执行搜索"></a>执行搜索</h3><p>搜索某些字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;account_number&quot;, &quot;balance&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;account_number&quot;: 20 &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_phrase&quot;: &#123; &quot;address&quot;: &quot;mill lane&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>布尔查询：</p><ul><li><code>must</code></li><li><code>should</code></li><li><code>must_not</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#must</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;lane&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#should</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;lane&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#must_not</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;lane&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#组合使用must,must_not,should</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;age&quot;: &quot;40&quot; &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;state&quot;: &quot;ID&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>前面我们跳过了称为文档分数的<code>_score</code>字段。它是文档与搜索查询匹配度相度量的一个数值。数值越大，与文档越相关。</p><p>但查询并不总是需要产生分数，特别是当它们仅用于过滤时。Elasticsearch检测这些情况并自动优化查询执行，以便不计算无用的分数。</p><ul><li><code>range query</code>: 通过一系列值来过滤文档</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;balance&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 20000,</span><br><span class="line">            &quot;lte&quot;: 30000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了前面这些查询类型，还有很多其它类型。由于只是入门章节，所以并不会涉及太多太难。</p><p><br><br><br></p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合(Aggregation)提供了从数据中分组和提取统计的功能。<br>考虑聚合最简单方法是将其大致等同于SQL <code>GROUP BY</code>和SQL聚合函数。</p><p>在Elasticsearch中，你可以执行返回匹配的搜索，同时还可以在一个响应中返回与匹配不同的聚合结果。你可以运行查询和多个聚合，并一次性获得多个操作的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#类似的SQL</span><br><span class="line">SELECT state, COUNT(*) FROM bank GROUP BY state ORDER BY COUNT(*) DESC</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#group, average</span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;average_balance&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_age&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 20,</span><br><span class="line">            &quot;to&quot;: 30</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 30,</span><br><span class="line">            &quot;to&quot;: 40</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 40,</span><br><span class="line">            &quot;to&quot;: 50</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;group_by_gender&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;gender.keyword&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;average_balance&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有很多其它聚合方法，请参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-aggregations.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-aggregations.html</a>。</p><p><br><br><br></p><h2 id="elasticsearch-py"><a href="#elasticsearch-py" class="headerlink" title="elasticsearch-py"></a>elasticsearch-py</h2><p>Python可使用<code>elasticsearch-py</code>模块来操作Elasticsearch，具体文档请查看Python这篇文章的elasticsearch第三方模块。</p><p><br><br><br></p><hr><p><br></p><h1 id="Lucene查询"><a href="#Lucene查询" class="headerlink" title="Lucene查询"></a>Lucene查询</h1><p>ElasticSearch提供的一些查询方式(query types)能够被Lucene的查询解析器(query parser)语法所支持。可直接在Kibana的发现面板上直接使用。</p><p><br></p><h2 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h2><ul><li>string</li><li>“string1 string2”</li></ul><p>Kibana会匹配和展示对应的string。</p><p><br></p><h2 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h2><ul><li><code>key:value</code>: 全文搜索</li><li><code>&quot;key:value&quot;</code>： 精确搜索</li><li><code>_exists_:key</code>: 返回结果中需要有key字段</li><li><code>_missing__:key</code>: 不能含有key字段</li></ul><p>如:<code>http.code:502</code>，<code>log-levle:warn</code></p><p><br></p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul><li><code>?</code></li><li><code>*</code></li></ul><p>这两者都不能用作第一个字符，如<code>?.txt, *.txt</code></p><p><br></p><h2 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>它也支持性能较差的正则表达式。</p><p><br></p><h2 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h2><ul><li><code>~</code>: 在一个单词后面加上<code>~</code>启用模糊搜索</li><li><code>~n</code>： 设置编辑距离(整数)，指定需要多少相似度，越大越接近原始值</li><li>在短语后面加<code>~</code>，可以搜索到被隔开或顺序不同的单词</li></ul><p><code>first~</code>也可以匹配到frist<br><code>&quot;hello world&quot;~5</code>表示两者之间可以隔着5个单词</p><p><br></p><h2 id="范围搜索"><a href="#范围搜索" class="headerlink" title="范围搜索"></a>范围搜索</h2><p>数值/时间/IP/字符串 类型的字段可以对某一范围进行查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">length:[100 TO 200]</span><br><span class="line">sip:[&quot;172.24.20.110&quot; TO &quot;172.24.20.140&quot;]</span><br><span class="line">date:&#123;&quot;now-6h&quot; TO &quot;now&quot;&#125;</span><br><span class="line">tag:&#123;b TO e&#125; 搜索b到e中间的字符</span><br><span class="line">count:[10 TO *] * 表示一端不限制范围</span><br><span class="line">count:[1 TO 5&#125; [ ] 表示端点数值包含在范围内，&#123; &#125; 表示端点数值不包含在范围内，可以混合使用，此语句为1到5，包括1，不包括5</span><br><span class="line"></span><br><span class="line">可以简化成以下写法：</span><br><span class="line">age:&gt;10</span><br><span class="line">age:&lt;=10</span><br><span class="line">age:(&gt;=10 AND &lt;20)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>使用<code>^</code>使一个词语比另一个搜索优先级更高，默认为1。可以为0~1之间的浮点数，来降低优先级</p><p><br></p><h2 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h2><ul><li><code>AND</code></li><li><code>OR</code></li><li><code>NOT</code></li><li><code>+</code>: 搜索结果中必须包含此项</li><li><code>-</code>: 不能包含此项</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a OR b) AND c</span><br><span class="line"></span><br><span class="line">host:(baidu OR qq OR google) AND host:(com OR cn)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ul><li><code>\</code>：使用转义字符来转移特殊字符</li></ul><p><br></p><hr><p><br></p><h1 id="Metricbeat"><a href="#Metricbeat" class="headerlink" title="Metricbeat"></a>Metricbeat</h1><p>Metricbeat是一个轻量级的托运器(lightweight shipper), 你可从安装该软件的操作系统和服务器上定期收集指标信息。它可将收集到的指标信息或统计信息发送到指定的输出(如elasticsearch/Logstash)。</p><p>具体使用方法也和Filebeat差不多！</p><p>Metricbeat通过从服务器上运行的系统和服务收集指标来帮助你监控服务器。如：</p><ul><li>Apache</li><li>Docker</li><li>Kafka</li><li>Kubernets</li><li>HAProxy</li><li>MongoDB</li><li>MySQL</li><li>Nginx</li><li>PHP-FPM</li><li>PostgreSQL</li><li>Redis</li><li>RabbitMQ</li><li>System</li><li>Zookeeper</li><li>…</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="Packetbeat"><a href="#Packetbeat" class="headerlink" title="Packetbeat"></a>Packetbeat</h1><p>Packetbeat是一个实时网络数据包分析器，可与Elasticsearch一起提供应用程序监控和性能分析。</p><p>Packetbeat通过捕获应用服务器之间的网络流量，解码应用层协议(HTTP, MySQL, Redis…)，将请求与响应关联起来，并记录每个事务感兴趣的字段。<br>Packetbeat可以帮助你轻松地注意到后端应用程序的问题，例如错误或性能问题，并且可以更快地排除故障并进行修复。<br>Packetbeat捕获服务器之间的流量，即时分析应用层协议，并将这些消息关联到事务中。并将这些事务插入到Elasticsearch或使用Redis和Logstash的队列中。</p><p>Packetbeat支持的协议如下:</p><ul><li>ICMP</li><li>DNS</li><li>HTTP</li><li>AMQP</li><li>Cassandra</li><li>MySQL</li><li>PostgreSQL</li><li>Redis</li><li>MongoDB</li><li>Thrift-RPC</li><li>TLS</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="Heartbeat"><a href="#Heartbeat" class="headerlink" title="Heartbeat"></a>Heartbeat</h1><p>Heartbeat是一个轻量级守护进程，用以定期检查服务的状态并确定它们是否可用。与Metricbeat不同，Metricbeat只会告诉你服务器是down/up，而Heartbeat会告诉你服务是否可以访问(reached)。</p><p>当你需要验证是否满足服务级别协议的服务正常运行时间时，Heartbeat非常有用。当需要验证外部没有人能访问企私有服务器上的服务时，这也很有用。<br>你可以配置Heartbeat来ping指定主机名的所有DNS可解析的IP地址。这样，你可以检查所有负载均衡的服务，看他们是否可用。<br>配置Heartbeat时，你可以指定用于表示要检查的主机名的监视器(monitor)。每台监视器都根据你指定的时间表运行。</p><p>Heartbeat目前支持通过通过如下方式监控主机：</p><ul><li><p>ICMP<br>当你指向检查服务是否可用时，请使用icmp监视器。此功能需要root权限</p></li><li><p>TCP<br>支持SSL/TLS/proxy<br>你可以选择配置此监视器，通过发送 and/or 接收自定义有效内容来验证端点</p></li><li><p>HTTP<br>支持SSL/TLS/proxy<br>你可以选择配置此监视器，来验证该服务是否会返回预期的响应。如特定状态码，响应header或内容</p></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="Auditbeat"><a href="#Auditbeat" class="headerlink" title="Auditbeat"></a>Auditbeat</h1><p>Auditbeat是一个轻量化的托运器(shipper)，在系统上安装它，以审核(audit)系统上用户和进程的活动。</p><p>例如，你可以使用Auditbeat从Linux Audit Framework收集和集中审计事件。你还可以使用它来检查关键文件的改动，并识别潜在的安全策略违规。</p><p><br><br><br></p><hr><p><br></p><h1 id="Topbeat"><a href="#Topbeat" class="headerlink" title="Topbeat"></a>Topbeat</h1><p>在v5.0, Topbeat被Metricbeat取代！</p><p>Topbeat的版本与其它Elastic Stack组件不同步，ES是v6.2.4， 而Topbeat是v1.3。所以需要额外安装repo.</p><p>Topbeat是一个轻量化的托运器(shipper)，来定期读取系统和每个进程的CPU和内存统计信息，然后为Elasticsearch中的统计信息编制索引。</p><p><br></p><p>Topbeat通过收集如下指标来帮助你监控你的服务器:</p><p><strong>ystem-wide statistics</strong></p><ul><li>system load<ul><li>1, 5, 15</li></ul></li><li>system wide CPU usage<ul><li>user, system, idle, IOWait</li></ul></li><li>system wide memory uusage<ul><li>total, used, free</li></ul></li><li>system wide swap usage<ul><li>total, used, free</li></ul></li></ul><p><strong>Per-process statistics</strong></p><ul><li>process name</li><li>process parent pid</li><li>process state</li><li>process pid</li><li>process CPU usage</li><li>process Memory usage</li></ul><p><strong>File system statistics</strong></p><ul><li>avaliable disks</li><li>name, type, mounted</li><li>total, used, free, available</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h1><p>APM(Application Performance Monitoring)应用程序性能监控，自动收集应用程序内部的深入性能指标和错误。</p><p>它由三个组件组成:</p><ul><li>Agents<ul><li>Node.js</li><li>Django</li><li>Flask</li><li>Ruby on Rails</li><li>Rack</li><li>JS</li></ul></li><li>Server</li><li>UI</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="ElastAlert"><a href="#ElastAlert" class="headerlink" title="ElastAlert"></a>ElastAlert</h1><ul><li>GitHub: <a href="https://github.com/Yelp/elastalert" target="_blank" rel="noopener">https://github.com/Yelp/elastalert</a></li><li>Docs: <a href="https://elastalert.readthedocs.io" target="_blank" rel="noopener">https://elastalert.readthedocs.io</a></li></ul><p><br></p><p>ElastAlert是一个简单灵活的用于Elasticsearch中数据异常的告警框架。它使用Python2.x编写，不支持Python3。<br>ElastAlert功能与Watcher类似，只不过Watcher是Elastic Enterprise中才支持，而ElastAlert是一个开源软件。</p><p>Kibana非常适合可视化和查询数据，但它需要一个配套工具来对数据进行告警，出于这种需要，ElastAlert诞生了。<br>如果你几乎实时地将数据写入Elasticsearch，并希望在数据与某些模式匹配时收到告警，则ElastAlert就是适合你的工具。</p><p><br><br><br></p><h2 id="综述-1"><a href="#综述-1" class="headerlink" title="综述"></a>综述</h2><p>ElastAlert被设计为可靠、高度模块化、易于设置和配置。<br>它使用两种类型的组件与Elasticsearch进行结合：</p><ul><li>rule type</li><li>alerts</li></ul><p>定期检查Elasticsearch并将数据传递给规则类型，它确定了何时找到匹配项。当匹配发生时，它触发一个或多个报警，而这些报警便采取具体行动。</p><p>每组规则定义了一个查询、一个规则类型和一组警报。</p><p><br></p><p>ElasAlert几种通用规则类型：</p><ul><li><p>frequency<br>Match where there are X events in Y time</p></li><li><p>spike<br>Match when the rate of events increases or decreases</p></li><li><p>flatline<br>Match when there are less than X events in Y time</p></li><li><p>blacklist/whitelist<br>Match when a certain field matches a blacklist/whitelist</p></li><li><p>any<br>Match on any event matching a given filter</p></li><li><p>change<br>Match when a field has two different values within some time</p></li></ul><p><br></p><p>ElasAlert几种内建报警类型：</p><ul><li>Command</li><li>Email</li><li>JIRA</li><li>OpsGenie</li><li>SNS</li><li>HipChat</li><li>Slack</li><li>Telegram</li><li>Debug</li><li>Stomp</li></ul><p><br></p><p><strong>你也可以导入和编写规则类型和报警类型。</strong></p><p><br></p><p>除了这些基础用法外，还有许多其它功能:</p><ul><li>Alerts link to Kibana dashboards</li><li>Aggregate counts for arbitrary fields</li><li>Combine alerts into periodic reports</li><li>Separate alerts by using a unique key field</li><li>Intercept and enhance match data</li></ul><p><br><br><br></p><h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><p>Reliability</p><p>ElasAlert有多种功能，可在restart或Elasticsearch不可用时使其更可靠:</p><ul><li>ElastAlert将其状态保存到Elasticsearch，并在启动时先恢复先前停止的状态</li><li>如果Elasticsearch没有响应，ElastAlert将等待它恢复，然后再继续</li><li>抛出错误的警报可能会在一段时间内自动重试</li></ul><p><br><br><br></p><h2 id="模块性"><a href="#模块性" class="headerlink" title="模块性"></a>模块性</h2><p>Modularity</p><p>ElastAlert有3个主要组件，可作为模块导入或自定义。</p><ul><li><p><strong>rule types</strong><br>规则类型负责处理从Elasticsearch返回的数据。</p></li><li><p><strong>alerts</strong><br>警报负责根据匹配采取行动。</p></li><li><p><strong>enhancements</strong><br>增强功能是一种拦截警报并以某种方式修改或增强警报的方法。</p></li></ul><p><br><br><br></p><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>ElastAlert有一个全局配置文件<code>config.yaml</code>，它定义了几个操作方面:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#ElastAlert将持续查询熊当前到buffer_time前的窗口</span><br><span class="line">buffer_time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ES</span><br><span class="line">es_host</span><br><span class="line">es_port</span><br><span class="line"></span><br><span class="line">#可选</span><br><span class="line">es_username</span><br><span class="line">es_password</span><br><span class="line">#URL prefix for the Elasticsearch endpoint</span><br><span class="line">es_url_prefix</span><br><span class="line">#Method for querying Elasticsearch，默认GET</span><br><span class="line">es_send_get_body_as</span><br><span class="line">#默认20</span><br><span class="line">es_conn_timeout</span><br><span class="line"></span><br><span class="line">#可选配置</span><br><span class="line">use_ssl</span><br><span class="line">verify_certs</span><br><span class="line">client_cert</span><br><span class="line">client_key</span><br><span class="line">ca_certs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#规则配置文件目录</span><br><span class="line">rules_folder</span><br><span class="line">#递归，默认true</span><br><span class="line">scan_subdirectories</span><br><span class="line"></span><br><span class="line">#查询频率，如 minutes: 5</span><br><span class="line">run_every</span><br><span class="line"></span><br><span class="line">#elastalert将存储数据的索引名称</span><br><span class="line">writeback_index</span><br><span class="line"></span><br><span class="line">#报警失败的重试窗口</span><br><span class="line">alert_time_limit</span><br><span class="line"></span><br><span class="line">#单个查询中从es下载的最大文档数，默认10 000</span><br><span class="line">max_query_size</span><br><span class="line"></span><br><span class="line">scroll_keepalive</span><br><span class="line"></span><br><span class="line">#聚合在一起的最大警报数，默认10 000</span><br><span class="line">max_aggregation</span><br><span class="line"></span><br><span class="line">#ElastAlert从最近开始运行的查询开始的最长时间</span><br><span class="line">old_query_limit</span><br><span class="line"></span><br><span class="line">#当抛出未知异常时，禁用rule。 默认true</span><br><span class="line">disable_rules_on_error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Email</span><br><span class="line">#接收通知的邮件</span><br><span class="line">nottify_email</span><br><span class="line">#默认值ElastAlert</span><br><span class="line">from_addr</span><br><span class="line">smpt_host</span><br><span class="line">email_reply_to</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Amazon Elasticsearch Service</span><br><span class="line">aws_region</span><br><span class="line">boto_profile</span><br><span class="line">profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在将文档写入Elasticsearch前，ElastAlert使用下划线替换字段名中的任意一个点(.)。默认值False</span><br><span class="line">replace_dots_in_field_names</span><br><span class="line"></span><br><span class="line">#es中用于字符串多字段的子字段的后缀</span><br><span class="line">string_multi_field_name</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="运行ElastAlert"><a href="#运行ElastAlert" class="headerlink" title="运行ElastAlert"></a>运行ElastAlert</h2><p>运行：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python elastalert/elastalert.py</span><br></pre></td></tr></table></figure><p>一些参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--config</span><br><span class="line"></span><br><span class="line">--debug</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">--start</span><br><span class="line">--end</span><br><span class="line"></span><br><span class="line">--rule</span><br><span class="line"></span><br><span class="line">--slience</span><br><span class="line"></span><br><span class="line">--es_debug</span><br><span class="line">--es_debug_trace</span><br><span class="line"></span><br><span class="line">--pin_rules</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="首次运行ElastAlert"><a href="#首次运行ElastAlert" class="headerlink" title="首次运行ElastAlert"></a>首次运行ElastAlert</h2><p>Running ElastAlert for the First Time</p><p><br></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>Requirements:</p><ul><li>es</li><li>ISO8601 or Unxi timestamped data</li><li>Python 2.7</li><li><code>python2-pip python-dev libffi-dev libssl-dev</code></li></ul><p><br></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#依赖</span><br><span class="line">yum install python2-pip python-dev</span><br><span class="line"></span><br><span class="line">#setuptools &gt;= 11.3</span><br><span class="line">pip2 install --upgrade setuptools</span><br><span class="line"></span><br><span class="line">#elasticsearch &gt;= 5.0</span><br><span class="line">pip2 install elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip2 install elastalert</span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">#git clone https://github.com/Yelp/elastalert.git</span><br><span class="line">#cd elastalert</span><br><span class="line">#python2 setup.py install</span><br></pre></td></tr></table></figure><p>之后修改配置文件，我将ElastAlert目录移动到了<code>/etc/</code>下。<br>修改配置文件，并将ElastAlert的<code>config.yaml.example</code>配置保存为<code>config.yaml</code>。</p><p><br></p><h3 id="设置es"><a href="#设置es" class="headerlink" title="设置es"></a>设置es</h3><p>Setting Up Elasticsearch</p><p>ElastAlert将有关其查询及报警的信息和元数据报错到Elasticsearch。这虽然不是必须的，但却强烈建议使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#创建一个用于ElastAlert写入的index</span><br><span class="line">elastalert-create-index</span><br><span class="line"></span><br><span class="line">#会有es主机，端口，用户，密码和索引相关信息</span><br><span class="line">Enter Elasticsearch host: zhang21</span><br><span class="line">Enter Elasticsearch port: 9200</span><br><span class="line">Use SSL? t/f: f</span><br><span class="line">Enter optional basic-auth username (or leave blank):</span><br><span class="line">Enter optional basic-auth password (or leave blank):</span><br><span class="line">Enter optional Elasticsearch URL prefix (prepends a string to the URL of every request): </span><br><span class="line">New index name? (Default elastalert_status)</span><br><span class="line">Name of existing index to copy? (Default None)</span><br><span class="line">Elastic Version:6</span><br><span class="line">Mapping used for string:&#123;&apos;type&apos;: &apos;keyword&apos;&#125;</span><br><span class="line">New index elastalert_status created</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="创建一个规则"><a href="#创建一个规则" class="headerlink" title="创建一个规则"></a>创建一个规则</h3><p>Creating a Rule</p><p>每个规则定义要执行的查询，触发匹配的参数以及每个匹配要触发的报警列表。<br><code>cat ./example_rules/example_frequency.yaml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">es_host: elasticsearch.example.com</span><br><span class="line">es_port: 14900</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#唯一的规则名</span><br><span class="line">name: Example rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#规则类型</span><br><span class="line">type: frequency</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#要查询的索引</span><br><span class="line">index: logstash-*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#触发报警的阈值</span><br><span class="line">num_events: 50</span><br><span class="line">#阈值的时间区间</span><br><span class="line">timeframe:</span><br><span class="line">    hours: 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#过滤列表</span><br><span class="line">filter:</span><br><span class="line">- term:</span><br><span class="line">    some_field: &quot;some_value&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#报警列表</span><br><span class="line">alert:</span><br><span class="line">- &quot;email&quot;</span><br><span class="line">#报警地址列表</span><br><span class="line">email:</span><br><span class="line">- &quot;elastalert@example.com&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>栗子</strong><br>elastalert:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elastalert/example_rules/example_frequency.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">es_host: &quot;192.168.1.11&quot;</span><br><span class="line">es_port: 9200</span><br><span class="line">name: &quot;test rule&quot;</span><br><span class="line">type: &quot;frequency&quot;</span><br><span class="line">#此处我用python新建一个索引，用于测试</span><br><span class="line">index: &quot;my-index&quot;</span><br><span class="line">num_events: 3</span><br><span class="line">timeframe:</span><br><span class="line">    hours: 1</span><br><span class="line">filter:</span><br><span class="line">- term:</span><br><span class="line">    name: &quot;zhang21&quot;</span><br><span class="line">alert:</span><br><span class="line">- &quot;email&quot;</span><br><span class="line">email:</span><br><span class="line">- &quot;elastalert@example.com&quot;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="测试规则"><a href="#测试规则" class="headerlink" title="测试规则"></a>测试规则</h3><p>运行<code>elasticalert-test-rule</code>工具将测试你的配置文件是否成功加载并在过去24h内以调试模式运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elastalert-test-rule ./example_frequency.yaml</span><br></pre></td></tr></table></figure><p>配置首选项将按如下方式加载：</p><ol><li>yaml文件中指定的配置</li><li>配置文件中指定的配置</li><li>默认配置</li></ol><p><br><br><br></p><h3 id="运行ElastAlert-1"><a href="#运行ElastAlert-1" class="headerlink" title="运行ElastAlert"></a>运行ElastAlert</h3><p>有两种方式来调用ElastAlert：</p><ul><li>Supervisor</li><li>Python</li></ul><p><br></p><p>为了便于调试，下面将直接调用。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python2 -m elastalert.elastalert --verbose --rule /etc/elastalert/example_rules/example_frequency.yaml</span><br><span class="line">INFO:elastalert:Starting up</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里遇到一个错误</span></span><br><span class="line">ERROR:root:Error running query: TransportError(<span class="number">400</span>, <span class="string">u'search_phase_execution_exception'</span>, <span class="string">u'No mapping found for [@timestamp] in order to sort on'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解决方法，在规则文件example_frequency.yaml中添加</span></span><br><span class="line">timestamp_field: timestamp</span><br></pre></td></tr></table></figure><p>使用Python3创建索引：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">es=Elasticsearch(<span class="string">'http://192.168.1.11:9200'</span>)</span><br><span class="line">es.info()</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入文档</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">'timestamp'</span>: datetime.now(),</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'zhang21'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    es.index(index=<span class="string">'my-index'</span>, doc_type=<span class="string">'test-type'</span>, id=i, body=data)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="规则类型和配置项"><a href="#规则类型和配置项" class="headerlink" title="规则类型和配置项"></a>规则类型和配置项</h2><p>Rule Types and Configuration Options</p><p><br></p><h3 id="规则配置项"><a href="#规则配置项" class="headerlink" title="规则配置项"></a>规则配置项</h3><p>Rule Configuration Cheat Sheet</p><p>选项太多，自己去看: <a href="https://elastalert.readthedocs.io/en/latest/ruletypes.html" target="_blank" rel="noopener">https://elastalert.readthedocs.io/en/latest/ruletypes.html</a></p><p><br></p><h3 id="通用配置项"><a href="#通用配置项" class="headerlink" title="通用配置项"></a>通用配置项</h3><p>每个在<code>rules_folder</code>下的<code>.yaml</code>文件默认都会被执行。</p><p><strong>必须的配置</strong></p><ul><li>es_host</li><li>es_port</li><li>index</li><li>name</li><li>type</li><li>alert</li></ul><p><strong>可选配置</strong><br>自己去看。</p><p><br><br><br></p><h3 id="规则类型"><a href="#规则类型" class="headerlink" title="规则类型"></a>规则类型</h3><p>Rule Types</p><p>在<code>elastalert/ruletypes.py</code>中定义的各种RuleType class构成了ElastAlert的主要逻辑。每个规则都在内存中保存一个实例，传递通过给定过滤器查询es返回的所有数据，并根据该数据生成匹配。</p><p><br></p><ul><li><strong>any</strong><br>任意规则都将匹配所有内容。查询返回的每个匹配都会生成一个警报。</li></ul><p><br></p><ul><li><strong>blacklist</strong><br>黑名单规则根据黑名单检查某个字段，如果它存在于黑名单中，则匹配。</li></ul><p>黑名单规则需要两个额外项：<br><code>compare_key</code>——与黑名单进行比较的字段。如果为空，事件将被忽略。<br><code>blacklist</code>——黑名单列表值或黑名单文件列表(<code>&quot;!file ./blacklist.txt&quot;</code>)</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blacklist:</span><br><span class="line">  - value1</span><br><span class="line">  - value2</span><br><span class="line">  - &quot;!file /tmp/blacklist1.txt&quot;</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>whitelist</strong><br>白名单规则根据白名单检查某个字段，如果列表中不包含此字段，则匹配。</li></ul><p>白名单规则需要三个额外项：<br><code>compare_key</code>——与白名单进行比较的字段<br><code>ignore_null</code>——如果为true，则没有<code>compare_key</code>字段的事件将不匹配<br><code>whitelist</code>——白名单列表值或白名单文件列表</p><p>栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whitelist:</span><br><span class="line">    - value1</span><br><span class="line">    - value2</span><br><span class="line">    - &quot;!file /tmp/whitelist1.txt&quot;</span><br><span class="line">    - &quot;!file /tmp/whitelist2.txt&quot;</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>change</strong><br>此规则将监视某个字段，如果此字段改变就匹配。</li></ul><p>此规则需要三个额外项：<br><code>compare_key</code>——监控要改变的字段名。可以是一个列表，如果任意字段发生标号，都将触发警报。<br><code>ignore_null</code>——如果为true，则没有<code>compare_key</code>字段的事件将不计为已更改。<br><code>query_key</code>——此规则基于每个查询键应用。</p><p>一个可选字段：<br><code>timeframe</code>——改变之间的最大时间</p><p><br></p><ul><li><strong>frequency</strong><br>此规则匹配在给定时间范围内至少一定数量的事件。</li></ul><p>此规则需要两个额外项：<br><code>num_events</code>——将会触发报警的事件数<br><code>timeframe</code>——上面事件的时间范围</p><p><br></p><ul><li><strong>spike(突增)</strong><br>当给定时间段内的事件量的<code>spike_height</code>次数大于或小于前一个时间段时，此规则匹配。它使用两个滑动窗口(引用和当前)来比较。</li></ul><p>此规则需要三个额外项：<br><code>spike_height</code>——上次时间段时间数与前时间段事件数的比率，将处罚告警<br><code>spike_type</code>——up/down/both<br><code>timeframe</code>：时间段</p><p><br></p><ul><li><strong>flatline(脉波)</strong><br>当一段时间内事件总数匹配给定阈值时，此规则匹配。</li></ul><p>此规则需要两个额外项：<br><code>threshold</code>——不触发警报的最小事件数<br><code>timeframe</code>——时间段</p><p><br></p><ul><li><strong>new term(术语)</strong><br>当一个以前从未见过的新值出现在字段中时，此规则匹配。</li></ul><p>此规则需要一个额外项：<br><code>fields</code>——要监控的新术语的字段列表</p><p><br></p><p><strong>cardinality(基数)</strong><br>在一个时间范围内，当某个字段的唯一值的总数高于或低于阈值时，此规则匹配。</p><p>此规则需要：<br><code>timeframe</code>——时间段<br><code>cardinality_field</code>——计算基数的字段</p><p>最大或最小基数取一个<br><code>max_cardinality</code>——数据的基数大于此报警<br><code>min_cardinality</code>——数据基数小于此报警</p><p><br></p><p><strong>metric aggregation</strong><br>当计算窗口中的度量值高于或低于阈值时，此规则匹配。默认值为<code>buffer_time</code>。</p><p>此规则需要：<br><code>metric_agg_key</code>——计算度量标准的字段<br><code>metric_agg_type</code>——字段的类型<br><code>doc_type</code>——指定要搜索的文档类型</p><p>最大和最小至少需要一个<br><code>max_threshold</code>——计算的度量标准大与此，报警<br><code>min_threshold</code>——计算的度量标准小于此，报警</p><p><br></p><p><strong>percentage match</strong><br>当计算窗口内匹配桶(bucket)中的文档百分比高于或低于阈值时，此规则匹配。默认情况下，计算窗口为<code>buffer_time</code>。</p><p>此规则需要：<br><code>match_bucket_filter</code>—— ES filter DSL。为匹配桶定义了一个过滤器，它应用匹配查询过滤器并返回文档的子集。<br><code>doc_type</code>——指定查询文档类型</p><p>最大和最小至少需要一个<br><code>min_percentage</code>——匹配文档的百分比小于此，报警<br><code>max_percentage</code>——匹配文档的百分比大于此，报警</p><p><br><br><br></p><h3 id="Alerts"><a href="#Alerts" class="headerlink" title="Alerts"></a>Alerts</h3><p>每条规则都可以附加任意数量的报警。Alerts是<code>Alerter</code>的子类，并从<code>ElastAlert</code>传递包含相关信息的字典或字典列表。与规则配置类似，它们在规则配置文件中配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert:</span><br><span class="line">- email</span><br><span class="line">- jira</span><br><span class="line">- xxx</span><br></pre></td></tr></table></figure><p>多个邮件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert:</span><br><span class="line">- email</span><br><span class="line"></span><br><span class="line">from_addr: &quot;no-reply@example.com&quot;</span><br><span class="line">email: &quot;someone@example.com&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alert:</span><br><span class="line">- email:</span><br><span class="line">    from_addr: &quot;no-reply@example.com&quot;</span><br><span class="line">email: &quot;someone@example.com&quot;</span><br><span class="line">- email:</span><br><span class="line">    from_addr: &quot;xx&quot;</span><br><span class="line">email: &quot;xxx&quot;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Alert-Subject"><a href="#Alert-Subject" class="headerlink" title="Alert Subject"></a>Alert Subject</h4><p>可通过添加包含自定义摘要的<code>alert_subject</code>来自定义电子邮件主题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert_subject: &quot;Issue &#123;0&#125; ouccurreda at &#123;1&#125;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert_subject_args:</span><br><span class="line">- issue.name</span><br><span class="line">- &quot;@timestamp&quot;</span><br></pre></td></tr></table></figure><p>如果规则匹配索引中的多个对象，则仅使用第一个匹配来填充格式化程序的参数。</p><p><br><br><br></p><h4 id="Alert-Content"><a href="#Alert-Content" class="headerlink" title="Alert Content"></a>Alert Content</h4><p>有几种方法可以格式化给种类型事件的正文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule_name           = name</span><br><span class="line">alert_text          = alert_text</span><br><span class="line">ruletype_text       = Depends on type</span><br><span class="line">top_counts_header   = top_count_key, &quot;:&quot;</span><br><span class="line">top_counts_value    = Value, &quot;: &quot;, Count</span><br><span class="line">top_counts          = top_counts_header, LF, top_counts_value</span><br><span class="line">field_values        = Field, &quot;: &quot;, Value</span><br></pre></td></tr></table></figure><p>默认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body                = rule_name</span><br><span class="line"></span><br><span class="line">                      [alert_text]</span><br><span class="line"></span><br><span class="line">                      ruletype_text</span><br><span class="line"></span><br><span class="line">                      &#123;top_counts&#125;</span><br><span class="line"></span><br><span class="line">                      &#123;field_values&#125;</span><br></pre></td></tr></table></figure></p><p><br><br><br></p><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>命令报警允许你执行任意命令并从匹配中传递参数或<code>stdin</code>。该命令的参数可以使用Python格式的字符串语法来访问匹配的部分内容。报警器将打开一个子进程并可选地传递匹配，或在聚合报警的情况下，将其作为json阿虎组匹配到进程的<code>stdin</code>。</p><p>此报警需要一个选项：<br><code>command</code>——要执行的参数列表或要执行的字符串。如果是列表格式，则第一个参数是要执行的程序名。如果传递了一个字符串，则该命令通过shell执行。</p><p>字符串可使用<code>%</code>或<code>.format()</code>进行格式化。这是Python的替换。<br>如果在命令中使用格式化数据，清泪建议使用args列表格式而不是shell字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert:</span><br><span class="line">- command</span><br><span class="line"></span><br><span class="line">command: [&quot;/bin/send_alert&quot;, &quot;--username&quot;, &quot;%(username)s&quot;]</span><br><span class="line">#command: [&quot;/bin/send_alert&quot;, &quot;--username&quot;, &quot;&#123;match[username]&#125;&quot;]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h4 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h4><p>此报警将会发送电子邮件。它默认连接到<code>smtp_host</code>服务器。</p><p>它需要一个选项：<br><code>email</code>——接收报警的地址</p><p><br><br><br></p><h4 id="Jira"><a href="#Jira" class="headerlink" title="Jira"></a>Jira</h4><p><br><br><br></p><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><p>调试报警器经使用Python logger的info level记录报警信息。它被记录到名为<code>elastalert</code>的Python logger对象中，可以使用<code>getLogger</code>命令轻松访问该对象。</p><p><br><br><br></p><h4 id="HTTP-POST"><a href="#HTTP-POST" class="headerlink" title="HTTP POST"></a>HTTP POST</h4><p>此报警类型使用HTTP POST将结果发送到JSON ENDPOINT。默认情况下，json会包含所有匹配，除非你指定<code>http_post_payload</code>。</p><p>需要：<br><code>http_post_url</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alert: post</span><br><span class="line">http_post_url: &quot;http://example.com/api&quot;</span><br><span class="line">http_post_payload:</span><br><span class="line">  ip: clientip</span><br><span class="line">http_post_static_payload:</span><br><span class="line">  apikey: abc123</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="ElastAlert元数据索引"><a href="#ElastAlert元数据索引" class="headerlink" title="ElastAlert元数据索引"></a>ElastAlert元数据索引</h2><p>ElastAlert Metadata Index</p><p>ElastAlert使用Elasticsearch存储有关其状态的各种信息。这不仅允许对ElastAlert操作进行某种程度的审计和调试，而且还可以在ElastAlert关闭、重启或崩溃时避免数据丢失或重复报警。此集群和索引信息在全局配置文件中使用<code>es_host</code>, <code>es_port</code>, <code>writeback_index</code>定义。ElastAlert必须能够写入到此索引。<code>elastalert-create-index</code>将为你创建具有正确映射的索引，并可选择从现有的ElastAlert写回索引中复制文档。</p><p>ElastAlert将会在<code>writeback index</code>中创建三种不同类型的文档：</p><ul><li>elastalert_status</li><li>elastalert</li><li>elastalert_error</li></ul><p><br><br><br></p><h3 id="elastalert-status"><a href="#elastalert-status" class="headerlink" title="elastalert_status"></a>elastalert_status</h3><p><code>elastalert_status</code>是为给定规则执行查询的日志，包含：</p><ul><li><code>@timestamp</code></li><li><code>rule_name</code></li><li><code>starttime</code></li><li><code>endtime</code></li><li><code>hits</code>： 查询的结果数</li><li><code>matches</code>： 匹配数</li><li><code>time_taken</code>： 查询所用秒数</li></ul><p><br><br><br></p><h3 id="elastalert"><a href="#elastalert" class="headerlink" title="elastalert"></a>elastalert</h3><p><code>elastalert</code>是有关触发的每个报警的日志信息，包含：</p><ul><li><code>@timestamp</code></li><li><code>rule_name</code></li><li><code>alert_info</code></li><li><code>alert_sent</code></li><li><code>alert_time</code></li><li><code>match_body</code></li><li><code>alert_exception</code></li><li><code>aggregate_id</code></li></ul><p><br><br><br></p><h3 id="elastalert-error"><a href="#elastalert-error" class="headerlink" title="elastalert_error"></a>elastalert_error</h3><p>当ElastAlert发生错误时，它将写入Elasticsearch和stderr。<code>elastalert_error</code>类型包含：</p><ul><li><code>@timestamp</code></li><li><code>message</code></li><li><code>traceback</code></li><li><code>data</code></li></ul><p><br><br><br></p><h3 id="silence"><a href="#silence" class="headerlink" title="silence"></a>silence</h3><p><code>silence</code>是指由于重新设置或使用<code>-silence</code>而抑制给定规则的警报的记录。</p><ul><li><code>@timestamp</code></li><li><code>rule_name</code></li><li><code>until</code>：警报在此开始发送的时间戳</li><li><code>exponent</code>：除非设置了<code>exponential_realert</code>，否则它将为0</li></ul><p><br><br><br></p><h2 id="添加一个新规则类型"><a href="#添加一个新规则类型" class="headerlink" title="添加一个新规则类型"></a>添加一个新规则类型</h2><p>Adding a New Rule Type</p><p><br><br><br></p><h2 id="添加一个新报警器"><a href="#添加一个新报警器" class="headerlink" title="添加一个新报警器"></a>添加一个新报警器</h2><p>Adding a New Alerter</p><p><br><br><br></p><hr><p><br></p><h2 id="为规则编写过滤器"><a href="#为规则编写过滤器" class="headerlink" title="为规则编写过滤器"></a>为规则编写过滤器</h2><p>Writing Filters For Rules</p><p><br><br><br></p><h2 id="增强功能"><a href="#增强功能" class="headerlink" title="增强功能"></a>增强功能</h2><p>Enhancements</p><p>增强功能是一些模板，可让你在发送警报之前修改匹配项。</p><p><br><br><br></p><h2 id="kibana-plugin"><a href="#kibana-plugin" class="headerlink" title="kibana-plugin"></a>kibana-plugin</h2><p>elastalert kibana-plugin是一个第三方插件。<br>ElastAlert Kibana plugin repository: <a href="https://github.com/bitsensor/elastalert-kibana-plugin" target="_blank" rel="noopener">https://github.com/bitsensor/elastalert-kibana-plugin</a></p><p>注意，安装的时候要注意kibana的版本。具体信息见README。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elastic指南: &lt;a href=&quot;https://www.elastic.co/guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch文档: &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logstash文档: &lt;a href=&quot;https://www.elastic.co/guide/en/logstash/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/logstash/current/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kibana文档: &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/kibana/current/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Filebeat文档: &lt;a href=&quot;https://www.elastic.co/guide/en/beats/filebeat/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/beats/filebeat/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metricbeat文档: &lt;a href=&quot;https://www.elastic.co/guide/en/beats/metricbeat/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/beats/metricbeat/current/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lucence查询语法: &lt;a href=&quot;https://wizardforcel.gitbooks.io/mastering-elasticsearch/content/chapter-1/114_README.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wizardforcel.gitbooks.io/mastering-elasticsearch/content/chapter-1/114_README.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7.x86_64&lt;/li&gt;
&lt;li&gt;Elastcisearch v6.2.3&lt;/li&gt;
&lt;li&gt;Kibana v6.2.3&lt;/li&gt;
&lt;li&gt;Logstash v6.2.3&lt;/li&gt;
&lt;li&gt;Beats v6.2.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Elasticsearch" scheme="https://zhang21.github.io/tags/Elasticsearch/"/>
    
      <category term="Logstash" scheme="https://zhang21.github.io/tags/Logstash/"/>
    
      <category term="Kibana" scheme="https://zhang21.github.io/tags/Kibana/"/>
    
      <category term="Filebeat" scheme="https://zhang21.github.io/tags/Filebeat/"/>
    
      <category term="Metricbeat" scheme="https://zhang21.github.io/tags/Metricbeat/"/>
    
      <category term="Heartbeat" scheme="https://zhang21.github.io/tags/Heartbeat/"/>
    
      <category term="Packetbeat" scheme="https://zhang21.github.io/tags/Packetbeat/"/>
    
      <category term="Auditbeat" scheme="https://zhang21.github.io/tags/Auditbeat/"/>
    
  </entry>
  
  <entry>
    <title>Beanstalkd</title>
    <link href="https://zhang21.github.io/2018/04/10/Beanstalkd/"/>
    <id>https://zhang21.github.io/2018/04/10/Beanstalkd/</id>
    <published>2018-04-10T08:08:11.000Z</published>
    <updated>2018-04-15T07:20:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>环境：</p><ul><li>CentOS7.x86_64</li><li>Beanstalkd v1.10</li></ul><p><br><br><br></p><a id="more"></a><p><br></p><h1 id="Beanstalkd介绍"><a href="#Beanstalkd介绍" class="headerlink" title="Beanstalkd介绍"></a>Beanstalkd介绍</h1><p>Beanstalk，一个高性能、轻量级的分布式内存队列系统。<br>高性能离不开异步，异步离不开队列，而其内部都是Producer-Comsumer模式的原理。</p><p><br><br><br></p><h2 id="Beanstalkd核心概念："><a href="#Beanstalkd核心概念：" class="headerlink" title="Beanstalkd核心概念："></a>Beanstalkd核心概念：</h2><ul><li><p>job(任务)<br>一个需要异步处理的任务，是beanstalkd中的基本单元，需要放在一个tube中。</p></li><li><p>tube(管道)<br>一个有名的任务队列，用来存储同一类型的job。是producer和consumer操作的对象。</p></li><li><p>producer(生产者)<br>job的生产者，通过<code>put</code>命令将一个job放到一个tube中。</p></li><li><p>consumer(消费者)<br>job的消费者，通过<code>reserve</code>/<code>release</code>/<code>bury</code>/<code>delete</code>命令来获取或改变job的状态。</p></li></ul><p><br></p><p>beanstalkd官方状态图：</p><p><img src="/images/beanstalkd.png" alt=""></p><p><br><br><br></p><h2 id="Beanstalkd特性"><a href="#Beanstalkd特性" class="headerlink" title="Beanstalkd特性"></a>Beanstalkd特性</h2><ul><li><p>优先级<br>支持0-2^32的优先级。值越小，优先级越高，默认是1024。</p></li><li><p>持久化<br>可通过<strong>binlog</strong>将job及其状态记录到文件里面。在Beanstalkd下次启动时，可通过读取binlog来恢复之前的job及状态。</p></li><li><p>分布式容错<br>分布式设计和Memcached类似，beanstalkd个server之间并不知道彼此的存在，都是通过client来实现分布式以及根据tube名称到特定server获取job。</p></li><li><p>超时控制<br>为了防止某个consumer长时间占用任务但不能处理的情况，beanstalkd为<code>reserve</code>操作设置了timeout。如果该consumer不能在指定时间内完成job，job将被迁移会READY状态，供其它consumer执行。</p></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="安装Beanstalkd"><a href="#安装Beanstalkd" class="headerlink" title="安装Beanstalkd"></a>安装Beanstalkd</h1><p>由于epel源可直接安装beanstalkd，So:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install -y beanstalkd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件</span></span><br><span class="line">/etc/sysconfig/beanstalkd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start beanstalkd</span><br><span class="line"></span><br><span class="line"><span class="comment">#等同于</span></span><br><span class="line"><span class="comment">#/usr/bin/beanstalkd -l 0.0.0.0 -p 11300 -u beanstalkd</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Beanstalk的客户端和管理端"><a href="#Beanstalk的客户端和管理端" class="headerlink" title="Beanstalk的客户端和管理端"></a>Beanstalk的客户端和管理端</h2><p>官方没有推出客户端和管理端，GitHub上有一些第三方插件，请自己选择使用。</p><p><br></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>pheanstalkd:  <a href="https://github.com/pda/pheanstalk/" target="_blank" rel="noopener">https://github.com/pda/pheanstalk/</a></li></ul><p>pheanstalk是一个在PHP中操作beanstalkd的客户端。<br>具体使用方法参考README。</p><p><br></p><h3 id="管理端"><a href="#管理端" class="headerlink" title="管理端"></a>管理端</h3><ul><li><p>beanstalk_console： <a href="https://github.com/ptrofimov/beanstalk_console" target="_blank" rel="noopener">https://github.com/ptrofimov/beanstalk_console</a></p></li><li><p>aurora: <a href="https://github.com/xuri/aurora" target="_blank" rel="noopener">https://github.com/xuri/aurora</a><br>aurora 是一个基于 Web 的 Beanstalk 消息队列服务器管理工具，单文件无需依赖其他组件，支持管理本地和远程多个队列服务器。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7.x86_64&lt;/li&gt;
&lt;li&gt;Beanstalkd v1.10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Beanstalkd" scheme="https://zhang21.github.io/tags/Beanstalkd/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor</title>
    <link href="https://zhang21.github.io/2018/04/08/Supervisor/"/>
    <id>https://zhang21.github.io/2018/04/08/Supervisor/</id>
    <published>2018-04-08T02:38:33.000Z</published>
    <updated>2018-05-23T09:26:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="http://www.supervisord.org" target="_blank" rel="noopener">http://www.supervisord.org</a></li></ul><p>环境：</p><ul><li>Supervisor 3.3.4</li><li>CentOS7.x86_64</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><br></p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>Supervisor是一个C/S系统，允许用户在Unix-Like操作系统上控制许多进程。它受如下启发：</p><ul><li>Convenience</li><li>Accuracy</li><li>Delegation</li><li>Process Group</li></ul><p><br><br><br></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>Simple</li><li>Centralized(统一)</li><li>Efficient</li><li>Extensible</li><li>Compatible</li><li>Proven(久经考验)</li></ul><p><br><br><br></p><h2 id="Supervisor组件"><a href="#Supervisor组件" class="headerlink" title="Supervisor组件"></a>Supervisor组件</h2><ul><li>supervisord<ul><li>Supervisor的服务器部分被命名为<code>supervisord</code>。负责启动子进程，响应客户端的子进程，重启奔溃或退出的子进程，记录其<code>stderr</code>和<code>stdout</code>，以及生成对应的事件</li><li>默认使用的配置文件为<code>/etc/supervisord.conf</code>——Windows-INI格式的文件，由于它包含了未加密的username和password，请保证它安全</li></ul></li><li>supervisorctl<ul><li>Supervisor的客户端部分被命名为<code>supervisorctl</code>。用户可连接到不同的supervisord，status/stop/start子进程，获取supervisord中正在运行的进程列表</li><li>通过Unix domain socket或TCP socket与server通信，客户端在执行命令前应该先提供认证。客户端和服务端使用同一个配置文件</li></ul></li><li>Web server<ul><li>Web界面，可通过它查看或控制进程状态</li></ul></li><li>XML-RPC接口<ul><li>用于询问和控制管理程序及其运行的程序</li></ul></li></ul><p><br><br><br></p><h2 id="平台要求"><a href="#平台要求" class="headerlink" title="平台要求"></a>平台要求</h2><ul><li>在Unix-Like系统上运行良好</li><li>不支持Windows系统</li><li>Supervisor运行在Python2.4或之后的版本，不支持Python3</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装方法取决于你的操作系统。</p><p><br></p><h2 id="通过网络安装"><a href="#通过网络安装" class="headerlink" title="通过网络安装"></a>通过网络安装</h2><ul><li>推荐使用setuptools的<code>easy_install</code></li><li>下载Supervisor包并调用一个命令</li></ul><p><br></p><h3 id="使用Setuptools的网络安装"><a href="#使用Setuptools的网络安装" class="headerlink" title="使用Setuptools的网络安装"></a>使用Setuptools的网络安装</h3><p>如果Python解释器安装了Setuptools:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easy_install supervisor</span><br></pre></td></tr></table></figure><p><br></p><h2 id="不使用Setuptools的网络安装"><a href="#不使用Setuptools的网络安装" class="headerlink" title="不使用Setuptools的网络安装"></a>不使用Setuptools的网络安装</h2><p>如果系统上未安装Setuptools，那么你需要手动去下载Supervisor发行套件和安装它。</p><p>PYPI： <a href="https://pypi.python.org/pypi/supervisor" target="_blank" rel="noopener">https://pypi.python.org/pypi/supervisor</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.python.org/pypi/supervisor/xxx.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xzf xxx.tar.gz</span><br><span class="line"></span><br><span class="line">python setup.py install</span><br><span class="line">#它会自动通过网络下载依赖</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="安装一个分发包"><a href="#安装一个分发包" class="headerlink" title="安装一个分发包"></a>安装一个分发包</h2><p>一些Linux发行版提供了可通过系统包管理工具安装Supervisor。这些包由第三方制作，包含了对特定发行版的一些修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum info supervisor</span><br><span class="line">yum search supervisor</span><br><span class="line"></span><br><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="通过pip安装"><a href="#通过pip安装" class="headerlink" title="通过pip安装"></a>通过pip安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="创建一个配置文件"><a href="#创建一个配置文件" class="headerlink" title="创建一个配置文件"></a>创建一个配置文件</h2><p>由于我是通过<code>yum</code>安装，所以<code>supervisor</code>配置文件自动在<code>/etc</code>下自动生成：</p><ul><li><p>默认配置文件： <code>/etc/supervisord.conf</code><br>建议在此配置文件中加入<code>[include]</code>，默认已包含此配置</p></li><li><p>目录： <code>/etc/supervisord.d</code><br>建议将每个配置单独写在此目录下</p></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="运行Supervisor"><a href="#运行Supervisor" class="headerlink" title="运行Supervisor"></a>运行Supervisor</h1><p><br></p><h2 id="添加一个程序"><a href="#添加一个程序" class="headerlink" title="添加一个程序"></a>添加一个程序</h2><p>在<code>supervisord</code>为你做任何有用的事情之前，你至少需要在配置文件中添加一个程序部分。<strong>program</strong>部分将定义在调用supervisord命令时如何运行和管理一个程序。</p><p>一个最简单的栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[program:foo]</span><br><span class="line">command=/bin/cat</span><br></pre></td></tr></table></figure><p>上面的栗子只命名了一个命令，还有很多其它关于程序部分的设置。</p><p><br><br><br></p><h2 id="运行supervisord"><a href="#运行supervisord" class="headerlink" title="运行supervisord"></a>运行supervisord</h2><p>使用<code>supervisord</code>命令启动supervisord，进程将自我守护，并从终端分离。并将操作日志默认放于<code>$CWD/supervisor.log</code>。<br>你可传递<code>-n/--nodaemon</code>标志来将进程放置于前台，这样对于debug很有帮助。</p><p>要更改supervisord控制的程序集，请编辑配置文件并<code>kill- HUP</code>，或以其它方式重新启动supervisord进程。</p><p><code>supervisord</code>命令接受许多命令行选项。这些命令行选项中的每一个都会覆盖配置文件中的任何等效值。</p><p>详细选项： <a href="http://www.supervisord.org/running.html#supervisord-command-line-options" target="_blank" rel="noopener">http://www.supervisord.org/running.html#supervisord-command-line-options</a></p><p><br><br><br></p><h2 id="运行supervisorctl"><a href="#运行supervisorctl" class="headerlink" title="运行supervisorctl"></a>运行supervisorctl</h2><p>使用<code>supervisorclt</code>命令启动supervisorctl客户端。如果需要验证supervisord调用，则系统会要求您提供验证凭据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status all</span><br><span class="line"></span><br><span class="line">supervisorctl stop all</span><br></pre></td></tr></table></figure><p><br></p><h3 id="supervisorctl-Actions"><a href="#supervisorctl-Actions" class="headerlink" title="supervisorctl Actions"></a>supervisorctl Actions</h3><p>如果在命令行中指定了<code>-i</code>或未指定任何操作(action)，则将启动交互式输入的shell解释操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl help</span><br><span class="line">#查看可操作的action</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">default commands (type help &lt;topic&gt;):</span><br><span class="line">=====================================</span><br><span class="line">add    clear  fg        open  quit    remove  restart   start   stop  update</span><br><span class="line">avail  exit   maintail  pid   reload  reread  shutdown  status  tail  version</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Signals"><a href="#Signals" class="headerlink" title="Signals"></a>Signals</h2><p>supervisord程序可能会发送某些actions，让它在运行时执行某些操作。你可将这些信号发送到一个单一的supervisord的PID。</p><p><br></p><h3 id="信号处理程序"><a href="#信号处理程序" class="headerlink" title="信号处理程序"></a>信号处理程序</h3><ul><li><code>SIGTERM</code><ul><li>supervisord及其所有子进程都将关闭</li></ul></li><li><code>SIGINT</code><ul><li>supervisord及其所有子进程都将关闭</li></ul></li><li><code>SIGQUIT</code><ul><li>supervisord及其所有子进程都将关闭</li></ul></li><li><code>SIGHUP</code><ul><li>supervisord将关闭所有进程，重新载入配置文件并启动所有进程</li></ul></li><li><code>SIGUSR2</code><ul><li>supervisord将关闭并重新打开主要活动日志和所有子日志文件</li></ul></li></ul><p><br><br><br></p><h2 id="运行安全"><a href="#运行安全" class="headerlink" title="运行安全"></a>运行安全</h2><p>开发人员尽力确保以root身份运行的supervisord进程不会导致意外的权限升级。但supervisord允许在其配置文件中的任意路径规范写入数据，允许任意路径选择可能会造成符号链接工具的漏洞。<br>确保supervisord配置文件的权限安全，除此之外，确保Python PATH和标准库都有足够的文件权限保护。</p><p><br><br><br></p><h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><p>由于我是<code>yum</code>安装，所以能够直接使用系统服务管理来设置开机自启。</p><p><br><br><br></p><hr><p><br></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>Supervisor的配置文件通常命名为<code>supervisord.conf</code>。如果没有指定<code>-c</code>配置文件，应用程序会从以下位置去寻找配置文件：</p><ul><li>$CWD/supervisord.conf</li><li>$CWD/etc/supervisord.conf</li><li>/etc/supervisord.conf</li><li>/etc/supervisor/supervisord.conf (since Supervisor 3.3.0)</li><li>../etc/supervisord.conf (Relative to the executable)</li><li>../supervisord.conf (Relative to the executable)</li></ul><p><br><br><br></p><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><p><code>supervisord.conf</code> is a Windows-INI-style (Python ConfigParser) file.<br>它包含section（[header]）和section中的key/value对。</p><p><br></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>使用Python字符串表达式语法<code>%(ENV_X)%</code>，可以在配置文件中使用环境中存在的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[program:example]</span><br><span class="line">command=/usr/bin/example --loglevel=%(ENV_LOGLEVEL)s</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="unix-http-server"><a href="#unix-http-server" class="headerlink" title="[unix_http_server]"></a>[unix_http_server]</h2><p>在此section中应该插入在Unix domain socket上监听的HTTP server的配置参数。<br>如果没有配置此section，则Unix domain socket HTTP server将不会启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#supervisor监听HTTP/XML-RPC请求的Unix domain socket的路径</span><br><span class="line">file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#socket文件的权限模式</span><br><span class="line">chmod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#socket的用户和组</span><br><span class="line">chown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#访问HTTP server需要的认证</span><br><span class="line">username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#密码可以是明文，或使用SHA加密的字符串</span><br><span class="line">password</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="inet-http-server"><a href="#inet-http-server" class="headerlink" title="[inet_http_server]"></a>[inet_http_server]</h2><p>监听TCP(internet) socket 的HTTP server的配置参数。<br>如果此section未配置，inet HTTP server将不会启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#tcp host:port，supervisor监听HTTP/XML-RPC请求的地址</span><br><span class="line">port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#HTTP server认证</span><br><span class="line">username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#密码可以是明文，或SHA加密</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="supervisord"><a href="#supervisord" class="headerlink" title="[supervisord]"></a>[supervisord]</h2><p>与supervisord进程有关的全局设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">logfile</span><br><span class="line"></span><br><span class="line">logfile_maxbytes</span><br><span class="line"></span><br><span class="line">logfile_backps</span><br><span class="line"></span><br><span class="line">#critical, error, warn, info, debug, trace</span><br><span class="line">logevel</span><br><span class="line"></span><br><span class="line">pidfile</span><br><span class="line"></span><br><span class="line">umask</span><br><span class="line"></span><br><span class="line">nodaemon</span><br><span class="line"></span><br><span class="line">minfds</span><br><span class="line"></span><br><span class="line">minprocs</span><br><span class="line"></span><br><span class="line">#防止supervisord在启动时清除任何现有子日志文件</span><br><span class="line">nocleanup</span><br><span class="line"></span><br><span class="line">childlogdir</span><br><span class="line"></span><br><span class="line">user</span><br><span class="line"></span><br><span class="line">directory</span><br><span class="line"></span><br><span class="line">strip_ansi</span><br><span class="line"></span><br><span class="line">enviroment</span><br><span class="line"></span><br><span class="line">identifier</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="supervisorctl"><a href="#supervisorctl" class="headerlink" title="[supervisorctl]"></a>[supervisorctl]</h2><p><code>supervisorctl</code>交互式shell程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">serverurl</span><br><span class="line"></span><br><span class="line">#与前面设置的验证账户一致</span><br><span class="line">username</span><br><span class="line">password</span><br><span class="line"></span><br><span class="line">prompt</span><br><span class="line"></span><br><span class="line">history_file</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="program-x"><a href="#program-x" class="headerlink" title="[program:x]"></a>[program:x]</h2><p>supervisord知道的应该启动和控制的程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> #该程序启动时将运行的命令</span><br><span class="line">command</span><br><span class="line"></span><br><span class="line"> #进程名称</span><br><span class="line">process_name</span><br><span class="line"></span><br><span class="line"> #多个实例</span><br><span class="line">numproc</span><br><span class="line"></span><br><span class="line"> #用于计算numprocs开始的数量</span><br><span class="line">numprocs_start</span><br><span class="line"></span><br><span class="line"> #程序在启动和关闭顺序中的相对优先级</span><br><span class="line">priority</span><br><span class="line"></span><br><span class="line"> #当supervisord启动时，改程序将自动启动</span><br><span class="line">autostart</span><br><span class="line"></span><br><span class="line"> #程序在启动后需要保持运行以考虑启动成功的总秒数，设置为0表示不需要再任何特定的事件内保持运行</span><br><span class="line">startsecs</span><br><span class="line"></span><br><span class="line"> #允许失败的尝试次数，然后放弃并将进程置入fatal状态</span><br><span class="line">startretries</span><br><span class="line"></span><br><span class="line"> #自动重启进程</span><br><span class="line">autorestart</span><br><span class="line"></span><br><span class="line"> #异常退出码</span><br><span class="line">exitcodes</span><br><span class="line"></span><br><span class="line"> #请求停止时用于杀死程序的信号</span><br><span class="line">stopsignal</span><br><span class="line"></span><br><span class="line"> #发送停止信号后，等待系统将信号返回给supervisord的秒数</span><br><span class="line">stopwaitsecs</span><br><span class="line"></span><br><span class="line"> #将停止信号发送给整个进程组</span><br><span class="line">stopagroup</span><br><span class="line"></span><br><span class="line"> #</span><br><span class="line">killasgroup</span><br><span class="line"></span><br><span class="line"> #以哪个用户运行该程序</span><br><span class="line">user</span><br><span class="line"></span><br><span class="line">redirect_stderr</span><br><span class="line"></span><br><span class="line">stdout_logfile</span><br><span class="line">stdout_logfile_maxbytes</span><br><span class="line">stdout_logfile_backups</span><br><span class="line">stdout_capture_maxbytes</span><br><span class="line">stdout_events_enabled</span><br><span class="line"></span><br><span class="line">stderr_logfile</span><br><span class="line">stderr_logfile_maxbytes</span><br><span class="line">stderr_logfile_backups</span><br><span class="line">stderr_capture_maxbytes</span><br><span class="line">stderr_events_enabled</span><br><span class="line"></span><br><span class="line">environment</span><br><span class="line"></span><br><span class="line">directory</span><br><span class="line"></span><br><span class="line">umask</span><br><span class="line"></span><br><span class="line">serverurl</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="include"><a href="#include" class="headerlink" title="[include]"></a>[include]</h2><p>如果配置文件包含<code>[include]</code>部分，则它必须包含一个名为<code>files</code>的key。该key中的值包含了其它配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#文件空间的空格分隔序列，路径可以是相对或绝对。</span><br><span class="line">files</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="group-x"><a href="#group-x" class="headerlink" title="[group:x]"></a>[group:x]</h2><p>将同质进程组组合成一个异质进程组通常很有用，所以它们可以作为supervisor各种控制器接口的一个单元进行控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#程序的逗号分隔列表</span><br><span class="line">programs</span><br><span class="line"></span><br><span class="line">#优先级</span><br><span class="line">priority</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="fcgi-program-x"><a href="#fcgi-program-x" class="headerlink" title="[fcgi-program:x]"></a>[fcgi-program:x]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#程序的fastCGI socket或TCP或Unix domain socket</span><br><span class="line">socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#为socket指定特定user或group</span><br><span class="line">socket_owner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定permission模式</span><br><span class="line">socket_mode</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="eventlistener-x"><a href="#eventlistener-x" class="headerlink" title="[eventlistener:x]"></a>[eventlistener:x]</h2><p>supervisor允许在配置文件中定义专门的同质进程组(event listener pools)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buffer_size</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line"></span><br><span class="line">result_handler</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="rpcinterface-x"><a href="#rpcinterface-x" class="headerlink" title="[rpcinterface:x]"></a>[rpcinterface:x]</h2><p><code>[rpcinterface:x]</code>适用于希望通过自定义行为扩展supervisor的人们。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.supervisord.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.supervisord.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervisor 3.3.4&lt;/li&gt;
&lt;li&gt;CentOS7.x86_64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Supervisor" scheme="https://zhang21.github.io/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Consul</title>
    <link href="https://zhang21.github.io/2018/04/05/Consul/"/>
    <id>https://zhang21.github.io/2018/04/05/Consul/</id>
    <published>2018-04-05T14:08:11.000Z</published>
    <updated>2018-07-06T01:45:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://www.consul.io/intro/index.html" target="_blank" rel="noopener">https://www.consul.io/intro/index.html</a></li><li><a href="https://www.consul.io/docs/" target="_blank" rel="noopener">https://www.consul.io/docs/</a></li><li>Consul Template: <a href="https://www.hashicorp.com/blog/introducing-consul-template" target="_blank" rel="noopener">https://www.hashicorp.com/blog/introducing-consul-template</a></li></ul><p>环境：</p><ul><li>CentOS7x86_64</li><li>Consul v1.2.0</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>介绍consul是什么，它可以解决哪些问题，以及如何开始使用它。</p><p><br></p><h2 id="Consul是什么"><a href="#Consul是什么" class="headerlink" title="Consul是什么"></a>Consul是什么</h2><p>Consule有多个组件，但总体而言，它是发现(discovery)和配置(config)基础架构(infrastructure)服务的工具。它提供几个关键特点：</p><ul><li>服务发现(service discovery)<ul><li>Consul客户端可提供一个服务，如API或mysql，其它客户端能够使用Consul来发现给定服务的提供者。使用DNS或HTTP，应用程序可以轻松找到他们所依赖的服务</li></ul></li><li>健康检查(health checking)<ul><li>Consul可以提供任何数量的健康检查，既可以与给定服务相关联(webserver return 200)，也可与本地节点(内存使用率小于90%)相关联。操作人员可用此信息来监视集群运行状况，服务发现组件使用此信息将流量(traffic)从不健康的主机中引导出去</li></ul></li><li>KV store<ul><li>应用程序可将Consul的分层Key/Value用于存储任何目的，包括动态配置(dynamic configuration)、功能标记(feature flagging)、协调(coordination)、领导选举(leader election)…简单的HTTP API使其易于使用</li></ul></li><li>多数据中心(Multi Datacenter)<ul><li>Consul支持多数据中心，这意味着Consul的用户不必担心构建额外的抽象层以扩展到多个区域</li></ul></li></ul><p>Consul旨在与DevOps和应用程序开发者保持友好，使其成为现代化 ，弹性基础架构的完美选择。</p><p><br><br><br></p><h2 id="Consul用例"><a href="#Consul用例" class="headerlink" title="Consul用例"></a>Consul用例</h2><ul><li><p>服务发现(service )<br>服务注册，集成健康检查，使用DNS或HTTP接口使得任何服务都能被其它服务发现。</p></li><li><p>服务分割(service segmentation)<br>通过自动TLS加密和基于身份的授权实现安全的服务到服务通信。</p></li><li><p>服务配置(service configuration)<br>功能丰富的 key/value 可轻易配置服务。</p></li></ul><p><br><br><br></p><h2 id="Consul基础架构"><a href="#Consul基础架构" class="headerlink" title="Consul基础架构"></a>Consul基础架构</h2><p>Consul是一个分布式、高可用的系统。</p><p>每一个向Consul提供服务的节点都运行一个Consul agent。运行agent对于服务发现或get/set Key/Value不是必需的。agent负责健康检查节点上的服务和节点自身。</p><p>agent可与一个或多个Consul server交流。Consul server是数据存储和复制集所在之地。server之间选出一个leader。虽然Consul可以使用一台服务器，但推荐使用3-5台以避免数据丢失的故障情况。对每一个数据中心都推荐使用Consul server cluster。</p><p>需要发现其它服务或节点的基础架构组件 可以查询任何Consul server或Consul agent。agent自动将查询发送到server。</p><p>每个数据中心运行一组consul server cluster。当发生cross-datacenter服务发现或配置请求时，本地consul server将请求转发给远程数据中心并返回结果。</p><p><br><br><br></p><hr><p><br></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="安装Consul"><a href="#安装Consul" class="headerlink" title="安装Consul"></a>安装Consul</h2><ul><li>二进制包: <a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">https://www.consul.io/downloads.html</a><ul><li>解压缩，得到一个consul二进制可执行文件，可将其放入系统路径</li></ul></li><li>验证安装: <code>consul</code></li></ul><p><br><br><br></p><h2 id="运行consul-agent"><a href="#运行consul-agent" class="headerlink" title="运行consul-agent"></a>运行consul-agent</h2><p>安装consul后请务必运行agent，agent可运行在server或client模式。每个datacenter必须至少有一台server，推荐3-5台做一个集群。单一server部署非常不安全，在故障情况下数据丢失就不可避免了。</p><p>所有其它agents都以client模式运行。client是一个非常轻量化的进程——它注册服务、运行健康检查、转发查询给server。agent必须运行在集群的每个节点上。</p><p><br></p><h3 id="启动agent"><a href="#启动agent" class="headerlink" title="启动agent"></a>启动agent</h3><p>测试consul development模式，不建议在生产环境使用此方法，此处做测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev</span><br><span class="line"></span><br><span class="line">netstat -nltp</span><br><span class="line"></span><br><span class="line">#可根据日志看出agent已成为server，并成为集群leader</span><br></pre></td></tr></table></figure><p><br></p><h3 id="Consul成员"><a href="#Consul成员" class="headerlink" title="Consul成员"></a>Consul成员</h3><p><code>members</code>命令基于<code>gossip protocol</code>并最终保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">consul members</span><br><span class="line"></span><br><span class="line">#节点名称、监听地址、健康状态、集群角色、版本信息</span><br><span class="line">Node     Address         Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">zhang22  127.0.0.1:8301  alive   server  1.0.6  2         dc1  &lt;all&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#使用HTTP API将请求转发给server以获取一致的view of world</span><br><span class="line">culr localhost:8500/v1/catalog/nodes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#DNS interface也可以查询节点，默认端口8600</span><br><span class="line">dig @127.0.0.1 -p 8600 zhang22.node.consul</span><br></pre></td></tr></table></figure><p><br></p><h3 id="停止agent"><a href="#停止agent" class="headerlink" title="停止agent"></a>停止agent</h3><p>可使用<code>Ctrl + C</code>优雅地终止agent，你可以看到它离开集群并关闭。</p><p>优雅关闭，Consul会通知集群其它节点此节点的离开。如果你强制kill agent，则集群的其它节点将检测该节点失败。<br>当成员离开时，其服务和健康检查将从catalog中移除。当成员失败时，其健康状态被标记为critical，但不会从catalog中移除。<br>Consul会自动尝试重连失败的节点，允许它从当前网络条件中修复，知道离开的节点不在联系。</p><p>此外，如果agent正作为server在运行，那么优雅地离开对避免造成严重的影响有帮助。</p><p><br><br><br></p><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><p>注册(register)服务并查询(query)服务。</p><p><br></p><h3 id="定义一个服务"><a href="#定义一个服务" class="headerlink" title="定义一个服务"></a>定义一个服务</h3><p>服务可以通过以下两种方法注册：</p><ul><li>服务定义(service definition)</li><li>调用HTTP API</li></ul><p>服务定义是注册服务最常见的方式，我们将构建前面agent的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#创建一个consul配置目录</span><br><span class="line">mkdir /etc/consul.d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#编写服务定义配置文件</span><br><span class="line">#假设有一个web服务运行在80端口，添加一个便于query的tag</span><br><span class="line">echo &apos;&#123;&quot;service&quot;: &#123;&quot;name: &quot;web&quot;, &quot;tag&quot;: [&quot;rails&quot;], &quot;port&quot;: 80 &#125;&#125;&apos; | tee /etc/consul.d/web.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重启agent，指定配置目录</span><br><span class="line">consul agent -dev -config-dir=/etc/consul.d</span><br></pre></td></tr></table></figure><p>如果你想注册多个服务，你可以在配置目录下创建多个服务定义文件。</p><p><br></p><h3 id="查询服务"><a href="#查询服务" class="headerlink" title="查询服务"></a>查询服务</h3><p>一旦agent启动并且服务已同步，我们可通过HTTP API或DNS查询(query)服务。</p><p><br></p><p><strong>DNS API</strong><br>使用DNS API(默认8600)查询服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#DNS name(默认) -- NAME.service.consul</span><br><span class="line"></span><br><span class="line">#只有IP</span><br><span class="line">dig @127.0.0.1 -p 8600 web.service.consul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#返回IP/Port</span><br><span class="line">dig @127.0.0.1 -p 8600 web.service.consul SRV</span><br></pre></td></tr></table></figure><p>我们还可以用DNS API按tag来过滤service。基于标签的查询格式为<code>tag.name.service.consul</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @127.0.0.1 -p 8600 rails.web.service.consul</span><br></pre></td></tr></table></figure><p><br></p><p><strong>HTTP API</strong><br>除了DNS API，HTTP API(默认8500)同样可用于查询服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#前面定义了web这个service</span><br><span class="line">curl http://localhost:8500/v1/catalog/service/web</span><br></pre></td></tr></table></figure><p>catalog API提供了给定服务的所有节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#仅仅健康实例的查询</span><br><span class="line"> curl &apos;http://localhost:8500/v1/health/service/web?passing&apos;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h3><p>服务定义可以通过更改配置文件并向agent发送SIGHUP来更新。这使得更新服务不会出现任何停机或查询服务不可达的情况。</p><p>另外，HTTP API能够用来动态地添加、移除、修改服务。</p><p><br><br><br></p><h2 id="Consul集群"><a href="#Consul集群" class="headerlink" title="Consul集群"></a>Consul集群</h2><p>具有多个成员的consul集群。</p><p>当consul节点启动时，它不知道任何其它节点，它是一个孤立的集群。为了了解到集群中的其它成员，agent必须要加入一个存在的集群。要加入一个现有的集群，只需知道一个现有成员。当加入集群后，agent将于其此成员闲聊，并迅速发现集群中的其它成员。一个agent可以加入任何其它agent，而不仅仅是server模式的agent。</p><p><br></p><h3 id="启动agents"><a href="#启动agents" class="headerlink" title="启动agents"></a>启动agents</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#node1</span><br><span class="line">consul agent -server -bootstrap-expect=1 \</span><br><span class="line">    -data-dir=/tmp/consul -node=agent-one -bind=ip1 \</span><br><span class="line">    -enable-script-checks=true -config-dir=/etc/consul.d</span><br><span class="line"></span><br><span class="line">#node2</span><br><span class="line">consul agent -data-dir=/tmp/consul -node=agent-two \</span><br><span class="line">    -bind=ip2 -enable-script-checks=true -config-dir=/etc/consul.d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#两个独立的node</span><br><span class="line"></span><br><span class="line">#现在，我们有两个agent在运行中：一个server，一个client。但是他们两者并不知道对方，并仍然是一个单一节点的集群。</span><br><span class="line">#查看节点</span><br><span class="line">consul member</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h2><p>由于我们在启动agent的时候便已指定server，所以从哪个节点加入都一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">consul join ip</span><br><span class="line">#Successfully joined cluster by contacting 1 nodes.</span><br><span class="line"></span><br><span class="line">consul members</span><br><span class="line"></span><br><span class="line">Node       Address              Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">agent-one  172.16.129.141:8301  alive   server  1.0.6  2         dc1  &lt;all&gt;</span><br><span class="line">agent-two  172.16.129.150:8301  alive   client  1.0.6  2         dc1  &lt;default&gt;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="在启动时自动加入集群"><a href="#在启动时自动加入集群" class="headerlink" title="在启动时自动加入集群"></a>在启动时自动加入集群</h3><p>理想情况下，每当一个新节点出现在数据中心时，它应该自动加入集群而不需要人工干预。</p><p><br><br><br></p><h3 id="查询节点"><a href="#查询节点" class="headerlink" title="查询节点"></a>查询节点</h3><p>就像查询服务，consul有一个API用于查询节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#NAME.node.consul或NAME.node.DATACENTER.conosul</span><br><span class="line">dig @localhost -p 8600 agent-one.node.consul</span><br><span class="line">dig @127.0.0.1 -p 8600 agent-two.node.consul</span><br></pre></td></tr></table></figure><p><br></p><h3 id="离开集群"><a href="#离开集群" class="headerlink" title="离开集群"></a>离开集群</h3><ul><li>优雅的退出: <code>Ctrl+C</code></li><li>强制<code>kill</code></li></ul><p><br><br><br></p><h2 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h2><p>对节点和服务添加健康检查(health check)。<br>健康检查是服务发现的关键组件，可以防止使用不健康的服务。</p><p><br></p><h3 id="定义检查"><a href="#定义检查" class="headerlink" title="定义检查"></a>定义检查</h3><p>与服务类似，一个检查能够通过定义检查或适当调用HTTP API来两种方式来注册。</p><p>定义<strong>检查</strong>是一个最基本和推荐的方法。</p><p>在consul配置目录中创建检查定义文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#在基于脚本的健康检查上，它与consul进程使用同样的用户</span><br><span class="line">#如果命令以非0状态码退出，则该节点会被标记为unhealthy</span><br><span class="line"></span><br><span class="line">echo &apos;&#123;&quot;check&quot;: &#123;&quot;name&quot;: &quot;ping&quot;, &quot;args&quot;: [&quot;ping&quot;, &quot;-c1&quot;, &quot;baidu.com&quot;], &quot;interval&quot;: &quot;30s&quot;&#125;&#125;&apos; &gt;/etc/consul.d/ping.json</span><br><span class="line"></span><br><span class="line">echo &apos;&#123;&quot;service&quot;: &#123;&quot;name&quot;: &quot;web&quot;, &quot;tags&quot;: [&quot;rails&quot;], &quot;port&quot;: 80, &quot;check&quot;: &#123;&quot;args&quot;: [&quot;curl&quot;, &quot;localhost&quot;], &quot;interval&quot;: &quot;10s&quot;&#125;&#125;&#125;&apos; &gt;/etc/consul.d/web.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">consul reload</span><br></pre></td></tr></table></figure><p><br></p><h2 id="检查健康状态"><a href="#检查健康状态" class="headerlink" title="检查健康状态"></a>检查健康状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8500/v1/health/state/critical</span><br><span class="line"></span><br><span class="line">dig @127.0.0.1 -p 8600 web.service.consul</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="KV数据"><a href="#KV数据" class="headerlink" title="KV数据"></a>KV数据</h2><p>Consul提供了一个易于使用的KV存储。这可以用来保存动态配置，协助服务协调，构建leader选举，并启用开发人员可以考虑构建的任何其它内容。</p><p><br></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>有两种方法与Consul K/V交互的方式：</p><ul><li>HTTP API</li><li>Consul KV CLI</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#CLI</span><br><span class="line">consul kv --help</span><br><span class="line"></span><br><span class="line">consul kv put name zhang</span><br><span class="line">consul kv get name</span><br><span class="line">#zhang</span><br><span class="line"></span><br><span class="line">consul kv get -detailed name</span><br><span class="line"></span><br><span class="line">consul kv puut -flags=42 who zhang21</span><br><span class="line">#所有key都支持设置一个64位的整数标志值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#列出所有kv</span><br><span class="line">consul kv get -recurse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">consul kv delete name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#使用 Check-And-Set 进行原子更新</span><br><span class="line">consul kv put -cas -modify-index=112 NAME zhang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#导出与导入</span><br><span class="line">consul kv export &gt; xxx.json</span><br><span class="line"></span><br><span class="line">consul kv import $xxx.json</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Web界面"><a href="#Web界面" class="headerlink" title="Web界面"></a>Web界面</h2><p>Consul支持美观的Web界面。用户界面可以查看所有的服务和节点，查看所有健康检查和当前状态，读取和设置kv数据，并自动支持多数据中心。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consul agent -ui</span><br><span class="line"></span><br><span class="line">#localhost:8500/ui</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="内部详情"><a href="#内部详情" class="headerlink" title="内部详情"></a>内部详情</h1><p>Consul Internals</p><p>介绍Consul内部详情。</p><p><br></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Architecture</p><p><br></p><h3 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h3><p>Glossary</p><ul><li>Agent</li><li>Client</li><li>Server</li><li>Datacenter</li><li>Consensus</li><li>Gossip<ul><li>LAN Geossip</li><li>WAN Geossip</li></ul></li><li>RPC</li></ul><p><br></p><p><img src="/images/consul-arch-420ce04a.png" alt="Consul"></p><p><br><br><br></p><h2 id="Consensus协议"><a href="#Consensus协议" class="headerlink" title="Consensus协议"></a>Consensus协议</h2><p>Consul使用consensus(共识) protocol来提供一致性(consistency)，它基于<strong>Raft</strong>(In search of an Understandable Consensus Algorithm)</p><p><br></p><h3 id="Raft协议"><a href="#Raft协议" class="headerlink" title="Raft协议"></a>Raft协议</h3><p>Raft是基于Paxos的共识算法。</p><p>Raft的一些关键术语：</p><ul><li><p>Log<br>The primary unit of work in a Raft system is a log entry.</p></li><li><p>FSM(Finite State Machine)<br>An FSM(有限状态机) is a collection of finite states with transitions between them.</p></li><li><p>Peer set<br>The peer set(对等集) is the set of all members participating in log replication.</p></li><li><p>Quorum<br>A quorum(仲裁) is a majority of members from a peer set: for a set of size n, quorum requires at least (n/2)+1 members. </p></li><li><p>Committed Entry<br>An entry is considered committed when it is durably stored on a quorum of nodes.</p></li><li><p>Leader<br>At any given time, the peer set elects a single node to be the leader.</p></li></ul><p><br></p><p>Raft节点总是处于如下三种状态之一：</p><ul><li>follower(追随者)</li><li>candidate(候选者)</li><li>leader(领导者)</li></ul><p>所有节点最初都是作为follower开始的。在这种状态下，节点可接受leader的日志条目并投票。如果一段时间内没有收到任何条目，则节点会自我提升到candidate。<br>在candidate状态下，节点请求来自对等节点的投票。如果候选人获得仲裁(quorum)的票数，那么它将被提升为leader。<br>leader必须接受新的日志条目并复制给其它所有follower。另外，如果陈旧读取不可接受，则所有查询也必须在leader上执行。</p><p>一旦集群具有leader，它就能够接受新的日志条目。Client可以请求leader添加新的日志条目。然后，leader将条目持久化，并尝试复制到仲裁的follower。一旦日志条目被认为提交(committed)，它就可以应用于有限状态机(FSM)。<br>显然，允许复制日志以无限制的方式增长是不可取的。Raft提供了一种机制，可通过快照(snapshot)当前状态并压缩日志。<br>达成共识是容错的，直到法定人数可用。<br>建议为每个数据中心配置3-5台Consul Server。3个节点的Raft集群可以容忍单个节点故障，5个节点的Raft集群可以容忍2个节点故障。这可最大限制提高可用性。</p><p><br></p><h3 id="Raft-in-Consul"><a href="#Raft-in-Consul" class="headerlink" title="Raft in Consul"></a>Raft in Consul</h3><p>只有Consul Server节点参与Raft，并且是对等集的一部分。所有的Client节点都将请求转发给Server。</p><p>当启动的时候，单个Consul Server进入<strong>bootstrap</strong>模式，此模式允许它进行自我选举为leader。leader选出后，可以以一致性和安全性的方式将其它Server添加到对等集，之后，就可以禁用bootstrap模式。<br>由于所有的Server作为对等集的一部分参与，因此他们都知道当前的leader。当一个RPC请求到达了non-leader Server时，请求被转发给leader。</p><ul><li>如果RPC是查询(query)类型，意味着它是只读的，则leader根据FSM的当前状态生成结果</li><li>如果RPC是事务(transaction)类型，意味着它是可修改的，则leader生成新的日志条目并使用Raft应用它</li></ul><p>提交日志条目并将其应用于FSM后，事务就完成了。</p><p>由于Raft副本的性质，性能对网络延迟很敏感。因此，每个数据中心选择一个独立的leader并维护一个不相交的对等集。数据由数据中心分区，每个leader仅负责其数据中心中的数据。</p><p><br></p><h3 id="一致性模式"><a href="#一致性模式" class="headerlink" title="一致性模式"></a>一致性模式</h3><p>Consistency Modes</p><p>虽然对副本日志的所有写入都通过Raft，但读取却更加灵活。<br>Consul支持3种不同的读取一致性模式：</p><ul><li>default</li><li>consistent</li><li>stale</li></ul><p><br></p><h3 id="部署表"><a href="#部署表" class="headerlink" title="部署表"></a>部署表</h3><table><thead><tr><th>Servers</th><th>Quorum Size</th><th>Failere Tolerance</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>2</td><td>2</td><td>0</td></tr><tr><td>3</td><td>2</td><td>1</td></tr><tr><td>4</td><td>3</td><td>1</td></tr><tr><td>5</td><td>3</td><td>2</td></tr><tr><td>6</td><td>4</td><td>2</td></tr><tr><td>7</td><td>4</td><td>3</td></tr></tbody></table><p><br><br><br></p><h2 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h2><p>Consul 使用gossip协议来管理成员并向集群发送广播信息。所有这些都通过Serf Library提供。</p><p><br></p><h3 id="Goossip-in-Consul"><a href="#Goossip-in-Consul" class="headerlink" title="Goossip in Consul"></a>Goossip in Consul</h3><p>Consul使用两个不同的gossip pools:</p><ul><li>LAN pool</li><li>WAN pool</li></ul><p><br><br><br></p><h2 id="网络坐标"><a href="#网络坐标" class="headerlink" title="网络坐标"></a>网络坐标</h2><p>Network Coordinates</p><p>Consul使用网络层层析系统来计算集群中节点的网络坐标。这些坐标允许使用非常简单的计算在任意两个节点之间估计网络往返时间。所有这些都通过使用Serf Library。</p><p><br></p><h3 id="Consul中的网络坐标"><a href="#Consul中的网络坐标" class="headerlink" title="Consul中的网络坐标"></a>Consul中的网络坐标</h3><p>Network Coordinates in Consul</p><p>网络坐标在Consul中有多种表现方式：</p><ul><li><code>consul rtt</code></li><li>Catalog/Health endpoints</li><li>Prepared query</li><li>Coordinate endpoint</li></ul><p><br></p><h3 id="使用坐标"><a href="#使用坐标" class="headerlink" title="使用坐标"></a>使用坐标</h3><p>一旦你有了两个节点的坐标，则计算它们间的往返时间是很简单的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;Coord&quot;: &#123;</span><br><span class="line">    &quot;Adjustment&quot;: 0.1,</span><br><span class="line">    &quot;Error&quot;: 1.5,</span><br><span class="line">    &quot;Height&quot;: 0.02,</span><br><span class="line">    &quot;Vec&quot;: [0.34,0.68,0.003,0.01,0.05,0.1,0.34,0.06]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>Sessions</p><p>consul提供了一个用于构建分布式锁的会话机制。会话充当节点、健康检查和K/V数据之间的监听层。</p><p><br></p><h3 id="会话设计"><a href="#会话设计" class="headerlink" title="会话设计"></a>会话设计</h3><p><br><br><br></p><hr><p><br></p><h1 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h1><h2 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h2><p>Consul Agent是Consul的核心进程。它维护成员关系信息，注册服务，运行检查，响应查询…<br>Consul Agent必须运行在在Consul集群的每个节点上。</p><p>Agent有两种运行模式：</p><ul><li>server</li><li>client</li></ul><p>Server节点承担了作为<strong>consensus quorum(共识法人)</strong>的额外责任，这些节点参与Raft，并在出现故障时提供强大的一致性和可用性。<br>Client节点构成了集群的大部分，它们非常轻便。因为它们与Server进行大部分操作，保持自己的状态则很少。</p><p><br></p><p><strong>运行Agent</strong><br>以下是一些重要信息：</p><ul><li>Node name</li><li>Datacenter</li><li>Server</li><li>Client addr</li><li>Cluster addr</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接指定配置项运行</span></span><br><span class="line">consul agent -options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将配置项写入文件，指定配置目录运行</span></span><br><span class="line">mkdir /etc/consul.d</span><br><span class="line">vim /etc/consul.d/consul.json</span><br><span class="line"></span><br><span class="line">consul agent -config-dir=/etc/consul.d</span><br></pre></td></tr></table></figure><p><br></p><p><strong>停止Agent</strong><br>有两种停止方式：</p><ul><li><p>gracefully<br>发送中断信号<code>ctrl+c</code>或运行<code>kill -INT</code>。优雅地退出，Agent首先通知集群它要离开集群。这样，集群便会通知其它成员该节点已离开。</p></li><li><p>forcefully<br>通过<code>kill signal</code>来强制杀掉Consul。集群的其余部分最终会检测到该节点已死亡并通知集群节点已失效。</p></li></ul><p>特别重要的是允许Server节点优雅地离开，以便对可用性产生最小的影响。<br>对于Client Agent来说，节点失效和节点离开的区别对用例并不是那么重要。</p><p><br></p><p><strong>生命周期</strong><br>Consul集群中的每个Agent都会经历一个生命周期(lifecycle)。<br>当Agent首次启动时，他并不知道集群中的其它任何节点。要发现它的同伴，它必须加入集群。这使用<code>join</code>命令或在配置文件中配置。一旦一个节点加入，这个信息就会传递给整个集群，这意味着所有节点最终都会意识到对方。<br>如果Agent是一个Server，则已经存在的Server就会开始复制(replicating)到新节点。</p><p>在网络故障的情况下，某些节点可能无法被其它节点访问。在这种情况下，无法访问的节点被标记为失败(failed)。无法区分网络故障和Agent崩溃，因此两种情况的处理方式都是相同的。该信息将在service catalog中被更新。</p><p>当一个节点离开时，它指定了它的意图，并且集群将该节点标记为已离开。与失败(failed)不同，节点提供的所有服务都立即注销(deregistered)。如果Agent是Server，则对其的复制(replication)将停止。</p><p>为了防止死亡(failed/left)节点的堆积，Consul会自动将死亡节点从目录中移除。这个过程被称为<strong>收割(reaping)</strong>。</p><p><br><br><br></p><h2 id="DNS接口"><a href="#DNS接口" class="headerlink" title="DNS接口"></a>DNS接口</h2><p>DNS接口允许应用程序利用服务发现，而无需与Consul进行高度整合。</p><p>有几个重要的配置项：</p><ul><li><code>client_addr</code></li><li><code>ports.dns</code></li><li><code>recursors</code></li><li><code>domain</code></li><li><code>dns_config</code></li></ul><p><strong>数据中心部分是可选的，如果没有提供，则默认为Agent自身的数据中心。</strong></p><p><br></p><p><strong>节点查找</strong><br>为了解析名称(name)，Consul依赖于特定的查询格式。基本上有两种类型的查询：</p><ul><li>node lookup</li><li>service lookup</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#node lookup</span><br><span class="line">&lt;node&gt;.node[.datacenter].&lt;domain&gt;</span><br><span class="line"></span><br><span class="line">node1.node.dc1.consul</span><br><span class="line">node1.node.consul</span><br><span class="line"></span><br><span class="line">dig @127.0.0.1 -p 8600 node1.node.consul</span><br></pre></td></tr></table></figure><p><br></p><p><strong>服务查找</strong><br>服务查找用于查询你服务提供者。</p><p>有两种查询方式：</p><ul><li>标准查询<br>DNS查询系统利用健康检查信息来防止路由到不健康的节点。为了实现简单的负载均衡，每次返回的节点集都是随机的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[tag.]&lt;service&gt;.service[.datacenter].&lt;domain&gt;</span><br><span class="line"></span><br><span class="line">redis.service.consul</span><br><span class="line">postgresql.service.dc2.consul</span><br><span class="line"></span><br><span class="line">dig @127.0.0.1 -p 8600 redis.service.consul SRV</span><br></pre></td></tr></table></figure><ul><li>RFC 2782查询<br>RFC 2782使用<code>_</code>下划线作为查询中服务和协议值的前缀，以防止DNS冲突。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_&lt;service&gt;._&lt;protocol&gt;[.service][.datacenter][.domain]</span><br><span class="line"></span><br><span class="line">dig @127.0.0.1 -p 8600 _rabbitmq._amqp.service.consul SRV</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Prepared Query Lookups</strong><br>The query or name is the ID or given name of an existing Prepared Query.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;query or name&gt;.query[.datacenter].&lt;domain&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>可连接的服务查找</strong><br>Connect-Capable Service Lookups.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;service&gt;.connect.&lt;domain&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Caching</strong><br>默认情况下，Consul服务的所有DNS结果都会设置一个为0的TTL。这会禁用DNS结果的缓存。但，很多情况下，缓存对性能和伸缩性都是可取的。</p><p><br></p><p><strong>WAN地址转换</strong><br>默认情况下，Consul DNS查询将会返回一个节点的本地地址。如果你需要外部地址，则可使用<code>advertise-wan</code>和<code>translate_wan_addrs</code>选项来配置此行为。</p><p><br><br><br></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Agent有许多通过命令行或配置文件配置的配置项。配置优先级如下：</p><ol><li>命令行参数</li><li>环境变量</li><li>配置文件</li></ol><p>配置文件可以是<strong>HCL</strong>或<strong>JSON</strong>格式。<br>Consul可通过<code>reload</code>命令重新载入配置文件。</p><p><br><br><br></p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>Consul默认使用的端口：</p><ul><li><p>8300(tcp)<br>Server RPC. Server用于处理来自其它Agent的传入请求。</p></li><li><p>8301(tcp/udp)<br>Serf LAN. 用于处理LAN中的gossip，所有Agent都需要。</p></li><li><p>8302(tcp/udp)<br>Serf WAN. Server用于处理WAN上gossip到其它Server。</p></li><li><p>8500(tcp)<br>HTTP API.</p></li><li><p>8600(tcp/udp)<br>DNS Interface.</p></li></ul><p><br><br><br></p><h3 id="可重新加载的配置"><a href="#可重新加载的配置" class="headerlink" title="可重新加载的配置"></a>可重新加载的配置</h3><p>Reloadable Configuration</p><p>重新加载配置文件不会加载所有配置项，如下这些配置项是可重新载入的：</p><ul><li>log level</li><li>checks</li><li>services</li><li>watches</li><li>http client address</li><li>node metadata</li><li>metric prefix filter</li><li>discard check output</li><li>rpc rate limiting</li></ul><p><br><br><br></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件不仅用于设置代理，还用于提供检查和服务定义。</p><p>配置文件选项和命令行参数稍微有点不一样。<br>使用<code>consul agent -h</code>查看具体配置项。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#开始栗子</span><br><span class="line">vim /etc/consul.d/single.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;bind_addr&quot;: &quot;192.168.1.11&quot;,</span><br><span class="line">&quot;bootstrap&quot;: true,</span><br><span class="line">&quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">&quot;datacenter&quot;: &quot;zhang&quot;,</span><br><span class="line">&quot;data_dir&quot;: &quot;/var/lib/consul&quot;,</span><br><span class="line">&quot;log_level&quot;: &quot;WARN&quot;,</span><br><span class="line">&quot;node_name&quot;: &quot;zhang21&quot;,</span><br><span class="line">&quot;server&quot;: true,</span><br><span class="line">&quot;enable_syslog&quot;: true,</span><br><span class="line">&quot;ui&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#集群配置</span><br><span class="line">vim /etc/consul.d/cluster.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;bind_addr&quot;: &quot;xxx&quot;,</span><br><span class="line">&quot;bootstrap_expect&quot;: 2,</span><br><span class="line">&quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">&quot;datacenter&quot;: &quot;zhang&quot;,</span><br><span class="line">&quot;data_dir&quot;: &quot;/var/lib/consul&quot;,</span><br><span class="line">&quot;encrypt&quot;: &quot;a1b8vAA2==@xyz&quot;,</span><br><span class="line">&quot;log_level&quot;: &quot;WARN&quot;,</span><br><span class="line">&quot;node_name&quot;: &quot;zhang21&quot;,</span><br><span class="line">&quot;node_id&quot;: &quot;zhang21&quot;,</span><br><span class="line">&quot;server&quot;: true,</span><br><span class="line">&quot;enable_syslog&quot;: true,</span><br><span class="line">&quot;ui&quot;: true,</span><br><span class="line">&quot;retry_interval&quot;: 20s,</span><br><span class="line">&quot;retry_join&quot;: [</span><br><span class="line">&quot;consul.domain.internal&quot;,</span><br><span class="line">&quot;10.0.1.2:8301&quot;,</span><br><span class="line">&quot;[::1]:8301&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="服务定义"><a href="#服务定义" class="headerlink" title="服务定义"></a>服务定义</h2><p>服务发现的主要目标之一是提供可用服务的目录(catalog)。为此，Agent提供了一种简单的服务定义格式来声明服务的可用性，并可能将其与健康检查相关联。如果健康检查与服务关联，则认为它是应用程序级别。</p><p><br></p><h3 id="服务定义-1"><a href="#服务定义-1" class="headerlink" title="服务定义"></a>服务定义</h3><p>服务定义方式：</p><ul><li>配置文件(推荐)</li><li>HTTP API</li></ul><p>一个服务定义包含的字段：</p><ul><li>name(必须)</li><li>id(可选)</li><li>tags(可选)</li><li>address(可选)</li><li>port(可选)</li><li>check(可选)</li><li>meta(可选)</li><li><code>enable_tag_override</code>(可选)</li><li>token(可选)</li></ul><p>id必须唯一，如果未设置id，默认使用name。</p><p><br></p><p>服务可以关联健康检查，这是一个强大的功能。<br>检查必须是脚本、HTTP、TCP或TTL类型。</p><ul><li>脚本类型，必须提供参数和间隔</li><li>HTTP类型，必须提供http和interval</li><li>TCP类型，必须提供tcp和interval</li><li>TTL类型，只能提供ttl</li></ul><p>检查名称自动生成为: <code>service:&lt;service-id&gt;</code>，如果有多个服务检查注册，生成的id为： <code>service:&lt;service:-id&gt;:&lt;num&gt;</code>，num是从1开始递增的数字。</p><p><br></p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/consul.d/redis.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;service&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;redis&quot;,</span><br><span class="line">        &quot;id&quot;: &quot;redis01&quot;,</span><br><span class="line">        &quot;tags&quot;: [</span><br><span class="line">            &quot;master&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;port&quot;: 6379,</span><br><span class="line">        &quot;meta&quot;: &#123;</span><br><span class="line">            &quot;meta&quot;: &quot;service definition for redis&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;enable_tag_override&quot;: false,</span><br><span class="line"></span><br><span class="line">        &quot;check&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: &quot;redisTCP&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;redis service check&quot;,</span><br><span class="line">            &quot;tcp&quot;: &quot;localhost:6379&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;10s&quot;,</span><br><span class="line">            &quot;timeout&quot;: &quot;1s&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="多个服务定义"><a href="#多个服务定义" class="headerlink" title="多个服务定义"></a>多个服务定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;services&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;red0&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;redis&quot;,</span><br><span class="line">      &quot;tags&quot;: [</span><br><span class="line">        &quot;primary&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;address&quot;: &quot;&quot;,</span><br><span class="line">      &quot;port&quot;: 6000,</span><br><span class="line">      &quot;checks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;args&quot;: [&quot;/bin/check_redis&quot;, &quot;-p&quot;, &quot;6000&quot;],</span><br><span class="line">          &quot;interval&quot;: &quot;5s&quot;,</span><br><span class="line">          &quot;ttl&quot;: &quot;20s&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;red1&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;redis&quot;,</span><br><span class="line">      &quot;tags&quot;: [</span><br><span class="line">        &quot;delayed&quot;,</span><br><span class="line">        &quot;secondary&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;address&quot;: &quot;&quot;,</span><br><span class="line">      &quot;port&quot;: 7000,</span><br><span class="line">      &quot;checks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;args&quot;: [&quot;/bin/check_redis&quot;, &quot;-p&quot;, &quot;7000&quot;],</span><br><span class="line">          &quot;interval&quot;: &quot;30s&quot;,</span><br><span class="line">          &quot;ttl&quot;: &quot;60s&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="检查定义"><a href="#检查定义" class="headerlink" title="检查定义"></a>检查定义</h2><p>Agent的主要角色便是管理系统级和应用级的健康检查。<br>一个检查的定义有两种方式：</p><ul><li>配置文件</li><li>HTTP API</li></ul><p><br></p><p>检查方式：</p><ul><li>Script + Interval</li><li>HTTP + Interval</li><li>TCP + Interval</li><li>TTL</li><li>Docker + Interval</li><li>gRPC + Interval</li></ul><p><br></p><h3 id="定义检查-1"><a href="#定义检查-1" class="headerlink" title="定义检查"></a>定义检查</h3><p>A script check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;mem-util&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Memory utilization&quot;,</span><br><span class="line">    &quot;args&quot;: [&quot;/usr/local/bin/check_mem.py&quot;, &quot;-limit&quot;, &quot;256MB&quot;],</span><br><span class="line">    &quot;interval&quot;: &quot;10s&quot;,</span><br><span class="line">    &quot;timeout&quot;: &quot;1s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>A HTTP check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;api&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;HTTP API on port 5000&quot;,</span><br><span class="line">    &quot;http&quot;: &quot;https://localhost:5000/health&quot;,</span><br><span class="line">    &quot;tls_skip_verify&quot;: false,</span><br><span class="line">    &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">    &quot;header&quot;: &#123;&quot;x-foo&quot;:[&quot;bar&quot;, &quot;baz&quot;]&#125;,</span><br><span class="line">    &quot;interval&quot;: &quot;10s&quot;,</span><br><span class="line">    &quot;timeout&quot;: &quot;1s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>A TCP check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;ssh&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;SSH TCP on port 22&quot;,</span><br><span class="line">    &quot;tcp&quot;: &quot;localhost:22&quot;,</span><br><span class="line">    &quot;interval&quot;: &quot;10s&quot;,</span><br><span class="line">    &quot;timeout&quot;: &quot;1s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>A TTL check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;web-app&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Web App Status&quot;,</span><br><span class="line">    &quot;notes&quot;: &quot;Web app does a curl internally every 10 seconds&quot;,</span><br><span class="line">    &quot;ttl&quot;: &quot;30s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>A Docker check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;mem-util&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Memory utilization&quot;,</span><br><span class="line">    &quot;docker_container_id&quot;: &quot;f972c95ebf0e&quot;,</span><br><span class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">    &quot;args&quot;: [&quot;/usr/local/bin/check_mem.py&quot;],</span><br><span class="line">    &quot;interval&quot;: &quot;10s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>A gRPC check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;mem-util&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Service health status&quot;,</span><br><span class="line">    &quot;grpc&quot;: &quot;127.0.0.1:12345&quot;,</span><br><span class="line">    &quot;grpc_use_tls&quot;: true,</span><br><span class="line">    &quot;interval&quot;: &quot;10s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="检查脚本"><a href="#检查脚本" class="headerlink" title="检查脚本"></a>检查脚本</h3><p>使用<code>enable_script_checks</code>选项来启用脚本检查。</p><p>检查脚本的退出码(exit code)必须遵循如下约定：</p><ul><li><p>exit code o<br>检查通过</p></li><li><p>exit code 1<br>检查警告</p></li><li><p>any exit code<br>检查失败</p></li></ul><p><br></p><h3 id="初始化健康检查状态"><a href="#初始化健康检查状态" class="headerlink" title="初始化健康检查状态"></a>初始化健康检查状态</h3><p>在某些情况下，可能需要指定健康检查的初始状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;mem&quot;,</span><br><span class="line">    &quot;args&quot;: [&quot;/bin/check_mem&quot;, &quot;-limit&quot;, &quot;256MB&quot;],</span><br><span class="line">    &quot;interval&quot;: &quot;10s&quot;,</span><br><span class="line">    &quot;status&quot;: &quot;passing&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="绑定服务检查"><a href="#绑定服务检查" class="headerlink" title="绑定服务检查"></a>绑定服务检查</h3><p>健康检查可以选择性地绑定到特定服务。这可以确保健康检查的状态只会影响给定服务的健康状态，而不会影响整个节点。<br>服务绑定检查需要添加一个<code>service_id</code>字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;web-app&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Web App Status&quot;,</span><br><span class="line">    &quot;service_id&quot;: &quot;web-app&quot;,</span><br><span class="line">    &quot;ttl&quot;: &quot;30s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="定义多个检查"><a href="#定义多个检查" class="headerlink" title="定义多个检查"></a>定义多个检查</h3><p>使用<code>checks</code>来定义多个服务检查。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;checks&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;chk1&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;mem&quot;,</span><br><span class="line">      &quot;args&quot;: [&quot;/bin/check_mem&quot;, &quot;-limit&quot;, &quot;256MB&quot;],</span><br><span class="line">      &quot;interval&quot;: &quot;5s&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;chk2&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;/health&quot;,</span><br><span class="line">      &quot;http&quot;: &quot;http://localhost:5000/health&quot;,</span><br><span class="line">      &quot;interval&quot;: &quot;15s&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;chk3&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;cpu&quot;,</span><br><span class="line">      &quot;script&quot;: &quot;/bin/check_cpu&quot;,</span><br><span class="line">      &quot;interval&quot;: &quot;10s&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>Encryption</p><p>Consul Agent支持加密所有流量。有两个独立的加密系统：</p><ul><li>gossip流量</li><li>RPC</li></ul><p><br></p><h3 id="gossip加密"><a href="#gossip加密" class="headerlink" title="gossip加密"></a>gossip加密</h3><p>启用geossip加密只需要你在启动Consul Agent时设置加密密钥(encryption key)。密钥是16Bytes的Base64编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">consul keygen</span><br><span class="line">FDGDpW55oCYJlh555Es1gA==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim /etc/consul.d/cluster.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;encrypt&quot;: &quot;FDGDpW55oCYJlh555Es1gA==&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>consul集群的所有节点必须共享相同的加密密钥！</p><p><br></p><h3 id="RPC加密"><a href="#RPC加密" class="headerlink" title="RPC加密"></a>RPC加密</h3><p>Consul支持使用TLS来验证Server和Client之间的真实性。它们之间使用由证书机构颁发的密钥对，你可以自己生成CA。</p><p><br><br><br></p><h2 id="Telemetry"><a href="#Telemetry" class="headerlink" title="Telemetry"></a>Telemetry</h2><p>Consul Agent收集有关不同库和子系统的各种运行时指标。这些指标以10s为间隔进行汇总，并保留1min。<br>查看这些数据，你需要向Consul进程发送信号：</p><ul><li>Unix: USR1</li><li>Windows: BREAK</li></ul><p>Consul收到信号后，它将当前的遥测(telemetry)信息转储到Agent’s STDERR。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#USR1 10</span><br><span class="line">kill -10 $&#123;consul-pid&#125;</span><br></pre></td></tr></table></figure><p>详情: <a href="https://www.consul.io/docs/agent/telemetry.html" target="_blank" rel="noopener">https://www.consul.io/docs/agent/telemetry.html</a></p><p><br><br><br></p><h2 id="Watches"><a href="#Watches" class="headerlink" title="Watches"></a>Watches</h2><p>watches是一种指定检测更新的数据视图的方式。检测到更新，将调用外部处理程序。<br>watch使用HTTP API中的blocking query，Agent自动进行适当的API调用已检测更新，并在数据视图更新时通知处理程序。<br>watch可以配置为Agent configuration的一部分，watch也可以在Agent之外启动。</p><p><br></p><h3 id="处理程序"><a href="#处理程序" class="headerlink" title="处理程序"></a>处理程序</h3><p>监测配置指定要监测的数据视图，更新视图后，将调用指定的处理程序(Handler)。外部程序可为可执行程序(executable)或HTTP endpoint。</p><ul><li><strong>可执行程序</strong><br>可执行处理程序从stdin读取json信息，此外<code>CONSUL_INDEX</code>环境变量将被设置为Consul Index写入stdout。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;key&quot;,</span><br><span class="line">  &quot;key&quot;: &quot;foo/bar/baz&quot;,</span><br><span class="line">  &quot;handler_type&quot;: &quot;script&quot;,</span><br><span class="line">  &quot;args&quot;: [&quot;/usr/bin/my-service-handler.sh&quot;, &quot;-redis&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#在consul v1.0以后，args数组被添加，以便可在没有shell的情况下运行处理程序</span><br></pre></td></tr></table></figure><p><br></p><ul><li><strong>HTTP endpoint</strong><br>当watch被调用时发送HTTP请求给HTTP处理程序。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;key&quot;,</span><br><span class="line">  &quot;key&quot;: &quot;foo/bar/baz&quot;,</span><br><span class="line">  &quot;handler_type&quot;: &quot;http&quot;,</span><br><span class="line">  &quot;http_handler_config&quot;: &#123;</span><br><span class="line">    &quot;path&quot;:&quot;https://localhost:8000/watch&quot;,</span><br><span class="line">    &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">    &quot;header&quot;: &#123;&quot;x-foo&quot;:[&quot;bar&quot;, &quot;baz&quot;]&#125;,</span><br><span class="line">    &quot;timeout&quot;: &quot;10s&quot;,</span><br><span class="line">    &quot;tls_skip_verify&quot;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="全局参数"><a href="#全局参数" class="headerlink" title="全局参数"></a>全局参数</h3><p>Global Parameters</p><ul><li>datacenter</li><li>token</li><li>args</li><li>handler</li></ul><p><br></p><h3 id="Watch类型"><a href="#Watch类型" class="headerlink" title="Watch类型"></a>Watch类型</h3><ul><li>key</li><li>keyprefix</li><li>services</li><li>nodes</li><li>service</li><li>checks</li><li>event</li></ul><p><br></p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consul watch -type service -service redis</span><br><span class="line"></span><br><span class="line">consul watch -type checks -service redis</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#key</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;key&quot;,</span><br><span class="line">  &quot;key&quot;: &quot;foo/bar/baz&quot;,</span><br><span class="line">  &quot;args&quot;: [&quot;/usr/bin/my-service-handler.sh&quot;, &quot;-redis&quot;]</span><br><span class="line">&#125;</span><br><span class="line">#or</span><br><span class="line">consul watch -type=key -key=foo/bar/baz /usr/bin/my-key-handler.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#keyprefix</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;keyprefix&quot;,</span><br><span class="line">  &quot;prefix&quot;: &quot;foo/&quot;,</span><br><span class="line">  &quot;args&quot;: [&quot;/usr/bin/my-service-handler.sh&quot;, &quot;-redis&quot;]</span><br><span class="line">&#125;</span><br><span class="line">#or</span><br><span class="line">consul watch -type=keyprefix -prefix=foo/ /usr/bin/my-prefix-handler.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#services</span><br><span class="line">&#123;</span><br><span class="line">  &quot;redis&quot;: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#nodes</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Node&quot;: &quot;node1&quot;,</span><br><span class="line">&quot;Address&quot;: &quot;192.168.1.11&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Node&quot;: &quot;node2&quot;,</span><br><span class="line">&quot;Address&quot;: &quot;xxx&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#service</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;service&quot;,</span><br><span class="line">  &quot;service&quot;: &quot;redis&quot;,</span><br><span class="line">  &quot;args&quot;: [&quot;/usr/bin/my-service-handler.sh&quot;, &quot;-redis&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#check</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Node&quot;: &quot;foobar&quot;,</span><br><span class="line">    &quot;CheckID&quot;: &quot;service:redis&quot;,</span><br><span class="line">    &quot;Name&quot;: &quot;Service &apos;redis&apos; check&quot;,</span><br><span class="line">    &quot;Status&quot;: &quot;passing&quot;,</span><br><span class="line">    &quot;Notes&quot;: &quot;&quot;,</span><br><span class="line">    &quot;Output&quot;: &quot;&quot;,</span><br><span class="line">    &quot;ServiceID&quot;: &quot;redis&quot;,</span><br><span class="line">    &quot;ServiceName&quot;: &quot;redis&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#event</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;event&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;web-deploy&quot;,</span><br><span class="line">  &quot;args&quot;: [&quot;/usr/bin/my-service-handler.sh&quot;, &quot;-web-deploy&quot;]</span><br><span class="line">&#125;</span><br><span class="line">#or</span><br><span class="line">consul watch -type=event -name=web-deploy /usr/bin/my-deploy-handler.sh -web-deploy</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h1><p>Consul Guide</p><p>本节提供了Consul各种常见的操作指南。</p><p>如下：</p><ul><li><p><strong>ACLs</strong><br>Consul访问控制列表，该功能用于控制对资源的访问。</p></li><li><p><strong>Adding/Removing Servers</strong><br>从集群中安全地添加和删除Consul Server，这应该小心操作。</p></li><li><p><strong>Autopilot</strong><br>为Consul Server提供自动友好操作的管理。</p></li><li><p><strong>Bootstrapping</strong><br>引导新的数据中心，包括安全地添加初始化Consul Server。</p></li><li><p><strong>Consul with Container</strong><br>在容器内运行Consul Cluster。</p></li><li><p><strong>DNS Caching</strong><br>为DNS查询缓存启用TTLS</p></li><li><p><strong>DNS Forwarding</strong><br>从BIND转发DNS查询到Consul</p></li><li><p><strong>External Services</strong><br>注册外部服务。允许在Consul框架内使用第三方服务。</p></li><li><p><strong>Federation</strong><br>配置Consul以支持多个数据中心。</p></li><li><p><strong>Geo Failover</strong><br>用准备好的查询来实现服务的地理故障转移。</p></li><li><p><strong>Leader Election</strong><br>使用Consul构建Client端的领导选举。</p></li><li><p><strong>Network Segments</strong><br>配置Consul使用网段-支持部分LAN连接。</p></li><li><p><strong>Outage Recovery</strong><br>恢复因Server故障而无法使用的集群。</p></li><li><p><strong>Semaphore</strong><br>使用KV存储实现一个信号量</p></li><li><p><strong>Sentinel</strong><br>使用哨兵模式在Consul中执行策略。</p></li><li><p><strong>Server Performance</strong><br>Consul Server的最低要求以及生产环境中运行Consul Server的指南。</p></li></ul><p><br><br><br></p><h2 id="ACLs"><a href="#ACLs" class="headerlink" title="ACLs"></a>ACLs</h2><p>Consul提供可选的访问控制列表系统，用于控制对数据和API的访问。它依赖于规则的token.</p><p>访问控制列表旨在提供易于使用，快速执行和灵活的新策略。</p><p><br></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>ACL Tokens</strong><br>访问控制列表系统基于token(令牌)，由Consul操作者通过 Consul ACL API进行管理。<br>如果没有提供token，则会自动关联与特殊的可配置匿名令牌(anonymous token)的规则。</p><p>每个token具有：</p><ul><li>ID</li><li>name</li><li>type<ul><li>client</li><li>management</li></ul></li><li>rule set(规则集)</li></ul><p><br></p><p><strong>ACL Rules and Scope</strong><br>token绑定到一组规则，用于控制令牌可以访问的Consul资源。可在白名单(whitelist)/黑名单(blacklist)下定义策略，这取决于默认策略<code>acl_default_policy</code>的值。</p><p>构建规则的ACL策略：</p><ul><li><p>agent<br>用于Agent API</p></li><li><p>event<br>用于Event API</p></li><li><p>key<br>用于KV Store API</p></li><li><p>keyring<br>用于Keyring API</p></li><li><p>node<br>用于Catalog API, Health API, Prepare Query API, Network Coordinate API， Agent API</p></li><li><p>operator<br>用于Operator API</p></li><li><p>query<br>用于Prepared Query API</p></li><li><p>service<br>Catalog API, Health API, Prepared Query API, Agent API</p></li><li><p>session<br>用于Session API</p></li></ul><p>由于Consul snapshots实际上包含ACL token，因此Snapshot API需要一个管理token进行快照操作。</p><p>ACL策略不包括如下资源：</p><ul><li>Status API</li><li>Catalog API</li></ul><p><br></p><p><strong>ACL Datacenter</strong><br>必须使用<code>acl_datacenter</code>配置所有节点(client/server)来启用ACL强制实施，但同时也是权威数据中心。Consul依靠RPC转发来支持多数据中心(multi-datacenter)。但是，由于可以跨数据中心边界发出请求，因此ACL令牌必须在全局范围内有效。为避免一致性问题，单个数据中心被视为具有权威性，并存储规范的令牌集。</p><p><br><br><br></p><h3 id="配置ACLs"><a href="#配置ACLs" class="headerlink" title="配置ACLs"></a>配置ACLs</h3><p>使用多个配置项配置ACL：</p><table><thead><tr><th>配置项</th><th>Server</th><th>Client</th><th>目的</th></tr></thead><tbody><tr><td><code>acl_datacenter</code></td><td>required</td><td>required</td><td>为ACL定义权威Consul数据中心来启用ACL的主控制</td></tr><tr><td><code>acl_default_policy</code></td><td>可选</td><td>n/a</td><td>定义白名单或黑名单模式</td></tr><tr><td><code>acl_down_policy</code></td><td>可选</td><td>可选</td><td>定义ACL数据中心脱机时执行的操作</td></tr><tr><td><code>acl_ttl</code></td><td>可选</td><td>可选</td><td>定义缓存ACL的生存时间</td></tr></tbody></table><p><br></p><p>配置特殊令牌，允许引导ACL系统或在特殊情况下访问Consul：</p><table><thead><tr><th>特殊令牌</th><th>Server</th><th>Client</th><th>目的</th></tr></thead><tbody><tr><td><code>acl_agent_master_token</code></td><td>可选</td><td>可选</td><td>当ACL数据中心不可用或Server脱机时，可用于访问Agent API</td></tr><tr><td><code>acl_agent_token</code></td><td>可选</td><td>可选</td><td>用于Agent内部操作</td></tr><tr><td><code>acl_master_token</code></td><td>required</td><td>n/a</td><td>用于引导ACL系统</td></tr><tr><td><code>acl_token</code></td><td>可选</td><td>可选</td><td>用于未提供token的客户端请求的默认令牌。这通常配置为对服务的只读访问权限，以便在Agent上启用DNS发现</td></tr></tbody></table><p><br></p><p><strong>ACL Agent Master Token</strong><br>由于<code>acl_agent_master_token</code>旨在Consul Server不可用时使用，因此其策略在Agent本地管理，并且不需要通过ACL API在Consul Server上定义token。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">agent &quot;&lt;node name of agent&gt;&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br><span class="line">node &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>ACL Agent Token</strong><br><code>acl_agent_token</code>是一个特殊令牌，用于Agent的内部操作。用于Agent的如下操作：</p><ul><li>使用Catalog API更新Agent的节点条目</li><li>执行反熵同步</li><li>执行<code>consul_exec</code>命令时，读写KV存储库的特殊<code>_rexec部分</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node &quot;node1&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br><span class="line">service &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br><span class="line">key &quot;_rexec&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何一个可在Agent上注册的服务，service策略需要读访问权限。</p><p><br><br><br></p><h3 id="引导ACLs"><a href="#引导ACLs" class="headerlink" title="引导ACLs"></a>引导ACLs</h3><p>Bootstrapping ACLs</p><p>在新集群上引导ACLs需要几个步骤：</p><p><strong>Enable ACLs on the Consul Servers</strong><br>引导ACLs的第一步便是在ACL数据中心的Consul Server上启用ACLs，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acl_datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">  &quot;acl_master_token&quot;: &quot;123abc!@#,</span><br><span class="line">  &quot;acl_default_policy&quot;: &quot;deny&quot;,</span><br><span class="line">  &quot;acl_down_policy&quot;: &quot;deny&quot;,</span><br><span class="line">  &quot;acl_down_policy&quot;: &quot;extend-cache&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Create an Agent Token</strong><br>使用ACL API和上一步中设置的ACL Master Token创建令牌：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl --request PUT --header &quot;X-Consul-Token: 123abc!@#&quot; --data \</span><br><span class="line">&apos;&#123;</span><br><span class="line">   &quot;Name&quot;: &quot;Agent Token&quot;,</span><br><span class="line">   &quot;Type&quot;: &quot;client&quot;,</span><br><span class="line">   &quot;Rules&quot;: &quot;node \&quot;\&quot; &#123; policy = \&quot;write\&quot;&#125; service \&quot;\&quot; &#123; policy = \&quot;read\&quot; &#125;&quot;</span><br><span class="line">&#125;&apos; http://127.0.0.1:8500/v1/acl/create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">返回的值便是新创建的token</span><br><span class="line">&#123;&quot;ID&quot;: &quot;xxxxxxxxxxxxxx&quot;&#125;</span><br></pre></td></tr></table></figure><p>返回的值便是新创建的token。将这个值添加到Consul Server配置中，并重启Server：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acl_datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">  &quot;acl_master_token&quot;: &quot;123abc!@#,</span><br><span class="line">  &quot;acl_default_policy&quot;: &quot;deny&quot;,</span><br><span class="line">  &quot;acl_down_policy&quot;: &quot;deny&quot;,</span><br><span class="line">  &quot;acl_down_policy&quot;: &quot;extend-cache&quot;,</span><br><span class="line">  &quot;acl_agent_token&quot;: &quot;xxxxxxxxxxxxxxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或使用API导入token：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --request PUT --header &quot;X-Consul-Token: 123abc!@#&quot; --data \</span><br><span class="line">&apos;&#123;</span><br><span class="line">   &quot;Token&quot;: &quot;xxxxxxxxxxxxx&quot;</span><br><span class="line">&#125;&apos; http://127.0.0.1:8500/v1/agent/token/acl_agent_token</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Enable ACLs on the Consul Clients</strong><br>还需再Agent上配置ACL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acl_datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">  &quot;acl_down_policy&quot;: &quot;extend-cache&quot;,</span><br><span class="line">  &quot;acl_agent_token&quot;: &quot;前面的acl_agent_token&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#或使用API</span><br><span class="line">curl \</span><br><span class="line">    --request PUT \</span><br><span class="line">    --header &quot;X-Consul-Token: abc123!@#&quot; \</span><br><span class="line">    --data \</span><br><span class="line">&apos;&#123;</span><br><span class="line">  &quot;Token&quot;: &quot;xxxxxxxxxxxx&quot;</span><br><span class="line">&#125;&apos; http://127.0.0.1:8500/v1/agent/token/acl_agent_token</span><br></pre></td></tr></table></figure><p>使用由Server创建的相同ACL Agent token，因为它不是特定于任何节点或前缀集。建议每个Client获取一个ACL agent token，该令牌具有对自己的节点名称前缀的节点有写入权限，以及针对预期在该Client上注册的服务前缀的读权限。</p><p><br></p><p><strong>Set an Anonymous Policy (Optional)</strong><br>此时，ACL已通过配置的ACL agent token进行引导，但还没有配置其它策略。<br>甚至像<code>consul members</code>这样的基本操作也会受到ACL默认策略<code>deny</code>的限制。</p><p>如果我们提供上面的Token，则能够看到具体信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSUL_HTTP_TOKEN=xxxxxxxx consul members</span><br></pre></td></tr></table></figure><p>匿名令牌：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">    --request PUT \</span><br><span class="line">    --header &quot;X-Consul-Token: 123abc!@#&quot; \</span><br><span class="line">    --data \</span><br><span class="line">&apos;&#123;</span><br><span class="line">  &quot;ID&quot;: &quot;anonymous&quot;,</span><br><span class="line">  &quot;Type&quot;: &quot;client&quot;,</span><br><span class="line">  &quot;Rules&quot;: &quot;node \&quot;\&quot; &#123; policy = \&quot;read\&quot; &#125;&quot;</span><br><span class="line">&#125;&apos; http://127.0.0.1:8500/v1/acl/update</span><br></pre></td></tr></table></figure><p>某个服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">    --request PUT \</span><br><span class="line">    --header &quot;X-Consul-Token: 123abc!@#&quot; \</span><br><span class="line">    --data \</span><br><span class="line">&apos;&#123;</span><br><span class="line">  &quot;ID&quot;: &quot;anonymous&quot;,</span><br><span class="line">  &quot;Type&quot;: &quot;client&quot;,</span><br><span class="line">  &quot;Rules&quot;: &quot;node \&quot;\&quot; &#123; policy = \&quot;read\&quot; &#125; service \&quot;consul\&quot; &#123; policy = \&quot;read\&quot; &#125;&quot;</span><br><span class="line">&#125;&apos; http://127.0.0.1:8500/v1/acl/update</span><br></pre></td></tr></table></figure></p><p><br></p><p><strong>Set Agent-Specific Default Tokens (Optional)</strong><br>匿名令牌的替代方法是<code>acl_token</code>配置项。</p><p><br></p><p><strong>Create Tokens for UI Use (Optional)</strong><br>如果你使用具有限制性ACL策略的Consul UI，UI将无法使用匿名ACL令牌完整运行。<br>建议使用特定于UI的ACL令牌，可以在Web浏览器绘画期间在UI中设置该令牌对进口进行认证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">    --request PUT \</span><br><span class="line">    --header &quot;X-Consul-Token: 123abc!@#&quot; \</span><br><span class="line">    --data \</span><br><span class="line">&apos;&#123;</span><br><span class="line">  &quot;Name&quot;: &quot;UI Token&quot;,</span><br><span class="line">  &quot;Type&quot;: &quot;client&quot;,</span><br><span class="line">  &quot;Rules&quot;: &quot;key \&quot;\&quot; &#123; policy = \&quot;write\&quot; &#125; node \&quot;\&quot; &#123; policy = \&quot;read\&quot; &#125; service \&quot;\&quot; &#123; policy = \&quot;read\&quot; &#125;&quot;</span><br><span class="line">&#125;&apos; http://127.0.0.1:8500/v1/acl/create</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>Rule Specification</p><p>ACL系统的和核心部分是规则语言，用于描述必须强制执行的策略。<br>使用基于前缀的规则，最具体的前缀匹配决定了操作。<br>使用HCL配置语言来指定规则，规则可定义多个策略。<br>ACL API运行使用HCL或JSON来定义规则部分的内容。</p><p>策略有以下集中处理方式：</p><ul><li>read</li><li>write(读写)</li><li>deny</li></ul><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># These control access to the key/value store.</span><br><span class="line">key &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br><span class="line">key &quot;foo/&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br><span class="line">key &quot;foo/private/&quot; &#123;</span><br><span class="line">  policy = &quot;deny&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># This controls access to cluster-wide Consul operator information.</span><br><span class="line">operator = &quot;read&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Agent Rules</strong><br>Agent策略控制对Agent API中实用程序操作的访问。<br>Agent规则通过节点名称，使用欧冠最长前缀匹配规则。</p><p>Agent rules栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">agent &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br><span class="line">agent &quot;foo&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br><span class="line">agent &quot;bar&quot; &#123;</span><br><span class="line">  policy = &quot;deny&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，对具有空前缀的任何节点可读，对以foo开头的节点名进行读写，拒绝以bar开头的节点名。</p><p><br></p><p><strong>Event Rules</strong><br>事件策略控制对事件API中事件操作的访问。<br>事件规则由它们事件名称的前缀，使用最长匹配规则。</p><p>Event rules栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">event &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br><span class="line">event &quot;deploy&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Key/Value Rules</strong><br>键值策略控制对KV API中的键值存储操作的访问。</p><p>Key规则栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br><span class="line">key &quot;foo&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br><span class="line">key &quot;bar&quot; &#123;</span><br><span class="line">  policy = &quot;deny&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>List Policy for Keys</strong><br>一个新的键列表策略，只有在通过布尔配置参数<code>acl_enable_key_list_policy</code>选择时才会强制执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">key &quot;&quot; &#123;</span><br><span class="line"> policy = &quot;deny&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key &quot;bar&quot; &#123;</span><br><span class="line"> policy = &quot;list&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key &quot;baz&quot; &#123;</span><br><span class="line"> policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Kerring Rules</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyring = &quot;write&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Node Rules</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br><span class="line">node &quot;app&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br><span class="line">node &quot;admin&quot; &#123;</span><br><span class="line">  policy = &quot;deny&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Operator Rules</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">operator = &quot;read&quot;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Prepared Query Rules</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query &quot;&quot; &#123;</span><br><span class="line">  policy = &quot;read&quot;</span><br><span class="line">&#125;</span><br><span class="line">query &quot;foo&quot; &#123;</span><br><span class="line">  policy = &quot;write&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="引导数据中心"><a href="#引导数据中心" class="headerlink" title="引导数据中心"></a>引导数据中心</h2><p>Bootstrapping a Datacenter</p><p>在Consul集群可以开始为请求提供服务之前，必须选在Server节点作为leader。Bootstrapping是将这些初始Server节点加入集群的过程。</p><p>建议的引导方式是使用<code>-bootstrap-expect</code>配置项。此配置项告知Consul预期的Server节点数，并在有许多Server可用时自动引导。为了防止不一致和脑裂情况(多个Server认为自己是leader)，所有Server应该指定相同的<code>-bootstrap-expect</code>，或根本不指定任何值。只有指定值的Server才会尝试引导集群。为了防止脑裂情况，Server不会选举自己作为leader。</p><p>推荐每个数据中心使用3或5台Server。不建议使用单个服务器部署数据中心。</p><p>加入一个集群:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#On NodeB</span><br><span class="line">consul join NodeA</span><br></pre></td></tr></table></figure><p><br></p><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>要触发选举leader，必须将这些机器连接在一起并创建一个集群。</p><ul><li>使用<code>-join</code>和<code>start_join</code>选项手动指定机器列表</li><li>使用<code>-retry-join</code>选项手动指定机器列表</li></ul><p><br><br><br></p><h2 id="leader选举"><a href="#leader选举" class="headerlink" title="leader选举"></a>leader选举</h2><p>使用Consul构建客户端的领导选举。</p><p>有多种方式建立领导选举，我们将专注于Consul sessions。会话允许我们构建一个可以优雅地处理故障的系统。</p><p><br></p><p><strong>协调节点</strong><br>Contending Nodes</p><p>假设一组节点试图称为给定服务的领导者，参与的所有节点应该就给定的键进行协调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servece/&lt;service name&gt;/leader</span><br></pre></td></tr></table></figure><p><br></p><p>首先创建会话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;&#123; &quot;Name&quot;: &quot;dbservice&quot; &#125;&apos; http://localhost:8500/v1/session/create</span><br><span class="line"></span><br><span class="line">这回返回一个JSON对象的session ID</span><br></pre></td></tr></table></figure><p>下一步是使用<code>?acquirre=&lt;session&gt;</code>查询参数的KV条目上的PUT方法从此节点获取给定键的会话。<code>PUT</code>的<code>&lt;body&gt;</code>应该是表示本地节点的JSON对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT -d &lt;body&gt; http://localhost:8500/v1/kv/&lt;key&gt;?acquire=&lt;session&gt;</span><br><span class="line"></span><br><span class="line">如果返回true，则已获得锁定，并且本地节点时领导者</span><br><span class="line">如果返回false，则某个其它节点已获取锁定</span><br></pre></td></tr></table></figure><p>通过对<code>&lt;key&gt;</code>的阻塞查询来监视更改，如果注意到<code>&lt;key&gt;</code>的session是空白的，那么就没有领导者，我们应该重新锁定获取。<br>如果领导是自愿下台，这应该通过简单地释放锁来完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://localhost:8500/v1/kv/&lt;key&gt;?release=&lt;session&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>发现一个领导者</strong><br>Discovering a Leader</p><p>关于领导者选举的另一种常见做法是节点希望识别给定服务的领导者。<br>与领导者选举一样，所有参与的节点都应该同意用于协调的密钥(key)。</p><p>Client有一个非常简单的角色，它们只需阅读<code>&lt;key&gt;</code>来发现当前的领导者是谁:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  http://localhost:8500/v1/kv/&lt;key&gt;</span><br></pre></td></tr></table></figure><p>如果密钥没有关联的话，就没有领导者。<br>你可查询<code>/v1/session/info</code>获取session详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8500/v1/session/info/xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>Client还应使用阻塞查询来查看密钥的更改，如果领导者退出或失败将清除与密钥相关联的会话。当选出新的领导者时，密钥值也将更新。</p><p><br><br><br></p><hr><p><br></p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>文档链接: <a href="https://www.consul.io/api/index.html" target="_blank" rel="noopener">https://www.consul.io/api/index.html</a></p><p>Consul的主要接口是RESTful HTTP API。API可对node，service，check，configuration…执行基本的CRUD操作。</p><p><strong>版本前缀</strong><br>Version Prefix</p><p>所有API路由都以<code>/v1/</code>为前缀，这适用于v1 API。</p><p><br><br><br></p><hr><p><br></p><h1 id="consul-template"><a href="#consul-template" class="headerlink" title="consul-template"></a>consul-template</h1><p>Consul Template 查询consul instance，并更新文件系统上任意数量的指定模板。作为额外的奖励，Consul Template可以在模板更新完成时执行任意命令。</p><p>Consul Tempalte可以查询Consul中的服务条目，keys, key values。强大的抽象和模板查询语言是Consul Template非常适合创建动态配置。</p><p>如：</p><ul><li>Apache</li><li>Nginx</li><li>HAproxy</li></ul><p><br><br><br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>下载地址: <a href="https://releases.hashicorp.com/consul-template/" target="_blank" rel="noopener">https://releases.hashicorp.com/consul-template/</a></li></ul><p>步骤：</p><ol><li>下载</li><li>解压</li><li>添加PATH</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wget https://releases.hashicorp.com/consul-template/0.19.5/consul-template_0.19.5_linux_amd64.tgz</span><br><span class="line"></span><br><span class="line">tar -xzvf ./consul-template_0.19.5_linux_amd64.tgz</span><br><span class="line">mv ./consul-template /bin/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">mv consul-template /usr/local/bin</span><br><span class="line">vim /etc/profile</span><br><span class="line">export PATH=$PATH:/usr/local/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">consul-template --version</span><br><span class="line">consul-template v0.19.5 (57b6c71)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><p>官方栗子： <a href="https://github.com/hashicorp/consul-template/tree/master/examples" target="_blank" rel="noopener">https://github.com/hashicorp/consul-template/tree/master/examples</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul-template -h</span><br></pre></td></tr></table></figure><p><br></p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>查询<code>demo.consul.io</code>这个consul实例。</p><p>渲染模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">consul-template \</span><br><span class="line">    -template &quot;/tmp/nginx.ctmpl:/var/nginx/nginx.conf:nginx -s reload&quot; \</span><br><span class="line">    -template &quot;/tmp/redis.ctmpl:/var/redis/redis.conf:service redis restart&quot; \</span><br><span class="line">    -template &quot;/tmp/haproxy.ctmpl:/var/haproxy/haproxy.conf&quot;</span><br></pre></td></tr></table></figure><p>监听Consul：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul-template -consul-addr=&quot;consul1:8500&quot; -consul-addr=&quot;consul2:8500&quot;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件使用 <a href="https://github.com/hashicorp/hcl" target="_blank" rel="noopener">HashiCorp Configuration Language</a>编写的。这意味着，配置也是JSON兼容的。</p><p>命令行指定的选项优先于配置文件！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/consul-template</span><br><span class="line"></span><br><span class="line">vim consul-template.hcl</span><br><span class="line"></span><br><span class="line">consul-template -config=&apos;/etc/consul-template/consul-template.hcl&apos;</span><br></pre></td></tr></table></figure><p>配置文件详情：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"># This denotes the start of the configuration section for Consul. All values</span><br><span class="line"># contained in this section pertain to Consul.</span><br><span class="line">consul &#123;</span><br><span class="line">  # This block specifies the basic authentication information to pass with the</span><br><span class="line">  # request. For more information on authentication, please see the Consul</span><br><span class="line">  # documentation.</span><br><span class="line">  auth &#123;</span><br><span class="line">    enabled  = true</span><br><span class="line">    username = &quot;test&quot;</span><br><span class="line">    password = &quot;test&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # This is the address of the Consul agent. By default, this is</span><br><span class="line">  # 127.0.0.1:8500, which is the default bind and port for a local Consul</span><br><span class="line">  # agent. It is not recommended that you communicate directly with a Consul</span><br><span class="line">  # server, and instead communicate with the local Consul agent. There are many</span><br><span class="line">  # reasons for this, most importantly the Consul agent is able to multiplex</span><br><span class="line">  # connections to the Consul server and reduce the number of open HTTP</span><br><span class="line">  # connections. Additionally, it provides a &quot;well-known&quot; IP address for which</span><br><span class="line">  # clients can connect.</span><br><span class="line">  address = &quot;127.0.0.1:8500&quot;</span><br><span class="line"></span><br><span class="line">  # This is the ACL token to use when connecting to Consul. If you did not</span><br><span class="line">  # enable ACLs on your Consul cluster, you do not need to set this option.</span><br><span class="line">  #</span><br><span class="line">  # This option is also available via the environment variable CONSUL_TOKEN.</span><br><span class="line">  token = &quot;abcd1234&quot;</span><br><span class="line"></span><br><span class="line">  # This controls the retry behavior when an error is returned from Consul.</span><br><span class="line">  # Consul Template is highly fault tolerant, meaning it does not exit in the</span><br><span class="line">  # face of failure. Instead, it uses exponential back-off and retry functions</span><br><span class="line">  # to wait for the cluster to become available, as is customary in distributed</span><br><span class="line">  # systems.</span><br><span class="line">  retry &#123;</span><br><span class="line">    # This enabled retries. Retries are enabled by default, so this is</span><br><span class="line">    # redundant.</span><br><span class="line">    enabled = true</span><br><span class="line"></span><br><span class="line">    # This specifies the number of attempts to make before giving up. Each</span><br><span class="line">    # attempt adds the exponential backoff sleep time. Setting this to</span><br><span class="line">    # zero will implement an unlimited number of retries.</span><br><span class="line">    attempts = 12</span><br><span class="line"></span><br><span class="line">    # This is the base amount of time to sleep between retry attempts. Each</span><br><span class="line">    # retry sleeps for an exponent of 2 longer than this base. For 5 retries,</span><br><span class="line">    # the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.</span><br><span class="line">    backoff = &quot;250ms&quot;</span><br><span class="line"></span><br><span class="line">    # This is the maximum amount of time to sleep between retry attempts.</span><br><span class="line">    # When max_backoff is set to zero, there is no upper limit to the</span><br><span class="line">    # exponential sleep between retry attempts.</span><br><span class="line">    # If max_backoff is set to 10s and backoff is set to 1s, sleep times</span><br><span class="line">    # would be: 1s, 2s, 4s, 8s, 10s, 10s, ...</span><br><span class="line">    max_backoff = &quot;1m&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # This block configures the SSL options for connecting to the Consul server.</span><br><span class="line">  ssl &#123;</span><br><span class="line">    # This enables SSL. Specifying any option for SSL will also enable it.</span><br><span class="line">    enabled = true</span><br><span class="line"></span><br><span class="line">    # This enables SSL peer verification. The default value is &quot;true&quot;, which</span><br><span class="line">    # will check the global CA chain to make sure the given certificates are</span><br><span class="line">    # valid. If you are using a self-signed certificate that you have not added</span><br><span class="line">    # to the CA chain, you may want to disable SSL verification. However, please</span><br><span class="line">    # understand this is a potential security vulnerability.</span><br><span class="line">    verify = false</span><br><span class="line"></span><br><span class="line">    # This is the path to the certificate to use to authenticate. If just a</span><br><span class="line">    # certificate is provided, it is assumed to contain both the certificate and</span><br><span class="line">    # the key to convert to an X509 certificate. If both the certificate and</span><br><span class="line">    # key are specified, Consul Template will automatically combine them into an</span><br><span class="line">    # X509 certificate for you.</span><br><span class="line">    cert = &quot;/path/to/client/cert&quot;</span><br><span class="line">    key  = &quot;/path/to/client/key&quot;</span><br><span class="line"></span><br><span class="line">    # This is the path to the certificate authority to use as a CA. This is</span><br><span class="line">    # useful for self-signed certificates or for organizations using their own</span><br><span class="line">    # internal certificate authority.</span><br><span class="line">    ca_cert = &quot;/path/to/ca&quot;</span><br><span class="line"></span><br><span class="line">    # This is the path to a directory of PEM-encoded CA cert files. If both</span><br><span class="line">    # `ca_cert` and `ca_path` is specified, `ca_cert` is preferred.</span><br><span class="line">    ca_path = &quot;path/to/certs/&quot;</span><br><span class="line"></span><br><span class="line">    # This sets the SNI server name to use for validation.</span><br><span class="line">    server_name = &quot;my-server.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># This is the signal to listen for to trigger a reload event. The default</span><br><span class="line"># value is shown below. Setting this value to the empty string will cause CT</span><br><span class="line"># to not listen for any reload signals.</span><br><span class="line">reload_signal = &quot;SIGHUP&quot;</span><br><span class="line"></span><br><span class="line"># This is the signal to listen for to trigger a graceful stop. The default</span><br><span class="line"># value is shown below. Setting this value to the empty string will cause CT</span><br><span class="line"># to not listen for any graceful stop signals.</span><br><span class="line">kill_signal = &quot;SIGINT&quot;</span><br><span class="line"></span><br><span class="line"># This is the maximum interval to allow &quot;stale&quot; data. By default, only the</span><br><span class="line"># Consul leader will respond to queries; any requests to a follower will</span><br><span class="line"># forward to the leader. In large clusters with many requests, this is not as</span><br><span class="line"># scalable, so this option allows any follower to respond to a query, so long</span><br><span class="line"># as the last-replicated data is within these bounds. Higher values result in</span><br><span class="line"># less cluster load, but are more likely to have outdated data.</span><br><span class="line">max_stale = &quot;10m&quot;</span><br><span class="line"></span><br><span class="line"># This is the log level. If you find a bug in Consul Template, please enable</span><br><span class="line"># debug logs so we can help identify the issue. This is also available as a</span><br><span class="line"># command line flag.</span><br><span class="line">log_level = &quot;warn&quot;</span><br><span class="line"></span><br><span class="line"># This is the path to store a PID file which will contain the process ID of the</span><br><span class="line"># Consul Template process. This is useful if you plan to send custom signals</span><br><span class="line"># to the process.</span><br><span class="line">pid_file = &quot;/path/to/pid&quot;</span><br><span class="line"></span><br><span class="line"># This is the quiescence timers; it defines the minimum and maximum amount of</span><br><span class="line"># time to wait for the cluster to reach a consistent state before rendering a</span><br><span class="line"># template. This is useful to enable in systems that have a lot of flapping,</span><br><span class="line"># because it will reduce the the number of times a template is rendered.</span><br><span class="line">wait &#123;</span><br><span class="line">  min = &quot;5s&quot;</span><br><span class="line">  max = &quot;10s&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># This denotes the start of the configuration section for Vault. All values</span><br><span class="line"># contained in this section pertain to Vault.</span><br><span class="line">vault &#123;</span><br><span class="line">  # This is the address of the Vault leader. The protocol (http(s)) portion</span><br><span class="line">  # of the address is required.</span><br><span class="line">  address = &quot;https://vault.service.consul:8200&quot;</span><br><span class="line"></span><br><span class="line">  # This is the grace period between lease renewal of periodic secrets and secret</span><br><span class="line">  # re-acquisition. When renewing a secret, if the remaining lease is less than or</span><br><span class="line">  # equal to the configured grace, Consul Template will request a new credential.</span><br><span class="line">  # This prevents Vault from revoking the credential at expiration and Consul</span><br><span class="line">  # Template having a stale credential.</span><br><span class="line">  #</span><br><span class="line">  # Note: If you set this to a value that is higher than your default TTL or</span><br><span class="line">  # max TTL, Consul Template will always read a new secret!</span><br><span class="line">  #</span><br><span class="line">  # This should also be less than or around 1/3 of your TTL for a predictable</span><br><span class="line">  # behaviour. See https://github.com/hashicorp/vault/issues/3414</span><br><span class="line">  grace = &quot;5m&quot;</span><br><span class="line"></span><br><span class="line">  # This is the token to use when communicating with the Vault server.</span><br><span class="line">  # Like other tools that integrate with Vault, Consul Template makes the</span><br><span class="line">  # assumption that you provide it with a Vault token; it does not have the</span><br><span class="line">  # incorporated logic to generate tokens via Vault&apos;s auth methods.</span><br><span class="line">  #</span><br><span class="line">  # This value can also be specified via the environment variable VAULT_TOKEN.</span><br><span class="line">  token = &quot;abcd1234&quot;</span><br><span class="line"></span><br><span class="line">  # This tells Consul Template that the provided token is actually a wrapped</span><br><span class="line">  # token that should be unwrapped using Vault&apos;s cubbyhole response wrapping</span><br><span class="line">  # before being used. Please see Vault&apos;s cubbyhole response wrapping</span><br><span class="line">  # documentation for more information.</span><br><span class="line">  unwrap_token = true</span><br><span class="line"></span><br><span class="line">  # This option tells Consul Template to automatically renew the Vault token</span><br><span class="line">  # given. If you are unfamiliar with Vault&apos;s architecture, Vault requires</span><br><span class="line">  # tokens be renewed at some regular interval or they will be revoked. Consul</span><br><span class="line">  # Template will automatically renew the token at half the lease duration of</span><br><span class="line">  # the token. The default value is true, but this option can be disabled if</span><br><span class="line">  # you want to renew the Vault token using an out-of-band process.</span><br><span class="line">  #</span><br><span class="line">  # Note that secrets specified in a template (using &#123;&#123;secret&#125;&#125; for example)</span><br><span class="line">  # are always renewed, even if this option is set to false. This option only</span><br><span class="line">  # applies to the top-level Vault token itself.</span><br><span class="line">  renew_token = true</span><br><span class="line"></span><br><span class="line">  # This section details the retry options for connecting to Vault. Please see</span><br><span class="line">  # the retry options in the Consul section for more information (they are the</span><br><span class="line">  # same).</span><br><span class="line">  retry &#123;</span><br><span class="line">    # ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # This section details the SSL options for connecting to the Vault server.</span><br><span class="line">  # Please see the SSL options in the Consul section for more information (they</span><br><span class="line">  # are the same).</span><br><span class="line">  ssl &#123;</span><br><span class="line">    # ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># This block defines the configuration for connecting to a syslog server for</span><br><span class="line"># logging.</span><br><span class="line">syslog &#123;</span><br><span class="line">  # This enables syslog logging. Specifying any other option also enables</span><br><span class="line">  # syslog logging.</span><br><span class="line">  enabled = true</span><br><span class="line"></span><br><span class="line">  # This is the name of the syslog facility to log to.</span><br><span class="line">  facility = &quot;LOCAL5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># This block defines the configuration for de-duplication mode. Please see the</span><br><span class="line"># de-duplication mode documentation later in the README for more information</span><br><span class="line"># on how de-duplication mode operates.</span><br><span class="line">deduplicate &#123;</span><br><span class="line">  # This enables de-duplication mode. Specifying any other options also enables</span><br><span class="line">  # de-duplication mode.</span><br><span class="line">  enabled = true</span><br><span class="line"></span><br><span class="line">  # This is the prefix to the path in Consul&apos;s KV store where de-duplication</span><br><span class="line">  # templates will be pre-rendered and stored.</span><br><span class="line">  prefix = &quot;consul-template/dedup/&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># This block defines the configuration for exec mode. Please see the exec mode</span><br><span class="line"># documentation at the bottom of this README for more information on how exec</span><br><span class="line"># mode operates and the caveats of this mode.</span><br><span class="line">exec &#123;</span><br><span class="line">  # This is the command to exec as a child process. There can be only one</span><br><span class="line">  # command per Consul Template process.</span><br><span class="line">  command = &quot;/usr/bin/app&quot;</span><br><span class="line"></span><br><span class="line">  # This is a random splay to wait before killing the command. The default</span><br><span class="line">  # value is 0 (no wait), but large clusters should consider setting a splay</span><br><span class="line">  # value to prevent all child processes from reloading at the same time when</span><br><span class="line">  # data changes occur. When this value is set to non-zero, Consul Template</span><br><span class="line">  # will wait a random period of time up to the splay value before reloading</span><br><span class="line">  # or killing the child process. This can be used to prevent the thundering</span><br><span class="line">  # herd problem on applications that do not gracefully reload.</span><br><span class="line">  splay = &quot;5s&quot;</span><br><span class="line"></span><br><span class="line">  env &#123;</span><br><span class="line">    # This specifies if the child process should not inherit the parent</span><br><span class="line">    # process&apos;s environment. By default, the child will have full access to the</span><br><span class="line">    # environment variables of the parent. Setting this to true will send only</span><br><span class="line">    # the values specified in `custom_env` to the child process.</span><br><span class="line">    pristine = false</span><br><span class="line"></span><br><span class="line">    # This specifies additional custom environment variables in the form shown</span><br><span class="line">    # below to inject into the child&apos;s runtime environment. If a custom</span><br><span class="line">    # environment variable shares its name with a system environment variable,</span><br><span class="line">    # the custom environment variable takes precedence. Even if pristine,</span><br><span class="line">    # whitelist, or blacklist is specified, all values in this option</span><br><span class="line">    # are given to the child process.</span><br><span class="line">    custom = [&quot;PATH=$PATH:/etc/myapp/bin&quot;]</span><br><span class="line"></span><br><span class="line">    # This specifies a list of environment variables to exclusively include in</span><br><span class="line">    # the list of environment variables exposed to the child process. If</span><br><span class="line">    # specified, only those environment variables matching the given patterns</span><br><span class="line">    # are exposed to the child process. These strings are matched using Go&apos;s</span><br><span class="line">    # glob function, so wildcards are permitted.</span><br><span class="line">    whitelist = [&quot;CONSUL_*&quot;]</span><br><span class="line"></span><br><span class="line">    # This specifies a list of environment variables to exclusively prohibit in</span><br><span class="line">    # the list of environment variables exposed to the child process. If</span><br><span class="line">    # specified, any environment variables matching the given patterns will not</span><br><span class="line">    # be exposed to the child process, even if they are whitelisted. The values</span><br><span class="line">    # in this option take precedence over the values in the whitelist.</span><br><span class="line">    # These strings are matched using Go&apos;s glob function, so wildcards are</span><br><span class="line">    # permitted.</span><br><span class="line">    blacklist = [&quot;VAULT_*&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # This defines the signal that will be sent to the child process when a</span><br><span class="line">  # change occurs in a watched template. The signal will only be sent after the</span><br><span class="line">  # process is started, and the process will only be started after all</span><br><span class="line">  # dependent templates have been rendered at least once. The default value is</span><br><span class="line">  # nil, which tells Consul Template to stop the child process and spawn a new</span><br><span class="line">  # one instead of sending it a signal. This is useful for legacy applications</span><br><span class="line">  # or applications that cannot properly reload their configuration without a</span><br><span class="line">  # full reload.</span><br><span class="line">  reload_signal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  # This defines the signal sent to the child process when Consul Template is</span><br><span class="line">  # gracefully shutting down. The application should begin a graceful cleanup.</span><br><span class="line">  # If the application does not terminate before the `kill_timeout`, it will</span><br><span class="line">  # be terminated (effectively &quot;kill -9&quot;). The default value is &quot;SIGTERM&quot;.</span><br><span class="line">  kill_signal = &quot;SIGINT&quot;</span><br><span class="line"></span><br><span class="line">  # This defines the amount of time to wait for the child process to gracefully</span><br><span class="line">  # terminate when Consul Template exits. After this specified time, the child</span><br><span class="line">  # process will be force-killed (effectively &quot;kill -9&quot;). The default value is</span><br><span class="line">  # &quot;30s&quot;.</span><br><span class="line">  kill_timeout = &quot;2s&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># This block defines the configuration for a template. Unlike other blocks,</span><br><span class="line"># this block may be specified multiple times to configure multiple templates.</span><br><span class="line"># It is also possible to configure templates via the CLI directly.</span><br><span class="line">template &#123;</span><br><span class="line">  # This is the source file on disk to use as the input template. This is often</span><br><span class="line">  # called the &quot;Consul Template template&quot;. This option is required if not using</span><br><span class="line">  # the `contents` option.</span><br><span class="line">  source = &quot;/path/on/disk/to/template.ctmpl&quot;</span><br><span class="line"></span><br><span class="line">  # This is the destination path on disk where the source template will render.</span><br><span class="line">  # If the parent directories do not exist, Consul Template will attempt to</span><br><span class="line">  # create them, unless create_dest_dirs is false.</span><br><span class="line">  destination = &quot;/path/on/disk/where/template/will/render.txt&quot;</span><br><span class="line"></span><br><span class="line">  # This options tells Consul Template to create the parent directories of the</span><br><span class="line">  # destination path if they do not exist. The default value is true.</span><br><span class="line">  create_dest_dirs = true</span><br><span class="line"></span><br><span class="line">  # This option allows embedding the contents of a template in the configuration</span><br><span class="line">  # file rather then supplying the `source` path to the template file. This is</span><br><span class="line">  # useful for short templates. This option is mutually exclusive with the</span><br><span class="line">  # `source` option.</span><br><span class="line">  contents = &quot;&#123;&#123; keyOrDefault \&quot;service/redis/maxconns@east-aws\&quot; \&quot;5\&quot; &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">  # This is the optional command to run when the template is rendered. The</span><br><span class="line">  # command will only run if the resulting template changes. The command must</span><br><span class="line">  # return within 30s (configurable), and it must have a successful exit code.</span><br><span class="line">  # Consul Template is not a replacement for a process monitor or init system.</span><br><span class="line">  command = &quot;restart service foo&quot;</span><br><span class="line"></span><br><span class="line">  # This is the maximum amount of time to wait for the optional command to</span><br><span class="line">  # return. Default is 30s.</span><br><span class="line">  command_timeout = &quot;60s&quot;</span><br><span class="line"></span><br><span class="line">  # Exit with an error when accessing a struct or map field/key that does not</span><br><span class="line">  # exist. The default behavior will print &quot;&lt;no value&gt;&quot; when accessing a field</span><br><span class="line">  # that does not exist. It is highly recommended you set this to &quot;true&quot; when</span><br><span class="line">  # retrieving secrets from Vault.</span><br><span class="line">  error_on_missing_key = false</span><br><span class="line"></span><br><span class="line">  # This is the permission to render the file. If this option is left</span><br><span class="line">  # unspecified, Consul Template will attempt to match the permissions of the</span><br><span class="line">  # file that already exists at the destination path. If no file exists at that</span><br><span class="line">  # path, the permissions are 0644.</span><br><span class="line">  perms = 0600</span><br><span class="line"></span><br><span class="line">  # This option backs up the previously rendered template at the destination</span><br><span class="line">  # path before writing a new one. It keeps exactly one backup. This option is</span><br><span class="line">  # useful for preventing accidental changes to the data without having a</span><br><span class="line">  # rollback strategy.</span><br><span class="line">  backup = true</span><br><span class="line"></span><br><span class="line">  # These are the delimiters to use in the template. The default is &quot;&#123;&#123;&quot; and</span><br><span class="line">  # &quot;&#125;&#125;&quot;, but for some templates, it may be easier to use a different delimiter</span><br><span class="line">  # that does not conflict with the output file itself.</span><br><span class="line">  left_delimiter  = &quot;&#123;&#123;&quot;</span><br><span class="line">  right_delimiter = &quot;&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">  # This is the `minimum(:maximum)` to wait before rendering a new template to</span><br><span class="line">  # disk and triggering a command, separated by a colon (`:`). If the optional</span><br><span class="line">  # maximum value is omitted, it is assumed to be 4x the required minimum value.</span><br><span class="line">  # This is a numeric time with a unit suffix (&quot;5s&quot;). There is no default value.</span><br><span class="line">  # The wait value for a template takes precedence over any globally-configured</span><br><span class="line">  # wait.</span><br><span class="line">  wait &#123;</span><br><span class="line">    min = &quot;2s&quot;</span><br><span class="line">    max = &quot;10s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/consul-template/consul.hcl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max_stale = &apos;10m&apos;</span><br><span class="line">wait = &#123;</span><br><span class="line">  min = &apos;1s&apos;</span><br><span class="line">  max = &apos;3s&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &#123;</span><br><span class="line">  source = &apos;/etc/consul-template/ctmpl/a.ctmpl&apos;</span><br><span class="line">  destination = &apos;/etc/nginx/conf.d/upstream-a.conf&apos;</span><br><span class="line">  command = &apos;systemctl reload nginx&apos;</span><br><span class="line">  perms = 0644</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">vim /etc/consul-template/ctmpl/a.ctmpl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">upstream upstream-a &#123;</span><br><span class="line">  &#123;&#123;range service &apos;a&apos;&#125;&#125;</span><br><span class="line">  server &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125;;</span><br><span class="line">  &#123;&#123;else&#125;&#125;</span><br><span class="line">  server 127.0.0.1:12345;</span><br><span class="line">  &#123;&#123;end&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#nginx</span><br><span class="line">vim /etc/nginx/conf.d/upstream-a.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">upstream upstream-a &#123;</span><br><span class="line"></span><br><span class="line">  server 192.168.1.11:12345;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>Consul Template解析文件以 <a href="https://golang.org/pkg/text/template/" target="_blank" rel="noopener">Go Template</a>创作。<br>Consul Template提供了如下函数：</p><h4 id="API函数"><a href="#API函数" class="headerlink" title="API函数"></a>API函数</h4><p>API函数与远程API进行交互，与Consul等外部服务进行通信。</p><ul><li>datacenters<br>查询Consul目录中的所有数据中心。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; datacenters &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">&#123;&#123; range datacenters &#125;&#125;</span><br><span class="line">&#123;&#123; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">#效果</span><br><span class="line">dc1</span><br><span class="line">dc2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.consul.io/intro/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.consul.io/intro/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.consul.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.consul.io/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Consul Template: &lt;a href=&quot;https://www.hashicorp.com/blog/introducing-consul-template&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hashicorp.com/blog/introducing-consul-template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7x86_64&lt;/li&gt;
&lt;li&gt;Consul v1.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Consul" scheme="https://zhang21.github.io/tags/Consul/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://zhang21.github.io/2018/03/27/Docker/"/>
    <id>https://zhang21.github.io/2018/03/27/Docker/</id>
    <published>2018-03-27T00:38:33.000Z</published>
    <updated>2018-07-08T04:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>Docker文档:  <a href="https://docs.docker.com/" target="_blank" rel="noopener">https://docs.docker.com/</a></li><li><a href="https://blog.csdn.net/sD7O95O/article/details/78623697" target="_blank" rel="noopener">https://blog.csdn.net/sD7O95O/article/details/78623697</a></li><li><a href="https://www.zhihu.com/question/22969309/answer/34030581" target="_blank" rel="noopener">https://www.zhihu.com/question/22969309/answer/34030581</a></li></ul><p>环境：</p><ul><li>CentOS7x86_64</li><li>Docker v18.03</li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Docker是一个开发、shipping、运行应用程序的开放平台。Docker使你能够将应用程序与基础架构(infrastructure)分离开，从而可以快速交付软件。借助Docker，你可以像管理应用程序一样管理基础架构。利用Docker的方法快速进行运输、测试和部署代码，可以显著缩短编写代码和在生存环境中运行代码之间的延迟。</p><p><br></p><h2 id="Docker平台"><a href="#Docker平台" class="headerlink" title="Docker平台"></a>Docker平台</h2><p>Docker提供了在称为容器的松散隔离(isolated)环境中 打包和运行应用程序的能力。隔离性和安全性允许你在给定的主机上同时运行多个容器。容器是轻量级(lightweight)的，因为它们不需要hypervisor的额外负载，而是直接使用主机的内核运行。这意味着，与使用虚拟机相比，你可以在给定的硬件组合上运行更多的容器。你甚至可以在虚拟主机中运行Docker容器。</p><p>Docker提供了工具和平台来管理容器的生命周期(lifecycle)：</p><ul><li>使用容器开发应用程序及其支持组件</li><li>容器成为分发和测试你应用程序的单元</li><li>准备好后，将你的应用程序部署到生产环境中，作为容器协调服</li></ul><p><br></p><h2 id="Docker引擎"><a href="#Docker引擎" class="headerlink" title="Docker引擎"></a>Docker引擎</h2><p>Docker引擎是一个包含如下部件的client-server应用程序：</p><ul><li>Server是称为守护进程的dockerd</li><li>REST API是指定程序可用于与守护进程进行通信并指示其执行操作的接口</li><li>Client是command line interface(CLI)</li></ul><p><img src="/images/Docker/engine-components-flow.png" alt=""></p><p>Docker的开源许可协议是Apache2.0</p><p><br></p><h2 id="能用Docker做什么"><a href="#能用Docker做什么" class="headerlink" title="能用Docker做什么"></a>能用Docker做什么</h2><p><strong>快速、一致的交付应用程序</strong></p><p>通过允许开发人员在 提供应用程序和服务的本地容器 的标准化环境 下工作，Docker简化了开发生命周期。容器非常适合<strong>持续集成(continuous intergration,CI)和持续交付(continuous deliver,CD)</strong>工作流程。</p><p>考虑如下示例场景：</p><ul><li>开发者在本地编写代码，并使用Docker容器分享工作给他们的同事</li><li>使用Docker将应用程序push到测试环境，并自动执行和手动测试</li><li>当开发人员发现bug，他们能在开发环境中修复bug，并重新部署应用程序到测试环境进行测试和验证</li><li>测试完成后，向客户提供修补的应用程序 与将更新的image push到生产环境一样简单</li></ul><p><br></p><p><strong>响应式部署和伸缩</strong></p><ul><li>Docker的基于容器的平台支持高度可移植的工作负载。Docker container可以运行在笔记本、物理机、虚拟机、云平台…</li><li>Docker的可移植性和轻量化特性也使得动态管理工作负载非常容易，可以近乎实时地按业务需求扩展或拆分应用程序和服务</li></ul><p><br></p><p><strong>在同一硬件上运行更多的工作负载</strong></p><p>Docker轻量且快速。它为基于hypersior的虚拟机提供了一种可行、经济高效的替代方案，因此你可以使用更多计算容量来实现业务目标。Docker是高密度环境和中小型部署的理想选择，你需要用更小的资源做更多的事情。</p><p><br></p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p>Docker使用了client-server的体系架构。客户端向守护进程发送消息，守护进程负责构建、运行和分发 Docker容器。客户端和守护进程可以在同一系统上运行，也可将客户端连接到远程的Docker守护进程。客户端和守护进程使用REST API，通过Unix socket或network interface进程通信。</p><p><img src="/images/Docker/architecture.png" alt="Docker架构图"></p><p><br></p><h3 id="Docker-daemon"><a href="#Docker-daemon" class="headerlink" title="Docker daemon"></a>Docker daemon</h3><p>Docker daemon(<code>dockerd</code>)，监听Docker API请求并管理Docker对象——image、container、network、volume。<br>docker daemon还可与其它docker daemon通信来管理docker service。</p><p><br></p><h3 id="Docker-client"><a href="#Docker-client" class="headerlink" title="Docker client"></a>Docker client</h3><p>Docker client(<code>docker</code>)是许多Docker用户与Docker进行交互的主要方式。客户端将命令发送给守护进程，守护进程执行命令。<br>Docker命令使用Docker API，Docker客户端可与多个守护进程进行通信。</p><p><br></p><h3 id="Docker-registry"><a href="#Docker-registry" class="headerlink" title="Docker registry"></a>Docker registry</h3><p>Docker registry存储Docker image。Docker Hub和Docker Cloud是任何人都可使用的public registry，你可以创建private registry。</p><p><code>docker pull</code>或<code>docker run</code>需要的image便是从配置的registry中提取。<code>docker push</code>推送image到你配置的registry。</p><p><br></p><h2 id="Docker对象"><a href="#Docker对象" class="headerlink" title="Docker对象"></a>Docker对象</h2><p>当你使用Docker时，你会创建和使用 image、container、network、volume、plugin和其它对象。</p><p><br></p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>镜像是一个只读模板，带有创建Docker容器的说明。通常，镜像基于其它镜像，并具有一些额外的自定义功能。<br>例如，你可构建基于Ubuntu镜像的镜像，但会按照ApacheWeb服务器和应用程序，以及应用程序所需的配置。</p><p>你可能创建自己的镜像，或使用由别人创建并推送到registry上的镜像。构建自己的镜像，需要使用简单的语法创建一个Dockerfile，以定义创建镜像并运行它所需的步骤。</p><p><br></p><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>容器是镜像的可运行实例。可将容器连接到一个或多个网络，将存储器连接到它，还可根据当前状态创建新镜像。</p><p>默认情况下，容器与其它容器以及主机是相对隔离的。你可以控制容器的网络、存储、其它底层子系统与其它容器或主机的隔离程度。</p><p>容器由镜像定义，以及你在创建或启动时提供给它的任何配置选项。当一个容器被移除时，其未被存储在永久存储器中的状态会消失。</p><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#运行一个Ubuntu镜像，交互地连接到本地命令会话</span><br><span class="line"></span><br><span class="line">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>以上命令会发生如下步骤:</p><ol><li>如果本地没有Ubuntu镜像，docker会从registry拉取，就好像你手动运行 <code>docker pull ubuntu</code></li><li>Docker创建一个新容器，就好像你手动执行<code>docker container create</code></li><li>Docker分配一个读写文件系统给容器，作为它的最后一层</li><li>如果你没有指定任何网络选项，Docker会创建一个网络接口将容器连接到默认网络。</li><li>Docker开启容器并执行/bin/bash</li><li>发送<code>exit</code>到<code>/bin/bash</code>，容器停止但并未被移除</li></ol><p><br></p><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>服务允许你伸缩多个Docker守护进程的容器，这些守护进程可以作为一个swarm与多个manager和worker一起工作。默认情况下，该服务在所有node之间进行负载均衡。</p><p><br></p><h3 id="底层技术"><a href="#底层技术" class="headerlink" title="底层技术"></a>底层技术</h3><p>Docker使用GO编写，利用Linux内核的几个特性来提供其功能。</p><p><br></p><p><strong>namespace</strong></p><p>Docker使用一个称为<code>namespace</code>的技术来提供称为容器的独立工作空间。当你运行一个容器时，Docker会为该容器创建一组命名空间。<br>命名空间提供了一个隔离层。容器的每个方面都在单独<code>namespace</code>中运行，并且其访问权限仅限于该单独的<code>namespace</code>。</p><p>Docker引擎在Linux上使用如下<code>namespace</code>：</p><ul><li><code>pid</code> namespace： 进程隔离</li><li><code>net</code> namespace： 管理网络接口</li><li><code>ipc</code> namespace： 管理对IPC(InterProcess Communication)资源的访问</li><li><code>mnt</code> namespace： 管理文件系统挂载点</li><li><code>ust</code> namespace： 隔离内核和版本标识符(Unix Timesharing System)</li></ul><p><br></p><p><strong>control groups</strong></p><p>Linux上的Docker Engine也依赖与另一种称为控制组(cgroups)的技术。cgroup将应用程序限制为一组特定的资源。控制组允许Docker引擎将可用的硬件资源共享给容器，并可选地强制实施限制和约束。<br>例如，你可限制特定容器的内存是CPU使用率等。</p><p><br></p><p><strong>union file systems</strong></p><p>union file systems(UnionFS)，是通过创建layer进行操作的文件系统，使得它们非常轻量和快速。Docker引擎使用UnioFS为容器提供构建block。Docker引擎可以使用多种UnionFS变体，包括AUFS, brrfs, vfs, DeviceMapper…</p><p><br></p><p><strong>container format</strong></p><p>Docker引擎将namespace、cgroup、UnionFS组合成一个名为容器格式的包装器。默认的容器格式为<code>libcontainer</code>。</p><p><br><br><br></p><hr><p><br></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Docker有两个可获取的版本：</p><ul><li>Community Edition(CE)<ul><li>适合开始使用Docker并尝试基于容器的应用程序的开发人员和小型团队</li></ul></li><li>Enterprise Edition(EE)<ul><li>专为企业开发和IT团队而设计，可以在生产规模上构建，发布和运行关键业务应用程序</li></ul></li></ul><p><br><br><br></p><h2 id="CentOS7安装Docker-CE"><a href="#CentOS7安装Docker-CE" class="headerlink" title="CentOS7安装Docker CE"></a>CentOS7安装Docker CE</h2><h3 id="OS要求"><a href="#OS要求" class="headerlink" title="OS要求"></a>OS要求</h3><ul><li>CentOS7.x</li><li><code>centos-extras</code> repository</li><li>推荐使用<code>overlay2</code>存储驱动</li><li>安装新版本Docker需卸载老版本Docker</li><li>Docker CE包被称为<code>docker-ce</code></li></ul><p><br></p><h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><ul><li><a href="https://download.docker.com/" target="_blank" rel="noopener">https://download.docker.com/</a></li></ul><p>多种安装方法：</p><ul><li>Docker’s repository</li><li>RPM package</li><li>scripts</li></ul><p><br></p><p><strong>使用repository安装：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#安装依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#设置repository</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#安装Docker CE</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line"> <span class="comment">#Docker安装但未启动，docker group会被创建，但没有用户添加到组中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#在生产环境中，你可能需要安装特定版本的Docker CE，而不是最新版</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line">yum search docker-ce --showduplicates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#开启docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#测试docker</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line"> <span class="comment">#此命令下载一个测试image并将其运行到container中</span></span><br><span class="line"> <span class="comment">#Hello from Docker!</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用package安装：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#下载rpm包</span></span><br><span class="line">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#安装</span></span><br><span class="line">yum install -y /path/docker-cexxx.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用scripts安装：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"></span><br><span class="line">sh get-docker.sh</span><br><span class="line"></span><br><span class="line"> <span class="comment">#手动添加group合user</span></span><br><span class="line">usermod -aG docker your-user</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="卸载Docker-CE"><a href="#卸载Docker-CE" class="headerlink" title="卸载Docker CE"></a>卸载Docker CE</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce</span><br><span class="line"></span><br><span class="line"> <span class="comment">#默认文件</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"> <span class="comment">#你还需要手动删除其它配置文件</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p><br><br><br></p><h2 id="关于Docker"><a href="#关于Docker" class="headerlink" title="关于Docker"></a>关于Docker</h2><p>Docker文档会有如下讲解：</p><ul><li>设置你的Docker环境</li><li>在一个容器(container)中构建并运行一个镜像</li><li>延伸你的APP以便在多个容器中运行</li><li>在整个集群中分配你的APP</li><li>通过添加后端数据库来堆栈服务</li><li>将应用部署到生产</li></ul><p><br></p><h3 id="Docker的概念"><a href="#Docker的概念" class="headerlink" title="Docker的概念"></a>Docker的概念</h3><p>Docker是开发人员，系统管理员使用容器来开发、部署和运行APP的平台。使用Linux容器来部署APP被称为<strong>集装箱化(containerzation)</strong></p><p><img src="/images/Docker/laurel-docker-containers.png" alt=""></p><p>集装箱受欢迎的几点原因：</p><ul><li>灵活(flexible)</li><li>轻量(lightweight)</li><li>通用(Interchangeable)</li><li>可移植(portable)</li><li>延伸(scalable)</li><li>堆栈(stackable)</li></ul><p><br></p><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><p>通过运行镜像(image)启动容器(container)。镜像是一个可执行包，包含运行APP所需的所有内容：代码，库，环境变量，配置文件…</p><p>容器是镜像的运行时(runtime)实例。在Linux上使用<code>docker ps</code>命令查看运行的容器列表。</p><p><br></p><h3 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h3><p>容器在Linux本地上运行，并与其它容器共享主机Kernel。它是一个独立的进程，不占其它可执行文件内存，使其轻量化。</p><p>虚拟机(VM)运行一个完整的访客操作系统，通过虚拟机管理程序访问主机资源。一般来说，虚拟机比大多数应用程序需要的资源更多。</p><p><img src="/images/Docker/docker002.png" alt=""></p><p><br><br><br></p><h3 id="准备Docker环境"><a href="#准备Docker环境" class="headerlink" title="准备Docker环境"></a>准备Docker环境</h3><p>Docker版本：</p><ul><li>CE: Docker Community Edition</li><li>EE: Docker Enterprise Edition</li></ul><p><a href="#安装Docker">Install Docker</a></p><p><br></p><h2 id="测试Docker"><a href="#测试Docker" class="headerlink" title="测试Docker"></a>测试Docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看详细信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试安装工作是否正常</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出容器</span></span><br><span class="line">docker container ls -all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker命令</span></span><br><span class="line">docker</span><br><span class="line">docker container --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>集装箱化使得<strong>CI/CD</strong>无缝：</p><ul><li>持续集成(Continuous integration, CI)</li><li>持续部署(continuous deployment, CD)</li><li>APP无系统依赖</li><li>更新能够推送到分布式APP的任何部分</li><li>资源密度可以被优化</li></ul><p>使用Docker，扩展APP的过程就是启动新的可执行文件，而不是运行繁重的VM主机。</p><p><br><br><br></p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Container</p><p><br></p><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><br></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>是时候使用Docker方式来构建一个APP了。</p><ul><li>从应用程序的层次结构底部开始，这是一个容器(container)</li><li>在此级别之上，是一个服务(service)，它定义了容器在生产中的表现</li><li>最后，顶层是堆栈(stack)，定义所有服务的交互(interaction)</li></ul><p>Like this:</p><ul><li>Stack</li><li>Service</li><li>Container</li></ul><p><br></p><h3 id="新开发环境"><a href="#新开发环境" class="headerlink" title="新开发环境"></a>新开发环境</h3><p>在过去，如果你要开始编写一个Python APP，你的第一要务是在你的机器运行时安装Python。但是，这会造成你的计算机上的环境，需要如预期般完美适合你的APP，并且还需要与你的生产环境相匹配。</p><p>使用Docker，你可以将一个可移植的Python运行时作为一个image，无需安装。接着，你的构建可以将基础Python image与APP代码一起包含在内，确保你的APP，依赖项…都构建一起。</p><p><br></p><h3 id="使用Dockerfile定义一个容器"><a href="#使用Dockerfile定义一个容器" class="headerlink" title="使用Dockerfile定义一个容器"></a>使用<code>Dockerfile</code>定义一个容器</h3><p><code>Dockerfile</code>定义了容器内环境中发生的事情。访问的网络接口(network interface)和磁盘驱动(disk driver)等资源是在此环境中虚拟化的(virtualized)，与系统其余部分隔离。因此你需要将端口映射(map port)到外部世界，并明确指定要将哪些文件<strong>复制</strong>到此环境中。但是，在完成这些后，你完全可以将它们看做一致 —— 在<code>Dockerfile</code>中定义的构建的APP的行为与它运行时的行为完全相同。</p><p><strong>Dockerfile</strong></p><p>创建一个空目录，并创建一个名叫<code>Dockerfile</code>的文件，复制以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Use an official Python runtime as a parent image</span><br><span class="line">FROM python:2.7-slim</span><br><span class="line"></span><br><span class="line"># Set the working directory to /app</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># Copy the current directory contents into the container at /app</span><br><span class="line">ADD . /app</span><br><span class="line"></span><br><span class="line"># Install any needed packages specified in requirements.txt</span><br><span class="line">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class="line"></span><br><span class="line"># Make port 80 available to the world outside this container</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># Define environment variable</span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><p>注意代理服务器会阻断你与APP的连接！</p><p>这个<code>Dockerfile</code>引用了一些我们还没有创建的文件，分别是<code>app.py</code>和<code>requirements.txt</code>。接下来创建它们。</p><p><br></p><h3 id="APP自身"><a href="#APP自身" class="headerlink" title="APP自身"></a>APP自身</h3><p>创建另外的文件，如上面的<code>app.py</code>和<code>requirements.txt</code>，并将它们与<code>Dockerfile</code>放置于同一目录下。这就完成了我们的APP，这看起来非常简单。当这个<code>Dockerfile</code>被构建成一个image时，由于<code>Dockerfile</code>的<code>ADD</code>命令，<code>app.py</code>和<code>requirements.txt</code>仍然存在，而且由于使用了EXPOSE命令，<code>app.py</code>的输出仍可以通过HTTP访问。</p><p><strong>requirements.txt: </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><p><strong>app.py: </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from redis import Redis, RedisError</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># Connect to Redis</span><br><span class="line">redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    try:</span><br><span class="line">        visits = redis.incr(&quot;counter&quot;)</span><br><span class="line">    except RedisError:</span><br><span class="line">        visits = &quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span><br><span class="line"></span><br><span class="line">    html = &quot;&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;&quot;</span><br><span class="line">    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;, port=80)</span><br></pre></td></tr></table></figure><blockquote><p>在容器内访问主机的名称将检索容器ID，这进程ID类似。</p></blockquote><p>仅此而已，在你的系统中，你不需要任何Python或requirements.txt文件，也不需要在你的系统上安装 构建或运行的image。看起来你并没有真正用Python和Flask建立一个环境，但是你确实已经拥有了。</p><p><br></p><h3 id="构建APP"><a href="#构建APP" class="headerlink" title="构建APP"></a>构建APP</h3><p>我们准备去构建(build)APP。确保你仍在目录的顶层。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#查看是否还在顶层</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">Dockerfileapp.pyrequirements.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在此目录运行build命令，这将创建一个Docker image，用 -t 命名</span><br><span class="line">docker build -t friendlyhello .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看你build的image</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">friendlyhello       latest              b24e21d7645f        13 minutes ago      150MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#运行APP</span><br><span class="line">docker run -p 4000:80 friendlyhello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">curl http://localhost:4000</span><br><span class="line">links http://localhost:4000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在后台运行</span><br><span class="line">docker run -d -p 4000:80 friendlyhello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看容器</span><br><span class="line">docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">146662dca737        friendlyhello       &quot;python app.py&quot;     16 seconds ago      Up 16 seconds       0.0.0.0:4000-&gt;80/tcp   goofy_chaplygin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#停止</span><br><span class="line">Ctrl + C</span><br><span class="line">docker container stop docker-ID</span><br><span class="line">docker container stop 146662dca737</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/docker003.png" alt="效果图"></p><p><br></p><p>端口重映射<code>4000:80</code>是为了证明Dockerfile中的EXPOSE与使用<code>docker run -p</code>发布的内容之间的区别。<br>在后续步骤中，我们只需将主机的80端口映射到容器的80端口就好。</p><p><br></p><h3 id="分享你的image"><a href="#分享你的image" class="headerlink" title="分享你的image"></a>分享你的image</h3><p>为了演示刚才创建的image的可移植性(portability)，让我们上传build的image并在其它地方run它。毕竟，当你需要将container部署到生产环境时，你需要知道如何push注册。</p><p>注册表(registry)是一个repository的集合，而repository是image的集合——有点类似于GitHub repository，但代码是已经构建了的。<br>注册表上的账户可以创建许多repository。docker CLI 默认使用Docker’s public registry。你也可以选择其它注册表，或创建自己的注册表。</p><p><br></p><p><strong>使用Docker ID登录：</strong></p><p>如果没有Docker账户，请先注册 <cloud.docker.com>。</cloud.docker.com></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br><span class="line"></span><br><span class="line">docker login -u zhang21</span><br><span class="line"></span><br><span class="line">#时候docker login认证过后，会有~/.docker/config.json文件，里面包含了docker认证信息</span><br><span class="line">#k8s可使用此信息添加secret</span><br><span class="line"></span><br><span class="line">cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        &quot;auths&quot;: &#123;</span><br><span class="line">                &quot;https://index.docker.io/v1/&quot;: &#123;</span><br><span class="line">                        &quot;auth&quot;: &quot;base64encoding&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;HttpHeaders&quot;: &#123;</span><br><span class="line">                &quot;User-Agent&quot;: &quot;Docker-Client/18.03.1-ce (linux)&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>标记image：</strong></p><p>使用<code>username/repository:tag</code>将本地image与registry中的repository相关联。tag是可选的，但推荐使用tag。因为它是注册管理机构用于为Docker image提供版本的机制。为该内容提供一个有意义的repository和tag，例如<code>get-started:part2</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker tag image username/repository:tag</span><br><span class="line"></span><br><span class="line">#例子</span><br><span class="line">docker tag friendlyhello zhang/test:tag-test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看tag</span><br><span class="line">docker images ls</span><br></pre></td></tr></table></figure><p><br></p><p><strong>发布image：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#上传你标记了的image到repository</span><br><span class="line">docker push username/repository:tag</span><br><span class="line"></span><br><span class="line">docker push zhang21/test:tag-test</span><br><span class="line"></span><br><span class="line">#完成后，此image便可以公开获取</span><br></pre></td></tr></table></figure><p><br></p><p><strong>从远处repository拉取并运行image：</strong></p><p>无论在哪里执行<code>docker run</code>，它都会将你的image以及Python和所有依赖关系一起拉取下来，并运行你的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 username/repository:tag</span><br><span class="line"></span><br><span class="line">docker run -p 80:80 zhang21/test:tag-test</span><br></pre></td></tr></table></figure><p><br></p><h3 id="本节基础命令"><a href="#本节基础命令" class="headerlink" title="本节基础命令"></a>本节基础命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从Dockerfile创建image</span></span><br><span class="line">docker build -t image-name .</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行image</span></span><br><span class="line">docker run -p 4000:80 image-name</span><br><span class="line"></span><br><span class="line"><span class="comment">#后台运行</span></span><br><span class="line">docker run -d -p 4000:80 image-name</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出运行的容器</span></span><br><span class="line">docker container ls</span><br><span class="line"><span class="comment">#列出所有容器，包括未运行</span></span><br><span class="line">docker container ls -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#优雅停止容器</span></span><br><span class="line">docker container stop 容器ID</span><br><span class="line"><span class="comment">#强制停止</span></span><br><span class="line">docker container <span class="built_in">kill</span> 容器ID</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除容器</span></span><br><span class="line">docker container rm 容器ID</span><br><span class="line"><span class="comment">#删除所有容器</span></span><br><span class="line">docker container rm $(docker container ls -a -q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出镜像</span></span><br><span class="line">docker image ls</span><br><span class="line"><span class="comment">#列出所有镜像</span></span><br><span class="line">docker image ls -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除镜像</span></span><br><span class="line">docker image rm 镜像ID</span><br><span class="line"><span class="comment">#删除所有镜像</span></span><br><span class="line">docker image rm $(docker image ls -a -q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment">#标记</span></span><br><span class="line">docker tag 镜像 username/repository:tag</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到注册表</span></span><br><span class="line">docker push username/repository:tag</span><br><span class="line"></span><br><span class="line"><span class="comment">#从注册表拉取</span></span><br><span class="line">docker run username/repository:tag</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>service</p><p><br></p><h3 id="先决条件-1"><a href="#先决条件-1" class="headerlink" title="先决条件"></a>先决条件</h3><ul><li>安装Docker</li><li>获取Docker Compose</li><li>阅读Orientation</li><li>阅读Container</li><li>确保已发布friendlyhello image到你的registry</li><li>确保你的image工作为一个部署的container。<code>docker run -p 80:80 username/repo:tag</code></li></ul><p><br></p><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在此，我们<strong>扩展(scale)</strong>APP并启用<strong>负载均衡(load balancing)</strong>。要做到这样，我们必须在分布式(distributed)应用程序的层次结构中升一级: 服务</p><ul><li>Stack</li><li>Service</li><li>Container</li></ul><p><br></p><h3 id="关于服务"><a href="#关于服务" class="headerlink" title="关于服务"></a>关于服务</h3><p>在分布式应用程序中，应用程序的不同部分称为服务(service)。</p><p>例如，一个视频共享站点。那么它可能包含：</p><ul><li>用于将应用程序数据 存储到数据库中的服务</li><li>用户上传后的视频转码服务</li><li>前端服务</li><li>…</li></ul><p>服务是真正的生产环境中的容器。一个service只运行一个image，但它可修改image的运行方式 —— 哪个端口、容器应该运行多少个副本以便于服务所需的容量等.<br>伸缩服务会更改运行该软件的容器实例数量，从而为进程中的服务分配更多的计算资源。</p><p>在Docker平台上定义、运行和伸缩服务都是很简单的 —— 只需修改<code>docker-compose.yml</code>文件。</p><p><br></p><h3 id="你的第一个docker-compose-yml文件"><a href="#你的第一个docker-compose-yml文件" class="headerlink" title="你的第一个docker-compose.yml文件"></a>你的第一个<code>docker-compose.yml</code>文件</h3><p><code>docker-compose.yml</code>是一个YAML文件，它定义了Docker container在生产中的行为方式。</p><p><strong>docker-compose.yml：</strong></p><p>将如下信息保存为<code>docker-compose.yml</code>，确保你已经<code>pushed the image</code>到registry，并通过修改<code>.yml</code>文件的image detail来替换<code>username/repo:tag</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">username/repo:tag</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          cpus:</span> <span class="string">"0.1"</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="number">50</span><span class="string">M</span></span><br><span class="line"><span class="attr">      restart_policy:</span></span><br><span class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  webnet:</span></span><br></pre></td></tr></table></figure><p><br></p><p><code>docker-compose.yml</code>文件告诉Docker之下如下操作：</p><ul><li>pull the image</li><li>Run 5 instances of that image as a service called <code>web</code></li><li>限制每个实例最多使用10%的CPU和50MB的RAM</li><li>如果一个失败，马上重启container</li><li>映射主机的80端口到web的80端口</li><li>指示web container通过称为<code>webnet</code>的负载均衡网络共享80端口</li><li>使用默认设置定义<code>webnet</code>网络</li></ul><p><br></p><h3 id="运行你的负载均衡APP"><a href="#运行你的负载均衡APP" class="headerlink" title="运行你的负载均衡APP"></a>运行你的负载均衡APP</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行并设置APP名字</span></span><br><span class="line">docker stack -c docker-compose.yml app-name</span><br><span class="line"></span><br><span class="line">docker stack -c docker-compose.yml LoadBalance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在一个主机上，单个服务栈通过部署的image运行5个container instance</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取service ID</span></span><br><span class="line">docker service ls</span><br><span class="line"></span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                   PORTS</span><br><span class="line">3d1a48yse0t4        LoabBalance_web     replicated          5/5                 zhang21/<span class="built_in">test</span>:tag-test   *:80-&gt;80/tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务中的任务</span></span><br><span class="line">docker service ps app-name_web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker container ls -q</span><br><span class="line"></span><br><span class="line"><span class="comment">#5个容器ID</span></span><br><span class="line">c7ce0075890e</span><br><span class="line">52ba026bf28c</span><br><span class="line">6d4381be438f</span><br><span class="line">bd297a42e89d</span><br><span class="line">357b05cc38eb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问的时候容器ID会在此5个负载中变化</span></span><br></pre></td></tr></table></figure><p>在服务中运行的单个container称为任务(task)。任务是具有数字增量的唯一ID，最大数量是在<code>docker-compose.yml</code>中定义的副本数量。</p><p><br></p><h3 id="伸缩APP"><a href="#伸缩APP" class="headerlink" title="伸缩APP"></a>伸缩APP</h3><p>通过修改<code>docker-compose.yml</code>中<code>replicas</code>的值，并重新运行<code>docker stack deploy -c xxx app-name</code>来伸缩APP。</p><p>Docker执行就地更新，不需要stack down或kill any containers.</p><p><strong>卸下APP和swarm：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app</span></span><br><span class="line">docker stack rm app-name</span><br><span class="line"></span><br><span class="line">docker stack rm LoadBalance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#swarm</span></span><br><span class="line">docker swarm leave --force</span><br></pre></td></tr></table></figure><p>使用Docker扩展APP非常简单。</p><p><br></p><h3 id="本节命令"><a href="#本节命令" class="headerlink" title="本节命令"></a>本节命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出栈或APP</span></span><br><span class="line">docker stack ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行指定配置文件</span></span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出与APP相关联的服务</span></span><br><span class="line">docker service ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出与APP相关联的任务</span></span><br><span class="line">docker service ps &lt;service&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查任务</span></span><br><span class="line">docker inspect &lt;task or container&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出容器ID</span></span><br><span class="line">docker container ls -q</span><br><span class="line"></span><br><span class="line"><span class="comment">#除掉APP</span></span><br><span class="line">docker stack rm &lt;appname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#从管理中除掉一个单一节点swarm</span></span><br><span class="line">docker swarm leave --force</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="swarm"><a href="#swarm" class="headerlink" title="swarm"></a>swarm</h2><p><br></p><h3 id="先决条件-2"><a href="#先决条件-2" class="headerlink" title="先决条件"></a>先决条件</h3><ul><li>前面几个小节的内容</li></ul><p><br></p><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>前面你将一个服务运行在生产环境，并扩展为5个副本进程。</p><p>在此，你将APP部署到到集群上，并在多台机器上运行它。通过将多台主机连接到成为<strong>swarm</strong>的<strong>Dockerized</strong>集群，使得多容器、多主机应用成为可能。</p><p><br></p><h3 id="理解swarm集群"><a href="#理解swarm集群" class="headerlink" title="理解swarm集群"></a>理解swarm集群</h3><p>swarm是一组运行Docker并加入到集群中的机器。这样以后，你可以在集群的swarm manager上执行Docker命令。swarm中的机器可以是物理的或虚拟的，当他们加入swarm后，他们便被成为node。</p><p>swarm manager可以使用多种策略来运行容器，你可在compose file中指定相应的策略。</p><p>swarm manager是swarm中唯一可以执行命令、授权其他机器作为工作者加入swarm的机器。工作者(worker)只能在那提供能力(capacity)，并没有权力告诉任何机器能够做什么。</p><p>但目前为止，你已经在本机机器上以单主机(single host)模式使用Docker。但Docker也可以切换为swarm(集群)模式，这就是使用swarm的原因。立即启用swarm模式使得当前机器成为swarm manager。从此，Docker将运行在你管理的swarm上执行命令，而不仅仅是在当前机器上执行。</p><p><br></p><h3 id="建立swarm"><a href="#建立swarm" class="headerlink" title="建立swarm"></a>建立swarm</h3><p>一个swarm由多个节点组成，不管它是虚拟机还是物理机。</p><ul><li>基本概念很简单，运行<code>docker swarm init</code>来开启swarm模式并使得当前机器成为swarm manager</li><li>在其它机器上运行<code>docker swarm join</code>使他们作为worker加入swarm</li></ul><p><br></p><p><strong>栗子：</strong><br>使用VM快速创建两台机器的集群，并将其变为swarm。</p><p>使用<code>docker-machine</code>创建一对VM:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装VirtualBox</span></span><br><span class="line">wget https://download.virtualbox.org/virtualbox/5.2.8/VirtualBox-5.2-5.2.8_121009_el7-1.x86_64.rpm &amp;&amp; yum install -y Virtual.xx.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装docker-machine</span></span><br><span class="line"> curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-`uname -s`-`uname -m` &gt;/tmp/docker-machine &amp;&amp; install /tmp/docker-machine /usr/<span class="built_in">local</span>/bin/docker-machine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在BIOS中开启虚拟化支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在VMware中开启虚拟化支持(如果是VM)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker-machine create --driver virtual myvm1</span><br><span class="line">docker-machine create --driver virtual myvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出虚拟机</span></span><br><span class="line">docker-machine ls</span><br></pre></td></tr></table></figure><p><br></p><p><strong>初始化swarm并添加node</strong></p><p>第一台机器作为swarm manager，执行命令和join认证，后面的机器作为worker。</p><p>你可以使用<code>docker-machine ssh</code>发送命令到VM。在<code>swarm mananger</code>上执行<code>docker swarm init</code>初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh &lt;swarm manager&gt; &quot;docker swarm init --advertise-assr &lt;mananger-IP&gt;&quot;</span><br><span class="line"></span><br><span class="line">#add worker</span><br><span class="line">docker swarm jion --toker &lt;token&gt; &lt;wroker-ip&gt;:&lt;port&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#添加manager</span><br><span class="line">docker swarm join-token manaer</span><br></pre></td></tr></table></figure><p><strong>由于我的虚拟的无法使用VT，因此我用的两台机器两个Docker来做swarm。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化这台机器默认为manager</span></span><br><span class="line">docker swarm init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#作为worker加入，ip是manager的</span></span><br><span class="line"><span class="comment">#以下信息会在manager初始化时生成</span></span><br><span class="line"><span class="comment">#注意防火墙，可能会阻碍加入</span></span><br><span class="line"></span><br><span class="line">docker swarm join --toker &lt;toker&gt; &lt;ip:port&gt;</span><br><span class="line">docker swarm join --token SWMTKN-1-3vrbnuneu0hyu41evxlhbn5fp04ad5jvg9v5rzvdaedg2bghkt-e24mjnni3hu7782t3gkz0ny39 172.16.129.150:2377</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看swarm</span></span><br><span class="line">docker node ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#离开swarm</span></span><br><span class="line">docker swarm leave</span><br></pre></td></tr></table></figure><p><br></p><h3 id="在swarm集群上部署APP"><a href="#在swarm集群上部署APP" class="headerlink" title="在swarm集群上部署APP"></a>在swarm集群上部署APP</h3><p>主需要记住，只有swarm manager才能执行docker命令，worker仅仅是容量(capacity)。</p><p>在swarm manager上使用<code>docker-composr.yml</code>和<code>docker stack deploy</code>命令来部署APP。使用<code>docker  service ps &lt;service name&gt;</code>来验证部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#在manager部署</span><br><span class="line">docker stack deploy -c ./docker-compose.yml LoadBalance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker service ls</span><br><span class="line"></span><br><span class="line">docker stack ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#注意node名</span><br><span class="line">docker stack ps LoadBalance</span><br><span class="line"></span><br><span class="line">ID                  NAME                IMAGE                   NODE                DESIRED STATE       CURRENT STATE             ERROR               PORTS</span><br><span class="line">6nrn4mwc6pvt        LoadBalance_web.1   zhang21/test:tag-test   zhang22             Running             Preparing 2 minutes ago</span><br><span class="line">bpssrnzesl7n        LoadBalance_web.2   zhang21/test:tag-test   zhang22             Running             Preparing 2 minutes ago</span><br><span class="line">kmhd8p5wkc12        LoadBalance_web.3   zhang21/test:tag-test   zhang21             Running             Running 2 minutes ago</span><br><span class="line">i0pkf4foms87        LoadBalance_web.4   zhang21/test:tag-test   zhang22             Running             Preparing 2 minutes ago</span><br><span class="line">rvtpjk781frn        LoadBalance_web.5   zhang21/test:tag-test   zhang21             Running             Running 2 minutes ago</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#分别访问个主机的IP</span><br><span class="line">#创建的网络在它们之间共享并负载均衡</span><br><span class="line">links ip1</span><br><span class="line">links ip2</span><br></pre></td></tr></table></figure><p>两个IP地址工作的原因是集群中的节点参与入口(ingress)路由网络(routing mesh)。这可以确保部署在swarm中某个端口的服务始终将该端口保留给自己，而不管实际运行容器的节点是什么。</p><p><img src="/images/Docker/ingress-routing-mesh.png" alt="入口路由"></p><p><br></p><h3 id="清理并重启"><a href="#清理并重启" class="headerlink" title="清理并重启"></a>清理并重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm LoadBalance</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>先决条件，已完成前面的步骤。</p><p><br></p><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>你已到达分布式应用程序层次结构的顶端——stack。堆栈是一组相互关联的服务，它们可以共享依赖关系，并可以进行协调和缩放。单个堆栈能够定义和协调整个应用程序的功能(尽管非常复杂的应用程序可能需要使用多个堆栈)。</p><p>在前面使用的<code>docker deploy</code>——是运行在单主机上的单个服务堆栈，这通常不会发生在生产环境中。在这里，你会使用学到的东西使多个服务相互关联，并在多台机器上运行它们。</p><p><br></p><h3 id="添加一个新服务并部署"><a href="#添加一个新服务并部署" class="headerlink" title="添加一个新服务并部署"></a>添加一个新服务并部署</h3><p>docker-compose2.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    # replace username/repo:tag with your name and image details</span><br><span class="line">    image: username/repo:tag</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: 5</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: &quot;0.1&quot;</span><br><span class="line">          memory: 50M</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - webnet</span><br><span class="line">  #可视化</span><br><span class="line">  visualizer:</span><br><span class="line">    image: dockersamples/visualizer:stable</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.role == manager]</span><br><span class="line">    networks:</span><br><span class="line">      - webnet</span><br><span class="line">networks:</span><br><span class="line">  webnet:</span><br></pre></td></tr></table></figure><p>新增的东西使web对等服务，称为visualizer。注意两个事：</p><ul><li>volumes: 给予visualizer访问主机Docker的socket文件</li><li>placement： 确保服务运行在manager而不是worker上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c ./docker-compose2.yml stack-test</span><br><span class="line"></span><br><span class="line">Creating network stack-test_webnet</span><br><span class="line">Creating service stack-test_visualizer</span><br><span class="line">Creating service stack-test_web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看visualizer，要等一会才能正常访问，别着急</span><br><span class="line">访问 IP:8080</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/visualizer.png" alt=""></p><p><br></p><h3 id="持久化数据"><a href="#持久化数据" class="headerlink" title="持久化数据"></a>持久化数据</h3><p>让我们再次通过相同的工作流程来添加用于存储应用程序数据的Redis数据库。</p><p>docker-compose3.yml，添加一个Redis服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    # replace username/repo:tag with your name and image details</span><br><span class="line">    image: username/repo:tag</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: 5</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: &quot;0.1&quot;</span><br><span class="line">          memory: 50M</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - webnet</span><br><span class="line">  visualizer:</span><br><span class="line">    image: dockersamples/visualizer:stable</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.role == manager]</span><br><span class="line">    networks:</span><br><span class="line">      - webnet</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6379:6379&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/home/docker/data:/data&quot;</span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.role == manager]</span><br><span class="line">    command: redis-server --appendonly yes</span><br><span class="line">    networks:</span><br><span class="line">      - webnet</span><br><span class="line">networks:</span><br><span class="line">  webnet:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#部署</span><br><span class="line">docker stack deploy -c docker-compose3.yml redis-test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">访问 IP:port</span><br></pre></td></tr></table></figure><p>Redis是一个Docker library中的官方image，并被授予redis镜像名称。</p><p>redis规范中有几件事使数据在这个堆栈的部署之间持续存在：</p><ul><li>redis运行在manager，所以它总是使用相同的文件系统</li><li>redis将数据存储在上面的目录</li><li>确保redis服务始终使用相同的主机</li><li>确保存储的数据的连续性</li></ul><p>如果没有创建，redis会将数据存储在容器文件系统的/data中，如果该容器被重新部署，则数据将被清除。</p><p><br><br><br></p><h2 id="部署APP"><a href="#部署APP" class="headerlink" title="部署APP"></a>部署APP</h2><p>先决条件为前面的操作步骤。</p><p><br></p><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>compose file在生产环境中的效果与在您的计算机上的效果相同。</p><p><br></p><h3 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h3><p>我安装的是社区版(ce)。如果你在生产环境中使用docker-ce，则可以使用Docker Cloud帮助管理你的应用程序，如AWS、Aliyun、腾讯云。<br>docker cloud： <cloud.docker.com>, 可注册后建立、上传、管理自己的repo。</cloud.docker.com></p><p>设置和部署：</p><ul><li>连接Docker Cloud并授权它自动为你配置Dockerize VM</li><li>使用Docker Cloud创建你的计算资源和swarm</li><li>部署应用程序</li></ul><p><br></p><h3 id="连接DockerCloud"><a href="#连接DockerCloud" class="headerlink" title="连接DockerCloud"></a>连接DockerCloud</h3><p>你可以标准模式或swarm模式运行Docker Cloud。</p><ul><li>AWS配置指南</li><li>Aliyun配置指南</li><li>腾讯云配置指南</li></ul><p><br></p><h3 id="创建swarm"><a href="#创建swarm" class="headerlink" title="创建swarm"></a>创建swarm</h3><p>你可在Docker Cloud UI创建你的node，或<code>docker swarm init|join</code>命令。</p><p><br></p><h3 id="在云提供商上部署应用程序"><a href="#在云提供商上部署应用程序" class="headerlink" title="在云提供商上部署应用程序"></a>在云提供商上部署应用程序</h3><p><img src="/images/Docker/dockercloud.png" alt="栗子"></p><p>我觉得阿里云和腾讯云也有对应的平台。</p><p>运行部署命令: <code>docker stack deploy -c xxx.yml &lt;cus_appname&gt;</code>，现在你的APP就运行在云提供商上。</p><p><strong>运行swarm命令来验证部署</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br><span class="line"></span><br><span class="line">docker service ls</span><br><span class="line"></span><br><span class="line">docker service ps &lt;service&gt;</span><br></pre></td></tr></table></figure><p><strong>在云提供商开放端口</strong></p><table><thead><tr><th>service</th><th>type</th><th>protocol</th><th>port</th></tr></thead><tbody><tr><td>web</td><td>http</td><td>tcp</td><td>80</td></tr><tr><td>visualizer</td><td>http</td><td>tcp</td><td>8080</td></tr><tr><td>redis</td><td>tcp</td><td>tcp</td><td>6379</td></tr></tbody></table><p>具体操作参见各云提供商。</p><p><br></p><h3 id="迭代和清理"><a href="#迭代和清理" class="headerlink" title="迭代和清理"></a>迭代和清理</h3><ul><li>改变<code>*.yml</code>文件伸缩应用程序</li><li>使用<code>docker stack deploy</code>部署应用程序</li><li>push和pull image</li><li>使用<code>docker stack rm &lt;name&gt;</code>清除stack</li></ul><p><br><br><br></p><h2 id="修改Docker默认路径"><a href="#修改Docker默认路径" class="headerlink" title="修改Docker默认路径"></a>修改Docker默认路径</h2><p>docker默认的目录为<code>/var/lib/docker</code>，但很多时候<code>/var</code>目录并没有单独挂载，可能导致空间不够。<br>前提是你已经把源配置目录对应的文件拷贝到替换的目录。</p><ul><li>方法1：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">cd /etc/docker</span><br><span class="line"></span><br><span class="line">vim daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;graph&quot;: &quot;/opt/docker&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line">#systemctl reload docker</span><br><span class="line"></span><br><span class="line">#查看变更</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p><br></p><ul><li>方法2:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">cd /etc/sysconfig/</span><br><span class="line"></span><br><span class="line">vim docker-storage</span><br><span class="line"></span><br><span class="line">DOCKER_STORAGE_OPTIONS=--graph=/opt/docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">#查看变更</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="容器服务自启动"><a href="#容器服务自启动" class="headerlink" title="容器服务自启动"></a>容器服务自启动</h2><p>在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always -d -p 80:80 &lt;container-id&gt;</span><br><span class="line"></span><br><span class="line">#对于已启动的容器服务，更新它</span><br><span class="line">docker update --restart=always &lt;container-id&gt;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="交互式容器"><a href="#交互式容器" class="headerlink" title="交互式容器"></a>交互式容器</h2><p>进入Docker容器以获得交互式体验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container-id&gt; /bin/bash</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Docker日志"><a href="#Docker日志" class="headerlink" title="Docker日志"></a>Docker日志</h2><ul><li>docker服务日志：<ul><li><code>journalctl -u docker.service</code></li></ul></li><li>docker容器日志：<ul><li><code>&lt;docker-graph&gt;/containers/&lt;container-id&gt;/&lt;container-id&gt;-json.log</code></li><li>由于容器ID会变化，请注意提取容器ID</li><li>可使用ELK在此收集容器日志</li></ul></li></ul><p><br><br><br></p><h2 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h2><p>使用<code>docker commit</code>从改变的容器中生成一个新镜像。</p><p>更新镜像步骤：</p><ol><li>备份镜像: <code>docker tag</code></li><li>运行镜像</li><li>修改容器</li><li>生成新镜像: <code>docker commit</code></li><li>推送镜像: <code>docker push</code></li></ol><p><br><br><br></p><h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><p><br></p><h3 id="备份容器"><a href="#备份容器" class="headerlink" title="备份容器"></a>备份容器</h3><ul><li><code>docker commit</code>: 生成新镜像</li><li><code>docker save</code>： 生成本地tar包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">docker commit -m &quot;Just a test&quot; -p $&#123;container-id&#125; Zhang21/test:01</span><br><span class="line">docker image ls</span><br><span class="line">docker login</span><br><span class="line">docker push</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage:  docker save [OPTIONS] IMAGE [IMAGE...] [flags]</span><br><span class="line"></span><br><span class="line">docker save -o /path/$&#123;image&#125;.tar $&#123;image&#125;</span><br><span class="line">ls /path</span><br></pre></td></tr></table></figure><p><br></p><h3 id="恢复容器"><a href="#恢复容器" class="headerlink" title="恢复容器"></a>恢复容器</h3><ul><li><code>docker run ${image}</code></li><li><code>docker load</code>: 载入本地.tar镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Usage:  docker load [OPTIONS]</span><br><span class="line"></span><br><span class="line">docker load -i /path/$&#123;image&#125;.tar</span><br><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="应用场景与注意事项"><a href="#应用场景与注意事项" class="headerlink" title="应用场景与注意事项"></a>应用场景与注意事项</h2><p><br></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>本地依赖</li><li>搭建环境</li><li>微服务</li><li>自动测试</li><li>部署过程</li><li>CI/CD</li><li>多租户环境</li><li>一台机器的多个APP</li><li>弹性伸缩</li><li>资源隔离</li></ul><p><br></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>一个进程，一个容器<br>不推荐在Docker容器中运行多个进程！</p></li><li><p>不要将数据存放到容器内<br>所以请使用挂在卷的方式映射到本地磁盘目录</p></li></ul><ul><li><p>使用磁盘进行数据存储</p></li><li><p>容器通信<br>每当一个Docker容器需要与另一个容器通信时，传递信息最好使用名称或环境变量。</p></li><li><p>以non-root用户运行Docker<br>默认情况下，Docker容器以root用户身份运行，众所周知，以root用户运行的容器完全可以控制主机系统。</p></li><li><p>注意容器的体积<br>选择一个容器的主要原因之一是它的体积小。但是，如果你把它做得更大，它的主要优势就没了。</p></li><li><p>制定控策略<br>开发和部署Docker容器不是你的工作的结束。您需要持续监控已部署的容器以及整个系统的运行状况。选择合适的工具并制定一个策略来有效地监控您的Docker容器，以确保最短的停机时间，从而使客户满意。</p></li><li><p>安全问题<br>安全补丁、防火墙…</p></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>参考:</p><ul><li><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/image/build.html</a></li></ul><p><br></p><p>将镜像每一层的修改、安装、配置、操作的命令写入Dockerfile，并用它来构建、定制镜像，那么镜像构建透明性问题便会得到解决。</p><p>Dockerfile是一个文本文件，包含了一条条指令(instrction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p><br><br><br></p><h2 id="使用Dockerfile定制镜像"><a href="#使用Dockerfile定制镜像" class="headerlink" title="使用Dockerfile定制镜像"></a>使用Dockerfile定制镜像</h2><p><br></p><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>所谓指定镜像，就是以一个镜像为基础，在其上进行定制。基础镜像必须指定，而<code>FROM</code>就是指定<strong>基础镜像</strong>，因此一个<code>Dockerfile</code>中<code>FROM</code>是必备的指令，并且必须是第一条指令。</p><p>只有有可能，请使用当前官方repo作为你的基础镜像。我们推荐使用<strong>Alpine</strong>镜像，因为它严格控制，体积小(只有5MB)，同时也是完整的Linux发行版。</p><p>Docker Hub中有很多常用的官方镜像——常用软件、常用语言和常用系统镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#特殊镜像，scratch，空白镜像</span><br><span class="line">FROM scratch</span><br></pre></td></tr></table></figure><p><br></p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>在多行中使用反斜杠<code>\</code>或复杂的<code>RUN</code>语句，使Dockerfile更具可读性、易理解性和可维护性。</p><p><code>RUN</code>指令是用来执行命令行命令的。有两种格式：</p><ul><li><code>shell</code>格式<ul><li><code>RUN &lt;CMD&gt;</code>，就像直接在命令行中输入命令一样</li></ul></li><li><code>exec</code>格式<ul><li><code>RUN [&quot;可执行文件&quot;, &quot;参数&quot;]</code>，这更像函数调用中的格式</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y gcc libc6-dev make</span><br><span class="line">RUN wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span><br><span class="line">RUN mkdir -p /usr/src/redis</span><br><span class="line">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br><span class="line">RUN make -C /usr/src/redis</span><br><span class="line">RUN make -C /usr/src/redis install</span><br></pre></td></tr></table></figure><p>Dockerfile中的每一个指令都会建立一层，<code>RUN</code>也不例外。每一个<code>RUN</code>的行为，就和手工建立镜像的过程一样 —— 新建立一层，在其上执行这些命令，执行结束后，<code>commit</code>这一层的修改，构成新的镜像。</p><p>上面这种写法，创建了7层镜像，这是完全没有意义的，而且很多运行时不需要的东西都被装进了镜像里，比如编译环境和更新的软件包等。结果就会产生非常臃肿、非常多层的镜像，不仅增加了构建部署的时间，也容易出错。这是很多初学Docker的人常犯的一个错误。</p><p>UnionFS是Linux、FreeBSD的文件系统服务，UnionFS是有最大层数限制的。</p><p>修改后的Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line"></span><br><span class="line">RUN buildDeps=&apos;gcc libc6-dev make&apos; \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y $buildDeps \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot; \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/src/redis \</span><br><span class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis install \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; rm redis.tar.gz \</span><br><span class="line">    &amp;&amp; rm -r /usr/src/redis \</span><br><span class="line">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure><p>仅仅使用一个<code>RUN</code>指令，并使用<code>&amp;&amp;</code>将各指令串联起来。将之前的7层简化为1层。在编写<code>Dockerfile</code>时，要经常提醒自己，这并不是在写shell脚本，而是在定义每一层该如何构建。</p><p><code>Dockerfile</code>支持shell类的换行<code>\</code>、注释<code>#</code>等格式，良好的格式，如换行、缩进、注释等，会让维护、排障更为容易，这也是一个好习惯。</p><p>此外，还可看到命令最后添加了清理工作的命令，删除了为编译构建所需要的软件，清理了所有下载文件。这很重要，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随镜像。<br>因此，构建镜像时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。<br>很多人初学docker制作出了很臃肿的镜像，原因之一就是顽疾了每一层构建的最后一定要清理无关文件。</p><p><br></p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>在<code>Dockerfile</code>目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#docker build [OPTIONS] PATH | URL | - [flags]</span><br><span class="line">#Build an image from a Dockerfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#-t指定镜像名称</span><br><span class="line">#.指的是上下文目录</span><br><span class="line">docker build -t nginx:test .</span><br></pre></td></tr></table></figure><p><br></p><p><strong>构建上下文(content)</strong></p><p>上面的<code>.</code>是在指定<strong>上下文路径</strong>。</p><p>当我们在进行镜像构建的时候，并非所有的定制都会通过<code>RUN</code>指令完成，经常会需要一些本地文件复制进镜像，比如通过<code>COPY</code>, <code>ADD</code>指令。而<code>docker build</code>命令并非是在本地构建镜像，而是在服务端，也就是Docker引擎<code>dockerd</code>中构建的。那么在这种C/S架构中，如何才能让服务端获得本地文件呢？</p><p>这就引进了上下文的概念。当构建的时候，用户会指定构建镜像的上下文的路径，<code>docker build</code>命令得知这个路径后，会将路径下的所有内容打包，然后上传给Docker引擎。这样Docker引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#复制上下文目录下的package.json</span><br><span class="line">COPY ./package.json /app/</span><br></pre></td></tr></table></figure><p>因此<code>COPY</code>这类指令中的源文件的路径都是相对路径，因为绝对路径已经超出了上下文的范围，Docker引擎无法获取这些位置的文件。如果真需要这些文件，请将它们复制到上下文目录中去。</p><p>理解构建上下文对于镜像构建很重要，避免犯一些不应该的错误。</p><p>一般来说，应将<code>Dockerfile</code>置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，则应该把所需文件复制一份过来。如果目录下有些东西不希望构建时传给Docker引擎，可以写一个<code>.dockerignore</code>文件，用于剔除不需要作为上下文传递给Docker引擎的。</p><p>实际上，<code>Dockerfile</code>的文件名并不要求必须为<code>Dockerfile</code>，也并不要求必须位于上下文目录中。可使用<code>-f</code>指定某个文件为<code>Dockerfile</code>。</p><p><br></p><p><strong>其它<code>docker build</code>的用法</strong></p><ol><li>直接使用Git repo进行构建</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#docker build URL</span><br><span class="line"></span><br><span class="line">docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14</span><br><span class="line">#docker会自己去clone、切换分支、并进入指定目录开始构建</span><br></pre></td></tr></table></figure><p><br></p><ol><li>使用给定tar压缩包构建</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build http://server/context.tar.gz</span><br><span class="line"></span><br><span class="line">#自动下载/解压缩 压缩包，以其作为上下文，开始构建</span><br></pre></td></tr></table></figure><p><br></p><ol><li>从标准输入中读取Dockerfile进行构建</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build - &lt; Dockerfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat Dockerfile | docker build -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build - &lt; context.tar.gz</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h2><p><code>Dockerfile</code>提供了十多个指令供我们操作。</p><p><br></p><h3 id="LABLE"><a href="#LABLE" class="headerlink" title="LABLE"></a>LABLE</h3><p>你可以为你的镜像添加标签，以助于通过项目来组织镜像，记录相关信息。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set multiple labels at once, using line-continuation characters to break long lines</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> vendor=ACME\ Incorporated \</span></span><br><span class="line"><span class="bash">      com.example.is-beta= \</span></span><br><span class="line"><span class="bash">      com.example.is-production=<span class="string">""</span> \</span></span><br><span class="line"><span class="bash">      com.example.version=<span class="string">"0.0.1-beta"</span> \</span></span><br><span class="line"><span class="bash">      com.example.release-date=<span class="string">"2015-02-12"</span></span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>尽管<code>ADD</code>和<code>COPY</code>在功能上相似，但一般来说，<code>COPY</code>是首选，因为它比<code>COPY</code>更透明。<br><code>COPY</code>只支持将本地文件复制到容器中，而<code>ADD</code>具有一些功能(如提取tar文件和远程URL支持)</p><p><br></p><p><code>COPY</code>,复制文件。<br>从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置。</p><blockquote><p>源路径可以是多个，或通配符(需满足Go的规则)<br>目标路径可是容器内的绝对路径，也可是相对于工作目录(<code>WORKDIR</code>)的相对路径。目标路径不需要事先创建。<br>使用COPY指令，源文件的各种元数据都会保留 —— 如读、写、执行权限、文件变更时间…</p></blockquote><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">COPY  &lt;sourch&gt;  &lt;destination&gt;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">COPY  [&quot;&lt;source1&gt;&quot;, ... &quot;&lt;destination&gt;&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">COPY package.json /usr/src/app/</span><br><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure><p><br></p><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p><code>ADD</code>,更高级的复制文件。<br><code>ADD</code>和<code>COPY</code>的格式和性质基本一致，但增加了一些功能。<br>尽可能的使用<code>COPY</code>，因为<code>COPY</code>的语义很明确，就是复制文件而已，而<code>ADD</code>则包含了更复杂的功能，其行为也不一定很清晰。<br>最适合<code>ADD</code>的场合，就是所提及的需要自动解压缩的场合。</p><p>因此在<code>COPY</code>和<code>ADD</code>指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用<code>COPY</code>指令，仅在需要自动解压缩的场合使用<code>ADD</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line"></span><br><span class="line">ADD abc.tar.gz / &amp;&amp; \</span><br><span class="line">    http://example.com/big.tar.xz /usr/src/things/ &amp;&amp; \</span><br><span class="line">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span><br><span class="line">RUN make -C /usr/src/things all</span><br></pre></td></tr></table></figure><p><br></p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p><code>CMD</code>，容器启动命令。用于运行镜像中包含的软件以及任何参数。</p><p>也有两个格式：</p><ul><li><code>shell</code>格式： <code>CMD &lt;command&gt;</code></li></ul><p><code>shell</code>格式，在实际中会被包装成<code>sh -c</code>的参数形式进行执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CMD echo $HOME</span><br><span class="line"></span><br><span class="line">#转变为</span><br><span class="line">CMD[&quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot;]</span><br><span class="line"></span><br><span class="line">#-c string If  the  -c option is present, then commands are read from string.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理</span><br></pre></td></tr></table></figure><p><br></p><ul><li><code>exec</code>格式： <code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot; ...]</code><br>CMD几乎总是以此格式使用。</li></ul><p>Docker不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code>指令就是用于指定默认的容器主进程的启动命令的。<br>``</p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p><p><br></p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p><code>ENTRYPOINT</code>，入口点。指令格式同样分为<code>shell</code>格式和<code>exec</code>两种。</p><p><code>ENTRYPOINT</code>和<code>CMD</code>一样，都是在指定容器启动程序及参数。<br>当指定了<code>ENTRYPOINT</code>后，<code>CMD</code>的含义就发生了改变，不再是直接的运行其命令，而是将<code>CMD</code>的内容作为参数传给<code>ENTRYPOINT</code>指令。即变为如下模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span><br></pre></td></tr></table></figure><p><br></p><p>有几大好处：</p><ul><li><strong>让镜像变成像命令一样使用</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#可以从腾讯上拉取，快一些</span><br><span class="line">#ccr.ccs.tencentyun.com/qcloud/ubuntu</span><br><span class="line"></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y curl \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.cn&quot; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build -t myip</span><br><span class="line">docker run myip</span><br><span class="line">#当前 IP：182.150.x.xx 来自：四川省成都市 电信</span><br></pre></td></tr></table></figure><p>不过命令总有参数，例如我想查看HTTP header，使用<code>-i</code>参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run myip -i</span><br><span class="line">#这样会报错，-i替换了CMD命令，而不是-s参数，然而-i并不是命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重新完整输入命令</span><br><span class="line">docker run myip curl -s http://ip.cn -i</span><br><span class="line">#这样又太麻烦</span><br></pre></td></tr></table></figure><p>这时便可以使用<code>ENTRYPOINT</code>解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y curl \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.cn&quot; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build it myip</span><br><span class="line">docker run myip</span><br><span class="line">#当前 IP：182.150.x.xx 来自：四川省成都市 电信</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run myip -i</span><br><span class="line">#成功</span><br></pre></td></tr></table></figure><p>当存在<code>ENTRYPOINT</code>后，<code>CMD</code>的内容将作为参数传递给<code>ENTRYPOINT</code>，而<code>-i</code>就是新的<code>CMD</code>，因此会作为参数传递给<code>curl</code>，从而达到预期效果。</p><p><br></p><ul><li><strong>应用运行前的准备工作</strong></li></ul><p>有时，在启动前需要做一些准备工作。</p><ul><li>如MySQL，需要一些配置文件、初始化工作，这些工作需要在MySQL server运行前解决</li><li>避免使用root用户去启动服务，从而提高安全性</li><li>这些准备工作和<code>CMD</code>无关</li></ul><p><br></p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p><code>ENV</code>，设置环境变量。<br>为了使新软件更容易运行，使用此命令为你的容器内安装的软件更新环境变量。</p><p>两种格式：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ENV PATH $PATH:/root/bin \</span><br><span class="line">EMAIL abc@zhang21.cn \</span><br><span class="line">NAME=&quot;Zhang21&quot;</span><br></pre></td></tr></table></figure><p>下列指令可以支持环境变量展开： <code>ADD</code>, <code>COPY</code>, <code>ENV</code>, <code>EXPOSE</code>, <code>LABEL</code>, <code>USER</code>, <code>WORKDIR</code>, <code>VOLUME</code>, <code>STOPGIGNAL</code>, <code>ONBUILD</code>。</p><p>通过环境变量，我们可以让一份<code>Dockerfile</code>制作更多的镜像，只需使用不同的环境变量即可。</p><p><br></p><h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><p><code>ARG</code>，构建参数</p><p>格式：</p><ul><li><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></li></ul><p><br></p><p>构建参数和<code>ENV</code>的效果一样，都是设置环境变量。所不同的是，<code>ARG</code>所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。</p><p><br></p><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p><code>VOLUME</code>，定义匿名卷。用于显示有docker容器创建的任何数据库存储区域，配置存储或文件/文件夹。<br>强烈建议将VOLUME用于镜像的任何可变部分和用户可用部分。</p><p>格式：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p><br></p><p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。<br>为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在<code>Dockerfile</code>中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会像容器存储层写入大量数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#在运行时自动挂载为匿名卷</span><br><span class="line">VOLUME /data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#覆盖挂载</span><br><span class="line">docker run -d -v mydata:/data xxx</span><br></pre></td></tr></table></figure><p><br></p><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p><code>EXPOSE</code>，声明容器监听连接的端口。</p><p>格式：</p><ul><li><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></li></ul><p><code>EXPOSE</code>指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。<br>在<code>Dockerfile</code>中写入这个声明有两个好处：</p><ul><li>一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便映射</li><li>另一个用处则是在运行时使用随机端口映射(未定义时)</li></ul><p>要将<code>EXPOSE</code>和在运行时使用<code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code>区分开。<code>EXPOSE</code>仅仅声明容器打算使用哪些端口，并未包含端口映射。</p><p><br></p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p><code>WORKDIR</code>，指定工作目录。为了清晰可靠，请使用绝对路径。</p><p>使用<code>WORKDIR</code>指令可以来指定工作目录，以后各层的当前目录就被改为指定的目录，如目录不存在，<code>WORKDIR</code>会帮你建立目录。<br>如果需要改变<code>Dockerfile</code>各层的工作目录的位置，那么应该使用<code>WORKDIR</code>指令。</p><p>格式：</p><ul><li><code>WORKDIR &lt;工作目录&gt;</code></li></ul><p><br></p><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p><code>USER</code>，指定当前用户。<br>如果服务可以在非特权模式下运行，请使用USER将其改为non-root用户。首先在Dockerfile中创建相应的用户和组:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN groupadd -r group &amp;&amp; \</span><br><span class="line">useradd -r -g group group</span><br></pre></td></tr></table></figure><p><code>USER</code>和<code>WORKDIR</code>相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code>是改变工作目录，<code>USER</code>则是改变之后的层执行<code>RUN</code>, <code>CMD</code>, <code>ENTRYPOINT</code>这类命令的身份。这个用户必须存在。</p><p>格式：</p><ul><li><code>USER &lt;用户名&gt;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER redis</span><br><span class="line">RUN [&quot;redis-server&quot;]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h3><p><code>HEALTHCHECK</code>，健康检查<br><code>HEALTHCHECK</code>指令告诉docker应该如何进行判断容器的状态是否正常。</p><p>格式：</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>， 设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>， 如果基础镜像有健康检查，使用这行可以屏蔽其健康检查指令</li></ul><p>当在一个镜像指定了<code>HEALTHCHECK</code>指令后，用其启动容器，初始状态会为<code>starting</code>，在<code>HEALTHCHECK</code>指令检查成功后变为<code>healthy</code>，如果连续一定次数失败，则会变为<code>unhealthy</code>。<br>和<code>CMD</code>, <code>ENTRYPOINT</code>一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。</p><p><br></p><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p><code>ONBUILD</code>，为他人做嫁衣。</p><p><code>ONBUILD</code>是一个特殊的指令，它后面跟的是其它指令。而这些指令，在当前镜像构建时不会被执行。只有当以当前镜像为基础镜像(父镜像)，去构建下一级镜像(子镜像)的时候才会被执行。<code>ONBUILD</code>命令在子镜像的Dockerfile中任何命令之前执行。<br><code>Dockerfile</code>中的其它指令都是为了定制当前镜像而准备的，唯有<code>ONBUILD</code>是为了帮助别人定制自己而准备的。</p><p>格式：</p><ul><li><code>ONBUILD &lt;其它指令&gt;</code></li></ul><p><br><br><br></p><h2 id="Dockerfile多阶段构建"><a href="#Dockerfile多阶段构建" class="headerlink" title="Dockerfile多阶段构建"></a>Dockerfile多阶段构建</h2><p><strong>全部放入一个Dockerfile</strong></p><p>将所有的构建过程包含在一个<code>Dockerfile</code>中，包括项目及其依赖库的编译、测试、打包等流程。<br>这可能会带来一些问题：</p><ul><li><code>Dockerfile</code>特别长，可维护性降低</li><li>镜像层次多，镜像体积较大，部署时间变长</li><li>源代码存在泄漏的风险</li></ul><p><br></p><p><strong>分散到多个Dockerfile</strong></p><p>事先在一个<code>Dockerfile</code>将项目及其依赖库编译测试打包好后，再将其拷贝到运行环境中。这种方式需要编写两个<code>Dockerfile</code>和一些编译脚本才能将两个阶段自动整合起来。这种方式虽然可以很好避免全部写入一个Dockerfile的风险，但明显部署过程较复杂。</p><p><br></p><p><strong>多阶段构建</strong></p><p>使用多阶段构建我们就可以很容易解决前面提到的问题，并且只需要编写一个<code>Dockerfile</code>。</p><p><br><br><br></p><h2 id="Dockerfile最佳实践"><a href="#Dockerfile最佳实践" class="headerlink" title="Dockerfile最佳实践"></a>Dockerfile最佳实践</h2><ul><li>一般性建议<ul><li>容器应该是短暂的</li><li>使用<code>.dockerignore</code>文件</li><li>使用多阶段构建减少镜像大小</li><li>避免安装不必要的包</li><li>一个镜像只运行一个进程</li><li>镜像层数尽可能少</li><li>将多行参数排序</li><li>构建缓存</li></ul></li><li>Dockerfile指令<ul><li><code>FROM</code></li><li><code>LABEL</code></li><li><code>RUN</code></li><li><code>CMD</code></li><li><code>EXPOSE</code></li><li><code>ENV</code></li><li><code>ADD</code></li><li><code>COPY</code></li><li><code>ENTRYPOINT</code></li><li><code>VOLUME</code></li><li><code>USER</code></li><li><code>WORKDIR</code></li></ul></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="Compose-file"><a href="#Compose-file" class="headerlink" title="Compose file"></a>Compose file</h1><p>参考:</p><ul><li><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/</a></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="使用Docker进行开发"><a href="#使用Docker进行开发" class="headerlink" title="使用Docker进行开发"></a>使用Docker进行开发</h1><p>Develop with Docker</p><p><br><br><br></p><h2 id="在Docker上开发应用程序"><a href="#在Docker上开发应用程序" class="headerlink" title="在Docker上开发应用程序"></a>在Docker上开发应用程序</h2><p>Develop new apps on Docker</p><ul><li>Learn to build an image from a Dockerfile</li><li>Use multistage builds to keep your images lean</li><li>Manage application data using volumes and bind mounts</li><li>Scale your app as a swarm service</li><li>Define your app stack using a compose file</li><li>General application development best practices</li></ul><p><br></p><p>了解有关Docker上特定语言的开发：</p><ul><li>Java</li><li>node.js</li><li>Ruby on Rails</li><li>.Net</li><li>ASP.Net</li></ul><p><br><br><br></p><h3 id="Docker开发最佳实践"><a href="#Docker开发最佳实践" class="headerlink" title="Docker开发最佳实践"></a>Docker开发最佳实践</h3><p>Docker development best practices</p><p>如下开发模式已被证明有助于人么使用Docker构建应用程序。</p><p><br></p><h4 id="如何保持较小的镜像"><a href="#如何保持较小的镜像" class="headerlink" title="如何保持较小的镜像"></a>如何保持较小的镜像</h4><p>How to keep your images small</p><p>在启动容器或服务时，小图像可以更快速通过网络pull镜像并加载到内存中。有几条经验法则可保持较小的镜像：</p><ul><li><p>从适当的基础镜像开始<br>例如，如果需要JDK，请考虑官方镜像，而不是从一个通用的Ubuntu/Centos镜像并将Openjdk作为Dockerfile的一部分安装开始。</p></li><li><p>使用多阶段构建<br>例如，你可以使用maven镜像构建java程序，然后重置到tomcat镜像，并将java构件复制到正确位置以部署应用程序，所有这些都位于相同的Dockerfile。这意味着你的最终镜像不包含构建时所引入的所有库和依赖项，仅包含运行它们所需的构件和环境。</p></li><li><p>如果你有多个共同的镜像，请考虑使用共享组件创建你的基本镜像，并在其上创建独特的镜像<br>Docker只要家在一次通用层，然后便会缓存。</p></li><li><p>保持生产环境镜像精简但允许调试(degub)，请考虑使用生产环境镜像作为调试镜像的基本镜像</p></li><li><p>在构建镜像时，应该始终使用有用的标签对其进行标记，如(test, prod)。不要依赖自动创建的<code>latest</code>标签</p></li></ul><p><br></p><h4 id="何处以及如何持久化应用程序数据"><a href="#何处以及如何持久化应用程序数据" class="headerlink" title="何处以及如何持久化应用程序数据"></a>何处以及如何持久化应用程序数据</h4><p>Where and how to persist application data</p><ul><li><p>避免使用存储驱动(storge drivers)将应用程序的数据存储在容器的可写层(writeable layer)中<br>与使用卷(volume)或绑定挂载(bound mounts)相比，这增加了容器的大小，并且从I/O角度来看效率较低</p></li><li><p>使用卷存储数据</p></li><li>适合使用绑定挂载的一种情况是在开发过程中，对于生产环境，请改用卷</li><li>对于生产环境，使用secerts来存储服务使用的敏感的应用程序数据，使用config来存储不敏感的数据(如配置文件)</li></ul><p><br></p><h4 id="尽可能使用swarm服务"><a href="#尽可能使用swarm服务" class="headerlink" title="尽可能使用swarm服务"></a>尽可能使用swarm服务</h4><p>Use swarm services when possible</p><ul><li>在可能的情况下，使用swarm服务进行伸缩的能力来设计你的应用程序</li><li>即使你只需运行单个实例，swarm服务也比standalone容器提供更多的优势</li><li>网络和卷可使用swarm服务连接和断开，并且docker可以以不中断的方式重新部署各个服务容器。standalone容器需要手动停止/移除/重新创建</li><li>一些功能仅适用于服务而不适用于standalone容器</li><li>让<code>docker stack deploy</code>处理任意镜像，而不是使用<code>docker pull</code>。通过这种方式，你的部署不会尝试从down的节点进行pull。此外，当新节点添加到集群时，镜像会自动pull</li></ul><p><br></p><h4 id="使用CI-CD进行测试和部署"><a href="#使用CI-CD进行测试和部署" class="headerlink" title="使用CI/CD进行测试和部署"></a>使用CI/CD进行测试和部署</h4><p>Use CI/CD for testing and deployment</p><ul><li>CI(Continuous integration)</li><li>CD(continuous deployment)</li><li>当更新源码库或创建拉取请求时，请使用CI/CD pipeline 自动构建并标记Docker镜像，并对其进行测试。也可将测试过的应用程序直接部署到生产环境中</li></ul><p><br><br><br></p><h3 id="Develop-images"><a href="#Develop-images" class="headerlink" title="Develop images"></a>Develop images</h3><h4 id="编写Dockerfile的最佳实践"><a href="#编写Dockerfile的最佳实践" class="headerlink" title="编写Dockerfile的最佳实践"></a>编写Dockerfile的最佳实践</h4><p>Best practices for writing Dockerfiles</p><p>Docker通过读取Dockerfile(一个包含命令的文本文件)中的命令来自动构建镜像。<br>Dockerfile reference: <a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></p><p><br></p><p>Dockerfile由read-only layer组成，每层代表一个Dockerfile指令。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:15.04</span><br><span class="line">COPY . /app</span><br><span class="line">RUN make /app</span><br><span class="line">CMD python /app/app.py</span><br></pre></td></tr></table></figure><p>每个命令创建一个层:</p><ul><li><p><code>FROM</code><br>从<code>ubuntu:15.04</code> Docker image创建一个层</p></li><li><p><code>COPY</code><br>从Docker client的当前目录添加文件</p></li><li><p><code>RUN</code><br>使用<code>make</code>构建你的应用程序</p></li><li><p><code>CMD</code><br>指定在容器内运行的命令</p></li></ul><p>当你运行镜像并生成容器时，会在基础层的顶部添加一个可写层(writable layer)，也称容器层(container layer)。对正在运行的容器所做的所有更改(增删改文件)都会写入此可写容器层。</p><p><br></p><h4 id="一般准则和建议"><a href="#一般准则和建议" class="headerlink" title="一般准则和建议"></a>一般准则和建议</h4><p>General guidelines and recommendations</p><p><strong>创建临时(ephemeral)容器</strong></p><p>Create ephemeral containers<br>由Dockerfile定义的镜像应该生成尽可能临时的容器。临时的意思为容器可以被停止(stop)和销毁(destroy)，然后重建(rebuild)并使用绝对最小化的设置和配置来替代。</p><p><br></p><p><strong>理解构建上下文</strong></p><p>Understand build context<br>当你发出<code>docker build</code>命令时，当前的工作目录被称为构建上下文(build context)。默认情况下，假设Dockerfile位于此，但你也可以使用文件标志(-f)指定位置。无论Dockerfile位于何处，当前目录内的所有内容(除了.dockerignore中忽略的内容)都将作为构建上下文发送给Docker守护进程。</p><p><br></p><p><strong>从stdin读取Dockerfile</strong></p><p>Pipe Dockerfile through stdin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#local build-context</span><br><span class="line">docker build -t . -f-&lt;&lt;EOF</span><br><span class="line">FROM busybox</span><br><span class="line">RUN echo &quot;hello world&quot;</span><br><span class="line">COPY . /my-copied-files</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#remote</span><br><span class="line">docker build -t foo https://github.com/thajeztah/pgadmin4-docker.git -f-&lt;&lt;EOF</span><br><span class="line">FROM busybox</span><br><span class="line">COPY LICENSE config_local.py /usr/local/lib/python2.7/site-packages/pgadmin4/</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用<code>.dockerignore</code>排除文件</strong></p><p>Exclude with .dockerignore<br>要排除与构建无关的文件，请使用<code>.dockerignore</code>文件，这与<code>.gitignore类似</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ./dockerignore</span><br><span class="line"></span><br><span class="line">file1</span><br><span class="line">dir2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用多阶段构建</strong></p><p>Use multi-stage builds<br>多阶段构建允许你大幅缩减镜像大小，而不需要减少中间层和文件数。<br>由于镜像是在构建过程的最后阶段构建的，因此可以通过利用构建缓存(build cache)来最小化镜像层</p><p>例如，如果你的版本博涵包含多个层，你可以从 不经常改动的版本到频繁改动的版本进行排序:</p><ul><li>安装构建应用程序需要的工具</li><li>安装或更新依赖库</li><li>生成应用程序</li></ul><p>A Dockerfile for Go application:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.9.2-alpine3.6 AS build</span><br><span class="line"></span><br><span class="line"># Install tools required for project</span><br><span class="line"># Run `docker build --no-cache .` to update dependencies</span><br><span class="line">RUN apk add --no-cache git</span><br><span class="line">RUN go get github.com/golang/dep/cmd/dep</span><br><span class="line"></span><br><span class="line"># List project dependencies with Gopkg.toml and Gopkg.lock</span><br><span class="line"># These layers are only re-built when Gopkg files are updated</span><br><span class="line">COPY Gopkg.lock Gopkg.toml /go/src/project/</span><br><span class="line">WORKDIR /go/src/project/</span><br><span class="line"># Install library dependencies</span><br><span class="line">RUN dep ensure -vendor-only</span><br><span class="line"></span><br><span class="line"># Copy the entire project and build it</span><br><span class="line"># This layer is rebuilt when a file changes in the project directory</span><br><span class="line">COPY . /go/src/project/</span><br><span class="line">RUN go build -o /bin/project</span><br><span class="line"></span><br><span class="line"># This results in a single layer image</span><br><span class="line">FROM scratch</span><br><span class="line">COPY --from=build /bin/project /bin/project</span><br><span class="line">ENTRYPOINT [&quot;/bin/project&quot;]</span><br><span class="line">CMD [&quot;--help&quot;]</span><br></pre></td></tr></table></figure><p><br></p><p><strong>不要安装不必要的包</strong></p><p>Don’t install unnecessary packages<br>为了减少复杂性、依赖性，文件大小和构建时间，避免安装额外的或不不必要的软件包。</p><p><br></p><p><strong>分离应用程序</strong></p><p>Decouple applications<br>每个容器应该只有一个问题。将应用程序分离到多个容器中可以更轻松地水平伸缩和重新使用容器。<br>例如，Web应用程序堆栈可能有三个独立的容器组成，每个容器都有其独特的镜像，以分离的方式管理Web应用程序、数据库和内存缓存。</p><p>将每个容器限制为一个进程是一个很好的经验法则，但不是硬性规定。(想想高可用和负载均衡)。</p><p>尽你最大的努力使容器干净和模块化。如果容器相互依赖，则可以使用Docker container network来确保容器间可进行通信。</p><p><br></p><p><strong>最小化层数</strong></p><p>Minimize the number of layers<br>在老版本的docker中，重要的是减少镜像的层数，以确保它们的性能。</p><p><br></p><p><strong>对多行参数排序</strong></p><p>Sort multi-line arguments<br>只要有可能，通过按字母数字排序多行参数来简化修改。这有助于避免软件包重复，并使列表更容易更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">  bzr \</span><br><span class="line">  cvs \</span><br><span class="line">  git \</span><br><span class="line">  mercurial \</span><br><span class="line">  subversion</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Leverage build cache</strong></p><p>在构建镜像时，Docker安装Dockerfile中的指令逐步执行，并按指定的顺序执行每个镜像。在检查每条指令时，docker会在其缓存中查找可重用的现有镜像，而不是创建新的(重复)镜像。</p><p>如果你不想使用缓存，可在<code>docker build</code>命令中使用<code>--no-cache=true</code>选项。如果让Docker使用了缓存，那么了解何时可以 找到/找不到 匹配的图像就很重要了。</p><p>Docker遵循的基本规则如下:</p><ul><li>从已经在缓存中的父镜像开始，将下一条指令与该基本镜像派生的所有子镜像进行比较，以查看是否使用完全相同的指令构建了其中的一条。否则，缓存失效。</li><li>大多数情况下，只需将Dockerfile中的指令与其中一个子镜像进行比较久够了。但是，某些说明需要更多的检查和解释。</li><li>对于<code>ADD</code>和<code>COPY</code>指令，将检查镜像文件中的内容，并为每个文件计算校验和。在缓存查找过程中，将检验和与现有镜像中的校验和进行比较，如果文件中由任何内容已更改，如内容和元数据，则缓存将失效。</li><li>除了<code>ADD</code>和<code>COPY</code>指令，缓存检查将不会查看容器中的文件已确定缓存。</li></ul><p>一旦缓存失效，所有后续的Dockerfile命令将生产新的镜像，并且不会使用缓存。</p><p><br></p><p><strong>Dockerfile instruction</strong></p><p>请参考: <a href="# Dockerfile">Dockerfile</a></p><p><br></p><h4 id="创建一个基镜像"><a href="#创建一个基镜像" class="headerlink" title="创建一个基镜像"></a>创建一个基镜像</h4><p>Create a base image</p><p>大多数Dockerfile从父镜像开始，如果需要完全控制镜像的内容，则可能需要创建基镜像(base image)。区别:</p><ul><li>父镜像是镜像的所基于的镜像</li><li>基镜像的Dockerfile中没有<code>FROM</code>行</li></ul><p><br></p><h4 id="使用多阶段构建"><a href="#使用多阶段构建" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h4><p>Use multi-stage builds</p><p>多阶段构建需要Docker v17.05及以上版本。多阶段构建对于优化Dockerfile来说非常有用，同时让它易读和维护。</p><p><br></p><p><strong>构建之前</strong><br>构建镜像最具挑战的事情是保持镜像的大小。Dockerfile中的每条指令都会为镜像添加一层，在移动到下一层前清理不需要的任何构件。为了编写一个高效的Dockerfile，需要尽可能减小图层，并确保每个层都具有上一层需要的构件，而不是其它东西。</p><p><strong>使用多阶段构建</strong><br>使用多阶段构建，你可以在Dockerfile中使用多个<code>FROM</code>语句。每条<code>FROM</code>命令可以使用不同的基镜像，并且每个指令都可是构建的新阶段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.7.3</span><br><span class="line">WORKDIR /go/src/github.com/alexellis/href-counter/</span><br><span class="line">RUN go get -d -v golang.org/x/net/html</span><br><span class="line">COPY app.go .</span><br><span class="line">RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line">RUN apk --no-cache add ca-certificates</span><br><span class="line">WORKDIR /root/</span><br><span class="line">COPY --from=0 /go/src/github.com/alexellis/href-counter/app .</span><br><span class="line">CMD [&quot;./app&quot;]</span><br></pre></td></tr></table></figure><p><code>COPY --from=0</code>将前面构建的工作复制到这个新阶段。Go SDK和任何中间工作件都被留下，并未保存在最终镜像中</p><p><br></p><p><strong>命名你的构建阶段</strong><br>默认情况下，构建阶段没有命名。你可以通过它们的整数来引用它们，第一个指令<code>FROM</code>从0开始。但你可以命名它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.7.3 as builder</span><br><span class="line">WORKDIR /go/src/github.com/alexellis/href-counter/</span><br><span class="line">RUN go get -d -v golang.org/x/net/html</span><br><span class="line">COPY app.go    .</span><br><span class="line">RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line">RUN apk --no-cache add ca-certificates</span><br><span class="line">WORKDIR /root/</span><br><span class="line">COPY --from=builder /go/src/github.com/alexellis/href-counter/app .</span><br><span class="line">CMD [&quot;./app&quot;]</span><br></pre></td></tr></table></figure><p><br></p><p><strong>停止一个特定的构建阶段</strong><br>构建镜像时，不一定需要构建包含每个阶段的整个Dockerfile。<br>如下的栗子停在名为<code>builder</code>的阶段:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --target builder -t alexellis2/href-counter:latest .</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用外部镜像用作一个阶段</strong><br>多阶段构架可使用<code>COPY --from</code>指令从单独的镜像中进行复制，可以使用本机镜像、远程Registry的镜像和标记的ID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="使用Docker-Engine-SDKs和API进行开发"><a href="#使用Docker-Engine-SDKs和API进行开发" class="headerlink" title="使用Docker Engine SDKs和API进行开发"></a>使用Docker Engine SDKs和API进行开发</h2><p>Develop with Docker Engine SDKs and API</p><p><br></p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>Docker提供了一个用于与Docker daemon(称为Docker Engine API)交互的API，以及用于Go和Python的SDK。</p><p>SDK允许你款速轻松地构建和扩展Docker APP。<br>如果Go或Python不适合你，你可以直接使用Docker Engine API——它是由HTTP客户端(curl, wget)访问的RESTful API，或者是大多数现代编程语言的一部分HTTP库。</p><p><br></p><h3 id="安装SDKs"><a href="#安装SDKs" class="headerlink" title="安装SDKs"></a>安装SDKs</h3><h4 id="Go-SDK"><a href="#Go-SDK" class="headerlink" title="Go SDK"></a>Go SDK</h4><ul><li>Go SDK参考：<a href="https://godoc.org/github.com/docker/docker/client" target="_blank" rel="noopener">https://godoc.org/github.com/docker/docker/client</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/docker/docker/client</span><br></pre></td></tr></table></figure><p><br></p><h4 id="Python-SDK"><a href="#Python-SDK" class="headerlink" title="Python SDK"></a>Python SDK</h4><ul><li>Python SDK参考: <a href="https://docker-py.readthedocs.io/en/stable/" target="_blank" rel="noopener">https://docker-py.readthedocs.io/en/stable/</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker</span><br></pre></td></tr></table></figure><p><br></p><h3 id="快速开始SDK和API"><a href="#快速开始SDK和API" class="headerlink" title="快速开始SDK和API"></a>快速开始SDK和API</h3><p>Python: 运行一个容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import docker</span><br><span class="line">client = docker.from_env()</span><br><span class="line">print (client.containers.run(&quot;alpine&quot;, [&quot;echo&quot;, &quot;hello&quot;, &quot;world&quot;]))</span><br></pre></td></tr></table></figure><p>HTTP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl --unix-socket /var/run/docker.sock -H &quot;Content-Type: application/json&quot; \</span><br><span class="line">  -d &apos;&#123;&quot;Image&quot;: &quot;alpine&quot;, &quot;Cmd&quot;: [&quot;echo&quot;, &quot;hello world&quot;]&#125;&apos; \</span><br><span class="line">  -X POST http:/v1.24/containers/create</span><br><span class="line">&#123;&quot;Id&quot;:&quot;1c6594faf5&quot;,&quot;Warnings&quot;:null&#125;</span><br><span class="line"></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock -X POST http:/v1.24/containers/1c6594faf5/start</span><br><span class="line"></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock -X POST http:/v1.24/containers/1c6594faf5/wait</span><br><span class="line">&#123;&quot;StatusCode&quot;:0&#125;</span><br><span class="line"></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock &quot;http:/v1.24/containers/1c6594faf5/logs?stdout=1&quot;</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="SDK和API栗子"><a href="#SDK和API栗子" class="headerlink" title="SDK和API栗子"></a>SDK和API栗子</h3><p>链接: <a href="https://docs.docker.com/develop/sdk/examples/" target="_blank" rel="noopener">https://docs.docker.com/develop/sdk/examples/</a></p><p><br></p><hr><p><br></p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>Configure networking</p><h2 id="综述-1"><a href="#综述-1" class="headerlink" title="综述"></a>综述</h2><p>Docker容器和服务如此强大的原因之一是——你可以将它们连接在一起，或将它们连接到non-docker工作负载。Docker容器和服务甚至不需要知道它们是否部署在Docker上，或它们的对等端是否也是Docker工作负载。都可以使用Docker方式管理它们。</p><p><br></p><h3 id="网络驱动"><a href="#网络驱动" class="headerlink" title="网络驱动"></a>网络驱动</h3><p>Network drivers</p><p>使用驱动程序，Docker的网络子系统是可插拔的(pluggable)。</p><p>集中驱动程序:</p><ul><li><p>brige<br>默认网络驱动。桥接网络通常用于你的应用程序运行在需要通信的独立容器中。</p></li><li><p>host<br>对于独立容器，删除容器和Docker主机之间的网络隔离，并直接使用主机的网络。</p></li><li><p>overlay<br>overlay网络将多个docker daemon连接在一起，并使集群服务能够无相互通信。</p></li><li><p>macvlan<br>macvlan网络允许你为容器分配MAC地址，使其成为你网络上的物理设备。docker daemon通过其MAC地址将流量路由到容器。</p></li><li><p>none<br>对于此容器，禁用所有网络。</p></li><li><p>network plugins<br>你可在Docker上安装和使用第三方网络插件，从Docker Store获取: <a href="https://store.docker.com" target="_blank" rel="noopener">https://store.docker.com</a></p></li></ul><p><br></p><p><strong>网络驱动总结</strong></p><ul><li><p><strong>User-defined bridge networks</strong><br>当你需要多个容器在同一个Docker主机上进行通信时</p></li><li><p><strong>Host networks</strong><br>当网络堆栈不应与Docker主机隔离时，但希望容器的其它方面被隔离</p></li><li><p><strong>Overlay networks</strong><br>当你需要运行在不同Docker主机上的容器进行通信时，或多个应用程序使用集群服务进行工作时</p></li><li><p><strong>Macvlan networks</strong><br>当你从虚拟机迁移或需要你的容器看起来像物理主机时，每个都具有唯一的MAC地址</p></li><li><p><strong>Third-party network plugins</strong><br>允许你将Docker与专用网络堆栈集成</p></li></ul><p><br><br><br></p><h2 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h2><p>就网络而言，桥接网络是一种链路层设备，用于转发网段之间的流量。桥接可以是硬件设备，或在主机内核中运行的软件设备。<br>就Docker而言，桥接网络允许连接到统一桥接网络的容器进行通信，同时提供与未连接到桥接网络的容器的隔离。Docker桥接驱动程序自动在主机上安装桥接规则，以便于不同桥接网络上的容器不能直接相互通信。</p><p>桥接网络适用于在同一个Docker daemon上运行的容器之间的通信。</p><p>当你启动Docker时，除非另有定义，否则将自动创建默认桥接网络，并且新启动的容器将连接到它。<br>你也可以创建用户自定义的桥接网络。</p><p><br><br><br></p><h3 id="bridge与user-defined-bridges"><a href="#bridge与user-defined-bridges" class="headerlink" title="bridge与user-defined bridges"></a>bridge与user-defined bridges</h3><p>Differences between user-defined bridges and the default bridge</p><p>两者的差别：</p><ul><li><p>用户自定义的桥接在集装箱化的应用程序之间提供了更好的隔离和互操作性</p></li><li><p>用户自定义的桥接提供了容器之间的自动DNS解析</p></li><li><p>容器可以在运行中与用户定义的网络进行连接(attach)和分离(detach)</p></li><li><p>每个用户定义的网络会创建一个可配置的桥接网络</p></li><li><p>在默认桥接网络上链接的容器共享环境变量</p></li></ul><p><br><br><br></p><h3 id="管理user-defined-bridge"><a href="#管理user-defined-bridge" class="headerlink" title="管理user-defined bridge"></a>管理user-defined bridge</h3><p>Manage a user-defined bridge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker network create --help</span><br><span class="line"></span><br><span class="line">#创建一个用户自定义桥接网络</span><br><span class="line">#你还可以指定子网，范围，网关...</span><br><span class="line">docker network creat $&#123;name&#125;</span><br><span class="line"></span><br><span class="line">docker network creat my-net</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">docker network rm $&#123;name&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="连接到自定义桥接网络"><a href="#连接到自定义桥接网络" class="headerlink" title="连接到自定义桥接网络"></a>连接到自定义桥接网络</h3><p>Connect a container to a user-defined bridge</p><p>当你创建一个新的容器时，你可以指定一个或多个<code>--network</code>标志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建时</span><br><span class="line">docker create --name my-nginx \</span><br><span class="line">  --network my-net \</span><br><span class="line">  --publish 8080:80 \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#运行中的容器</span><br><span class="line">docker network connect my-net my-nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#断开连接</span><br><span class="line">docker network disconnect my-net my-nginx</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="使用IPv6"><a href="#使用IPv6" class="headerlink" title="使用IPv6"></a>使用IPv6</h3><p>需要修改docker daemon的配置项以支持使用IPv6，在创建自定义网络是指定<code>--ipv6</code>标志。<br>你不能有选择地禁用默认桥接网络上的IPv6支持。</p><p><br><br><br></p><h3 id="启用容器转发"><a href="#启用容器转发" class="headerlink" title="启用容器转发"></a>启用容器转发</h3><p>Enable forwarding from Docker containers to the outside world</p><p>默认情况下，使用默认桥接网络的连接的容器的流量不会转发到外部世界。启用操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#配置Linux内核</span><br><span class="line">sysctl net.ipv4.conf.all.forwarding=1</span><br><span class="line"></span><br><span class="line">#修改iptables FORWARD默认策略</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line">#重启后无效，请写入配置文件</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="默认桥接网络"><a href="#默认桥接网络" class="headerlink" title="默认桥接网络"></a>默认桥接网络</h3><p>Use the default bridge network</p><p>默认桥接网络被视为Docker的遗留细节，不建议用于生产环境。</p><p><br></p><p><strong>连接容器到默认桥接网络</strong><br>如果未指定网络，则默认使用默认桥接网络。</p><p><strong>配置默认桥接网络</strong><br>指定并配置<code>daemon.json</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;bip&quot;: &quot;192.168.1.5/24&quot;,</span><br><span class="line">  &quot;fixed-cidr&quot;: &quot;192.168.1.5/25&quot;,</span><br><span class="line">  &quot;fixed-cidr-v6&quot;: &quot;2001:db8::/64&quot;,</span><br><span class="line">  &quot;mtu&quot;: 1500,</span><br><span class="line">  &quot;default-gateway&quot;: &quot;10.20.1.1&quot;,</span><br><span class="line">  &quot;default-gateway-v6&quot;: &quot;2001:db8:abcd::89&quot;,</span><br><span class="line">  &quot;dns&quot;: [&quot;10.20.1.2&quot;,&quot;10.20.1.3&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用IPv6</strong><br>修改配置文件以支持IPv6，则默认桥接网络自动支持IPv6。</p><p><br><br><br></p><h2 id="overlay"><a href="#overlay" class="headerlink" title="overlay"></a>overlay</h2><p>overlay网络驱动在多个docker daemon主机之间创建分布式网络。该网络位于特定主机网络之上，允许容器连接到此并安全地进行通信。</p><p>当初始化集群或将docker主机加入现有集群时，将在docker主机上创建两个新网络：</p><ul><li><p>称为<code>ingress</code>的overlay网络<br>处理与集群服务相关的控制和数据流量。<br>当你创建集群服务并且不将其连接到用户自定义的网络时，它默认连接到<code>ingress</code>网络。</p></li><li><p>称为<code>docker_gwbridge</code>的桥接网络<br>将单独的docker daemon连接到集群的其它docker daemon。</p></li></ul><p>与创建自定义桥接网络类似，你也可以使用<code>docker network create</code>来创建自动以的overlay网络。服务或容器一次可连接到多个网络，但只能通过连接的网络进行通信。</p><p>尽管可以将集群服务和独立容器连接到overlay网络，但默认行为和配置是不同的。</p><p><br><br><br></p><h3 id="所有overlay网络的操作"><a href="#所有overlay网络的操作" class="headerlink" title="所有overlay网络的操作"></a>所有overlay网络的操作</h3><p>Operations for all overlay networks</p><p><br></p><h4 id="创建overlay网络"><a href="#创建overlay网络" class="headerlink" title="创建overlay网络"></a>创建overlay网络</h4><p>Create an overlay network</p><p><strong>先决条件</strong></p><ul><li><p>使用overlay网络的docker daemon的防火墙规则</p><ul><li>2377(tcp): 集群通信管理</li><li>7946(tcp/udp)： 节点通信</li><li>4789(udp)： overlay网络流量</li></ul></li><li><p>创建overlay网络前，需要初始化docker daemon集群</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay my-overlay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建可供集群服务或独立容器与其它docker daemon上的独立容器进行通信</span><br><span class="line">docker network create -d overlay --attachable my-attachable-overlay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#你可以指定IP地址范围，子网，网关...</span><br></pre></td></tr></table></figure><p><br></p><h4 id="加密overlay网络上的流量"><a href="#加密overlay网络上的流量" class="headerlink" title="加密overlay网络上的流量"></a>加密overlay网络上的流量</h4><p>Encrypt traffic on an overlay network</p><p><strong>Overlay network encryption is not supported on Windows！</strong></p><p>所有集群服务管理流量默认都是加密的，在GCM模式下使用AES算法。<br>要加密应用程序数据，在创建overlay网络时添加<code>--opt encrypted</code>。这种加密带来了不可忽视的性能问题，所以应该在生产环境使用前对其进行测试。<br>当启用overlay加密时，docker会在节点间创建IPsec tunnel，在这些节点上调度连接到overlay网络的服务的任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#SWARM MODE OVERLAY NETWORKS AND STANDALONE CONTAINERS</span><br><span class="line"> docker network create --opt encrypted --driver overlay --attachable my-attachable-multi-host-network</span><br></pre></td></tr></table></figure><p><br></p><h4 id="自定义默认ingress网络"><a href="#自定义默认ingress网络" class="headerlink" title="自定义默认ingress网络"></a>自定义默认ingress网络</h4><p>如果自动选择的子网与已存在的网络冲突，或需要自定义其它低级网络设置(如MTU)，这次功能非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#显示详细信息</span><br><span class="line">docker network inspect ingress</span><br><span class="line"></span><br><span class="line">#移除现有网络</span><br><span class="line">docker network rm ingress</span><br><span class="line"></span><br><span class="line">#创建新网络 --ingress</span><br><span class="line">docker network create \</span><br><span class="line">  --driver overlay \</span><br><span class="line">  --ingress \</span><br><span class="line">  --subnet=10.11.0.0/16 \</span><br><span class="line">  --gateway=10.11.0.2 \</span><br><span class="line">  --opt com.docker.network.driver.mtu=1200 \</span><br><span class="line">  my-ingress</span><br></pre></td></tr></table></figure><p><br></p><h4 id="自定义docker-gwbridge"><a href="#自定义docker-gwbridge" class="headerlink" title="自定义docker_gwbridge"></a>自定义docker_gwbridge</h4><p><code>docker_gwbridge</code>是一个虚拟桥接网络，它将overlay网路连接到单独的docker daemon的物理网络。当初始化集群或将主机加入集群时，docker会自动创建它，但它不是docker设备。啊存在于docker主机的内核之中。如果你需要自定义其设置，则必须在主机加入集群之前或将主机临时从集群中删除之后才执行此操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. 停止docker</span><br><span class="line"></span><br><span class="line">2. 删除已存在的docker_gwbridge</span><br><span class="line">ip link set docker_gwbridge doen</span><br><span class="line">ip link del dev docker_gwbridge</span><br><span class="line"></span><br><span class="line">3. 启动docker，但不加入或初始化集群</span><br><span class="line"></span><br><span class="line">4. 创建docker_gwbridge</span><br><span class="line">docker network create \</span><br><span class="line">--subnet 10.11.0.0/16 \</span><br><span class="line">--opt com.docker.network.bridge.name=docker_gwbridge \</span><br><span class="line">--opt com.docker.network.bridge.enable_icc=false \</span><br><span class="line">--opt com.docker.network.bridge.enable_ip_masquerade=true \</span><br><span class="line">docker_gwbridge</span><br><span class="line"></span><br><span class="line">5. 集群初始化或加入集群</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="swarm服务的操作"><a href="#swarm服务的操作" class="headerlink" title="swarm服务的操作"></a>swarm服务的操作</h3><p>Operations for swarm services</p><h4 id="在overlay网络上发布端口"><a href="#在overlay网络上发布端口" class="headerlink" title="在overlay网络上发布端口"></a>在overlay网络上发布端口</h4><p>Publish ports on an overlay network</p><p>连接到同一overlay网络的集群服务可有效地将所有端口暴露给对方。要是端口可在服务外可访问，必须使用<code>-p</code>或<code>--publish</code>标志暴露此端口。</p><p>两种方法：</p><ul><li>传统的冒号<code>:</code>分隔语法</li><li>较新的逗号<code>,</code>分隔语法</li></ul><table><thead><tr><th>Flag value</th><th>Description</th></tr></thead><tbody><tr><td>-p 8080:80 or <br> -p published=8080,target=80</td><td>Map TCP port 80 on the service to port 8080 on the routing mesh</td></tr><tr><td>-p 8080:80/udp or <br> -p published=8080,target=80,protocol=udp</td><td>Map UDP port 80 on the service to port 8080 on the routing mesh</td></tr><tr><td>-p 8080:80/tcp -p 8080:80/udp or <br> -p published=8080,target=80,protocol=tcp -p published=8080,target=80,protocol=udp</td><td>Map TCP port 80 on the service to TCP port 8080 on the routing mesh, and map UDP port 80 on the service to UDP port 8080 on the routine mesh</td></tr></tbody></table><p><br></p><h4 id="绕过swarm的路由网格"><a href="#绕过swarm的路由网格" class="headerlink" title="绕过swarm的路由网格"></a>绕过swarm的路由网格</h4><p>Bypass the routing mesh for a swarm service</p><p>默认情况下，发布端口的集群服务使用路由网格来发布。当你连接到任何swarm节点上已发布的端口时，都会透明地将你重定向到正在运行服务的工作。实际上，docker充当集群服务的负载均衡器(Load-Balancer)。使用路由网格的服务以虚拟IP(vip)模式运行。即使在每个节点上运行服务也使用路由网格。使用路由网格时，不能保证那个docker node处理客户端请求。</p><p>要绕过路由网格，可使用DNS Round Robin(DNSRR)模式启动——<code>--endpoint-mode dnsrr</code>。你必须在服务前运行负载均衡器。docker主机上DNS查询服务名称会返回运行该服务的节点的IP地址列表。配置你的负载均衡器使用此列表并平衡各节点间的流量。</p><p><br></p><h4 id="分离控制流量和数据流量"><a href="#分离控制流量和数据流量" class="headerlink" title="分离控制流量和数据流量"></a>分离控制流量和数据流量</h4><p>默认情况下，尽管集群控制流量是加密的，但集群管理和应用程序之间的控制流量运行在同一个网络上。你可以配置docker来使用单独的网络接口来处理来种不同类型的流量。</p><p><br><br><br></p><h3 id="overlay网络上独立容器的操作"><a href="#overlay网络上独立容器的操作" class="headerlink" title="overlay网络上独立容器的操作"></a>overlay网络上独立容器的操作</h3><p>Operations for standalone containers on overlay networks</p><h4 id="将独立容器连接到overlay网络"><a href="#将独立容器连接到overlay网络" class="headerlink" title="将独立容器连接到overlay网络"></a>将独立容器连接到overlay网络</h4><p>Attach a standalone container to an overlay network</p><p>独立容器连接到<code>ingress</code>网络需添加<code>--attachable</code>标志。这使得运行在不同docker daemon上的独立容器能够进行通信，而无需在各个docker daemon主机上设置路由。</p><p><br></p><h4 id="发布端口"><a href="#发布端口" class="headerlink" title="发布端口"></a>发布端口</h4><p>Publish ports</p><table><thead><tr><th>Flag value</th><th>Desciption</th></tr></thead><tbody><tr><td>-p 8080:80</td><td>Map TCP port 80 in the container to port 8080 on the overlay network</td></tr><tr><td>-p 8080:80/udp</td><td>Map UDP port 80 in the container to port 8080 on the overlay network</td></tr><tr><td>-p 8080:80/sctp</td><td>Map SCTP port 80 in the container to port 8080 on the overlay network</td></tr><tr><td>-p 8080:80/tcp -p 8080:80/udp</td><td>Map TCP port 80 in the container to TCP port 8080 on the overlay network, and map UDP port 80 in the container to UDP port 8080 on the overlay network</td></tr></tbody></table><p><br></p><h4 id="容器发现"><a href="#容器发现" class="headerlink" title="容器发现"></a>容器发现</h4><p>Container discovery</p><p>对于大多数情况，应该连接到服务名称——它是负载均衡的，并支持服务的所有容器处理。要获取支持该服务的所有任务的列表，请执行DNS查找服务——<code>tasks.&lt;service-name&gt;</code>。</p><p><br><br><br></p><h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><p>如果你对容器使用host网络驱动，则该容器的网络堆栈将不与docker主机隔离。例如，如果运行一个绑定在80端口并使用host网络的容器，则该容器的应用程序将在主机IP地址的80端口上可用。</p><p>host网络驱动只能运行在Linux主机上。</p><p><br><br><br></p><h2 id="Macvlan"><a href="#Macvlan" class="headerlink" title="Macvlan"></a>Macvlan</h2><p>一些应用程序，尤其是需要监视网络流量的应用程序，希望连接到物理网络上。在这种情况下，你可以使用<code>macvlan</code>驱动为容器的虚拟网络接口分配MAC地址，使其看起来像是直接连接到物理网络的物理网络接口。在这种情况下，你需要指定Docker主机上的物理接口用于macvlan，以及macvlan的子网和网关。</p><p><br></p><h3 id="创建一个macvaln网络"><a href="#创建一个macvaln网络" class="headerlink" title="创建一个macvaln网络"></a>创建一个macvaln网络</h3><p>macvlan网络可处于 <strong>bridge mode</strong> 或 <strong>802.1q trunk mode</strong>:</p><ul><li><p>在桥接模式下，macvlan流量通过主机上的物理设备</p></li><li><p>在802.1q主干桥接模式下，流量通过Docker在运行中创建的802.1q子接口。<br>这使你可以更细粒度地控制路由和过滤。</p></li></ul><p><br></p><p><strong>bridge mode</strong></p><p>创建bridge macvlan:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker networkcreate --driver macvlan \</span><br><span class="line">  --subnet=172.16.86.0/24 \</span><br><span class="line">  --gateway=172.16.86.1  \</span><br><span class="line">  -o parent=eth0 pub_net</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--aux-addresses排除IP地址</span><br><span class="line">docker networkcreate --driver macvlan \</span><br><span class="line">  --subnet=172.16.86.0/24 \</span><br><span class="line">  --gateway=172.16.86.1  \</span><br><span class="line">  --aux-address=&quot;my-router=192.168.32.129&quot; \</span><br><span class="line">  -o parent=eth0 pub_net</span><br></pre></td></tr></table></figure><p><br></p><p><strong>802.1q truk bridge mode</strong></p><p>如果你指定了包含点<code>.</code>的接口名——如<strong>eth0.50</strong>，则Docker将其解释为eth0的子接口，并自动创建子接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker network  create  --driver macvlan \</span><br><span class="line">  --subnet=192.168.50.0/24 \</span><br><span class="line">  --gateway=192.168.50.1 \</span><br><span class="line">  -o parent=eth0.50 macvlan50</span><br></pre></td></tr></table></figure><p><br></p><p><strong>使用ipvlan替换macvlan</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d ipvlan \</span><br><span class="line">  --subnet=192.168.210.0/24 \</span><br><span class="line">  --subnet=192.168.212.0/24 \</span><br><span class="line">  --gateway=192.168.210.254  \</span><br><span class="line">  --gateway=192.168.212.254  \</span><br><span class="line">  -o ipvlan_mode=l2 ipvlan210</span><br></pre></td></tr></table></figure><p><br></p><p><strong>IPv6</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker network  create  -d macvlan \</span><br><span class="line">  --subnet=192.168.216.0/24 --subnet=192.168.218.0/24 \</span><br><span class="line">  --gateway=192.168.216.1  --gateway=192.168.218.1 \</span><br><span class="line">  --subnet=2001:db8:abc8::/64 --gateway=2001:db8:abc8::10 \</span><br><span class="line">  -o parent=eth0.218 \</span><br><span class="line">  -o macvlan_mode=bridge macvlan216</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="禁用容器网络"><a href="#禁用容器网络" class="headerlink" title="禁用容器网络"></a>禁用容器网络</h2><p>在启动容器时加上`–network none来禁用容器的网络堆栈，这样在容器内便仅仅创建loopback设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -dit \</span><br><span class="line">  --network none \</span><br><span class="line">  --name no-net-alpine \</span><br><span class="line">  alpine:latest \</span><br><span class="line">  ash</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="网络教程"><a href="#网络教程" class="headerlink" title="网络教程"></a>网络教程</h2><p>Networking tutorials</p><p><br></p><h3 id="bridge-network"><a href="#bridge-network" class="headerlink" title="bridge network"></a>bridge network</h3><ul><li>default bridge network</li><li>user-defined bridge network</li></ul><p><br></p><h4 id="default-bridge-network"><a href="#default-bridge-network" class="headerlink" title="default bridge network"></a>default bridge network</h4><ol><li>基本docker网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8d3b84bfe5a0        bridge              bridge              local</span><br><span class="line">3579d63da633        host                host                local</span><br><span class="line">f766b990db47        none                null                local</span><br></pre></td></tr></table></figure><p>以上列出了默认的桥接网络，主机网络(启动直接连接到docker daemon的主机的网络堆栈的容器)，none(启动一个没有网络设备的容器)。</p><p><br></p><ol><li>启动一个容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name alpine1 alpine ash</span><br></pre></td></tr></table></figure><p>由于启动时没有指定网络，所以默认为桥接网络。</p><p><br></p><ol><li>Inspect the bridge network，以查看哪个容器连接到它</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect bridge</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;8d3b84bfe5a034c65d043af80976a1e6127011fc1ab312446252f562e221d351&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-05-24T18:38:35.538308064+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;893903129d869f384bd78d63a382f1c9527d6979be0a6cf3c13ea4f45a1554d6&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;hardcore_rosalind&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;515d1435470c9f72d3b07680515d9c503457b8eb5bcaaaa915bb53901eac9424&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><ol><li>连接到容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker attach alpine1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ # ip addr show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">506: eth0@if507: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ # ping -c 2 www.baidu.com</span><br><span class="line">PING www.baidu.com (119.75.216.20): 56 data bytes</span><br><span class="line">64 bytes from 119.75.216.20: seq=0 ttl=55 time=46.521 ms</span><br><span class="line">64 bytes from 119.75.216.20: seq=1 ttl=55 time=45.189 ms</span><br></pre></td></tr></table></figure><p><br></p><ol><li>ping其它容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ # ping -c 2 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.125 ms</span><br><span class="line">64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.075 ms</span><br></pre></td></tr></table></figure><p><br></p><h4 id="user-defined-bridge-networks"><a href="#user-defined-bridge-networks" class="headerlink" title="user-defined bridge networks"></a>user-defined bridge networks</h4><ol><li>创建名为<code>apline-net</code>用户自定义网络<br>当然，你可以手动指定子网，网关这些。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge alpine-net</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docket network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">810fb1e02000        alpine-net          bridge              local</span><br><span class="line">8d3b84bfe5a0        bridge              bridge              local</span><br><span class="line">3579d63da633        host                host                local</span><br><span class="line">f766b990db47        none                null                local</span><br></pre></td></tr></table></figure><p><br></p><ol><li>查看alpine-net网络详情<br>注意网关和子网发生了变化。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect alpine-net</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;alpine-net&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;810fb1e020008c7c6598f3b830ca25896dde638b1190d383ee6a5214d284e77d&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-06-14T15:45:19.43941906+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><ol><li>创建两种网络的容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#alpine-net</span><br><span class="line">docker run -dit --name alpine1 --network alpine-net alpine ash</span><br><span class="line"></span><br><span class="line">#default bridge</span><br><span class="line">docker run -dit --name alpine2 alpine ash</span><br></pre></td></tr></table></figure><p><br></p><ol><li>显示两种网络情况</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;8d3b84bfe5a034c65d043af80976a1e6127011fc1ab312446252f562e221d351&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-05-24T18:38:35.538308064+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;893903129d869f384bd78d63a382f1c9527d6979be0a6cf3c13ea4f45a1554d6&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;hardcore_rosalind&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;515d1435470c9f72d3b07680515d9c503457b8eb5bcaaaa915bb53901eac9424&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;e7472c3ddda5043bc03868f4bf7ed59562220f05772f02f57ff589d086630562&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;alpine2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;ba565a247e347feb59713c188eb38e184d781da0489ae80e26ecad6d24e165c2&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker network inspect alpine-net</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;alpine-net&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;810fb1e020008c7c6598f3b830ca25896dde638b1190d383ee6a5214d284e77d&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-06-14T15:45:19.43941906+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;264ccde8b1d5198551d689f0dd49ffbfb612255e0bf76c9543325d7c2e588acb&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;alpine1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;563c48cc6b936bcd9d3f57e9bb5e162a8cb52a23c8980346f288d42cc9b0a8fc&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><ol><li>连接到容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker container attach alpine1</span><br><span class="line"></span><br><span class="line">#网段内通</span><br><span class="line">/ # ping -c 2 172.18.0.3</span><br><span class="line">PING 172.18.0.1 (172.18.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.097 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.070 ms</span><br><span class="line"></span><br><span class="line">--- 172.18.0.1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.070/0.083/0.097 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#网段外不通</span><br><span class="line">/ # ping -c 2 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.16.0.1): 56 data bytes</span><br><span class="line"></span><br><span class="line">--- 172.17.0.2 ping statistics ---</span><br><span class="line">2 packets transmitted, 0 packets received, 100% packet loss</span><br></pre></td></tr></table></figure><p><br></p><ol><li>使容器连接到default bridge<br>这样，此容器便连接到了两个网络中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker network connect bridge apline1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ # ping -c 2 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.102 ms</span><br><span class="line">64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.071 ms</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="host-network"><a href="#host-network" class="headerlink" title="host network"></a>host network</h3><p>host网络不存在隔离问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#默认主机上的80端口</span><br><span class="line">docker run -rm -dit --network host --name my_nginx nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#访问</span><br><span class="line">http://localhost:80</span><br><span class="line">Welcome to nginx!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker network inspect host</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;3579d63da633adcc497417d39b8b1d270cf329a68b9222f6a75fae72086509d6&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-04-27T11:31:17.900886126+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;f02a3b11fce7228ad6ee196771bd9cf0b64966bfc2aa7c27719bc120dbdc7189&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;my_nginx&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;4ee67fb4d0a0c1a357b5fdd141f856a70c205fad5c49b1cb6a4f5245df0318a8&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="overlay-network"><a href="#overlay-network" class="headerlink" title="overlay network"></a>overlay network</h3><ul><li>default overlay network</li><li>user-defined overlay network</li><li>overlay network for standalone containers</li><li>Communicate between a container and a swarm service</li></ul><p><br></p><h4 id="default-overlay"><a href="#default-overlay" class="headerlink" title="default overlay"></a>default overlay</h4><p><strong>依赖：</strong></p><ul><li>swarm集群</li><li>集群节点<ul><li>worker-1</li><li>worker-2</li><li>mananger</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">495c570066be        bridge              bridge              local</span><br><span class="line">961c6cae9945        docker_gwbridge     bridge              local</span><br><span class="line">ff35ceda3643        host                host                local</span><br><span class="line">trtnl4tqnc3n        ingress             overlay             swarm</span><br><span class="line">c8357deec9cb        none                null                local</span><br></pre></td></tr></table></figure><p><br></p><p>创建nginx-net的overlay的网络:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay nginx-net</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ docker service create \</span><br><span class="line">  --name my-nginx \</span><br><span class="line">  --publish target=80,published=80 \</span><br><span class="line">  --replicas=5 \</span><br><span class="line">  --network nginx-net \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p><br></p><h4 id="user-defined-overlay"><a href="#user-defined-overlay" class="headerlink" title="user-defined overlay"></a>user-defined overlay</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay my-overlay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ docker service create \</span><br><span class="line">  --name my-nginx \</span><br><span class="line">  --network my-overlay \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --publish published=8080,target=80 \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p><br></p><h4 id="overlay-network-for-standalone-containers"><a href="#overlay-network-for-standalone-containers" class="headerlink" title="overlay network for standalone containers"></a>overlay network for standalone containers</h4><p><br></p><h4 id="Communicate-between-a-container-and-a-swarm-service"><a href="#Communicate-between-a-container-and-a-swarm-service" class="headerlink" title="Communicate between a container and a swarm service"></a>Communicate between a container and a swarm service</h4><p><br><br><br></p><h3 id="macvalan-network"><a href="#macvalan-network" class="headerlink" title="macvalan network"></a>macvalan network</h3><p>假设主机网络接口为<code>eth0</code>。</p><p><br></p><h4 id="bridge-1"><a href="#bridge-1" class="headerlink" title="bridge"></a>bridge</h4><p>此模式下，流量通过eth0流动，docker使用其MAC地址就流量路由到容器。</p><ol><li>创建名为<code>my-macvlan-net</code>的macvlan网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create -d macvlan \</span><br><span class="line">  --subnet=172.16.86.0/24 \</span><br><span class="line">  --gateway=172.16.86.1 \</span><br><span class="line">  -o parent=eth0 \</span><br><span class="line">  my-macvlan-net</span><br></pre></td></tr></table></figure><p><br></p><ol><li>查看网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">810fb1e02000        alpine-net          bridge              local</span><br><span class="line">8d3b84bfe5a0        bridge              bridge              local</span><br><span class="line">3579d63da633        host                host                local</span><br><span class="line">6be80655739d        my-macvlan-net      macvlan             local</span><br><span class="line">f766b990db47        none                null                local</span><br></pre></td></tr></table></figure><p><br></p><ol><li>以此网络运行容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -itd \</span><br><span class="line">  --network my-macvlan-net \</span><br><span class="line">  --name my-macvlan-alpine \</span><br><span class="line">  alpine:latest \</span><br><span class="line">  ash</span><br></pre></td></tr></table></figure><p><br></p><ol><li>查看my-macvlan-net</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect my-macvlan-net</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;my-macvlan-net&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;6be80655739deffe204e087d098f97fc75072d95f9818e129cfd7d5667ed01f3&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-06-14T16:52:30.507647877+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;macvlan&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.16.86.0/24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.16.86.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;8301b669b4b63afb20911b46243f11b70e5a9d0880beaafa922b52bcb8ab0477&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;my-macvlan-alpine&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;4f2971ba4bd92c34e2a299d301f739867d2b1b65d35566aef07d7a26b079662c&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:10:56:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.16.86.2/24&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;parent&quot;: &quot;ens160&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><ol><li>查看容器网卡和路由</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker exec my-macvlan-alpine ip addr show eth0</span><br><span class="line">517: eth0@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UNKNOWN</span><br><span class="line">    link/ether 02:42:ac:10:56:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.86.2/24 brd 172.16.86.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">docker exec my-macvlan-alpine ip route</span><br><span class="line">default via 172.16.86.1 dev eth0</span><br><span class="line">172.16.86.0/24 dev eth0 scope link  src 172.16.86.2</span><br></pre></td></tr></table></figure><p><br></p><h4 id="802-1q-trunked-bridge-network"><a href="#802-1q-trunked-bridge-network" class="headerlink" title="802.1q trunked bridge network"></a>802.1q trunked bridge network</h4><p>此模式下，流量流经eth0的子接口(eth0.10)，docker使用其MAC地址将流量路由到容器。</p><ol><li>创建名为<code>my-8021q-macvlan-net</code>的macvlan网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan \</span><br><span class="line">  --subnet=172.16.87.0/24 \</span><br><span class="line">  --gateway=172.16.87.1 \</span><br><span class="line">  -o parent=eth0.10 \</span><br><span class="line">  my-8021q-macvlan-net</span><br></pre></td></tr></table></figure><p><br></p><ol><li>查看此网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line">NETWORK ID          NAME                   DRIVER              SCOPE</span><br><span class="line">2aeafd44fd67        my-8021q-macvlan-net   macvlan             local</span><br><span class="line">6be80655739d        my-macvlan-net         macvlan             local</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ifconfig</span><br><span class="line">eth0.10: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::20c:29ff:feaa:7e75  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:aa:7e:75  txqueuelen 0  (Ethernet)</span><br></pre></td></tr></table></figure><p><br></p><ol><li>用此网络启动一个容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -itd \</span><br><span class="line">  --network my-8021q-macvlan-net \</span><br><span class="line">  --name my-second-macvlan-alpine \</span><br><span class="line">  alpine:latest \</span><br><span class="line">  ash</span><br></pre></td></tr></table></figure><p><br></p><ol><li>查看my-8021q-macvlan-net</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect my-8021q-macvlan-net</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;my-8021q-macvlan-net&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;2aeafd44fd67e6ee937c82788745b1d45fb291efd61f545537528eafdff94e3d&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-06-14T17:06:33.426800076+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;macvlan&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.16.87.0/24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.16.87.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;90103673d94915c3c7fb572eec8bd97b2aee1c3dab877c598d0a62e6d797b06d&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;my-second-macvlan-alpine&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;5c93f2ea1d29150ee57f099d42fc8e04a571efd0d1273a4f6bed755dc34f2e54&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:10:57:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.16.87.2/24&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;parent&quot;: &quot;ens160.10&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><ol><li>查看容器网络接口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker exec my-second-macvlan-alpine ip addr show eth0</span><br><span class="line">519: eth0@if518: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UNKNOWN </span><br><span class="line">    link/ether 02:42:ac:10:57:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.87.2/24 brd 172.16.87.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker exec my-second-macvlan-alpine ip route</span><br><span class="line">default via 172.16.87.1 dev eth0</span><br><span class="line">172.16.87.0/24 dev eth0 scope link  src 172.16.87.2</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="配置守护进程和容器"><a href="#配置守护进程和容器" class="headerlink" title="配置守护进程和容器"></a>配置守护进程和容器</h2><h3 id="启用IPv6"><a href="#启用IPv6" class="headerlink" title="启用IPv6"></a>启用IPv6</h3><p>启用IPv6前，请确保支持IPv6.</p><p>给docker daemon启用IPv6:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;ipv6&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><p>所有Docker的<code>iptables</code>规则都被添加到<code>DOKCER chain</code>。不要手动操作此表。<br>如果你需要添加Docker规则，请将其添加到<code>DOCKER-USER chain</code></p><p>栗子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I DOCKER-USER -m iprange -i ext_if ! --src-range 192.168.1.1-192.168.1.3 -j DROP</span><br></pre></td></tr></table></figure><p><br></p><h3 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h3><p>容器使用的网络类型(无论是bridge，overlay，macvlan还是自定义网络)，在容器内都是透明的。从容器的角度来看，它有一个带有IP地址，网关，路由表，DNS服务和其它网络细节的网络接口。</p><p><strong>publish port</strong><br>默认情况下，创建容器时，它不会将任何端口发布的外部世界。要是端口可用于docker之外的服务，请使用<code>--publish</code>或<code>-p</code>标志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-p 8080:80</span><br><span class="line">-p 192.168.1.100:8080:80</span><br><span class="line">-p 8080:80/udp</span><br><span class="line">-p 8080:80/tcp -p 8080:80/udp</span><br></pre></td></tr></table></figure><p><br></p><p><strong>ip add and hostname</strong><br>默认情况下，容器会为其连接的每个docker网络分配一个IP地址。IP地址是从分配给网络的地址池中分配的，因此docker daemon有效地充当了每个容器的DHCP服务器。每个网络也有一个默认的子网掩码和网关。<br>同样，一个容器的主机名也有docker daemon指定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#指定运行网络</span><br><span class="line">docker run xxx --network</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#运行的容器连接到其它网络</span><br><span class="line">docker network connect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--ip，指定IP地址</span><br><span class="line">docker network connect my-bridge --ip 172.18.0.111</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--hostname，指定主机名</span><br><span class="line">docker run xxx --network xxx --hostname container-01</span><br><span class="line"></span><br><span class="line">docker network connect my-bridge --hostname container-02</span><br></pre></td></tr></table></figure><p><br></p><p><strong>DNS</strong><br>默认情况下，容器会继承docker daemon的DNS设置，包括<code>/etc/hosts</code>和<code>/etc/resolv.conf</code>。你也可以基于每个容器覆盖这些默认设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#DNS server</span><br><span class="line">--dns</span><br><span class="line"></span><br><span class="line">#DNS搜索域</span><br><span class="line">--dns-search</span><br><span class="line"></span><br><span class="line">#表示DNS选项值的键值对</span><br><span class="line">--dns-opt</span><br><span class="line"></span><br><span class="line">--hostname</span><br></pre></td></tr></table></figure><p><br></p><h3 id="Docker使用代理服务器"><a href="#Docker使用代理服务器" class="headerlink" title="Docker使用代理服务器"></a>Docker使用代理服务器</h3><p>在启动docker容器的用户主目录下创建此文件： <code>~/.docker/config.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;proxies&quot;:</span><br><span class="line"> &#123;</span><br><span class="line">   &quot;default&quot;:</span><br><span class="line">   &#123;</span><br><span class="line">     &quot;httpProxy&quot;: &quot;http://127.0.0.1:3001&quot;,</span><br><span class="line">     &quot;noProxy&quot;: &quot;*.test.example.com,.example2.com&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="应用程序数据"><a href="#应用程序数据" class="headerlink" title="应用程序数据"></a>应用程序数据</h1><p>Manage application data</p><p><br></p><h2 id="存储综述"><a href="#存储综述" class="headerlink" title="存储综述"></a>存储综述</h2><p>Manage data in Docker</p><p>默认情况下，容器内创建的所有文件都被存储容器的可写层上：</p><ul><li><p>当容器不在运行时，数据不是持续存在的。容器外的进程很难从容器中获取数据</p></li><li><p>容器的可写层与主机紧密耦合，你很难将数据移动到其他地方</p></li><li><p>向容器的可写入层写入数据，需要存储驱动(storage driver)管理文件系统才<br>存储驱动使用Linux kernel来提供一个union filesystem。与直接写入主机文件系统的数据卷相比，这种额外的抽象会降低性能。</p></li></ul><p><br></p><p>Docker容器有两种选项将文件存储到主机上，这样即使容器停止之后这些文件也会被保留:</p><ul><li>volumes</li><li>bind mounts</li><li>tmpfs mount(Docker on Linux)</li></ul><p><br></p><h3 id="选择正确的挂载方式"><a href="#选择正确的挂载方式" class="headerlink" title="选择正确的挂载方式"></a>选择正确的挂载方式</h3><p>Choose the right type of mount</p><p>无论你选用哪种挂载方式，数据在容器内看起来都是相同的。它被公开为容器文件系统中的目录或单个文件。</p><p>一个简单的方法——考虑数据在docker主机上的位置，可以看出<strong>volumes, bind mounts, temfs</strong>之间的差异：</p><ul><li><p>Volumes<br>volumes存储在由docker管理的主机文件系统的一部分中(如Linux上: <code>/var/lib/docker/volumes/</code>)。<br>non-docker进程不应该修改这部分文件系统。Volume是Docker中保存数据的最佳方式。</p></li><li><p>Bind mounts<br>bind mounts可存储在主机系统上的任何地方。它们可能是最要的系统文件或目录。<br>docker主机或docker容器上的non-docker进程可以随时修改它们。</p></li><li><p>tmpfs<br>仅存储在主机系统的内存中，不会写入主机系统的文件系统。</p></li></ul><p><img src="/images/Docker/types-of-mounts.png" alt=""></p><p><br></p><h4 id="volumes的好栗子"><a href="#volumes的好栗子" class="headerlink" title="volumes的好栗子"></a>volumes的好栗子</h4><p>Good use cases for volumes</p><p>Volemes是在docker容器和服务中持久化数据的首选方式:</p><ul><li><p>在多个运行容器之间共享数据。如果你没有明确创建它，会在第一次挂载到容器时创建volume。当容器停止或删除时，volume仍然存在。多个容器可以挂载相同的volume，无论是read-write还是read-only。只有在你手动删除volume时它才会被删除。</p></li><li><p>当docker主机不能保证具有给定的目录或文件结构时，volume帮助你将docker主机的配置与运行时的容器进行分离。</p></li><li><p>当你想要将容器的数据存储在远程主机而不是本地的时候。</p></li><li><p>当你需要备份、还原或将数据从一台docker主机迁移到另一台时，volume时更好的选择。</p></li></ul><p><br></p><h4 id="bind-mounts的好栗子"><a href="#bind-mounts的好栗子" class="headerlink" title="bind mounts的好栗子"></a>bind mounts的好栗子</h4><p>一般来说，你应该尽量使用volumes。bind mounts适合以下案例：</p><ul><li><p>从主机共享配置文件到容器<br>这就是默认情况下，通过将主机的/<code>etc/resolv.conf</code>挂载到每个容器中，Docker为每个容器提供DNS解析。</p></li><li><p>在docker主机/容器的开发环境上共享源码或构建工件</p></li><li><p>当docker主机的文件或目录结构保证与容器所需的bind mounts一致时</p></li></ul><p><br></p><h4 id="tmpfs-mounts的好栗子"><a href="#tmpfs-mounts的好栗子" class="headerlink" title="tmpfs mounts的好栗子"></a>tmpfs mounts的好栗子</h4><p>当你不希望数据在主机上或容器内持久存储时，tmpfs mounts最合适。<br>这可能处于安全原因，或在应用于程序需要编写大量非持久性状态数据时保护容器的性能。</p><p><br></p><h4 id="使用bind或volumes的提示"><a href="#使用bind或volumes的提示" class="headerlink" title="使用bind或volumes的提示"></a>使用bind或volumes的提示</h4><p>如果你要使用bind mounts 或 volumes，牢记以下事项：</p><ul><li><p>如果你挂载一个空卷(empty volume)到存在文件或目录的容器中的目录上，则会将这些文件或目录赋值到卷中。同样，如果你启动容器并制定了一个尚不存在的卷，则会为你创建一个空卷。</p></li><li><p>如果你挂载一个bind mount或non-empty volume到存在文件或目录的容器中的目录上，则这些文件或目录会被挂载所遮蔽。就像在Linux上挂载卷一样。</p></li></ul><p><br><br><br></p><h2 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h2><p>volumes是持久化Docker数据的首选机制，卷由docker完全管理。另外，由于卷不会增加使用它的容器的大小，并且该卷的内容存在于给定容器的周期之外，因此卷通产是比将容器的可写入层中的数据持久化更好的选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-v/--volume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#此选项更详细和简单</span><br><span class="line">#如果你需要指定volume driver，请使用此flag</span><br><span class="line">--mount</span><br><span class="line"></span><br><span class="line">docker service create \</span><br><span class="line">  --mount &apos;type=volume,src=&lt;VOLUME-NAME&gt;,dst=&lt;CONTAINER-PATH&gt;,volume-driver=local,volume-opt=type=nfs,volume-opt=device=&lt;nfs-server&gt;:&lt;nfs-path&gt;,&quot;volume-opt=o=addr=&lt;nfs-address&gt;,vers=4,soft,timeo=180,bg,tcp,rw&quot;&apos;</span><br><span class="line">  --name myservice \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure><ul><li><code>--volume</code></li></ul><p>由三个由冒号<code>:</code>分割的字段组成。这些字段必须按照正确的顺序排列，每个字段的含义并不明显。<br>第一个字段是卷的名称，并且在给定主机上是唯一的。对于匿名卷，第一个字段被省略。<br>第二个字段是文件或目录在容器中的挂载路径。<br>第三个字段是可选的，是由一个逗号`,分隔的选项列表。</p><ul><li><code>--mount</code></li></ul><p>由多个键值对组成，以逗号<code>,</code>分隔。<code>--mount</code>的语法比<code>--volume</code>更冗长，但键的顺序并不重要，并且标志的值更易于理解。<br>挂载的类型(type)有<code>bind, volume, tmpfs</code>。<br>挂载的来源(source, src)为卷的名称，对于匿名卷该字段可被省略。<br>目的地(destination, dst, target)的值是安装在容器中的文件或目录的路径。<br>只读(readonly)选项将导致bind mount以只读方式挂载到容器中。<br><code>volume-opt</code>选项可以多次指定，它是由选项名称和值组成的键值对组成。</p><p><br></p><h3 id="创建和管理卷"><a href="#创建和管理卷" class="headerlink" title="创建和管理卷"></a>创建和管理卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker volume create my-vol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               my-vol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker volume inspect my-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2018-06-15T17:19:02+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/opt/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker volume rm my-vol</span><br></pre></td></tr></table></figure><p><br></p><h3 id="启动用卷的容器"><a href="#启动用卷的容器" class="headerlink" title="启动用卷的容器"></a>启动用卷的容器</h3><p>Start a container with a volume</p><p>包括两种卷：</p><ul><li><p>已存在的卷</p></li><li><p>未存在的卷<br>会自动创建</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#--mount</span><br><span class="line">docker run -d \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --mount source=myvol2,target=/app \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--volume</span><br><span class="line">docker run -d \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --volume myvol2:/app \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               my-vol</span><br><span class="line">local               myvol2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker inspect devtest</span><br><span class="line">#找到挂载</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;myvol2&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/opt/docker/volumes/myvol2/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/app&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="启动用卷的服务"><a href="#启动用卷的服务" class="headerlink" title="启动用卷的服务"></a>启动用卷的服务</h3><p>Start a service with volumes</p><p>docker服务不支持使用<code>--volume</code>标志，请使用<code>--mount</code>标志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service create -d \</span><br><span class="line">  --replicas=4 \</span><br><span class="line">  --name devtest-service \</span><br><span class="line">  --mount source=myvol2,target=/app \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p><br></p><h3 id="在机器间共享数据"><a href="#在机器间共享数据" class="headerlink" title="在机器间共享数据"></a>在机器间共享数据</h3><p>Share data among machines</p><p>在构建容错应用程序时，可能需要配置同一服务的多个副本能访问相同的文件，而这些副本可能分布于不同的节点上。</p><p><img src="/images/Docker/share_data_amon_machine.png" alt=""></p><p>卷驱动程序(volume driver)允许你从应用程序逻辑中抽象出底层存储系统。</p><p><br></p><h3 id="使用卷驱动"><a href="#使用卷驱动" class="headerlink" title="使用卷驱动"></a>使用卷驱动</h3><p>Use a volume driver</p><p>在创建卷或启动带卷的容器时，你可以指定卷驱动。如<code>vieux/sshfs</code>卷驱动程序。</p><ul><li>初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker plugin install --grant-all-permissions vieux/sshfs</span><br></pre></td></tr></table></figure><ul><li>使用卷驱动创建卷</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#操作node2</span><br><span class="line">docker volume create --driver vieux/sshfs \</span><br><span class="line">  -o sshcmd=test@node2:/home/test \</span><br><span class="line">  -o password=testpassword \</span><br><span class="line">  sshvolume</span><br></pre></td></tr></table></figure><ul><li>启动一个带用卷驱动程序创建的卷的容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name sshfs-container \</span><br><span class="line">  --volume-driver vieux/sshfs \</span><br><span class="line">  --mount src=sshvolume,target=/app,volume-opt=sshcmd=test@node2:/home/test,volume-opt=password=testpassword \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><ul><li>备份，还原或迁移数据卷</li></ul><p>使用<code>--volumes-from</code>标志创建一个挂载该卷的新容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#备份</span><br><span class="line">docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#从备份还原</span><br><span class="line">docker run -v /dbdata --name dbstore2 ubuntu /bin/bash</span><br><span class="line">docker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c &quot;cd /dbdata &amp;&amp; tar xvf /backup/backup.tar --strip 1&quot;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="bind-mounts"><a href="#bind-mounts" class="headerlink" title="bind mounts"></a>bind mounts</h2><p>与volumes相比，bind mounts功能有限。当你使用bind mounts时，主机上的文件或目录(绝对路径或相对路径)被挂载到容器内。相比之下，当你使用volumes时，会在主机上的Docker存储目录中创建一个新目录，并且Docker会管理该目录的内容。<br>该文件或目录不需要已经存在于Docker主机上。如果它尚未存在，它会根据需求创建。bind mounts非常高效，但是它们依赖于具有特定目录结构的主机文件系统。如果你正在开发新的Docker Application，请考虑使用volumes。你不能使用Docker CLI直接管理bind mounts。</p><p>你可以使用<code>--volume</code>或<code>--mount</code>(语法更详细)flag。具体区别参考volumes的介绍。</p><p><br></p><h3 id="启动用bind-mount的容器"><a href="#启动用bind-mount的容器" class="headerlink" title="启动用bind mount的容器"></a>启动用bind mount的容器</h3><p>Start a container with a bind mount</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#--mount</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--volume</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  -v &quot;$(pwd)&quot;/target:/app \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p><br></p><p><strong>挂载到容器内非空目录</strong><br>如果挂载在容器内非空目录上，则该目录的已有内容将被隐藏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#--mount</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name broken-container \</span><br><span class="line">  --mount type=bind,source=/tmp,target=/usr \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--volume</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name broken-container \</span><br><span class="line">  -v /tmp:/usr \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p><br></p><h3 id="只读bind-mount"><a href="#只读bind-mount" class="headerlink" title="只读bind mount"></a>只读bind mount</h3><p>Use a read-only bind mount</p><p>某些时候，容器可能只需要只读权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#--mount</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app,readonly \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--volume</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  -v &quot;$(pwd)&quot;/target:/app:ro \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p><br></p><h3 id="bind-propagation"><a href="#bind-propagation" class="headerlink" title="bind propagation"></a>bind propagation</h3><p>对于bind mounts和volumes，bind propagation(传播)默认为<code>rprivate</code>。它只能对Linux主机上的bind mounts进行配置。它是一个高级话题，许多用户并不需要配置它。</p><p>bind propagation(传播)是指在给定的bind-mounts或named volume中创建的挂载是否可以传播(propagation)到该挂载(mount)的副本(replicas)。<br>考虑一个挂载点<code>/mnt</code>，挂载在<code>/tmp</code>上。传播设置控制<code>/tmp/a</code>上的挂载点是否也可用于<code>/mnt/a</code>。每个传播设置都有一个递归对应点。在递归的情况下，考虑<code>/tmp/a</code>也被挂载到<code>/foo</code>。传播设置控制是否存在<code>/mnt/a</code>和<code>/tmp/a</code>。</p><table><thead><tr><th>传播设置</th><th>描述</th></tr></thead><tbody><tr><td>shared</td><td>原始mount的sub-mount会暴露给replica mounts，并且replica mounts的sub-mount同样传播给原始mount。也就是双向</td></tr><tr><td>slave</td><td>类似于shared，但仅限于单方向。</td></tr><tr><td>private</td><td>私有挂载</td></tr><tr><td>rshared</td><td>与shared相同，但传播也扩展到嵌套在任何原始或副本挂载点内的挂载点</td></tr><tr><td>rslave</td><td>与slave相同，但传播也扩展到嵌套在任何原始或副本挂载点内的挂载点</td></tr><tr><td>rprivate</td><td>默认值。与private相同，这意味着原始或副本挂载点内的任何位置的挂载点都不会沿任一方向传播</td></tr></tbody></table><p>在设置bind propagation之前，主机文件系统需要已经支持bind propagatin: <a href="https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#--mount</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app \</span><br><span class="line">  --mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app2,readonly,bind-propagation=rslave \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--volume</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  -v &quot;$(pwd)&quot;/target:/app \</span><br><span class="line">  -v &quot;$(pwd)&quot;/target:/app2:ro,rslave \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p><br></p><h3 id="selinux-label"><a href="#selinux-label" class="headerlink" title="selinux label"></a>selinux label</h3><p>如果你使用selinux，你可以添加<code>z</code>或<code>Z</code>选项来修改挂载到容器内的主机文件或目录的selinux标签。这户影响主机本身的文件或目录，并可能导致Docker范围之外的后果。</p><ul><li><p><code>z</code><br>bind mount的内容在多个容器之间共享。</p></li><li><p><code>Z</code><br>bind mount的内容是私有和非共享的。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#不支持--mount</span><br><span class="line">docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  -v &quot;$(pwd)&quot;/target:/app:z \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="tmpfs-mounts"><a href="#tmpfs-mounts" class="headerlink" title="tmpfs mounts"></a>tmpfs mounts</h2><p>tmpfs: <a href="https://docs.docker.com/storage/tmpfs/#limitations-of-tmpfs-mounts" target="_blank" rel="noopener">https://docs.docker.com/storage/tmpfs/#limitations-of-tmpfs-mounts</a><br>tmpfs mounts只支持运行在Linux上的Docker。</p><p><br><br><br></p><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><p>troubleshoot: <a href="https://docs.docker.com/storage/troubleshooting_volume_errors/" target="_blank" rel="noopener">https://docs.docker.com/storage/troubleshooting_volume_errors/</a></p><p><br><br><br></p><h2 id="将数据存储到容器内"><a href="#将数据存储到容器内" class="headerlink" title="将数据存储到容器内"></a>将数据存储到容器内</h2><p>Store data within containers</p><h3 id="关于存储驱动"><a href="#关于存储驱动" class="headerlink" title="关于存储驱动"></a>关于存储驱动</h3><p>为了有效地使用存储驱动(storage driver)，了解Docker如何构建和存储镜像，以及容器如何使用镜像是很重要的。你可以使用这些信息作出明智的选择，以便找到应用程序数据持久化的最佳方式，并避免出现性能问题。</p><p>存储驱动允许你在容器的可写入层创建数据。在容器停止后，这些文件将不会被保留，并且读写速度都很低。</p><p><br></p><h4 id="镜像和层"><a href="#镜像和层" class="headerlink" title="镜像和层"></a>镜像和层</h4><p>Images and layers</p><p>Docker镜像由一系列层(layer)构建而成。每个层代表镜像的Dockerfile中的指令，除最后一层外的每个层都是只读的。</p><p>考虑如下Dockerfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:15.04</span><br><span class="line">COPY . /app</span><br><span class="line">RUN make /app</span><br><span class="line">CMD python /app/app.py</span><br></pre></td></tr></table></figure><p>此Dockerfile包含4个命令，每个命令创建一个层。<br>当你创建一个新容器时，你在底层之上添加了一个新的可写入层——它通常被称为<strong>容器层(container layer)</strong>。<br>对运行中的容器所做的所有更改(增删改文件)都会写入此可写容器层。</p><p><img src="/images/Docker/container-layers.jpg" alt="容器层"></p><p>存储驱动处理有关这些层相互交互的详细信息。有几个不同的驱动程序，在不同的情况下具有相应的优点和缺点。</p><p><br></p><h4 id="容器和层"><a href="#容器和层" class="headerlink" title="容器和层"></a>容器和层</h4><p>Container and layers</p><p>容器和镜像之间的主要区别是最高的可写入层。当容器删除时，可写入层也被删除。但底层镜像保持不变。</p><p>由于每个容器都有自己的可写入容器层，并且所有的更改都存储在此容器中，因此多个容器可以共享相同的基础镜像的访问权限，并拥有自己的数据状态。</p><p><img src="/images/Docker/sharing-layers.jpg" alt="容器和层"></p><p>Docker使用存储驱动来管理镜像层和可写入容器层的内容。每个存储驱动程序都已不同方式实现，但所有驱动程序都是用可堆叠(stackable)的镜像层和写入时复制(copy-on-write)策略。</p><p><br></p><h4 id="容器大小"><a href="#容器大小" class="headerlink" title="容器大小"></a>容器大小</h4><p>Container size on disk</p><p>使用<code>docker ps -s(--size)</code>命令查看正在运行的容器的大小。有两个大小:</p><ul><li><p><code>size</code><br>每个容器的可写入层的数据量(在磁盘上的)</p></li><li><p><code>virtual size</code><br>容器使用的只读镜像的数据量加上容器可写入层大小</p></li></ul><p><br><br><br></p><h4 id="写入时复制"><a href="#写入时复制" class="headerlink" title="写入时复制"></a>写入时复制</h4><p>The copy-on-write (CoW) strategy</p><p>写入时复制是一种共享和复制文件以实现最高效率的策略。如果文件或目录存在于镜像的较低层中，而另外的层(包括可写入层)需要对其进行读取访问，则它只是用已有文件。第一次需要修改文件时，该文件将被复制到该层并进行修改。这最大限度减少了每个后续层的I/O和大小。</p><p><strong>共享促进了较小的容器</strong><br>Sharing promotes smaller images</p><p>当你创建和拉取镜像时，它们通常存储于本机的<code>/var/lib/docker</code>下。每层都存储在主机存储区内的特定目录下<code>/var/lib/docker/&lt;storage-driver&gt;/layers</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls /var/lib/docker/aufs/layers</span><br><span class="line"></span><br><span class="line">1d6674ff835b10f76e354806e16b950f91a191d3b471236609ab13a930275e24</span><br><span class="line">5dbb0cbe0148cf447b9464a358c1587be586058d9a4c9ce079320265e2bb94e7</span><br><span class="line">bef7199f2ed8e86fa4ada1309cfad3089e0542fec8894690529e4c04a7ca2d73</span><br><span class="line">ebf814eccfe98f2704660ca1d844e4348db3b5ccc637eb905d4818fbfb00a06a</span><br></pre></td></tr></table></figure><p><br></p><p><strong>复制使容器高效</strong><br>Copying makes containers efficient</p><p>容器不会更改的任何文件都不会被复制到此可写入层中。这意味着可写入层尽可能小。</p><p>当容器中存在的文件被修改时，存储驱动之赐你个写入时复制操作(CoW)。涉及的具体步骤取决于具体的存储驱动。</p><p>aufs, overlay, overlay2存储驱动 遵循的基本顺序:</p><ul><li>通过镜像层搜索要更新的文件</li><li>对找到的文件的第一个副本执行<code>copy_up</code>操作，将文件复制到容器的可写入层</li><li>任何修改应用于此复制的文件，并且该容器不能看到存在于较低层中的文件的只读副本</li></ul><p><br><br><br></p><h3 id="选择存储驱动"><a href="#选择存储驱动" class="headerlink" title="选择存储驱动"></a>选择存储驱动</h3><p>Select a storage driver</p><p>理想情况下，将很少的数据写入容器的可写入层，并且使用Docker volume写入数据。但某些工作负载要求你能够写入容器的可写入层，这就是存储驱动进来的地方。</p><p>存储驱动控制镜像和容器在Docker主机上的存储和管理方式。</p><p>考虑三个高层次因素：</p><ul><li><p>如果你的Kernel支持多个存储驱动，在没有指定存储驱动的情况下，Docker会列出要使用拿个存储驱动程序的优先级列表</p><ul><li>如果可能，将使用配置最少的存储驱动。如<code>brrfs</code>, <code>zfs</code></li><li>否则，请尝试在最常见的情况下使用具有最佳整体性能和稳定性的存储驱动程序<ul><li><code>overlay2</code>是首选(Docker CE的默认选择)，其次是<code>overlay</code>。这些都不需要额外的配置。</li><li><code>devicemapper</code>居次，但需要<code>direc-lvm</code>用于生产环境，因为<code>loopback-lvm</code>的性能很差。</li></ul></li></ul></li><li><p>你的选择会受限于Docker版本、操作系统和发行版</p></li><li><p>某些存储驱动要求你为文件系统使用特定格式</p></li><li><p>你的选择还取决于工作负载和所需的稳定级别</p></li></ul><p><br></p><h4 id="Linux发行版支持的存储驱动"><a href="#Linux发行版支持的存储驱动" class="headerlink" title="Linux发行版支持的存储驱动"></a>Linux发行版支持的存储驱动</h4><p><strong>Docker CE</strong></p><table><thead><tr><th>Linux distribution</th><th>Recommended storage drivers</th></tr></thead><tbody><tr><td>Docker CE on Ubuntu</td><td>aufs, devicemapper, overlay2 (Ubuntu 14.04.4 or later, 16.04 or later), overlay, zfs, vfs</td></tr><tr><td>Docker CE on Debian</td><td>aufs, devicemapper, overlay2 (Debian Stretch), overlay, vfs</td></tr><tr><td>Docker CE on CentOS</td><td>devicemapper, vfs</td></tr><tr><td>Docker CE on Fedora</td><td>devicemapper, overlay2 (Fedora 26 or later, experimental), overlay (experimental), vfs</td></tr></tbody></table><p><br></p><h4 id="存储驱动支持的文件系统"><a href="#存储驱动支持的文件系统" class="headerlink" title="存储驱动支持的文件系统"></a>存储驱动支持的文件系统</h4><table><thead><tr><th>Storage driver</th><th>Supported backing filesystems</th></tr></thead><tbody><tr><td>overlay, overlay2</td><td>ext4, xfs</td></tr><tr><td>aufs</td><td>ext4, xfs</td></tr><tr><td>devicemapper</td><td>direct-lvm</td></tr><tr><td>btrfs</td><td>btrfs</td></tr><tr><td>zfs</td><td>zfs</td></tr></tbody></table><p><br></p><h4 id="查看存储驱动"><a href="#查看存储驱动" class="headerlink" title="查看存储驱动"></a>查看存储驱动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Version: 18.03.1-ce</span><br><span class="line">Storage Driver: overlay2</span><br></pre></td></tr></table></figure><p><br></p><h3 id="AUFS存储驱动"><a href="#AUFS存储驱动" class="headerlink" title="AUFS存储驱动"></a>AUFS存储驱动</h3><p>AUFS is a union filesystem.</p><p>aufs存储驱动用于管理Ubuntu上Docker的镜像和层。</p><p>我的发行版是Centos，此驱动针对Ubuntu。注意</p><p><br></p><h4 id="使用aufs存储驱动配置Docker"><a href="#使用aufs存储驱动配置Docker" class="headerlink" title="使用aufs存储驱动配置Docker"></a>使用aufs存储驱动配置Docker</h4><ul><li>判断kernel是否支持aufs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep aufs /proc/filesystems</span><br></pre></td></tr></table></figure><ul><li>查看Docker存储驱动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><ul><li>配置存储驱动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">--storage-driver</span><br></pre></td></tr></table></figure><p><br></p><h4 id="aufs存储驱动如何工作"><a href="#aufs存储驱动如何工作" class="headerlink" title="aufs存储驱动如何工作"></a>aufs存储驱动如何工作</h4><p>AUFS是一个联合文件系统，这意味着它在单个Linux主机上对多个目录进行分层并将它们呈现为单个目录。这些目录在AUFS术语中称为分支，在Docker术语中称为层。统一过程被称为联合安装。</p><p><img src="/images/Docker/aufs_layers.jpg" alt=""></p><p><br></p><h4 id="容器如何使用aufs进行读写"><a href="#容器如何使用aufs进行读写" class="headerlink" title="容器如何使用aufs进行读写"></a>容器如何使用aufs进行读写</h4><p><strong>读取文件</strong></p><p><br></p><h3 id="Btrfs存储驱动"><a href="#Btrfs存储驱动" class="headerlink" title="Btrfs存储驱动"></a>Btrfs存储驱动</h3><p>Use the BTRFS storage driver</p><p><br></p><h3 id="Device-Mapper存储驱动"><a href="#Device-Mapper存储驱动" class="headerlink" title="Device Mapper存储驱动"></a>Device Mapper存储驱动</h3><p>Use the Device Mapper storage driver</p><p>Device Mapper是基于kernel的框架，支持Linux上的许多高级卷管理技术。Docker的<code>devicemapper</code>存储驱动利用此框架的精简配置和快照功能进行镜像和容器管理。</p><p>对于支持它的系统，<code>devicemapper</code>支持包含在Linux内核中。但是，需要特定配置才能将其用于Docker。<code>devicemapper</code>驱动使用专用于Docker的块设备，并在块级(block level)而不是文件级(file level)运行。这些设备可通过在Docker主机添加物理设备来扩展，并且它们比咋子操作系统级别使用文件系统更好。</p><p><br></p><p><strong>依赖</strong></p><ul><li>Docker EE</li><li>Docker CE</li><li>更改存储驱动会使已创建的容器在本地系统上都无法访问</li></ul><p><br></p><p><strong>配置devicemapper存储驱动</strong></p><ul><li>loop-lvm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#loop-lvm模式</span><br><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;storage-driver&quot;: &quot;devicemapper&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><ul><li>direct-lvm<br>生产环境的devicemapper存储驱动必须使用direct-lvm模式。此模式使用块设备创建精简池。这比使用loopback设备更快，更高效地使用系统资源，并且块设备可以根据需求进行扩展。</li></ul><p><br></p><table><thead><tr><th>Option</th><th>Description</th><th>Required</th><th>Default</th><th>Example</th></tr></thead><tbody><tr><td>dm.directlvm_device</td><td>The path to the block device to configure for direct-lvm.</td><td>Yes</td><td>-</td><td>dm.directlvm_device=”/dev/xvdf”</td></tr><tr><td>dm.thinp_percent</td><td>The percentage of space to use for storage from the passed in block device.</td><td>No</td><td>95</td><td>dm.thinp_percent=95</td></tr><tr><td>dm.thinp_metapercent</td><td>The percentage of space to for metadata storage from the passed-in block device.</td><td>No</td><td>1</td><td>dm.thinp_metapercent=1</td></tr><tr><td>dm.thinp_autoextend_threshold</td><td>The threshold for when lvm should automatically extend the thin pool as a percentage of the total storage space.</td><td>No</td><td>80</td><td>dm.thinp_autoextend_threshold=80</td></tr><tr><td>dm.thinp_autoextend_percent</td><td>The percentage to increase the thin pool by when an autoextend is triggered.</td><td>No</td><td>20</td><td>dm.thinp_autoextend_percent=20</td></tr><tr><td>dm.directlvm_device_force</td><td>Whether to format the block device even if a filesystem already exists on it. If set to false and a filesystem is present, an error is logged and the filesystem is left intact.</td><td>No</td><td>false</td><td>dm.directlvm_device_force=true</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#安装依赖</span><br><span class="line">RHEL / CentOS: device-mapper-persistent-data, lvm2, and all dependencies</span><br><span class="line">Ubuntu / Debian: thin-provisioning-tools, lvm2, and all dependencies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建物理卷(physical volume)</span><br><span class="line">pvcreate /dev/cvdf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建卷组(volume group)</span><br><span class="line">vgcreat docker /dev/xvdf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建逻辑卷(logical volume)</span><br><span class="line">lvcreate --wipesignatures y -n thinpool docker -l 95%VG</span><br><span class="line">lvcreate --wipesignatures y -n thinpoolmeta docker -l 1%VG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#转换卷为精简池</span><br><span class="line">lvconvert -y \</span><br><span class="line">--zero n \</span><br><span class="line">-c 512K \</span><br><span class="line">--thinpool docker/thinpool \</span><br><span class="line">--poolmetadata docker/thinpoolmeta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置lvm配置文件精简池自动扩展</span><br><span class="line">/etc/lvm/profile/docker-thinpool.profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定thin_pool_autoextend_threshold 和 thin_pool_autoextend_percent的值</span><br><span class="line">activation &#123;</span><br><span class="line">  thin_pool_autoextend_threshold=80</span><br><span class="line">  thin_pool_autoextend_percent=20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#应用LVM profile</span><br><span class="line">lvchange --metadataprofile docker-thinpool docker/thinpool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启用监控LV</span><br><span class="line">lvs -o+seg_monitor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置devicemapper存储驱动</span><br><span class="line">/etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;storage-driver&quot;: &quot;devicemapper&quot;,</span><br><span class="line">    &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;dm.thinpooldev=/dev/mapper/docker-thinpool&quot;,</span><br><span class="line">    &quot;dm.use_deferred_removal=true&quot;,</span><br><span class="line">    &quot;dm.use_deferred_deletion=true&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p><br></p><h4 id="管理devicemapper"><a href="#管理devicemapper" class="headerlink" title="管理devicemapper"></a>管理devicemapper</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查看LVM logs</span><br><span class="line">journalctl -fu dm-event.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pvdisplay</span><br><span class="line">vgdisplay/vgextend</span><br><span class="line">lvdisplay/lvextend/lvchange</span><br></pre></td></tr></table></figure><p><br></p><h3 id="OverlayFS存储驱动"><a href="#OverlayFS存储驱动" class="headerlink" title="OverlayFS存储驱动"></a>OverlayFS存储驱动</h3><p>Use the OverlayFS storage driver</p><p><br></p><h3 id="ZFS存储驱动"><a href="#ZFS存储驱动" class="headerlink" title="ZFS存储驱动"></a>ZFS存储驱动</h3><p>Use the ZFS storage driver</p><p><br></p><h3 id="VFS存储驱动"><a href="#VFS存储驱动" class="headerlink" title="VFS存储驱动"></a>VFS存储驱动</h3><p>Use the VFS storage driver</p><p>VFS存储驱动不是联合文件系统，相反，每层都是磁盘上的一个目录，它不支持CoW。要创建一个新层，先前的层会进行<strong>深层复制(deep copy)</strong>。与其它驱动相比，这导致磁盘性能下降和占用更多磁盘空间。但是，它强大，稳定，适用于各种环境。</p><p><strong>配置VFS存储驱动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;storage-driver&quot;: &quot;vfs&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#控制大小</span><br><span class="line">&#123;</span><br><span class="line">  &quot;storage-opts&quot;: [&quot;size=256M&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><p><br></p><h1 id="在生产环境运行应用程序"><a href="#在生产环境运行应用程序" class="headerlink" title="在生产环境运行应用程序"></a>在生产环境运行应用程序</h1><p>Run your app in production</p><p><br></p><h2 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h2><p>Configure all objects</p><p><br></p><h3 id="自定义原数据"><a href="#自定义原数据" class="headerlink" title="自定义原数据"></a>自定义原数据</h3><p>Apply custom metadata to objects</p><p><strong>Docker object label</strong><br>标签(label)是一种将原数据(metadata)应用于docker object的机制，包含:</p><ul><li>image</li><li>container</li><li>local daemon</li><li>volume</li><li>network</li><li>node</li><li>service</li></ul><p><br></p><h4 id="label-key-and-value"><a href="#label-key-and-value" class="headerlink" title="label key and value"></a>label key and value</h4><p>标签是一组键值对，以字符串形式存储。可以为对象指定多个标签，但每个键值对必须唯一。如果一个键有多个值，则最新写入的值会覆盖以前的值。</p><p><strong>key格式建议</strong><br>label key是可能包含字母，数字，<code>.</code>，<code>-</code>组成的字符串。</p><ul><li>第三方工具的作者给每个label key加上前缀域，如<code>com.example.some-label</code></li><li>未经允许，不得使用他人域</li><li><code>com.docker.*</code>, <code>io.docker.*</code>, <code>org.dockerproject.*</code>命名空间保留给Docker内部使用</li><li>以小写字母开头和结尾</li><li>用<code>.</code>分割命令空间字段</li></ul><p><br></p><p><strong>value 指南</strong><br>label value可以包含任何可表示为字符串的数据类型，包括JSON, XML, CSV, YAML…唯一的要求是，首先使用特定于结构类型的机制将该值序列化为字符串。</p><p><br><br><br></p><h3 id="清理未使用的对象"><a href="#清理未使用的对象" class="headerlink" title="清理未使用的对象"></a>清理未使用的对象</h3><p>Prune unused Docker objects</p><p>Docker采取保守的方法来清理未使用的对象(通常称为垃圾回收)，通常它不会删除这些对象，除非你明确要求Docker这样做。对于每个类型的对象，docker提供了<code>prune</code>命令。你也可以使用<code>docker system prune</code>命令一次清理多种类型的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#prune image</span><br><span class="line">docker image prune</span><br><span class="line"> docker image prune -a --filter &quot;until=24h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#prune container</span><br><span class="line">docker container prune</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#prune volume</span><br><span class="line">docker volume prune</span><br><span class="line">docker volume prune --filter &quot;label!=keep&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#prune everything</span><br><span class="line">docker system prune</span><br><span class="line">docker system prune --volumes</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>Format command and log output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#join</span><br><span class="line">docker inspect --format &apos;&#123;&#123;join .Args &quot; , &quot;&#125;&#125;&apos; container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#json</span><br><span class="line">docker inspect --format &apos;&#123;&#123;json .Mounts&#125;&#125;&apos; container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#lower</span><br><span class="line">docker inspect --format &quot;&#123;&#123;lower .Name&#125;&#125;&quot; container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#split</span><br><span class="line">docker inspect --format &apos;&#123;&#123;split .Image &quot;:&quot;&#125;&#125;&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#title</span><br><span class="line">docker inspect --format &quot;&#123;&#123;title .Name&#125;&#125;&quot; container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#upper</span><br><span class="line">docker inspect --format &quot;&#123;&#123;upper .Name&#125;&#125;&quot; container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#printIn</span><br><span class="line">docker inspect --format=&apos;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&apos; container</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="配置daemon"><a href="#配置daemon" class="headerlink" title="配置daemon"></a>配置daemon</h2><p>Configure the daemon</p><p><br></p><h3 id="配置和运行Docker"><a href="#配置和运行Docker" class="headerlink" title="配置和运行Docker"></a>配置和运行Docker</h3><p><strong>配置docker daemon</strong></p><ul><li>使用json配置文件</li><li>使用<code>dockerd --flag</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;debug&quot;: true,</span><br><span class="line">  &quot;tls&quot;: true,</span><br><span class="line">  &quot;tlscert&quot;: &quot;/var/docker/server.pem&quot;,</span><br><span class="line">  &quot;tlskey&quot;: &quot;/var/docker/serverkey.pem&quot;,</span><br><span class="line">  &quot;hosts&quot;: [&quot;tcp://192.168.59.3:2376&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">dockerd --debug \</span><br><span class="line">  --tls=true \</span><br><span class="line">  --tlscert=/var/docker/server.pem \</span><br><span class="line">  --tlskey=/var/docker/serverkey.pem \</span><br><span class="line">  --host tcp://192.168.59.3:2376</span><br></pre></td></tr></table></figure><p><br></p><p><strong>docker daemon目录</strong><br>docker daemon将所有数据保存在一个目录中。你可以手动修改它。</p><p>默认目录:</p><ul><li>Linux： <code>/var/lib/docker</code></li><li>Windows: <code>C:\ProgramData\docker</code></li></ul><p><br><br><br></p><h3 id="使用systemd控制docker"><a href="#使用systemd控制docker" class="headerlink" title="使用systemd控制docker"></a>使用systemd控制docker</h3><p>Control Docker with systemd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/docker.service</span><br><span class="line">#or</span><br><span class="line">cat /etc/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl enable/start/stop/status docker</span><br></pre></td></tr></table></figure><p><br></p><p><strong>自定义docker daemon选项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;data-root&quot;: &quot;/mnt/docker-data&quot;,</span><br><span class="line">    &quot;storage-driver&quot;: &quot;overlay&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>http/https proxy</strong><br>Docker daemon使用<code>HTTP_PROXY</code>，<code>HTTPS_PROXY</code>和<code>NO_PROXY</code>环境变量来配置代理行为。无法使用<code>daemon.json</code>文件来配置环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#/etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;</span><br><span class="line"></span><br><span class="line">#/etc/systemd/system/docker.service.d/https-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTPS_PROXY=https://proxy.example.com:443/&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl show --property=Environment docker</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="收集Docker指标"><a href="#收集Docker指标" class="headerlink" title="收集Docker指标"></a>收集Docker指标</h3><p>Collect Docker metrics with Prometheus</p><p>Promethus: <a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a><br>Prometheus是一个开源的系统监控和报警工具包。你可以将Docker配置为Prometheus target。设置Prometheus作为Docker容器运行，并使用Prometheus监控Docker实例。</p><p><strong>配置Docker</strong><br>配置docker daemon作为Prometheus target，你需要指定<code>metrics-address</code>。最佳方式是通过<code>daemon.json</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;metrics-addr&quot; : &quot;127.0.0.1:9323&quot;,</span><br><span class="line">  &quot;experimental&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置和运行Prometheus</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/tmp/prometheus.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line">  # Attach these labels to any time series or alerts when communicating with</span><br><span class="line">  # external systems (federation, remote storage, Alertmanager).</span><br><span class="line">  external_labels:</span><br><span class="line">      monitor: &apos;codelab-monitor&apos;</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</span><br><span class="line">rule_files:</span><br><span class="line">  # - &quot;first.rules&quot;</span><br><span class="line">  # - &quot;second.rules&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&apos;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line"></span><br><span class="line">    # metrics_path defaults to &apos;/metrics&apos;</span><br><span class="line">    # scheme defaults to &apos;http&apos;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9090&apos;]</span><br><span class="line"></span><br><span class="line">  - job_name: &apos;docker&apos;</span><br><span class="line">         # metrics_path defaults to &apos;/metrics&apos;</span><br><span class="line">         # scheme defaults to &apos;http&apos;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9323&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 1 --name my-prometheus \</span><br><span class="line">    --mount type=bind,source=/tmp/prometheus.yml,destination=/etc/prometheus/prometheus.yml \</span><br><span class="line">    --publish published=9090,target=9090,protocol=tcp \</span><br><span class="line">    prom/prometheus</span><br></pre></td></tr></table></figure><p>访问: <a href="http://localhost:9090/targets/" target="_blank" rel="noopener">http://localhost:9090/targets/</a></p><p><br><br><br></p><h2 id="配置容器"><a href="#配置容器" class="headerlink" title="配置容器"></a>配置容器</h2><p>Configure containers</p><h3 id="自动启动容器"><a href="#自动启动容器" class="headerlink" title="自动启动容器"></a>自动启动容器</h3><p>Start containers automatically</p><p>Docker提供了重启策略，以控制容器在退出或重启时自动启动。重启策略可确保链接的容器以正确的书序启动。Docker建议你使用重启策略，并避免使用进程管理器(如supervisor)来启动容器。<br>重启策略与<code>docker xxx --live-restart</code>标志不同，后者可以让你在Docker upgrage期间保持容器运行。</p><p><br></p><p><strong>重启策略</strong><br>使用<code>docker run xxx --restart</code>标志来配置重启策略，<code>--restart</code>的值如下：</p><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>不要自动重启容器(默认值)</td></tr><tr><td>on-failure</td><td>如果容器由于错误(非零退出码)退出，则重启容器</td></tr><tr><td>unless-stopped</td><td>除非明确停止或docker本身停止或重启，则重启容器</td></tr><tr><td>always</td><td>如果停止，则始终重启容器</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#栗子</span><br><span class="line">docker run -dit --restart unless-stopped redis</span><br></pre></td></tr></table></figure><p><br></p><p><strong>重启策略注意事项</strong></p><ul><li><p>重启策略尽在容器成功启动后才生效——这意味着容器已启动至少10s，并且Docker已开始监视它。<br>这可以防止根本不启动的容器进入重启循环。</p></li><li><p>如果你手动停止容器(状态码为0)，则在重启Docker daemon或手动启动容器之前，其重启策略将会被忽略。<br>这是另一个防止重启循环的尝试。</p></li><li><p>重启策略仅适用于容器。集群服务的重启策略与此不同。</p></li></ul><p><br><br><br></p><h3 id="在daemon停机期间保持容器活着"><a href="#在daemon停机期间保持容器活着" class="headerlink" title="在daemon停机期间保持容器活着"></a>在daemon停机期间保持容器活着</h3><p>Keep containers alive during daemon downtime</p><p>默认情况下，当Docker daemon终止时，它会关闭正在运行的容器。从Docker Engine 1.12开始，你可配置守护进程，以便在守护进程不可用时容器保持运行。这个功能被称为<strong>实时恢复(live restore)</strong>。<br>它不支持Windows container。</p><p><br></p><p><strong>实时恢复</strong><br>有两种方式来启用live restore，只启用其中一个就好。<br>实时恢复仅适用于独立容器，不适用于集群服务。</p><ul><li>修改配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;live-restore&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>--live-restore</code>标志<br>不推荐</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dockerd xxx --live-restore</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="在一个容器中运行多个服务"><a href="#在一个容器中运行多个服务" class="headerlink" title="在一个容器中运行多个服务"></a>在一个容器中运行多个服务</h3><p>Run multiple services in a container</p><p>容器的主要运行进程是Dockerfile末尾的<code>ENTRYPOINT</code>或<code>CMD</code>指令。通常建议你通过每个容器运行一项服务来分割关注区域。这些服务可能会分成多个进程(如Nginx的worker processe)。你可以使用用户定义的network和shared volumes来连接多个容器。</p><p>容器的主进程负责管理它启动的所有进程。在某些情况下，主进程设计不好，在容器退出时无法正常处理<strong>停止</strong>子进程。如果你的进程属于这个类别，你可在容器运行时使用<code>--init</code>选型。<code>--init</code>标志将一个微小的<code>inti-process</code>作为主进程插入到容器中，并在容器退出时处理所有进程的停止。以这种方式处理这些进程优于使用完整的初始化进程。</p><p><br></p><p>如果你需要在一个容器中运行多个服务，则可通过几种不同方式来完成此操作。</p><ul><li>将所有命令封装进一个脚本中，并附带测试和调试信息。以封装脚本作为你的CMD</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim my_wrapper.sh</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">xxxxx</span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line">FROM ubuntu:latest</span><br><span class="line">COPY my_first_process my_first_process</span><br><span class="line">COPY my_second_process my_second_process</span><br><span class="line">COPY my_wrapper_script.sh my_wrapper_script.sh</span><br><span class="line">CMD ./my_wrapper_script.sh</span><br></pre></td></tr></table></figure><ul><li>使用如<code>supervisord</code>这样的进程管理器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y supervisor</span><br><span class="line">RUN mkdir -p /var/log/supervisor</span><br><span class="line">COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf</span><br><span class="line">COPY my_first_process my_first_process</span><br><span class="line">COPY my_second_process my_second_process</span><br><span class="line">CMD [&quot;/usr/bin/supervisord&quot;]</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="容器运行指标"><a href="#容器运行指标" class="headerlink" title="容器运行指标"></a>容器运行指标</h3><p>Container runtime metrics</p><p><strong>docker stats</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stats redis1 redis2</span><br><span class="line"></span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O</span><br><span class="line">redis1              0.07%               796 KB / 64 MB        1.21%               788 B / 648 B       3.568 MB / 512 KB</span><br><span class="line">redis2              0.07%               2.746 MB / 64 MB      4.29%               1.266 KB / 648 B    12.4 MB / 0 B</span><br></pre></td></tr></table></figure><p><br></p><p><strong>Control groups</strong></p><p>Linux Container依赖于<code>control group</code>，这些组不仅跟踪进程组，还公开有关CPU，mem，block I/O的使用情况和度量标准。你可以访问这些指标并判断容器运行状况。<br>control group通过为文件系统(pseudo-fs)公开，你应该可在<code>/proc/fs/cgroup</code>中找到它。</p><p>查看cgroup子系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">grep cgroup /proc/mounts</span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">mount -l | grep cgroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#进程</span><br><span class="line">/proc/&lt;pid&gt;/cgroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#/表示进程尚未分配给group</span><br><span class="line">cat /proc/1/cgroup</span><br><span class="line">11:devices:/</span><br><span class="line">10:cpuset:/</span><br><span class="line">9:hugetlb:/</span><br><span class="line">8:memory:/</span><br><span class="line">7:blkio:/</span><br><span class="line">6:net_prio,net_cls:/</span><br><span class="line">5:pids:/</span><br><span class="line">4:perf_event:/</span><br><span class="line">3:cpuacct,cpu:/</span><br><span class="line">2:freezer:/</span><br><span class="line">1:name=systemd:/</span><br></pre></td></tr></table></figure><p><br></p><p><strong>查找给定容器的cgroup</strong><br>对于每个容器，每个层次结构中创建一个cgroup。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/sys/fs/cgroup/memory/docker/&lt;docker-longid&gt;/</span><br><span class="line"></span><br><span class="line">cd /sys/fs/cgroup/memory/docker/893903129d869f384bd78d63a382f1c9527d6979be0a6cf3c13ea4f45a1554d6</span><br><span class="line">cat memory.stat</span><br><span class="line"></span><br><span class="line">cache 36282368</span><br><span class="line">rss 196608</span><br><span class="line">rss_huge 0</span><br><span class="line">mapped_file 1077248</span><br><span class="line">swap 0</span><br><span class="line">pgpgin 212904</span><br><span class="line">pgpgout 205531</span><br><span class="line">pgfault 314692</span><br><span class="line">pgmajfault 204</span><br><span class="line">inactive_anon 131072</span><br><span class="line">active_anon 65536</span><br><span class="line">inactive_file 18223104</span><br><span class="line">active_file 18059264</span><br><span class="line">unevictable 0</span><br><span class="line">hierarchical_memory_limit 9223372036854771712</span><br><span class="line">hierarchical_memsw_limit 9223372036854771712</span><br><span class="line">total_cache 36282368</span><br><span class="line">total_rss 196608</span><br><span class="line">total_rss_huge 0</span><br><span class="line">total_mapped_file 1077248</span><br><span class="line">total_swap 0</span><br><span class="line">total_pgpgin 212904</span><br><span class="line">total_pgpgout 205531</span><br><span class="line">total_pgfault 314692</span><br><span class="line">total_pgmajfault 204</span><br><span class="line">total_inactive_anon 131072</span><br><span class="line">total_active_anon 65536</span><br><span class="line">total_inactive_file 18223104</span><br><span class="line">total_active_file 18059264</span><br><span class="line">total_unevictable 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#其它信息类似</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="限制容器的资源"><a href="#限制容器的资源" class="headerlink" title="限制容器的资源"></a>限制容器的资源</h3><p>Limit a container’s resources</p><p>默认情况下，容器没有资源限制，可以使用主机内核调度程序允许给定的资源。Docker提供了一些方法来控制容器可以使用的CPU、memory、block I/O。</p><p>许多这些功能需要内核的支持。使用<code>docker info</code>命令检查是否支持。如果内核禁用了某功能，则可能会有如下警告: <strong>WARNING: No swap limit support</strong></p><p><br></p><h4 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h4><p><strong>你需要了解内存耗尽(out of memory)的风险</strong><br>不要让正在运行的容器消耗太多的主机内存，这很重要。在Linux主机上，如果内核检测到没有足够的内存来执行重要的系统功能，它会抛出一个<strong>OOME(out of memory exception)</strong>，并开始killing process以释放进程。任何进程都会是killing objects，包括Docker和其它重要应用程序。</p><p>docker尝试通过调整docker daemon的OOM优先级来降低这些风险，从而使其比系统上的其它进程更小(less)可能的被killing。容器的OOM优先级不进行调整，这使得单个容器被killing的可能性要大于docker或其它进程。你不应该给docker daemon的<code>--oom-score-adj</code>或container的<code>--oom-kill-disable</code>标志来绕过这些安全措施。</p><p>你可以通过以下方式减轻由OOM引起的系统不稳定的风险:</p><ul><li>在上线之前，进行测试以了解应用程序的内存需求</li><li>确保应用程序仅在拥有足够资源的主机上运行</li><li>限制容器可使用的内存量</li><li>在主机上配置swap时请注意。swap比内存更慢，性能更低，但可以提供缓冲区以防系统内存耗尽</li><li>考虑将容器转换为服务，并使用服务级别约束和节点标签来确保应用程序仅在具有足够内存的主机上运行</li></ul><p><br></p><p><strong>限制容器对内存的</strong><br>Limit a container’s access to memory</p><p>Docker可以强制<code>hard limit</code>，允许容器使用不超过给定数量的用户/系统内存，或<code>soft limit</code>。这允许容器使用尽可能多的内存。</p><p>如下这些选项具有这样一些效果，注意内存单位<code>b, k, m, g</code>：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-m/--memory=</code></td><td>容器可使用的最大内存量。如果你设置此选项，则允许的最小值为4m</td></tr><tr><td><code>--memory-swap</code></td><td>容器允许使用的swap量。只有在<code>--momery</code>设置时才有意义</td></tr><tr><td><code>--memory-swappiness</code></td><td>默认情况下，容器可使用的主机内核可交换的匿名页面的百分比<0-100></0-100></td></tr><tr><td><code>--memory-reservation</code></td><td>允许你指定一个小于<code>--memory</code>的soft limit。当docker检测到内存不足时，此会被激活</td></tr><tr><td><code>--kernel-memory</code></td><td>容器可以使用的最大kernel memory。内核内存不能够被swap out，因此内核内存不足的容器可能会阻塞主机资源，这会对主机和其它容器产生副作用</td></tr><tr><td><code>--oom-kill-disable</code></td><td>默认情况下，如果发生内存溢出(OOM)，内核会杀死容器中的进程。使用此选项改变此行为</td></tr></tbody></table><p><br></p><h4 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h4><p>默认情况下，每个容器对主机CPU周期的访问是无限制的。你可以设置各种约束来限制给定容器访问主机的CPU周期。</p><p><strong>CFS scheduler</strong><br>CFS是用于普通Linux进程的Linux kernel CPU调度器，一些运行时标志用于配置容器的CPU资源访问量。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>--cpu=&lt;value&gt;</code></td><td>指定容器可以使用的CPU资源，如<code>--cpu=&quot;1.6&quot;</code></td></tr><tr><td><code>--cpu-period=&lt;value&gt;</code></td><td>指定CFS调度器周期，它与<code>--cpu-quota</code>一起使用。默认100ms。Docker1.13以后，使用<code>--cpus</code>替代</td></tr><tr><td><code>--cpu-quota=&lt;value&gt;</code></td><td>在容器上条件CFS配额。在Docker1.13以后，使用<code>--cpus</code>替代</td></tr><tr><td><code>--cpuset-cpus</code></td><td>限制容器可以使用的特定CPU或CORE。如果有多个CPU，请使用逗号<code>,</code>分割。如<code>0,2</code></td></tr><tr><td><code>--cpu-shares</code></td><td>将此标志设置为大于/小于1024(默认值)的值，以增加或减少容器的重量，并使其能够访问更大或更小比例的主机CPU周期。这仅在CPU周期受到限制时才会执行。</td></tr></tbody></table><p>如果你只有1 CPU，如下命令可保证容器每秒最多有50%的CPU——<code>docker run -it --cpus=&quot;.5&quot; xxx</code></p><p><br></p><p><strong>realtime scheduler</strong></p><p>在Docker1.13及更高版本，对于无法使用CFS的任务，你可以使用realtime scheduler。<br>在你配置docker daemon和container之前，请正确地配置主机内核。</p><p><strong>注意： CPU调度和优先级是高级内核功能。大多数用户不需要修改它。错误地设置将导致主机系统不稳定或不可用。</strong></p><ul><li><p>配置主机内核<br>通过运行<code>zcat /proc/config.gz | grep CONFIG_RT_GROUP_SCHED</code>或检查<code>/sys/fs/cgroup/cpu.rt_runtime_us</code>来验证内核是否启用了<code>CONFIG_RT_GROUP_SCHED</code>。有关配置内核实时调度器的指导，请参考相关文档。</p></li><li><p>配置docker daemon<br>运行docker daemon时使用<code>--cpu-rt-runtime</code>标志设置每个运行时间段的实时任务保留的最大微秒数。可使用systemd的docker.service进行配置。</p></li><li><p>配置独立容器<br>当使用<code>docker run</code>启动容器时，可以传递多个标志来控制容器CPU的优先级。</p></li></ul><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>--cap-add=sys_nice</code></td><td>授予容器<code>CAP_SYS_NICE</code>功能，允许容器提升进程的nice值，设置实时调度策略，设置CPU关联和其它操作</td></tr><tr><td><code>--cpu-rt-runtime=&lt;value&gt;</code></td><td>Docker实时调度器期间，容器可以以实时优先级运行的最大微秒数。需要<code>--cap-add=sys_nice</code>标志</td></tr><tr><td><code>--ulimit rtprio=&lt;value&gt;</code></td><td>容器允许的最大实时优先级，需要<code>--cap-add=sys_nice</code>标志</td></tr></tbody></table><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --it --cpu-rt-runtime=950000 \</span><br><span class="line">                  --ulimit rtprio=99 \</span><br><span class="line">                  --cap-add=sys_nice \</span><br><span class="line">                  debian:jessie</span><br></pre></td></tr></table></figure><p><br><br><br></p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p>记录的信息和日志格式取决于容器的端点命令。<br><code>docker logs</code>命令显示正在运行的容器记录的信息。<br><code>docker service logs</code>命令显示参与服务的所有容器记录的信息。在swarm模式下。</p><p>在某些情况下，<code>docker logs</code>可能不会显示有用的信息，除非你采取其它措施。</p><ul><li>如果将日志发送到文件、主机、数据库或其它日志驱动程序，则<code>docker logs</code>可能不会显示有用的信息</li><li>如果你的镜像运行non-interactive进程(如数据库)，则该应用程序可能会将output发送到日志文件而不是stdout/stderr</li></ul><p><br></p><h4 id="配置日志驱动"><a href="#配置日志驱动" class="headerlink" title="配置日志驱动"></a>配置日志驱动</h4><p>Configure logging drivers</p><p>docker提供了多种日志记录机制(logging mechanisms)来帮助你从运行的容器和服务中获取信息。这些机制被称为日志驱动(logging driver)。<br>每个docker daemon都有一个默认日志驱动，每个容器也默认使用该驱动。除非你给容器配置了其它日志驱动。<br>除了使用docker附带日志驱动，在Docker v17.05之后，你还可以使用日志驱动插件(logging driver plugin)。</p><p><br></p><p><strong>配置默认日志驱动</strong><br>默认的日志驱动是<code>json-flie</code>。<br>可在<code>daemon.json</code>文件里通过<code>log-driver</code>选项匹配置日志驱动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">#设置为syslog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;syslog&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果日志驱动存在可配置选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;labels&quot;: &quot;production_status&quot;,</span><br><span class="line">    &quot;env&quot;: &quot;os,customer&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">docker info | grep &apos;Loggin Driver&apos;</span><br><span class="line">Logging Driver: json-file</span><br></pre></td></tr></table></figure><p><br></p><p><strong>为容器配置日志驱动</strong><br>启动容器时，可使用<code>--log-driver</code>标志为其配置不同于docker daemon的日志驱动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --log-driver none alpine ash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看容器日志驱动</span><br><span class="line">docker inspect -f &apos;&#123;&#123;.HostConfig.LogConfig.Type&#125;&#125;&apos; &lt;CONTAINER&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>配置从容器到日志驱动的log message的交付模式</strong><br>Docker为从容器到日志驱动的日志消息提供了两种交付(delivery）模式：</p><ul><li><p>直接阻塞(blocking)从容器到驱动的交付(默认)</p></li><li><p>非阻塞交付(non-blocking)，将日志消息存储在中间每个容器的环形缓冲区中供驱动使用<br>非阻塞消息交付模式可防止应用程序因日志反压而被阻塞。当STDERR或STDOUT流阻塞时，应用程序可能会以意想不到的方式失败。</p></li></ul><p><strong>注意：当缓冲区已满且新消息排入队列时，内存中最早的消息将被丢弃。丢弃消息通常首选阻止应用程序的日志写入过程。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --log-opt mode=non-blocking --log-opt max-buffer-size=4m alpine ping 127.0.0.1</span><br></pre></td></tr></table></figure><p><br></p><p><strong>日志驱动使用环境变量或label</strong><br>一些日志驱动将容器的<code>--env/-e</code>或<code>--label</code>标签的值添加到容器的日志中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --label production_status=testing -e os=ubuntu alpine sh</span><br></pre></td></tr></table></figure><p><br></p><p><strong>支持的日志驱动</strong><br>如下是受支持的日志驱动。</p><table><thead><tr><th>驱动</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>No logs are available for the container and docker logs does not return any output.</td></tr><tr><td>json-file</td><td>The logs are formatted as JSON. The default logging driver for Docker.</td></tr><tr><td>syslog</td><td>Writes logging messages to the syslog facility. The syslog daemon must be running on the host machine.</td></tr><tr><td>journald</td><td>Writes log messages to journald. The journald daemon must be running on the host machine.</td></tr><tr><td>gelf</td><td>Writes log messages to a Graylog Extended Log Format (GELF) endpoint such as Graylog or Logstash.</td></tr><tr><td>fluentd</td><td>Writes log messages to fluentd (forward input). The fluentd daemon must be running on the host machine.</td></tr><tr><td>splunk</td><td>Writes log messages to splunk using the HTTP Event Collector.</td></tr><tr><td>logentries</td><td>Writes log messages to Rapid7 Logentries.</td></tr><tr><td>云日志系统</td><td>各类云服务商提供的云日志系统</td></tr></tbody></table><p><code>docker logs</code>命令不适用于除<code>json-file</code>和<code>journald</code>之外的其它日志驱动。</p><p><br></p><h4 id="日志驱动插件"><a href="#日志驱动插件" class="headerlink" title="日志驱动插件"></a>日志驱动插件</h4><p>日志驱动插件允许你扩展和定制docker的日志记录功能，超越了内置的日志驱动的功能。</p><ul><li>安装日志驱动插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker plugin install &lt;org/image&gt;</span><br><span class="line"></span><br><span class="line">docker plugin ls</span><br></pre></td></tr></table></figure><ul><li>将插件配置为docker daemon默认日志驱动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.josn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">--loggin-driver</span><br></pre></td></tr></table></figure><ul><li>将插件配置为容器日志驱动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run xxx --log-driver</span><br></pre></td></tr></table></figure><p><br></p><h4 id="定制日志驱动输出"><a href="#定制日志驱动输出" class="headerlink" title="定制日志驱动输出"></a>定制日志驱动输出</h4><p>Customize log driver output</p><p>日志选项<code>tag</code>指定如何格式化表示容器日志消息。默认情况下，系统使用容器ID的前12个字符。你可以指定<code>tag</code>选项来覆盖此行为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">log</span>-driver=fluentd \</span><br><span class="line">  --<span class="built_in">log</span>-opt fluentd-address=myhost.local:24224 \</span><br><span class="line">  --<span class="built_in">log</span>-opt tag=<span class="string">"mailer"</span></span><br></pre></td></tr></table></figure><p>在指定<code>tag</code>时，Docker支持的一些特殊模板标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;.ID&#125;&#125;</span><br><span class="line">The first 12 characters of the container ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;.FullID&#125;&#125;</span><br><span class="line">The full container ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;.Name&#125;&#125;</span><br><span class="line">The container name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;.ImageID&#125;&#125;</span><br><span class="line">The first 12 characters of the container’s image ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;.ImageFullID&#125;&#125;</span><br><span class="line">The container’s full image ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;.ImageName&#125;&#125;</span><br><span class="line">The name of the image used by the container</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;.DaemonName&#125;&#125;</span><br><span class="line">The name of the docker program (docker)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--log-opt tag=&quot;&#123;&#123;.ImageName&#125;&#125;/&#123;&#123;.Name&#125;&#125;/&#123;&#123;.ID&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">Aug  7 18:33:19 HOSTNAME hello-world/foobar/5790672ab6a0[9103]: Hello from Docker.</span><br></pre></td></tr></table></figure><p><br></p><h4 id="日志驱动"><a href="#日志驱动" class="headerlink" title="日志驱动"></a>日志驱动</h4><p>介绍如下日志驱动！</p><h5 id="Logentries"><a href="#Logentries" class="headerlink" title="Logentries"></a>Logentries</h5><p>Logentries日志驱动将容器日志发送到Logentries server。</p><p><code>--log-opt</code>:</p><ul><li><code>logentries-token</code>: 指定Logentries log设置的token</li><li><code>line-only</code>: 仅发送原始有效载荷</li></ul><p>docker daemon:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dockerd --log-driver=logentries</span><br><span class="line"></span><br><span class="line">#可在docker.service中设置</span><br></pre></td></tr></table></figure><p>docker container:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --log-driver=logentries ...</span><br></pre></td></tr></table></figure><p>在使用此日志驱动之前，你需要在Logentries web界面中创建一个新的日志集，并将该日志集的令牌传递给docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --log-driver=logentries --log-opt logentries-token=abcd1234-12ab-34cd-5678-0123456789ab</span><br></pre></td></tr></table></figure><p><br></p><h5 id="json-file"><a href="#json-file" class="headerlink" title="json file"></a>json file</h5><p>默认情况下，docker捕获所有容器的STDOUT和STDERR，并使用json格式将它们写入文件。每个文件包含仅包含一个容器的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;10m&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">docker run \</span><br><span class="line">      --log-driver json-file --log-opt max-size=10m \</span><br><span class="line">      alpine echo hello world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">docker run -it --log-opt max-size=10m --log-opt max-file=3 alpine ash</span><br></pre></td></tr></table></figure><p>json-file支持的日志选项：</p><table><thead><tr><th>选项</th><th>描述</th><th>栗子</th></tr></thead><tbody><tr><td>max-size</td><td>The maximum size of the log before it is rolled. A positive integer plus a modifier representing the unit of measure (k, m, or g). Defaults to -1 (unlimited).</td><td>–log-opt max-size=10m</td></tr><tr><td>max-file</td><td>The maximum number of log files that can be present. If rolling the logs creates excess files, the oldest file is removed. Only effective when max-size is also set. A positive integer. Defaults to 1.</td><td>–log-opt max-file=3</td></tr><tr><td>labels</td><td>Applies when starting the Docker daemon. A comma-separated list of logging-related labels this daemon accepts. Used for advanced log tag options.</td><td>–log-opt labels=production_status,geo</td></tr><tr><td>env</td><td>Applies when starting the Docker daemon. A comma-separated list of logging-related environment variables this daemon accepts. Used for advanced log tag options.</td><td>–log-opt env=os,customer</td></tr><tr><td>env-regex</td><td>Similar to and compatible with env. A regular expression to match logging-related environment variables. Used for advanced log tag options.</td><td>–log-opt env-regex=^(os或customer).</td></tr></tbody></table><p><br></p><h5 id="Graylog-Extended-Format-gelf"><a href="#Graylog-Extended-Format-gelf" class="headerlink" title="Graylog Extended Format(gelf)"></a>Graylog Extended Format(gelf)</h5><p><code>gelf</code>日志驱动是一种方便的格式，可被Graylog, Logstash, Fluentd等工具所理解。许多工具使用这种格式。</p><p>在GELF中，每条日志消息都是带有一下字段的字典：</p><ul><li>version</li><li>host</li><li>timestamp</li><li>short and long version of the message</li><li>自定义的字段</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;gelf&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;gelf-address&quot;: &quot;udp://1.2.3.4:12201&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">dockerd --log-driver gelf –-log-opt gelf-address=udp://1.2.3.4:12201</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#容器</span><br><span class="line">docker run \</span><br><span class="line">      --log-driver gelf –-log-opt gelf-address=udp://1.2.3.4:12201 \</span><br><span class="line">      alpine echo hello world</span><br></pre></td></tr></table></figure><p><br></p><p>GELF选项：</p><table><thead><tr><th>Option</th><th>Required</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>gelf-address</code></td><td>required</td><td>GELF服务器地址(tcp/udp)</td><td><code>--log-opt gelf-address=udp://192.168.0.42:12201</code></td></tr><tr><td><code>gelf-compression-type</code></td><td>optional</td><td>仅限于UDP。类型有gzip(default),zlib,none</td><td><code>--log-opt gelf-compression-type=gzip</code></td></tr><tr><td><code>gelf-compression-level</code></td><td>optional</td><td><code>-1/0 - 9</code>,<code>-1/0</code>(禁用压缩)，1(BestSpeed)，9(BestCompress)</td><td><code>--log-opt gelf-compression-level=2</code></td></tr><tr><td><code>gelf-tcp-max-reconnect</code></td><td>optional</td><td>仅TCP，连接断开尝试的最大重连次数，默认3</td><td><code>--log-opt gelf-tcp-max-reconnect=3</code></td></tr><tr><td><code>gelf-tcp-reconnect-delay</code></td><td>optinal</td><td>仅TCP，重连等待的秒数，默认1s</td><td><code>--log-opt gelf-tcp-reconnect-delay=1</code></td></tr><tr><td><code>tag</code></td><td>optional</td><td>默认使用Docker容器ID的前12位</td><td><code>--log-opt tag=mailer</code></td></tr><tr><td><code>labels</code></td><td>optional</td><td>以逗号分隔的日志相关标签</td><td><code>--log-opt labels=production_status,geo</code></td></tr><tr><td><code>env</code></td><td>optional</td><td>以逗号分隔的日志相关的环境变量</td><td><code>--log-opt env=os,customer</code></td></tr><tr><td><code>evn-regex</code></td><td>optional</td><td>匹配日志相关环境变量的正则表达式</td><td><code>--log-opt env-regex=^(os l customer)</code></td></tr></tbody></table><p><br></p><h5 id="Syslog"><a href="#Syslog" class="headerlink" title="Syslog"></a>Syslog</h5><p>syslog日志驱动将日志路由到系统日志服务器。系统日志必须以特定方式格式化才能生效。从有效的消息中，接收者可以提取以下消息：</p><ul><li><p>priority<br>日志级别，debug, info, warning, error…</p></li><li><p>timestamp</p></li><li>hostname</li><li><p>facility<br>记录消息的子系统</p></li><li><p>process name</p></li><li>pid</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;syslog&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;syslog-address&quot;: &quot;udp://1.2.3.4:1111&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">#syslog-address支持tcp和udp</span><br><span class="line">docker run \</span><br><span class="line">      -–log-driver syslog –-log-opt syslog-address=udp://1.2.3.4:1111 \</span><br><span class="line">      alpine echo hello world</span><br></pre></td></tr></table></figure><p><br></p><p>syslog日志驱动选项：</p><table><thead><tr><th>选项</th><th>描述</th><th>栗子</th></tr></thead><tbody><tr><td><code>syslog-address</code></td><td><code>[tcp l udp l tcp+tls]:host:port</code>, <code>unixgram://path</code>, <code>unix://path</code></td><td><code>--log-opt syslog-address=tcp+tls://192.168.1.3:514</code>, <code>--log-opt syslog-address=unix:///tmp/syslog.sock</code></td></tr><tr><td><code>syslog-facility</code></td><td>子系统</td><td><code>--log-opt syslog-facility=daemon</code></td></tr><tr><td><code>syslog-tls-ca-cert</code></td><td>CA</td><td><code>--log-opt syslog-tls-ca-cert=/etc/ca-certificates/custom/ca.pem</code></td></tr><tr><td><code>syslog-tls-cert</code></td><td>TLS certificate</td><td><code>--log-opt syslog-tls-key=/etc/ca-certificates/custom/key.pem</code></td></tr><tr><td><code>syslog-tls-skip-verify</code></td><td>跳过tls验证</td><td><code>--log-opt syslog-tls-skip-verify=true</code></td></tr><tr><td><code>tag</code></td><td>如前</td><td>如前</td></tr><tr><td><code>syslog-format</code></td><td>日志格式</td><td><code>--log-opt syslog-format=rfc5424micro</code></td></tr><tr><td><code>lables</code></td><td>如前</td><td>如前</td></tr><tr><td><code>env</code></td><td>如前</td><td>如前</td></tr><tr><td><code>env-regex</code></td><td>如前</td><td>如前</td></tr></tbody></table><p><br></p><h5 id="ETW"><a href="#ETW" class="headerlink" title="ETW"></a>ETW</h5><p>ETW日志驱动将容器日志转发为ETW事件。每个ETW时间都包含一条日志及其上下文信息的消息，然后客户端可以创建一个ETW监听器来监听这些事件。</p><p><br></p><h5 id="Fluentd"><a href="#Fluentd" class="headerlink" title="Fluentd"></a>Fluentd</h5><p>fluentd日志驱动将容器日志作为结构化日志数据发送到fluentd收集器。接着，用户便可以使用任意一种Fluentd output plugin将这些日志写入不同的目的地。</p><p>fluentd发送一下这些元数据：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td><code>container_id</code></td><td>完整的64位容器ID</td></tr><tr><td><code>container_ame</code></td><td>启动时的容器名</td></tr><tr><td>source</td><td>stdout or stderr</td></tr><tr><td>log</td><td>容器日志</td></tr></tbody></table><p><code>docker logs</code>命令不可用于此日志驱动。</p><p><br></p><ul><li><p><code>fluentd-address</code><br>指定fluentd daemon地址</p></li><li><p>tag</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;log-driver&quot;: &quot;fluentd&quot;,</span><br><span class="line">   &quot;log-opts&quot;: &#123;</span><br><span class="line">     &quot;fluentd-address&quot;: &quot;fluentdhost:24224&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">docker run --log-driver=fluentd --log-opt fluentd-address=fluentdhost:24224</span><br><span class="line">docker run --log-driver=fluentd --log-opt fluentd-address=tcp://fluentdhost:24224</span><br><span class="line">docker run --log-driver=fluentd --log-opt fluentd-address=unix:///path/to/fluentd.sock</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Journald"><a href="#Journald" class="headerlink" title="Journald"></a>Journald</h5><p>journald 日志驱动将容器日志发送给 systemd journal。可以通过<code>journalctl</code>命令，<code>journal</code> API，<code>docker logs</code>来检索日志条目。</p><p>journald日志驱动还提供如下元数据：</p><ul><li><code>CONTAINER_ID</code></li><li><code>CONTAINER_ID_FULL</code></li><li><code>CONTAINER_NAME</code></li><li><code>CONTAINER_TAG</code></li><li><code>CONTAINER_PARTIAL_MESSAGE</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;journald&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or</span><br><span class="line">docker run --log-driver=journald ...</span><br></pre></td></tr></table></figure><p><br></p><p>几个选项：</p><ul><li>tag</li><li>label</li><li>env</li><li>env-regex</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --log-driver=journald \</span><br><span class="line">    --log-opt labels=location \</span><br><span class="line">    --log-opt env=TEST \</span><br><span class="line">    --env &quot;TEST=false&quot; \</span><br><span class="line">    --label location=west \</span><br><span class="line">    your/application</span><br></pre></td></tr></table></figure><p><br></p><p>使用<code>journalctl</code>命令查看日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl CONTAINER_NAME=webserver</span><br><span class="line">journalctl -o json CONTAINER_NAME=webserver</span><br></pre></td></tr></table></figure><p>使用journal API：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> systemd.journal</span><br><span class="line"></span><br><span class="line">reader = systemd.journal.Reader()</span><br><span class="line">reader.add_match(<span class="string">'CONTAINER_NAME=web'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> reader:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;CONTAINER_ID_FULL&#125;: &#123;MESSAGE&#125;'</span>.format(**msg)</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Splunk"><a href="#Splunk" class="headerlink" title="Splunk"></a>Splunk</h5><p>splunk日志驱动将容器日志发送到Splunk Enterprise和Splunk Clound的HTTP Event Collector。</p><p><br><br><br></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker文档:  &lt;a href=&quot;https://docs.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/sD7O95O/article/details/78623697&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/sD7O95O/article/details/78623697&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/22969309/answer/34030581&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/22969309/answer/34030581&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS7x86_64&lt;/li&gt;
&lt;li&gt;Docker v18.03&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://zhang21.github.io/categories/DevOps/"/>
    
    
      <category term="Docker" scheme="https://zhang21.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>《网站运维》读书笔记</title>
    <link href="https://zhang21.github.io/2018/03/05/%E7%BD%91%E7%AB%99%E8%BF%90%E7%BB%B4/"/>
    <id>https://zhang21.github.io/2018/03/05/网站运维/</id>
    <published>2018-03-05T14:34:49.000Z</published>
    <updated>2018-03-25T03:53:52.761Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>《网站运维：保持数据实时的秘籍》(Web Operations: Keeping the Data on Time)</li></ul><p><br><br><br></p><a id="more"></a><p><br></p><h1 id="作为职业的运维"><a href="#作为职业的运维" class="headerlink" title="作为职业的运维"></a>作为职业的运维</h1><p>互联网变化如此之快，以至于几乎没有时间认真思考一下我们在做什么，以及为什么做。我们奋力拼搏，才避免被淘汰出局，哪里还敢谈论什么引领潮流呢！这种高压、过度刺激的环境使得所有努力都只是为了一份工作，而没有职业的概念了。</p><p>职业是指占去你人生大部分时光的事业，并能够逐步晋升。工作只是拿钱干活儿，换句话说，工作就只是工作而已。</p><p><br></p><h2 id="为什么运维如此艰难"><a href="#为什么运维如此艰难" class="headerlink" title="为什么运维如此艰难"></a>为什么运维如此艰难</h2><p>运维对如下领域都有深入的理解：<strong>网络、路由、交换、防火墙、负载均衡、高可用性、灾难恢复、TCP与UDP服务、网络运维中心管理、硬件规范、各种Unix、各种Web服务器技术、高速缓存技术、数据库技术、存储基础架构、密码学、算法、趋势分析、容量规划…</strong></p><p>运维要求广博，可以说几乎是不可接受的。</p><p>运维领域成为一个合格的人选，需要具备三点素质：<strong>扎实的计算背景、娴熟的决断力、沉稳的性格</strong>。</p><p><br></p><h3 id="扎实的计算背景"><a href="#扎实的计算背景" class="headerlink" title="扎实的计算背景"></a>扎实的计算背景</h3><p>运维要求理解架构中的各个组成部分，在理解计算系统的来龙去脉时，扎实的计算背景对你会有莫大的帮助。具有扎实的基础，对于理解为什么及如何架构解决方案，以及识别出问题所在，是非常重要的。毕竟，计算是架构我们的智能系统的基础。此外，工程师的思维方式和对物理定律的基本理解，也是一个很大的优势。</p><p>运维会经常遇到随意的、不切实际的期望。<br>运维，就是理解理论和实践在哪里发生冲突，并发明适当的方法，以便在发生事故时减少损失。</p><p><br></p><h3 id="娴熟的决断力"><a href="#娴熟的决断力" class="headerlink" title="娴熟的决断力"></a>娴熟的决断力</h3><p>虽然优柔寡断在任何领域都不算是一个优点，但在运维中却几乎不能容忍。</p><p><br></p><h3 id="沉稳的性格"><a href="#沉稳的性格" class="headerlink" title="沉稳的性格"></a>沉稳的性格</h3><p>一个沉稳与可控的思维过程是非常关键的，需要保持自己是清醒的一方。</p><p>在运维领域，目标很简单，使所有事情在所有时间正常运转。一个简单的定义，但却是一个不可能的期望。或许在这个领域成为一名工程师的更大挑战是组织内的同事对你的不切实际的期望。</p><p><br><br><br></p><h2 id="从学徒到师傅"><a href="#从学徒到师傅" class="headerlink" title="从学徒到师傅"></a>从学徒到师傅</h2><p>掌握任何知识领域都需要四项基本要求：<strong>知识、工具、经验和纪律</strong>。</p><p><br></p><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p>互联网行业的一个独特之处就是几乎所有的东西都是公开的，事实上，有专有权的东西也是极少的，而更为独特的是，几乎所有规范文档都是免费的。</p><p>在你走在从从学徒到师傅的路途中，尽可能多滴占有信息是你的职责，这样你的大脑才能将那些细微之处进行排序、过滤、关联，使其成为一幅简明、精确的图画，从而有助于你的决策——不管是长期的架构设计的关键决策，还是临时的排除故障的决策。</p><p><br></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>虽然工具各有优缺点，然而人们使用这些工具都取得了成功。制造和使用工具使我们人类的本性。<br>所有的工具归根结底都只是人类肢体和感觉器官的延长。</p><p>师傅不适用工具炼成的。在互联网应用的环境中，你会看得更清楚，五花八门的语言、平台、技术都能够成功地结合在一起，将这些成功地构建为一个架构的，不是Java或PHP，而是设计与实现它的工程师——那些师傅们。</p><p>工具上的一个真理是，不管在用的工具是什么，要了解你的工具，这是在这个行业登堂入室的前提。灵巧地运用工具的能力，比工具本身的质量要重要的多。话虽如此，有经验的工程师还是应该手边备一件合适的高质量的工具。</p><p><br></p><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>从最本质的意义上来说，经验意味着良好的判断力，而良好的判断力却是从很多失败中取得的。</p><p>经验与知识是紧密相关的，知识可以认为是他人经验的总结。<br>经验既是一个名词，也是一个动词。获得经验与应用经验，同样容易也同样困难。</p><p>一名资深工程师最大的特点是其一致与可靠的良好判断力。很显然，这要在需要做出判断的场合经受锻炼。</p><p>对进入运维这个领域而没有什么经验的工程师，我的忠告是：<strong>耐心</strong>。</p><p><br></p><h3 id="纪律"><a href="#纪律" class="headerlink" title="纪律"></a>纪律</h3><p>通过尽可能正确而高效地做事，从而为解决同样问题，而尽可能地少做工作。</p><p><br><br><br></p><hr><p><br></p><h1 id="如何应用云计算-Elastic-Compute"><a href="#如何应用云计算-Elastic-Compute" class="headerlink" title="如何应用云计算(Elastic Compute)"></a>如何应用云计算(Elastic Compute)</h1><p>云服务器(ECS, Elastic Compute Service)</p><p><br></p><h2 id="什么地方适合云计算"><a href="#什么地方适合云计算" class="headerlink" title="什么地方适合云计算"></a>什么地方适合云计算</h2><p>灵活性和一定程度上的自由是云服务器的特点，当然，本地服务器同样有这个特点。</p><p><br></p><h3 id="混合计算"><a href="#混合计算" class="headerlink" title="混合计算"></a>混合计算</h3><p>混合计算=云计算+本地计算</p><p><br></p><h2 id="什么地方不适合云计算"><a href="#什么地方不适合云计算" class="headerlink" title="什么地方不适合云计算"></a>什么地方不适合云计算</h2><p>当然，最先考虑的肯定是经济层面。</p><p>服务层与数据库是紧密耦合的，所以使它们之间的网络延迟最小化是很重要的。这意味着它们要么全在云里，要么全在云外。</p><p><br></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>尽管有大量广告吹嘘完整托管在云里，但从运维角度来说，混合应用架构模式或许是最有趣的。有些事情在云里做的不一定好。脚踏两只船，你才会游刃有余。</p><p>混合应用还强调一点，就是传统运维中的最佳时间仍然是成功的公司的云应用所必须的。</p><p><br><br><br></p><hr><p><br></p><h1 id="基础架构与应用程序测量"><a href="#基础架构与应用程序测量" class="headerlink" title="基础架构与应用程序测量"></a>基础架构与应用程序测量</h1><p>任何规模的运维，采集测量数据就像将服务器连接到网络上一样重要，对于一个规模不断增长的基础架构来说，或许更加重要。</p><p>我们不光讨论你要采集并监视的测量数据的种类，还要讨论为了应对各种情况，你能利用这些数据做些什么。</p><p>测量数据的采集和带有报警(alerting)功能的监控有明显的区别。</p><p><br><br><br></p><h2 id="时间刷新率和存留时间的考虑"><a href="#时间刷新率和存留时间的考虑" class="headerlink" title="时间刷新率和存留时间的考虑"></a>时间刷新率和存留时间的考虑</h2><p>随着采集的数据不断增长，确保这些数据能够一直可查询和移动，这是很明智的。</p><p>如Zabbix中——获取数据的时间刷新率和数据保存时间。历史数据保留时长和趋势数据存储时间。<br>比如有的数据要30s获取一次，而有的信息只需要1h获取一次。</p><p>测量数据真正出彩的地方：</p><ul><li>对于某个特定的资源，每天的峰值是哪些？每周的峰值日是哪些？每年的峰值月是哪些？</li><li>有季节性模式吗？<ul><li>如夏时日和节假日会高一些</li></ul></li><li>最大(波峰)值与最小(波谷)值比较起来怎么样？</li><li>在用户分布广泛的情况下，波峰与波谷是否发生变化？</li></ul><p><br><br><br></p><h2 id="测量数据采集与存储的地点"><a href="#测量数据采集与存储的地点" class="headerlink" title="测量数据采集与存储的地点"></a>测量数据采集与存储的地点</h2><p>无论使用什么采集工具，易于采集和便于得出结果都是必须要考虑的。</p><p><br><br><br></p><h2 id="测量数据的层次"><a href="#测量数据的层次" class="headerlink" title="测量数据的层次"></a>测量数据的层次</h2><p>不同层次的数据存储在不同的数据库中。</p><p><br></p><h3 id="高层业务或功能特定的测量数据"><a href="#高层业务或功能特定的测量数据" class="headerlink" title="高层业务或功能特定的测量数据"></a>高层业务或功能特定的测量数据</h3><p>有了这些高层数据之后，面向产品的那些人对这些数据也抱有极大的兴趣，你一点都不用感到惊讶。</p><p>对于应用层面的数据，最有用的是能够跟踪用户的交互情况。</p><p><br></p><h3 id="系统及服务层面的测量数据"><a href="#系统及服务层面的测量数据" class="headerlink" title="系统及服务层面的测量数据"></a>系统及服务层面的测量数据</h3><p>这些是在运维工程师电脑上以图形方式显示的数据。</p><p><br></p><p>测量数据的层次：</p><table><thead><tr><th>-</th><th>例子</th><th>测量项目</th></tr></thead><tbody><tr><td>应用层</td><td>网页或API</td><td>故障：类型、延迟、发生率…</td></tr><tr><td>服务层</td><td>Nginx, MySQL, MongoDB…</td><td>Nginx: 请求频率、响应时间、忙碌的工作进程… <br> MySQL/MongoDB：导致故障的查询类型、慢查询、连接数…</td></tr><tr><td>物理层</td><td>CPU、内存、网络、硬盘</td><td>内存：繁忙程度 <br> 内存：空闲内存 <br> 硬盘：可用空间，I/O速率 <br> 网络：网络I/O带宽情况</td></tr></tbody></table><p>有了这些数据，就能够回答如下问题：</p><ul><li>平均的Web请求时间</li><li>CPU时间</li><li>调用最多的数据库查询</li><li>数据库慢查询</li><li>文件系统缓存</li><li>最大的页面响应</li><li>…</li></ul><p><br><br><br></p><h2 id="为异常检测和报警提供环境"><a href="#为异常检测和报警提供环境" class="headerlink" title="为异常检测和报警提供环境"></a>为异常检测和报警提供环境</h2><p>在本地采集的测量数据的主要理由，就像油表一样，有了这些数据，就可以明白基础架构正在发生什么，以及正在驶向何方。<br>知道哪里的资源在增长或缩减，能够进行预测。使用预测对基础架构的容量需求进行预报，称为容量规划。<br>观察网站运行是否有异常时，测量数据就派上用场了。</p><p>发生异常是，测量数据回味报警提供相关信息。报警的信息要尽量简明，告知检测到了什么，以及何时检测到。而测量数据会告诉你报警都发生了什么。</p><p><br><br><br></p><h2 id="日志记录也是测量数据"><a href="#日志记录也是测量数据" class="headerlink" title="日志记录也是测量数据"></a>日志记录也是测量数据</h2><p>应用程序的日志文件也提供了测量数据和使用情况的信息。这些信息用于追踪过去发生的事件。</p><p><br><br><br></p><h2 id="将变化管理和事件的时间线建立关联"><a href="#将变化管理和事件的时间线建立关联" class="headerlink" title="将变化管理和事件的时间线建立关联"></a>将变化管理和事件的时间线建立关联</h2><p>更新生产系统会带来风险。<br>记录更新发生的时间，从而保留更新的踪迹，这在发生问题需要进行追踪时是非常有价值的。</p><p><br><br><br></p><h2 id="给测量数据加入报警机制"><a href="#给测量数据加入报警机制" class="headerlink" title="给测量数据加入报警机制"></a>给测量数据加入报警机制</h2><p>Zabbix、Nagios等就是一个测量数据采集系统配合使用的监控/报警工具。</p><p><br><br><br></p><h2 id="使用测量数据建立加载-反馈机制"><a href="#使用测量数据建立加载-反馈机制" class="headerlink" title="使用测量数据建立加载-反馈机制"></a>使用测量数据建立加载-反馈机制</h2><p>采集时序数据的另一个好处，就是能够通过编程使你的应用生成测量数据，从而可以建立安全、精密的反馈循环。</p><p><br><br><br></p><h2 id="结语-1"><a href="#结语-1" class="headerlink" title="结语"></a>结语</h2><p>测量数据的采集、存储、显示，可以认为是web基础架构的关键部分。不论是及时排查错误，预测容量、规划产品的发布，还是建立应用的反馈机制，如果没有正确的测量数据为你提供一个基础架构运行的全景图的话，你会损失惨重。</p><p>设计数据如何经过系统时，要考虑安全问题，而且数据要易于导出到其它应用。一旦运维部门采集了测量数据，你会发现，追踪数据是一件多么有趣的事情，同时也能使工作更加轻松。</p><p><br><br><br></p><hr><p><br></p><h1 id="连续部署"><a href="#连续部署" class="headerlink" title="连续部署"></a>连续部署</h1><p>软件应该以小批量的方式进行设计、编写和部署。</p><p>批量大小是产品在开发过程的各个阶段转移的单位。对于软件而言，最容易看到的批量是代码。每次工程师检入代码，都是在提交一定量的工作。有很多技术用来控制这些批量，从连续部署所需的最小批量到更为传统的分支开发，在分支开发中，多个开发者工作数周或数月产生的所有代码将被成批处理，并集中到一起。</p><p>结果证明，以远小于传统做法的建议的批量工作，有极大的好处。</p><p><br><br><br></p><h2 id="小批量意味着更快的反馈"><a href="#小批量意味着更快的反馈" class="headerlink" title="小批量意味着更快的反馈"></a>小批量意味着更快的反馈</h2><p>工作转移到下一阶段越快，则也就能越快地发现下一个阶段是如何接纳你的工作的。</p><p><br><br><br></p><h2 id="小批量意味着问题即刻被本地化"><a href="#小批量意味着问题即刻被本地化" class="headerlink" title="小批量意味着问题即刻被本地化"></a>小批量意味着问题即刻被本地化</h2><p>问题发现得越快，则解决的也越快。</p><p>每次部署，都只有少量代码有变化，所以导致回归或料想不到的性能问题的任何变化，都能够快速识别出来，并进行改正。当然，由于需要改正或回滚的变化数量不仅是确定的，也是很小的，所以解决问题的平均时间也就很低了。</p><p><br><br><br></p><h2 id="小批量能够减少风险"><a href="#小批量能够减少风险" class="headerlink" title="小批量能够减少风险"></a>小批量能够减少风险</h2><p><br><br><br></p><h2 id="小批量可以降低总开销"><a href="#小批量可以降低总开销" class="headerlink" title="小批量可以降低总开销"></a>小批量可以降低总开销</h2><p>大多数机构都会降低自己的批量大小，以降低总的开销。<br>大批量导致的瓶颈经常是隐含的，是这些隐含的瓶颈显现出来，是需要开销的，甚至要投入更多的工作才能修正这些瓶颈。</p><p>连续部署的目标，是在减小批量的同时，帮助开发团队清除开发过程中的垃圾，加快工作步伐。这样就能使各个团队处于持续的流动状态，这种状态使得团队的创新、试验变得非常容易，从而形成可持续发展的良性循环。</p><p><br><br><br></p><h2 id="质量卫士的挽歌"><a href="#质量卫士的挽歌" class="headerlink" title="质量卫士的挽歌"></a>质量卫士的挽歌</h2><p>产生开发过程中的垃圾的一个很大原因是重复检查。</p><p>连续集成，有助于加快缺陷反馈流程；故事卡和看板，用于降低批量大小；日站，有助于加快步伐；连续部署也是这样的技术，有能力是开发团队更有活力。</p><p><br></p><h3 id="为什么连续部署能行"><a href="#为什么连续部署能行" class="headerlink" title="为什么连续部署能行"></a>为什么连续部署能行</h3><p>连续部署区分了发布的两种不同的定义：</p><ul><li>一个是工程师使用的，指的是将代码完全集成到生产环境中的过程；</li><li>另一个是市场部门使用的，指的是客户看到的东西</li></ul><p>使用连续部署，代码一旦写完，就在去往生产环境的路上了。<br>连续部署也起着速度调节器的作用。</p><p>这种速度调节，对于习惯于通过个体效率来度量其进步的团队来说，是一种技巧性的调整。在这种团队中，每个工程师的头等大事就是保持忙碌。不幸的是，这种观点忽略了团队的整体生产能力。对于有些情形，大家坐下来讨论，找出协调方法，从而不需要做重复工作，这时候才是有效率的。</p><p><br><br><br></p><h2 id="让我们开始吧"><a href="#让我们开始吧" class="headerlink" title="让我们开始吧"></a>让我们开始吧</h2><h3 id="步骤1：连续集成服务器"><a href="#步骤1：连续集成服务器" class="headerlink" title="步骤1：连续集成服务器"></a>步骤1：连续集成服务器</h3><p>这是连续部署的脊梁。我们需要一个中心服务器，运行所有的自动化测试，并监控每一次的提交。</p><p><br></p><h3 id="步骤2：源代码控制提交检查"><a href="#步骤2：源代码控制提交检查" class="headerlink" title="步骤2：源代码控制提交检查"></a>步骤2：源代码控制提交检查</h3><p>下一个需要的基础框架是源代码控制服务器，并带有能进行提交检查的甲苯。如CVS、SVN、Git等。</p><p>作为一个团队，我们的目标是在能够可靠地生产高质量代码的前提下，尽可能快地工作，但不要过快。</p><p><br></p><h3 id="步骤3：简单的部署脚本"><a href="#步骤3：简单的部署脚本" class="headerlink" title="步骤3：简单的部署脚本"></a>步骤3：简单的部署脚本</h3><p>建立一个关键的部署脚本，用于逐台机器进行增量备份，与此同时，监控集群和业务的运行情况。这样一旦出现异常，就可以快速恢复。</p><p><br></p><h3 id="步骤4：实时报警"><a href="#步骤4：实时报警" class="headerlink" title="步骤4：实时报警"></a>步骤4：实时报警</h3><p>无论部署过程多么完美，缺陷仍然会通过部署而进入生产环境。需要一个监控平台，以便事情一旦偏离正常，能够进行提醒，并找到人来调试。</p><p><br></p><h3 id="步骤5：根本原因分析"><a href="#步骤5：根本原因分析" class="headerlink" title="步骤5：根本原因分析"></a>步骤5：根本原因分析</h3><p>无论问题多小，都要做些投资，而且各个级别都要做。<br>小的改进，经过经年累月，非常像复利。</p><p><br><br><br></p><h2 id="连续部署用于关键应用"><a href="#连续部署用于关键应用" class="headerlink" title="连续部署用于关键应用"></a>连续部署用于关键应用</h2><p>连续部署要求的第一个心态转移是：如果一个更新假设是无副作用的，马上发布。不要再等着与其它相关的更新捆绑在一起，否则，一旦发生副作用，就很难确定到底是哪个更新产生的。</p><p>第二个是心态转移是把市场发布的概念和工程发布的概念区分开。</p><p><br></p><ul><li>更快更好的反馈</li><li>更多的自动化</li><li>对真实环境测量数据的监控</li><li>更好地处理间歇性错误</li><li>更小的批量</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="作为代码的基础架构"><a href="#作为代码的基础架构" class="headerlink" title="作为代码的基础架构"></a>作为代码的基础架构</h1><p><strong>只需要源代码库、应用程序数据备份、硬件裸机就能够把整个业务重建起来。</strong></p><p>理想情况下，重组业务的最大制约是还原应用程序数据所需要的时间，应用程序数据是真正的业务价值所在。</p><p><br><br><br></p><h2 id="面向服务体系结构"><a href="#面向服务体系结构" class="headerlink" title="面向服务体系结构"></a>面向服务体系结构</h2><p>将系统的每个组件都分解为可通过网络访问的服务，这些服务集成在一起就构成了一个功能性应用程序。</p><p>通过将每个基本组件都呈现为服务、应用开发者可自由组装的新的应用，结果就是重用更为容易、封装更为清洁、错误排查更为简单。</p><ul><li><p>应该是模块化的</p><ul><li>做一件事，并且做好<br>在SOA中，每个服务都很小——只做一件事，并允许其它服务调用。每个服务都很简单，但应用程序员要做很多集成工作。每个服务都专注于自己的狭小领域，则管理、开发、测试都会很容易。<br>基础架构服务也是一样的，缩小每个服务的操作范围，就可以降低复杂性，从而他人也就易于理解其行为。</li></ul></li><li><p>应该是协作的</p><ul><li>让我们团结起来<br>在构建通过网络API呈现的基本服务时，要鼓励别人和你协作，而不是重复实现相同的功能。每个服务都要设计成与其它服务协作的，尽量少假设服务的使用方式。<br>服务的协作本性决定了用的人越多，则服务本身就越有用。对于基础架构服务而言，这种本性是至关重要的——随着基础架构的每个部分都成为可集成的服务，服务之间相互协作的方式会呈指数增长。</li></ul></li><li><p>应该是可组合的</p><ul><li>应该一切准备就绪<br>理想情况下，每个服务都应该通过易于访问的网络API呈现自己的配置和功能，实际情况是：大部分都没有。</li></ul></li></ul><p><br></p><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>配置管理是一种管理活动，从技术和管理两个方面作用于产品和生命周期、配置项，以及相关的产品配置信息。</p><p>配置管理是指对所有那些事情的跟踪，那些事情是把一个系统从<strong>裸机(baremetal)</strong>转变成<strong>做自己的事</strong>时必须要做的。系统管理员手工配置系统，并将笔记贴到wiki上时，他就是在实践着最基本的配置管理。软件开发者写了一个脚本来自动部署自己的应用程序，她就是在实践着自动化的配置管理。</p><p><br></p><h3 id="配置管理是策略驱动的"><a href="#配置管理是策略驱动的" class="headerlink" title="配置管理是策略驱动的"></a>配置管理是策略驱动的</h3><ol><li>把问题和解决方案的最终结果记入文档(设立策略)；</li><li>写出在策略中要执行的代码(执行策略)；</li><li>确认最终结果是正确的(审计策略)；</li><li>重复这个过程，确保以后呢能够可靠的执行(测试策略)</li></ol><p><br></p><h3 id="系统自动化就是用代码实现配置管理策略"><a href="#系统自动化就是用代码实现配置管理策略" class="headerlink" title="系统自动化就是用代码实现配置管理策略"></a>系统自动化就是用代码实现配置管理策略</h3><p>自动化几乎总是使用高级语言，自动化方式展现了三个原则：</p><ul><li>应该是灵活的<ul><li>无论需要什么，都应该有能力做</li></ul></li><li>应该是可扩展的<ul><li>遇到新情况时，要易于扩展</li></ul></li><li>应该是可重复的<ul><li>不管重复做了多少次，结果都一样</li></ul></li></ul><p><br></p><h3 id="系统管理中的配置管理"><a href="#系统管理中的配置管理" class="headerlink" title="系统管理中的配置管理"></a>系统管理中的配置管理</h3><p>配置管理工具应该有如下思想：</p><ul><li>描述的<ul><li>说明做什么，而不是怎么做</li></ul></li><li>抽象的<ul><li>让工具为你操心细节</li></ul></li><li>幂等的<ul><li>旨在需要时才采取行动</li></ul></li><li>聚合的<ul><li>只关心自己，并信赖其他服务亦然</li></ul></li></ul><p><br></p><h3 id="系统集成"><a href="#系统集成" class="headerlink" title="系统集成"></a>系统集成</h3><p>系统集成是指将各个组件整合为一个功能正常的、完全自动化的系统。系统集成侧重于广度，能否成功则依赖于对两个方面的理解：</p><ul><li>系统中的每个组件是如何工作的</li><li>这些组件是如何相关的</li></ul><p>应该遵循这两个步骤将基础架构构建为代码，这两个恰好也是系统集成阶段使用的步骤。系统集成就是将所有的东西整合在一起。</p><p><br></p><p><strong>将基础架构分解为可重用的，可通过网络访问的服务</strong></p><p>良好基础架构的十大核心原则：</p><ul><li>应该是模块化的<ul><li>启动过程将只处理这样的任务：使资源成为网络可访问</li></ul></li><li>应该是协作的<ul><li>启动服务应该能够将启动后的工作传给其他服务</li></ul></li><li>应该是可组合的<ul><li>能够从不同的服务中调用启动服务</li></ul></li><li>应该是灵活的<ul><li>足够灵活以应付不同类型的物理系统</li></ul></li><li>应该是可扩展的<ul><li>易于扩展，义启动新的资源类型</li></ul></li><li>应该是可重复的<ul><li>每次启动，都要生产相同的系统</li></ul></li><li>应该是描述的<ul><li>应该描述需要的系统类型，而不是如何安装和构建这些系统的细节</li></ul></li><li>应该是抽象的<ul><li>应该隐藏底层机制</li></ul></li><li>应该是幂等的</li><li>应该是聚合的<ul><li>应该尽快将每个系统都启动起来，并为随后的操作系统做好准备，而不用担心其他系统的状态</li></ul></li></ul><p><br></p><p><strong>将服务集成在一起</strong></p><p>现在，你已经创建了一个如何引导和配置系统的策略，你知道接收标准是什么、能够列出实现步骤、能够对策略进行测试。这种做系统集成的方式类似于做一个多层蛋糕：每一层都建立在前一层的美味基础上，使得整个蛋糕更为诱人。</p><p><br><br><br></p><hr><p><br></p><h1 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h1><p>我以前假定服务器资源是无限的，实际情况却是服务器正在为获得必要的内存而努力挣扎着。操作系统开始进行交换，CPU开始过载，从而响应时间开始变糟。</p><p>技术人员的观点和最终用户/业务的观点并不一致。</p><p>监控并不是设置一个系统，它是用来支持业务运转的，是用来保证系统中各个部分都在各司其职地工作着。能够正常工作也可以表述为保持网站的可用性。</p><p>可用性(A)可表述为：<br>A = Uptime/(Uptime + Downtime)</p><p>网站可用性受如下4个参数的影响：</p><ul><li><strong>MTTD(平均故障诊断时间)</strong><ul><li>诊断该问题所花费的平均时间</li></ul></li><li><strong>MTTR(平均修复时间)</strong><ul><li>用于修复问题所花费的平均时间</li></ul></li><li><strong>MTTF(平均无故障时间)</strong><ul><li>正常运行的平均时间</li></ul></li><li><strong>MTBF(平均故障间隔时间)</strong><ul><li>两次故障间隔的平均时间</li></ul></li></ul><p>A = MTTF/MTBF = MTTF/(MTTF+MTTD+MTTR)</p><p>并不是说你的业务需要接近90%或更高的可用性，业务要求的可能性只是一种期望值，如果宕机发生在周末，即使发生在工作日，只要还能工作，用户也不会说什么。你的目标是应该通过降低MTTD和MTTR，以及增加MTTF来增加可用性。</p><p><br><br><br></p><h2 id="理解你在监控什么"><a href="#理解你在监控什么" class="headerlink" title="理解你在监控什么"></a>理解你在监控什么</h2><p><strong>技术组件的依赖项：</strong></p><table><thead><tr><th>组件</th><th>依赖关系</th></tr></thead><tbody><tr><td>应用程序</td><td>应用程序服务器、Web服务器、邮件服务器、缓存服务器、队列服务器</td></tr><tr><td>Mail服务器</td><td>Mail服务进程、网络、主机、存储</td></tr><tr><td>DNS服务器</td><td>DNS服务进程、网络、主机、存储</td></tr><tr><td>应用程序服务</td><td>应用程序服务进程、网络、主机、存储</td></tr><tr><td>Web服务器</td><td>Web服务器进程、网络、主机、存储</td></tr><tr><td>数据库</td><td>数据库服务进程、网络、主机、存储</td></tr><tr><td>主机</td><td>设备、OS设备进程</td></tr><tr><td>网络</td><td>设备、网络设备进程</td></tr><tr><td>存储</td><td>设备、磁盘、RAID控制器、接口</td></tr><tr><td>通用设备</td><td>磁盘、内存、CPU、接口、房屋</td></tr><tr><td>房屋</td><td>UPS、电源、温度</td></tr></tbody></table><p>依赖项常常不受你控制，相反，它是由公司内不同的组管理的。从你自己的筒子里走出来，到其他部门获取相关信息，并不是很容易。正是因为你依赖于他们，所以更好地理解他们的就很关键了。这样你就不用在讯早问题的原因上浪费时间，在用户访问服务所依赖的那些组件上也就不会存在盲点。</p><p><br></p><p><strong>不同部门之间的边界：</strong></p><table><thead><tr><th>企业部门</th><th>依赖项</th></tr></thead><tbody><tr><td>支援部门</td><td>能影响浏览器、桌面设置、防病毒/间谍软件</td></tr><tr><td>开发组</td><td>专注于应用程序更新</td></tr><tr><td>中间件组</td><td>经常运行数据库、Web服务器、应用程序服务器、邮件服务器、缓存服务器队列服务器</td></tr><tr><td>系统组</td><td>操作系统、DNS、DHCP、虚拟化、集群</td></tr><tr><td>网络组</td><td>交换机、路由器、VPN、代理服务器</td></tr><tr><td>存储组</td><td>SAN、NAS、备份、恢复</td></tr><tr><td>数据中心组</td><td>电缆、电力、UPS</td></tr><tr><td>安全小组</td><td>防火墙、安全策略</td></tr></tbody></table><p>这样划分责任，在不清楚问题的真正原因时，会显著增加修复问题的时间。大量精力会花在努力证明自己部门的清白上面，从而延长了解决问题的时间。这份额外时间称为平均清白时间(Mean Time to Innocence)。<br>为了减少这种相互推诿的时间，良好的合作与协调很重要。持续的知识共享有助于增加这种共同应对问题的责任感。</p><p>组织边界到防火墙哪里就停止了，但Internet服务比内部控制的服务有更多的依赖项，这些外部依赖项有ISP、广告商、RSS信息、Internet邮件、DNS服务器、ISP连接等，内部依赖项和外部依赖项的主要区别在于，对于外部依赖项，你不知道这些服务是如何提供的。即使如此，也不能在监控这些服务上止步不前，毕竟它们仍然是你的服务的依赖项。</p><p>在无冗余的系统中，一个组件失效，整个服务就会失效。当一个组件的失效会影响整个服务时，这种失效就称为单点故障。这种影响既指服务完全中断，也指对服务质量的影响。<br>为了避免单点故障，通常是在架构中的多个位置增加冗余，这些冗余是你的环境的安全卫士，而不是对问题的某种补偿方式。通常，增加冗余会增加复杂性，所以不要掉进过度设计的陷阱。</p><p><strong>一些冗余机制：</strong></p><table><thead><tr><th>服务/组件</th><th>冗余机制</th></tr></thead><tbody><tr><td>应用程序</td><td>负载均衡器、状态复制</td></tr><tr><td>Mail服务器</td><td>一个域名多条MX记录</td></tr><tr><td>DNS服务器</td><td>一个域名多条NS记录</td></tr><tr><td>应用程序服务器</td><td>会话复制、多实例安装</td></tr><tr><td>Web服务器</td><td>Web服务器服务进程</td></tr><tr><td>数据库</td><td>集群服务、水平区分</td></tr><tr><td>主机</td><td>虚拟化、集群</td></tr><tr><td>网络</td><td>多网关、BGP、VRRP、多ISP</td></tr><tr><td>存储</td><td>RAID、镜像、多重路径技术</td></tr><tr><td>通用设备</td><td>多网卡、CPU、内存</td></tr><tr><td>数据中心</td><td>BGP任播、GSLB</td></tr></tbody></table><p><br></p><p>不要忘了检查监控服务的依赖项，如果监控都挂了，那还监控什么呢。</p><p><strong>各种检查：</strong></p><table><thead><tr><th>检查种类</th><th>例子</th></tr></thead><tbody><tr><td>可用性</td><td>能访问80端口吗？HTTP进程在运行吗？数据库能访问吗？</td></tr><tr><td>功能/既时</td><td>应用程序在请求数据库，OS在进行DNS查询，控制器在进行磁盘写入，负载均衡器在请求Web服务器</td></tr><tr><td>功能/模拟</td><td>模拟HTTP请求、DNS请求、发送邮件</td></tr><tr><td>质量/利用</td><td>CPU、内存、磁盘等硬件信息使用情况，可以知道机器是否有足够的处理能力</td></tr><tr><td>质量/效率</td><td>Squid缓存命中率</td></tr><tr><td>质量/吞吐</td><td>订阅数、登录数、请求数、进/出请求数，用户数，数据库连接数，活动连接数，实例数</td></tr><tr><td>环境</td><td>配置监控，安全监控，备份监控</td></tr><tr><td>可信性</td><td>邮件域的垃圾邮件防范级别，SSL证书</td></tr></tbody></table><p><br></p><p><strong>不同层级的检查：</strong></p><table><thead><tr><th>层级</th><th>例子</th></tr></thead><tbody><tr><td>业务</td><td>内部网管理站点</td></tr><tr><td>交易</td><td>登录、增加文档、分享链接、注销</td></tr><tr><td>服务</td><td>Mail、DNS、Web服务器、数据库、路由、防火墙</td></tr><tr><td>机器</td><td>服务器、CPU、内存、交换机</td></tr></tbody></table><p><br><br><br></p><h2 id="理解正常行为"><a href="#理解正常行为" class="headerlink" title="理解正常行为"></a>理解正常行为</h2><p><strong>即使你了解所有依赖项，但设计一个好的监控解决方案仍是要花时间的。需要根据业务实际需求和变化对监控实施改变。</strong></p><blockquote><p><strong>一些监控中的主要问题：</strong><br>如果多次报警基于同一个原因，应该只发送一次报警；<br>夜间，备份可能会在生产网络上产生很高的负载，这样由于响应时间的变慢而导致多个ping失败和其它可能的误报，从而产生起起伏伏的报警；<br>如果我们想要随时待命的支持人员，必须尽可能降低报警和误报的次数。</p></blockquote><p><br></p><p>加入的检查越多，消耗的生产系统的资源也就越多，这些资源可以是传送数据的带宽、计算结果的CPU…<br>你需要找到正确的平衡：监控太多只会浪费资源，从而降低对整个状况的了解；监控不足将导致不能及时报警。越靠近业务层的检查越有机会检测出问题，而越底层的检查越能够对发生的问题进行定位。</p><p>监控被认为是运维环境的一部分，通常是由系统或网络管理员来管理的。开始时是一个很小的系统，在后台运行。随着监控环境的扩大，需要执行更多的配置和定制。虽然运维人员常常是第一个对要部署的新软件进行仔细检查的人，他们的标准却往往并不应用到自己的监控系统上。监控系统是你的关键应用之一，请一视同仁。</p><p><br></p><p><strong>监控的最佳实践：</strong></p><table><thead><tr><th>实践</th><th>说明</th></tr></thead><tbody><tr><td>版本</td><td>对你的检查进行版本华，并把他们放入版本控制库中</td></tr><tr><td>不同环境</td><td>使用不同环境开发、测试新的检查</td></tr><tr><td>测试</td><td>将检查作为通常代码对待，在代码功能中加入测试</td></tr><tr><td>可使用性</td><td>创建一个所有组件及其关系的可视化总览图，指出失效和组件的关系对工程师很有帮助，只需要看一下仪表板就能明白问题出在哪里</td></tr><tr><td>信息架构</td><td>使用不同的数据表示法，将数据组织为层次结构以便于导航，同时还要避免信息过载</td></tr><tr><td>代码重用</td><td>如果能够重用所监控的应用程序中的业务逻辑，就不要自己写</td></tr><tr><td>无硬编码</td><td>避免将参数编码在脚本中，使用配置文件，这也易于脚本在不同环境中的迁移</td></tr><tr><td>部署</td><td>要易于部署和分发新的检查</td></tr><tr><td>备份/还原</td><td>备份监控数据，并了解在什么情况下需要还原</td></tr><tr><td>监控</td><td>监控你的监控系统</td></tr><tr><td>冗余</td><td>在监控上，使用高可用性的功能做维护工作</td></tr><tr><td>应用的安全规则</td><td>监控账号与其它事务账号分开 <br> 是用最小特权级 <br> 不要将密码保存为明文 <br> 限制对系统的访问，不要将其用于其它的测试 <br> 将监控系统用防火墙或代理系统保护起来，避免来自易受攻击的主机的访问</td></tr></tbody></table><p>所有信息一旦采集和存储，接下来做的就是分析检查结果。服务或系统的状态有<strong>可用(Up)</strong>和<strong>不可用(Down)</strong>，某些监控系统还增加了两个状态，一个用于<strong>系统不可达(Unreachable)</strong>，一个用于<strong>系统/服务尚未检查(Pending)</strong>。</p><p>有的时候，在位新服务建立环境时，预先定义的阈值很困难——实际使用可能会超过预期，或者相反。所以，对阈值进行不断的调优就有意义了。先根据理论上的假设定义一组阈值，然后在测试环境中模拟预期的行为，并翻译为技术化的组件使用情况。因为系统及使用情况的复杂性，对系统、应用程序、用户行为建立精确的模型是很困难的。所以，对阈值只能持续不断地研究与改进。趋势分析确实有助于定义阈值，大部分监控软件都可以让你对监控的值做趋势分析，而不产生报警，根据历史数据得出阈值之后，再启动报警设置。</p><p>管理报警并不仅仅是状态变化时发出报警信息。所有报警如果一直打开着的话，工程师将无法安心做系统支持，因为报警信息太多了，可能要被报警轰炸。同样，如果有太多假设报警，也会导致同样的问题，这可以看成是你的监控系统存在技术缺陷。<br>警报应该产生行动。如果一条警报可以忽略或不需要人工干预，这条报警就是一种浪费。然而，消除噪音却是真正的挑战。警报太多会导致<strong>狼来了</strong>效应，由于警报过载而忽略了正在重要的警报。</p><p>为了使网站可以忍受而限制报警是好的，但假如与业务需求不一致的话，就不行了。反之也是对的，如果业务不需要的话，为了显示网站运行正常而发送很多报警信息，也是毫无意义的。使监控保持正确的平衡，这很重要。</p><p><br><br><br></p><h2 id="有备而学"><a href="#有备而学" class="headerlink" title="有备而学"></a>有备而学</h2><p>一个人不可能在每个方面都是专家，有一个清晰定义的升级路径，从而把问题提交给更为专业的人员去处理是明智的。<br>对紧急报警进行跟踪和趋势分析，有助于提出架构和过程的改进建议。</p><p>故障时间本身并不仅仅有功能失效引起的，也可能是由于维护活动产生的。维护活动产生的故障时间被描述为维护窗口。在这种情况下，业务部门是认可默写故障时间的。为了避免不必要的报警，监控系统可能会在这段时间关闭报警。这会导致丢失一些与此次维护无关的系统/服务故障。所以，应该只关掉与维护相关的报警，而不是整个报警系统。然后，一旦服务运行稳定了，就要打开报警。</p><p><br><br><br></p><h2 id="结语-2"><a href="#结语-2" class="headerlink" title="结语"></a>结语</h2><p>监控并不是要保持服务器运行正常，也要保持业务运行正常。理解了技术组件和业务行为，你就会有相当的把握减少和修复问题上的时间。错误总是会发生的，但要为此做好准备。万一系统失效，一定要将反馈信息发送给每一个希望听到的人，并对事情做出改进，避免再发生新的错误。愿监控的力量与你同在。</p><p><br><br><br></p><hr><p><br></p><h1 id="复杂系统是如何失败的"><a href="#复杂系统是如何失败的" class="headerlink" title="复杂系统是如何失败的"></a>复杂系统是如何失败的</h1><p>所有复杂系统失败时，都有共同点。Web运维就是这样一个领域。</p><p><br><br><br></p><h2 id="复杂系统是如何失效的"><a href="#复杂系统是如何失效的" class="headerlink" title="复杂系统是如何失效的"></a>复杂系统是如何失效的</h2><ul><li>复杂系统本质上都是灾难系统</li><li>复杂系统都被重重地然而也是成功地防护着</li><li>灾难要求多点失效——单点失效是不够的</li><li>复杂系统包含潜藏在其中的缺陷的变化混合物</li><li>复杂系统以降级模式运行</li><li>灾难随时会发生</li><li>事后归结为”根本原因“是错误的</li><li>幕后认识对人类行为的时候评估存在偏见</li><li>人类操作员有双重角色：作为生产者，以及作为失效防护者</li><li>所有操作者的行为都是赌博</li><li>最为困难的行动解决了所有的模糊性</li><li>人类操作者是复杂系统的可调整因素</li><li>复杂系统中人类专门处理知识处于不断变化中</li><li>变化会引入新的失效</li><li>“原因”观点限制了对未来事件的有效防护</li><li>安全是系统的特性，而不是系统的组件</li><li>持续创造安全的是人</li><li>无事故的运维需要经历事故的历练</li></ul><p><br></p><p><strong>针对Web运维而言：</strong></p><ul><li>了解系统失效很困难</li><li>了解哪部分失效很困难</li><li>有意义的响应会被延迟</li><li>沟通会产生紧张，而脾气会冒火</li><li>维护会成为新的失效的主要源头</li><li>从备份中恢复本身就很困难，而且还有潜在的危险</li><li>创建测试过程，一线人员用来验证系统状态</li><li>对运维进行例行的每日管理</li><li>控制维护</li><li>定期对性能进行评估</li><li>要成为(独一无二)的用户</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="社区管理与Web运维"><a href="#社区管理与Web运维" class="headerlink" title="社区管理与Web运维"></a>社区管理与Web运维</h1><p>运行一个大型且广为人知的网站，意味着会有大批人依赖于网站快速而稳定的服务。这些人会形成一个社区，以各种有趣新颖的方式进行交流，并彼此关照。</p><p>社区起着一个交流、沟通、反馈的渠道作用。</p><p><br><br><br></p><hr><p><br></p><h1 id="处理非预期的访问量激增"><a href="#处理非预期的访问量激增" class="headerlink" title="处理非预期的访问量激增"></a>处理非预期的访问量激增</h1><p>有些时候，因为某种原因，Web的访问量会急剧增加(是正常用户访问而不是遭受攻击)，我们的服务器就会遭受严重的考验。</p><p><br><br><br></p><h2 id="一切是如何开始的"><a href="#一切是如何开始的" class="headerlink" title="一切是如何开始的"></a>一切是如何开始的</h2><p>开能由于某个原因，导致Web流量激增，而我们服务器却无法应付这么高的并发和流量，所以导致Web瘫痪。</p><p><br><br><br></p><h2 id="警报连连"><a href="#警报连连" class="headerlink" title="警报连连"></a>警报连连</h2><p>监控软件(如nagios, zabbix)警报连连。Web请求太多导致响应很慢或奔溃。</p><p><br><br><br></p><h2 id="扑灭烈火"><a href="#扑灭烈火" class="headerlink" title="扑灭烈火"></a>扑灭烈火</h2><p>查找是哪些环节导致Web响应很慢或奔溃，对之做相应的优化。</p><p><br><br><br></p><h2 id="未雨绸缪"><a href="#未雨绸缪" class="headerlink" title="未雨绸缪"></a>未雨绸缪</h2><p>当我们经历了非预期的流量激增，并处理优化之后，下一步就需要对整个基础架构进行加固，或转向新的架构。</p><p><br><br><br></p><h2 id="救命稻草CDN"><a href="#救命稻草CDN" class="headerlink" title="救命稻草CDN"></a>救命稻草CDN</h2><p>解决带宽问题要靠内容分发网络(CDN)——在多个地点存储文件，为客户提供最近最快的响应。<br>大部分静态资源适合移动到CDN上，以减轻原始服务器的负担。</p><p>但CDN也有一些不足。对于移动到CDN上的数据，你就失去了控制。对于短时间的静态内容，CDN的效果并不好。</p><p><br><br><br></p><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p>代理服务器处于我们系统的最前沿，尽可能让代理服务器转发请求，而不使用任何其它资源。</p><p><br><br><br></p><h2 id="围剿踩踏"><a href="#围剿踩踏" class="headerlink" title="围剿踩踏"></a>围剿踩踏</h2><p>如何避免缓存踩踏？</p><ul><li>一个是对数据库进行优化</li><li>一个是搭建数据库集群</li></ul><p><br><br><br></p><h2 id="将代码基流水化"><a href="#将代码基流水化" class="headerlink" title="将代码基流水化"></a>将代码基流水化</h2><p><br><br><br></p><h2 id="怎么知道它能否工作"><a href="#怎么知道它能否工作" class="headerlink" title="怎么知道它能否工作"></a>怎么知道它能否工作</h2><p>确保系统能够处理负载的唯一途径是在流量汹涌而来时，对其进行现场测试。</p><p><br><br><br></p><h2 id="真实测试"><a href="#真实测试" class="headerlink" title="真实测试"></a>真实测试</h2><p>必须要在真实的生产环境中查看其负载效果，才能确保其能正常工作。</p><p><br><br><br></p><h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><p>总要为未来几年做一个规划——问问你自己：“当前的架构方案能够用于未来几年吗？”</p><p>要测试生产环境，经过适当的测试规划，很多问题是可以避免的。</p><p>当一个架构方案已经明显不能工作的时候，必须要有重新考虑整个方案的勇气。<br>重新思考代码、硬件、网络、数据库模式，为可见的未来创建一个伸缩性更好的系统。</p><p><br><br><br></p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>针对遭受的问题，之后对系统的改进。</p><p><br><br><br></p><hr><p><br></p><h1 id="开发者与运维者的协调与合作"><a href="#开发者与运维者的协调与合作" class="headerlink" title="开发者与运维者的协调与合作"></a>开发者与运维者的协调与合作</h1><p>很多网站都将其开发和运维分为两个独立的团队，开发负责开发新功能和对现有功能进行改进，运维负责网站的正常运行。<br>两个团队有不同的目标，工作方式的要求也是迥然有别。</p><p>这种设置很常见，但也是保证网站稳定性或及时推出新功能的最糟糕的设置。</p><p>这在种情形下，开发人员没有动力将网站做得更易于运维支持，开发团队交付的代码通常是一个黑盒子，一旦发生意外，运维团队没有办法及时去修复问题。这种结构也抑制了新的功能的开发、构建和部署网站的新版本，不仅耗时，成本高，还涉及很多不同团队之间的协调。对运维来说，部署是存在风险的，而且也是造成很多宕机事故的原因。</p><p>传统的运维和开发，两者之间存在着很多对彼此很有用的信息。对很多网站来说，性能瓶颈都出在应用程序代码上：开发团队最适合修正这些问题，但运维团队有测量数据，要想找出问题出在哪，是需要这些数据的。关于什么地方可能会出问题，以及如何修复，开发团队有很多很好的想法，但这些却很少会记录在文档里面。</p><p>所以，重新评估运维跟开发之间的关系！</p><p><br><br><br></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>以合适的方式进行移交，则不同团队之间就能更好地共同工作，而改变过程这是困难的，需要协助以及每个人的认可。</p><p>一项服务之所以受人欢迎，频繁部署也是重要原因之一。小批量代码更新。</p><p>用户报告问题后，极短时间内就得到修复，这一做法会彻底征服用户。有了这种响应凡是，则将来有了问题，用户也会很乐意报告给你，这样产品就会越做越好，特别是你能够一直这样快速反应的话。对关键的数据损失或安全缺陷能够在短时间内而不是几周响应的话，用户的数据就会安全得多。</p><p>然而最重要的是，频繁部署并不比周部署或月部署风险更大。很多小的更新，每个都单独测试和检查过，比起一次大的更新来说，导致严重宕机的事故的可能性要小很多。</p><p>这是因为小更新的影响能够提前单独进行复审和测试，从而错误造成的影响也易于量化及应对。定位代码中的缺陷，复审10行的更新比起10000行来，会容易得多，而且只测试那些受更新影响的功能，比起测试整个系统，也要快得多。而且能够确保每次部署都只是更新一个区域，从而避免同时更新的两个组件之间发生预料不到的交互作用。小部署意味着更容易预言更新对基础架构的影响，而这也就意味着未雨绸缪更加有的放矢。</p><p>如果只是部署30行代码，缺陷通常是自明的。如果缺陷不自明，其影响也会非常小，即使回滚也非常容易。</p><p><br></p><p>只有在遵循以下三条规则的情形下，频繁的小更新才起作用：</p><ul><li>构建与部署系统必须能够完全重复且自动地工作</li><li>具有几近完美的预演环境</li><li>部署必须尽可能快，理想情况是小于5min</li></ul><p>大多数构建和部署系统在某种程度上都是自动化的，少数团队走得更远，把构建和部署做成了一键操作。</p><p><br><br><br></p><h2 id="共享、开放的基础架构"><a href="#共享、开放的基础架构" class="headerlink" title="共享、开放的基础架构"></a>共享、开放的基础架构</h2><p>很多情形下，运维和工程都分为不同的小组，你会发现支持的基础架构也会一分为二。</p><p>共享基础架构是在团队之间进行协作的最容易的方式。</p><p>为了有效地工作，你需要了解系统的其它方面目前是如何运转的。为了建立信任，你需要使你的工作变得透明。</p><p><br><br><br></p><h2 id="信任"><a href="#信任" class="headerlink" title="信任"></a>信任</h2><p>信任是开发和运维之间最常见的紧张关系之一。多数运维团队对开发团队多少都有点怀疑，开发人员通常也好不到哪去。团队之间的不信任是不健康的，也是不合适的。</p><p>信任最终是建立在一种尊敬的感觉之上的。如果你尊敬某人，就很容易信任此人能够做好他的事情。反之，如此人交往便会带有偏见、不满等情绪。</p><p>运维和开发之间的许多问题都是由于对两个团队不同角色的重要性认识不同而造成的。</p><p>充分尊重你的同事，而不是事后指责他们。</p><p><br><br><br></p><h2 id="随叫随到的开发人员"><a href="#随叫随到的开发人员" class="headerlink" title="随叫随到的开发人员"></a>随叫随到的开发人员</h2><p>只有在开发人员对修正生产系统代码中的问题肩负起责任的情况下，才是有意义的，而这就意味着开发人员随叫随到。</p><p><br></p><h3 id="现场调试工具"><a href="#现场调试工具" class="headerlink" title="现场调试工具"></a>现场调试工具</h3><p>很多代码对于运维团队来说都是黑盒子。</p><p>要想办法在运行时调用额外的调试信息，技术团队的每个人在用管理账号登录系统之后，都可以开启额外的调试信息。</p><p><br></p><h3 id="功能标识"><a href="#功能标识" class="headerlink" title="功能标识"></a>功能标识</h3><p>禁掉某些依赖于问题架构的功能，而保持网站的其他部分正常运行，功能标识能够实现这一点。</p><ul><li>单个标识，用来禁掉每个非核心的基础架构</li><li>只要这些服务出现问题，我们都可以暂时并优雅地禁止掉这些功能</li><li>如果生产系统出现新的错误场景，也可增加新的标识</li></ul><p><br><br><br></p><h2 id="避免职责"><a href="#避免职责" class="headerlink" title="避免职责"></a>避免职责</h2><p>在很多团队中，没有人愿意成为搞坏所有事情的傻瓜。发生问题时，人们都会将责任推卸给别人。</p><p>每个人都有貌似合理的理由将指责转嫁给别人，却没有挺身而出，实实在在地修复问题，组织良好的团队深切地了解，在将问题修复之前，争论到底是谁的责任是没有意义的，为保护自己而浪费的每一分钟，由于问题没有修复，都会成为给用户带来损失的一分钟。用户会尝试各种可能性，知道他们发现系统出问题了。</p><p>多数生产环境都有足够的冗余，也足够复杂，任何问题都不太可能存在单一的根本问题。很多问题都是由两个或多个系统发生意料之外的交互作用而引起的。</p><p><br><br><br></p><h2 id="结语-3"><a href="#结语-3" class="headerlink" title="结语"></a>结语</h2><p>网站的稳定性是每一个人的责任，而不仅仅是某种应该交给运维团队去处理的东西。</p><p>让人人都拥有对网站的主人翁感觉，确实意味着能够减轻运维团队的工作负担。他们不用再花费大量时间呼吁采取防护性措施，一旦发生问题，也能够花更小的时间修复。这非常了不起，因为这意味着网站的宕机时间会减少很多。这也释放了运维团队，让他们能够把精力放在更为重要的任务上，即对基础架构的长期增长进行管理。</p><p><br><br><br></p><hr><p><br></p><h1 id="你的访问者感觉怎么样：面向用户的测量"><a href="#你的访问者感觉怎么样：面向用户的测量" class="headerlink" title="你的访问者感觉怎么样：面向用户的测量"></a>你的访问者感觉怎么样：面向用户的测量</h1><p>对于网站的成功而言，终端用户的测量也就变得和后台测量一样至关重要。</p><p><br><br><br></p><h2 id="为何要采集面向用户的测量数据"><a href="#为何要采集面向用户的测量数据" class="headerlink" title="为何要采集面向用户的测量数据"></a>为何要采集面向用户的测量数据</h2><p>采集数据，从而就可以对业务的健康状况进行分析。</p><p>如：</p><ul><li>每秒请求数/发布数</li><li>带宽</li><li>响应时间</li><li>HTTP错误率</li><li>记入日志的异常数</li><li>进程重启次数</li><li>队列大小</li><li>服务器的平均负载和进程数</li><li>数据库负载</li><li>内存</li></ul><p><br></p><h3 id="成功的创业公司所学到的以及必须适应的"><a href="#成功的创业公司所学到的以及必须适应的" class="headerlink" title="成功的创业公司所学到的以及必须适应的"></a>成功的创业公司所学到的以及必须适应的</h3><p>创业公司的一大优势就是敏捷，即快速反应的能力。要真正做到敏捷，创业公司需要了解终端用户真正体验到的是什么。</p><p>任何网站想要成功，就必须向用户学习，而且必须适应用户的需求。很多Internet巨头，它们现在的业务，都与其当初设定的相比有很大的不同。</p><p><br></p><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>响应越快的应用程序越好！</p><p>响应级别：</p><ul><li>加入事情的响应时间在10ms内，我们的大脑就会认为这是真实的<ul><li>如点击桌面系统上的按钮</li></ul></li><li>如果谈话有100ms左右的延迟，我们不会感觉到这种延迟<ul><li>如国际长途电话</li></ul></li><li>如果应用程序的响应时间在1s之内，我们的感觉就是仍然在与应用程序互动，仍然在工作</li><li>应用程序的响应时间要是明显长于1s的话，我们就会抓狂</li></ul><p><br></p><h3 id="研究量化了这种关系"><a href="#研究量化了这种关系" class="headerlink" title="研究量化了这种关系"></a>研究量化了这种关系</h3><p>Web应用的速度越快，其Web业务员的优势就越明显！</p><p>如果你的网站很慢，你将得到：</p><ul><li>更少的用户搜索</li><li>更少的精度搜索</li><li>更少的每访客收入</li><li>更少的点击，更低的满意度</li><li>更少的每日搜索</li><li>等待访客点击的时间更长</li><li>更低的搜索引擎排名</li><li>更差的用户体验</li></ul><p><br><br><br></p><h2 id="是什么使网站变得很慢"><a href="#是什么使网站变得很慢" class="headerlink" title="是什么使网站变得很慢"></a>是什么使网站变得很慢</h2><p>简单来说，由以下三点原因造成：</p><ul><li>服务器花在处理用户请求上的时间</li><li>网络花在传输请求和响应上的时间</li><li>用户花在组装并显示结果内容上的时间</li></ul><p><br></p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>开始访问网站，用户都需要先找到服务器。</p><p>对于带有很多组件的网站——这是一个日渐普遍的模式——都会迫使用户去解析很多网站，并且页面加载的时间也延长了。</p><p><br></p><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p>网络再快，用户与服务器之间的往返也是需要时间的。</p><p>请求包含的内容越多，则网络用来传输的时间就越长。加入是一个安全页面的话，还会有另外的延迟，用来在客户与服务器之间进行加密协商。</p><p><br></p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>请求到达服务器之后，另一个导致延迟的罪魁祸首就登场了——主机。不论是从内存中检索静态对象，还是利用后台的第三方服务来完成一个复杂的请求，主机延迟都会对性能造成影响。</p><p><br></p><h3 id="发送响应"><a href="#发送响应" class="headerlink" title="发送响应"></a>发送响应</h3><p>响应内容一旦准备就绪，服务器就可以通过HTTP协议发送这些请求对象——大多数页面包含多个对象(如html,css,js,gif,png,jpg…)，正是这些对象的发送造成了访客体验到的延迟。</p><p><br></p><h3 id="异步通信与刷新"><a href="#异步通信与刷新" class="headerlink" title="异步通信与刷新"></a>异步通信与刷新</h3><p>某些应用包括一些客户与服务器之间的通信，这些通信是独立于页面进行的。<br>包含某种异步更新或刷新的应用，有不同的延迟测量指标。</p><p><br></p><h3 id="渲染时间"><a href="#渲染时间" class="headerlink" title="渲染时间"></a>渲染时间</h3><p>随着客户端越来越复杂，浏览器做的也就越来越多。有可能是启动富互联网应用(RIA)，这些RIAs都是构建在Flash、Flex、HTML5、Java、JS…之上的，也可能是运行QuickTime或Windows媒体播放器等这样的插件，甚至决定如何对复杂页面进行布局也是需要花费时间的。<br>所以，对于大量依赖客户端进行渲染的网站，就必须考虑这种延迟。</p><p><br><br><br></p><h2 id="测量延迟"><a href="#测量延迟" class="headerlink" title="测量延迟"></a>测量延迟</h2><p>有两种测量方法：</p><ul><li>综合监控</li><li>实际用户监控(RUM)</li></ul><p><br></p><h3 id="综合监控"><a href="#综合监控" class="headerlink" title="综合监控"></a>综合监控</h3><p>综合监控是通过从多个地点对网站进行一系列正规的校本化测试，对网站的性能进行监控。</p><p><strong>要记住，综合测试也是要消耗服务器资源的。</strong></p><p><br></p><h3 id="真实用户监控"><a href="#真实用户监控" class="headerlink" title="真实用户监控"></a>真实用户监控</h3><p>RUM的工作名副其实：它观察的是网站的真实访客，记录访客打开页面的速度，然后生成报表。</p><p>从这点来看，RUM会告诉你系统是否出问题了，因为你可以通过RUM发现问题以及速度变慢的情况，这些情况你没有进行测试，从而也就不知道是否存在。</p><p><br><br><br></p><h2 id="编写SLA"><a href="#编写SLA" class="headerlink" title="编写SLA"></a>编写SLA</h2><p>Web运维收集终端用户的数据的一个主要理由就是用来编写SLA，哪怕与客户之间没有正式的SLA，但对于正常工作时间及页面延迟，也应该有内部的目标，因为网站速度对用户体验有直接的影响。</p><p><br><br><br></p><h2 id="访客结果：分析"><a href="#访客结果：分析" class="headerlink" title="访客结果：分析"></a>访客结果：分析</h2><p>对于成功的Web运维来说，监控就是了解存在哪些不利因素。而当进入Web业务时，这些测量就要让位于Web分析了。</p><p><br></p><h3 id="市场营销如何定义成功"><a href="#市场营销如何定义成功" class="headerlink" title="市场营销如何定义成功"></a>市场营销如何定义成功</h3><p>对市场营销的最好描述——“更经常、更有效地卖出更多的东西给更多的人，从而得到更多的钱。”<br>或许应该将成功的在线营销更精确地定义为“让人们有效地去做你要他们做的事情。”</p><p><br></p><h3 id="网站的四种类型"><a href="#网站的四种类型" class="headerlink" title="网站的四种类型"></a>网站的四种类型</h3><ul><li>交易性网站</li><li>协作型网站</li><li>作为服务(saas)网站</li><li>媒体网站</li></ul><p>很多流行网站都是上述模式的混合。</p><p>网站分析就是对每种类型网站的成功因素进行追踪，从中识别出使这些因素得以增长的背后动因——不管是广告活动、性能的提升、社会网络上的关注、特殊的定价模式还是某个引人注目的内容。</p><p><br></p><h3 id="分析一个简单的模型"><a href="#分析一个简单的模型" class="headerlink" title="分析一个简单的模型"></a>分析一个简单的模型</h3><p>有一个简单方式来考虑网站分析，就是做一次访问。</p><p>网站分析的目标，就是通过优化网站，将访客的转变最大化，通常是对网站进行试验，并针对各种内部和外部区段，对这些试验结果进行分析。</p><p><br><br><br></p><h2 id="市场营销关心的其他测量数据"><a href="#市场营销关心的其他测量数据" class="headerlink" title="市场营销关心的其他测量数据"></a>市场营销关心的其他测量数据</h2><h3 id="Web交互分析"><a href="#Web交互分析" class="headerlink" title="Web交互分析"></a>Web交互分析</h3><p>分析查看的是用户对多个页面的整体访问情况，Web交互分析集中在单个页面的可用性交互上。</p><p><br></p><h3 id="用户之声"><a href="#用户之声" class="headerlink" title="用户之声"></a>用户之声</h3><p>用户之声工具用来询问客户在想什么。这些工具从网站的访问性中征求反馈，通过请求客户参与调查，或者在页面上提供一个反馈按钮。</p><p><br><br><br></p><h2 id="用户体验如何影响Web运维"><a href="#用户体验如何影响Web运维" class="headerlink" title="用户体验如何影响Web运维"></a>用户体验如何影响Web运维</h2><p>随着新建公司对终端用户体验的关注，Web运维的角色正在发生变化。对线上事务的兴趣越来越浓，而且通过追踪分析，网站的所有事情都能够和业绩联系起来。</p><p><br></p><h3 id="将监控作为生命周期的一部分"><a href="#将监控作为生命周期的一部分" class="headerlink" title="将监控作为生命周期的一部分"></a>将监控作为生命周期的一部分</h3><p>网站现在已经有了很大的变化，随着敏捷和精简产品开发的流行，监控也需要跟上。所以来的综合监控脚本以及RUM配置也需如此。</p><p><br></p><h2 id="Web监控的未来"><a href="#Web监控的未来" class="headerlink" title="Web监控的未来"></a>Web监控的未来</h2><p>终端用户体验的监控正在兴起，变化很快。这是业务中最能进行分析、量化的部分，每周都能涌现出新的技术。</p><ul><li>从系统转向用户</li><li>以服务为中心的架构</li><li>云与监控</li><li>APIs与RSS消息</li></ul><p><br><br><br></p><hr><p><br></p><h1 id="将关系数据库用于Web的战略战术"><a href="#将关系数据库用于Web的战略战术" class="headerlink" title="将关系数据库用于Web的战略战术"></a>将关系数据库用于Web的战略战术</h1><p>如何为产品或应用程序设计一个良好的关系数据库架构，如何构建良好的互联网数据库架构？</p><p><br><br><br></p><h2 id="Web数据库需求"><a href="#Web数据库需求" class="headerlink" title="Web数据库需求"></a>Web数据库需求</h2><p>其实，大多数网站，相对而言，都只是小型数据库。<br>一些大型公司，可能才是一个大型数据库。</p><p><br></p><h3 id="一直在线"><a href="#一直在线" class="headerlink" title="一直在线"></a>一直在线</h3><p>数据库通常要7x24小时运行。<br>一直在线意味着维护和运维任务是很难做的，你不能简单地等到人们回家了然后将服务器卸下来，给硬件升级或备份。必须在不停机的情况下做这些事，而且很多情况下还不能给应用程序增加额外的负载。</p><p>话虽这么说，还是极少看到没有峰值时间的数据库。所以，还是有很好的机会，在数据库活动的间歇期来做备份或对数据库产生干扰工作。</p><p><br></p><h3 id="事务最多的工作负载"><a href="#事务最多的工作负载" class="headerlink" title="事务最多的工作负载"></a>事务最多的工作负载</h3><p>很多互联网应用都匹配以下模式：</p><ul><li>应用程序读远大于写</li><li>一次读一行和一次读多行是混合出现的</li><li>一般，写每次只影响一行</li></ul><p>这就是称之为的<strong>事务型负荷</strong>。</p><p><br></p><h3 id="简单数据，简单查询"><a href="#简单数据，简单查询" class="headerlink" title="简单数据，简单查询"></a>简单数据，简单查询</h3><p>网站的流量很大程度上决定了数据库的流量。</p><p>查询通常会满足下面的模式：</p><ul><li>读写用户表，一次一行</li><li>以区域或集合方式读取用户自己的数据</li><li>以区域或集合方式读取其他用户的数据</li><li>从该用户到其他用户的关联表中读取区域行</li><li>对该用户和其他用户的数据进行汇总与计数</li></ul><p>特别低，很多数据可以分区存储的事实说明了为什么<strong>分片(sharded)</strong>架构是可能的。</p><p><br></p><h3 id="可用性胜过一致性"><a href="#可用性胜过一致性" class="headerlink" title="可用性胜过一致性"></a>可用性胜过一致性</h3><p>从业务的角度看，最重要的事情是应用程序对用户的可用性。</p><p><br></p><h3 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h3><p>传统应用极少以天或周为周期构建和部署，但对于大量Web应用来说却是常态，这些Web应用是永远的Beta版。</p><p><br></p><h3 id="在线部署"><a href="#在线部署" class="headerlink" title="在线部署"></a>在线部署</h3><p>模式和数据的更新都做成代码形式，而且也有这样的框架，部署这些代码或将其回滚都很容易。</p><p><br></p><h3 id="由开发人员构建"><a href="#由开发人员构建" class="headerlink" title="由开发人员构建"></a>由开发人员构建</h3><p>大量的应用程序都是由开发人员做的，都没有一个高水平的DBA。</p><p><br><br><br></p><h2 id="典型的Web数据库是如何增长的"><a href="#典型的Web数据库是如何增长的" class="headerlink" title="典型的Web数据库是如何增长的"></a>典型的Web数据库是如何增长的</h2><p>大多数Web数据库的增长，都经历了一些列的架构变动。这些架构变动，在应用程序的整个生命周期中，相对而言都是可预知的。</p><p><br></p><h3 id="单台服务器"><a href="#单台服务器" class="headerlink" title="单台服务器"></a>单台服务器</h3><p>一般应用程序都是从单台服务器开始起步的。使用单台服务器有很多好处：</p><ul><li>数据只有一份拷贝，不存在你的数据是否正确或不同的问题</li><li>易于配置</li><li>便宜</li></ul><p>当然，缺点就是只有一台服务器！假如发生问题，没有冗余机器做故障转移。性能也会受影响。</p><p><br></p><h3 id="主服务器与单复制从服务器"><a href="#主服务器与单复制从服务器" class="headerlink" title="主服务器与单复制从服务器"></a>主服务器与单复制从服务器</h3><p>各数据库的复制技术都不一样，但一般而言，发生在主服务器上的数据修改，都要在从服务器上重复一遍，所以从服务器是主服务器数据的只读拷贝。依赖于数据库、系统负载以及执行的查询类型，从服务器不一定时刻与主服务器的数据完全一致(异步复制)。</p><p>增加一个复制从服务器有很多好处。数据库读请求可以在主、从指间分担，这称为读写分离。可以在从服务器上执行那些效率不高的查询、备份以及其它有可能对网站造成破坏的任务。</p><p><br></p><h3 id="主服务器与多复制从服务器"><a href="#主服务器与多复制从服务器" class="headerlink" title="主服务器与多复制从服务器"></a>主服务器与多复制从服务器</h3><p>大多数复制技术对两台或多台从服务器都没问题。<br>这样确实不错，而且随着从服务器越来越多，系统的数据库读取能力也越来越强。但这种增长不是无限制的，在很多层面上都会遇到收益递减的拐点。</p><ul><li>第一个层面就是应用程序中读对写的比例</li><li>第二个方式表示主服务器的写操作有多忙，其中你会看到收益递减的情况</li><li>第三个限制是操作成本和复杂性<ul><li>管理一群服务器，比管理单台服务器，要难得多也昂贵得多</li></ul></li><li>最后一个不足是应用的复杂性<ul><li>从单一数据源走向两个数据源，对于大多数应用程序而言，都是一个重大转移。应用程序不得不连接多个位置来进行查询。连接池、负载均衡器以及类似技术会在一定程度上保护你不受这种复杂性的困扰，但最终应用程序仍然要面对某种程度的复杂性</li></ul></li></ul><p>复杂性的一个最大来源是异步复制。异步意味着写操作先在主服务器上完成，随后送往从服务器执行。结果就是，从服务器总是拖后于主服务器某段时间，即时这段时间很短，但由此而造成的问题却很大。这可能会导致用户体验的不一致到数据完整性等一系列问题。</p><p>一般而言，不存在修复这个问题的神奇方法，应用程序必须自己处理这种延迟复制。<br>一种不错的简单技术是基于会话的分裂。用户做了更新之后，一段时间之内，该用户的所有查询都导向到主服务器。认为能够安全地查询从服务器所需的时间戳通常都存储在会话里。</p><p><br></p><h3 id="功能分区"><a href="#功能分区" class="headerlink" title="功能分区"></a>功能分区</h3><p>复制只对读有伸缩，对写没有。随着应用的规模越来越大，写操作的负载最终会大到系统无法处理。</p><p>功能分区(functional partitioning)，假如将某些部分与其余部分分开，则这些部分可以独立增长。<br>如，对于博客服务，可将评论功能分离到它自己的服务器中。</p><p>从运维角度来看，不同部分处在不同位置，则应用程序的功能也就能够单独对待。比起网站宕机，将评论改为只读模式，用户的反感可能要小得多。</p><p>这种做法的不利之处是增加了复杂性。应用程序需要从多个位置获取数据，而运维团队必须保持这些服务器正常运行。</p><p><br></p><h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><p>分片(sharding)，是将单一逻辑数据划分为多个片段并发布在多台服务器上的一种方式。所有的片段在逻辑上和功能上都是相同的，虽然这些片段分别包含数据的不同子集。</p><p>分片架构的主要设计目标和优势都是双重的。第一是允许写伸缩，因为负值无法实现写伸缩，假如应用程序的写操作草果了任何单台服务器能承受的程度，就必须要分片以减少写操作的负载，写操作的负载必须分担到完全隔离的服务器上，对一个分片的服务器的写操作不能复制到另一个分片服务器上。第二个目标和优势是，随着数据集的增长，能够增加更多容量的能力。</p><p>在分片架构中，许多查询也变得困难或不可能了。例如，需要访问所有客户数据的查询，通常都要在每个分片上分别执行，然后在应用程序代码中在聚合在一起。</p><p>分片架构还存在很多其他的不足和复杂性。</p><p><br></p><h3 id="缓存层"><a href="#缓存层" class="headerlink" title="缓存层"></a>缓存层</h3><p>缓存层的目的是阻止查询到达数据库。<br>标准的例子是：memcached，redis</p><p>缓存层的主要优势是极为容易，并且简单。</p><p>从运维的立场来看，需要考虑缓存服务器的冗余和可用性，就像为其他服务器所做的一样。</p><p><br><br><br></p><h2 id="对集群的渴望"><a href="#对集群的渴望" class="headerlink" title="对集群的渴望"></a>对集群的渴望</h2><p>在应用程序出现某种问题，或关于可用性或伸缩性的困难问题来的时候，人们的思想就会转向集群(cluster)，就像年轻人的思想转向春天和爱情一样。</p><p><br></p><h3 id="CAP定理以及ACID和BASE"><a href="#CAP定理以及ACID和BASE" class="headerlink" title="CAP定理以及ACID和BASE"></a>CAP定理以及ACID和BASE</h3><p>CAP原理： 一致性(Consistency)、可用性(Availability)、分区容错性(Partition Tolerance)。你可以具有两者，但不能三者皆具备。</p><p>ACID： 原子性(Atomicity)、一致性(Consisitency)、分离性(Isolation)、持续性(Durability)。</p><p>BASE: 根本可用性(basically available)、软状态(soft state)、最终一致性(eventual consistency)。</p><p><br></p><h3 id="MySQL集群的状态"><a href="#MySQL集群的状态" class="headerlink" title="MySQL集群的状态"></a>MySQL集群的状态</h3><p>MySQL Cluster是将MySQL服务器作为一个完全不相干的、称为NDB的软件的前端。NDB的意思是网络数据库，这是一个极快、分布式、无共享、高可用的数据库。</p><p><br></p><h4 id="DRDB和Heartbeat"><a href="#DRDB和Heartbeat" class="headerlink" title="DRDB和Heartbeat"></a>DRDB和Heartbeat</h4><p>DRDB在服务器之间对块设备进行复制，将修改的块通过网络复制给备机。如果主服务器失效了，则Heartbear激活备机。</p><p>从运维的角度来说，DRDB非常棒，装上就能工作，但却不能满足在线用户的需求。它不是为满足典型Web应用的高可用性而设计的。相反，它非常适合用户保证你不丢失数据的情况，也就是说，它关注的焦点是一致性而不是可用性。</p><p>另一个问题就是基于DRDB的集群不能改进性能。Web应用需要的是正常工作时间和性能，而基于DRDB的集群是以性能为代价来提供一致性，而一旦失效，宕机时间就会很长。</p><p><br></p><h4 id="主服务器到主服务器的复制管理器-MMM"><a href="#主服务器到主服务器的复制管理器-MMM" class="headerlink" title="主服务器到主服务器的复制管理器(MMM)"></a>主服务器到主服务器的复制管理器(MMM)</h4><p>MMM是一系列的Perl脚本，管理复制和虚拟IP地址，从而为MySQL提供一个伪集群(pseudocluster)。</p><p>应用程序连接到虚拟IP而不是服务器的真实IP。服务器发生问题时，MMM将该服务器的虚拟IP移动到另外的可用服务器上。它也可以将复制从服务器从失效的主服务器移动到正常的主服务器上。MMM允许手工将服务器离线执行维护任务。</p><p><br></p><h4 id="带复制的Heartbeat"><a href="#带复制的Heartbeat" class="headerlink" title="带复制的Heartbeat"></a>带复制的Heartbeat</h4><p>如果MMM无法完美地管理复制和虚拟IP地址，heartbeat考虑以下？</p><p>不管怎么说，复制延迟仍然是一个复杂的问题。必须在应用程序层解决这一部分问题。</p><p><br></p><h4 id="基于代理的解决方案"><a href="#基于代理的解决方案" class="headerlink" title="基于代理的解决方案"></a>基于代理的解决方案</h4><p>有一种可供选择的方案，基于代理(proxy)，需要人工介入，MySQL Proxy位于前端。HAProxy是另一个流行的方案。</p><ul><li>MySQL Proxy，事实上能够理解MySQL的协议，并且拦截、解释以及传递消息</li><li>HAProxy，只是传递TCP流，并不对内部进行窥探</li></ul><p>基于代理的解决方案仍然没有入人们所愿的那样解决复制延迟问题，而且还引入了单点故障，并且影响性能。</p><p><br></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>前面讨论这么多，简而言之，就是没有一个完美的、万能的答案。</p><p>最好的数据库架构是为了应用而建的，期待集群所承担的指责分布在数据库、网络以及应用程序上，有运维的适度介入，以及起粘合作用的软件，就能把各部分整合在一起。</p><p><br><br><br></p><h2 id="数据库战略"><a href="#数据库战略" class="headerlink" title="数据库战略"></a>数据库战略</h2><p>如何选择一个对于大量的互联网架构来说都能够运转良好的架构。</p><p><br></p><h3 id="架构需求"><a href="#架构需求" class="headerlink" title="架构需求"></a>架构需求</h3><p>最好定义你的需求，特别是，把那些超出你的范围从而成为别人的问题的内容写成文档。</p><p><br></p><h3 id="有把握的架构"><a href="#有把握的架构" class="headerlink" title="有把握的架构"></a>有把握的架构</h3><p>以下数据库架构，是比较有把握的。</p><p><br></p><ul><li><p><strong>单主服务器，多从服务器</strong><br>这种主-从架构很难自动实现主服务器的故障转移，因为主服务器和从服务器的配置是不一样的，所以，一旦主服务器失效，则必须手动进行失效转移。</p></li><li><p><strong>主服务器-主服务器复制，外加从服务器</strong><br>这种方式实际上与一台主服务器加多台从服务器的架构一样，但有时候主服务器本身也成为从服务器。这种架构的优点是，在协同的主服务器之间更容易实现失效转移和失效转回。缺点是，向两台主服务器进行写入存在风险，会导致数据库存在某种不一致性，也很难解决。</p></li><li><p><strong>功能分区</strong><br>随着应用的增长，将应用中某些部分转移到特定的服务器或特定集群上。</p></li><li><p><strong>失效转移和负载均衡</strong><br>使用负载均衡器，或者浮动的虚拟IP地址。</p></li><li><p><strong>ACID仍然是有意义的</strong><br>高可用性要求快速而可靠的灾难恢复。</p></li><li><p><strong>使用正确的工具</strong><br>不要使数据库处于关键路径上，不要讲应用程序的静态信息放入数据库中。数据库应该存储数据，而非应用程序本身。将数据库简单化，因为这是最难于伸缩，也是最昂贵的资源。但是，对于Web应用，还是应该分离应用程序和数据库，将数据库仅用来存储和检索数据。</p></li></ul><p><br></p><h3 id="有风险的架构"><a href="#有风险的架构" class="headerlink" title="有风险的架构"></a>有风险的架构</h3><p>建议不要使用这些架构</p><p><br></p><ul><li><p><strong>分片</strong><br>除非不得已，不要分片。<br>对于一个中等规模的应用，将其构建在数百台低档机器的分片架构上，试图提供无线伸缩能力，是非常愚蠢的。其实，只需购买几台足够好的机器，在工程上多做一些考虑就足够了。<br>分片架构比你预想要昂贵的多，甚至在短期内也是如此，长期则一定如此<br>分片问题设计过度设计的风险</p></li><li><p><strong>写入多台主服务器</strong><br>不要将多台服务器配置为可写，这会造成数据一致性问题。非常麻烦。</p></li><li><p><strong>多级复制</strong><br>尽量不要使用多级复制。<br>使用一主多从而不是从的从的从服务器，要简单的多。孙子辈的从服务器和重孙辈的从服务器很难管理。</p></li><li><p><strong>环形复制</strong><br>避免使用环形复制，其失效情形，不管是数量还是复杂度，都打得超乎想象。</p></li><li><p><strong>依赖于DNS</strong><br>DNS很脆弱，依赖DNS最终会自食苦果。</p></li></ul><p><br><br><br></p><h2 id="数据库战术"><a href="#数据库战术" class="headerlink" title="数据库战术"></a>数据库战术</h2><p>数据库战术，即为保持数据库基础架构的可靠性而做的日常运维任务。</p><p><br></p><h3 id="在从服务器上做备份"><a href="#在从服务器上做备份" class="headerlink" title="在从服务器上做备份"></a>在从服务器上做备份</h3><p>一些小提示：</p><ul><li>在备份上不要拖延，做备份其实并不难</li><li>做事不要追求完美，而要追求可恢复</li><li>至少对于可接受的数据损失、可接受的宕机时间、数据持续策略以及安全需求要形成文档</li><li>对恢复过程要进行练习并形成文档，恢复比备份要重要的多</li><li>对于备份成功与否，要进行外部验证，不要依赖于作业自身对你的提示</li></ul><p>可以专门配置一台复制(备份)从服务器，将复制延迟一段时间——如30min，以避免主服务器上的某些误操作——如<code>DROP table</code>。</p><p><br></p><h3 id="在线模式修改"><a href="#在线模式修改" class="headerlink" title="在线模式修改"></a>在线模式修改</h3><p>将表做的小一点是很有好处的。</p><p>一般的想法是设置主-主复制对，但只有一台服务器可写。在只读上执行更新，但不要复制到可写服务器上。更新一旦完成，则用正常方式使应用程序实现失效转移。这样，读和写便实现了角色转换。然后在另一台服务器上重复执行风险。这就实现了对应用程序隐含宕机时间的目的。</p><p><br></p><h3 id="监控和图示"><a href="#监控和图示" class="headerlink" title="监控和图示"></a>监控和图示</h3><p>构建用于测量和监控的系统是很值得做的事情，这些系统是基础架构非常重要的核心内容。</p><p><br></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>一般步骤是，在产生麻烦的时间内手机详细的诊断数据，消除掉可能的原因，集中在问题的现象上。<br>问题往往是服务器产生大量负载，而这通常是由于糟糕的查询产生的。</p><p>MySQL所谓的慢查询日志(slow query log)可以回答这个问题，不仅是因为日志收集了慢查询的信息，而且对于每个查询还有时间信息。</p><p>加入性能问题不是查询引起的，则需要对MySQL本身进行性能测试。</p><p><br></p><h3 id="归档和删除数据"><a href="#归档和删除数据" class="headerlink" title="归档和删除数据"></a>归档和删除数据</h3><p>从一开始就要规划归档和删除不活动或不需要的数据，这样有助于减小“工作集”的大小。</p><ul><li>将极不活跃的用户数据移动到慢速服务器，或仅仅将用户设置为过期。当用户登录或重新激活时，在倒回到正常表中</li><li>另外一类可归档或删除的数据是陈旧的历史数据，或将历史数据移到另外的服务器上</li></ul><p><br><br><br></p><h2 id="结语-4"><a href="#结语-4" class="headerlink" title="结语"></a>结语</h2><p>尽最大可能将数据库架构建立在逻辑的基础上，而不是做一些看起来很酷的事情。</p><p>努力使系统保持小巧，不要大——而当不得不变大时，也要保持在能够掌控的范围内。要确定应用程序的真正需求，尽可能满足这些需求。要尽早及经常做缓存，但不要尽早及经常做分片。</p><p>最重要的，请记住：<strong>做备份</strong>。</p><p><br><br><br></p><hr><p><br></p><h1 id="如何优雅地失败：事后处理的艺术与科学"><a href="#如何优雅地失败：事后处理的艺术与科学" class="headerlink" title="如何优雅地失败：事后处理的艺术与科学"></a>如何优雅地失败：事后处理的艺术与科学</h1><p>宕机意味着实际的金钱损失。<br>客户才不会管这些故障，他们要的就是可靠性。互联网已经变得非常重要，宕机成本也越来越高。</p><p>但正如一个刚毕业的年轻人一样，只是知道你需要成长，但并没有告诉你如何去成长。我们需要将失败转化为学习经验。</p><p>保证网站稳定的首要事情，就是建立一个系统化的事后分析过程。通过阻止事故的重现以及改进处理事故的方法，使得系统稳定之后，事后分析能够让你全面地理解事故的本性。</p><p>例行的时候分析，是对运维的复杂问题进行科学分析的最贴近的方法。通过收集实际证据，可将有限的资源集中于解决产生问题的实际原因上。</p><p><br><br><br></p><h2 id="什么是事后分析"><a href="#什么是事后分析" class="headerlink" title="什么是事后分析"></a>什么是事后分析</h2><p>事后分析至少要包含这些内容：</p><ul><li>事故描述</li><li>根本原因描述</li><li>事件是如何修复的</li><li>用于解决事故的行动的时间表</li><li>事故是如何影响用户的</li><li>纠正或改正动作</li></ul><p>事后分析时，与事故明显有关的人员都要同时到场，对事故的真实情况作出共同的描述，从而正确地采取行动。</p><p>减少事故的修复时间，就跟消除事故本身一样重要。</p><p>对问题赋予严重级别，将帮助你按照轻重缓急来处理纠正项，而且对于活跃事件的评估也是有用的。</p><p>事故严重级别：</p><ul><li>严重影响大批用户</li><li>网站降级运行、性能问题或很难应对的功能故障</li><li>对客户影响不大或易于应对</li></ul><p><br><br><br></p><h2 id="什么时候引入事后分析"><a href="#什么时候引入事后分析" class="headerlink" title="什么时候引入事后分析"></a>什么时候引入事后分析</h2><p>在事故处理完成之后，就应该进行事故分析。事后分析过程应该最终使用户获益，而不应该在恢复服务的过程中进行。</p><p><br><br><br></p><h2 id="进行事后分析"><a href="#进行事后分析" class="headerlink" title="进行事后分析"></a>进行事后分析</h2><p>开始事后分析时，要明确基本规则，要明确告知参与事后分析的相关各方，事后分析不是指责谁(人们害怕这样的会议变成政治迫害)，主要目的是为了使类似事件不在重复发生。问题不可避免，重要的是我们能够从错误中学到教训。<br>事情一旦清楚之后，就可以开始讨论为了使类似事情不在发生，需要做些什么。确保相关各方对各自领域都能得出补救的办法。但切记不可矫枉过正！</p><p>一旦有了一套纠正措施，要将其记录在案，包括执行人员和完成日期。</p><p><br><br><br></p><h2 id="事后分析的后续工作"><a href="#事后分析的后续工作" class="headerlink" title="事后分析的后续工作"></a>事后分析的后续工作</h2><p>对纠正措施必须进行追踪，直到执行完成。</p><p>一些网站可操作性：</p><ul><li>消除单点故障</li><li>容量规划</li><li>监控</li><li>发布管理</li><li>运维架构复审</li><li>配置管理</li><li>随时待命和提升过程</li><li>不稳定的组件</li></ul><p><br><br><br></p><h2 id="结语-5"><a href="#结语-5" class="headerlink" title="结语"></a>结语</h2><p>最后，对于避免事故的发生，事后分析是最有用的方法。在一个快速变化的环境中，发生问题时可以理解的，但问题重复发生却是不能原谅的。花些时间高清楚问题的实质，从而确定、记录以及实施高强度的纠正措施，就可以避免事故的重复发生。</p><p><br><br><br></p><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p>数据是一项最重要、不可替代的商业资产。</p><p><br></p><h2 id="数据资产的库存"><a href="#数据资产的库存" class="headerlink" title="数据资产的库存"></a>数据资产的库存</h2><p>在开始一项新的存储工作时，首要的事情是要知道数据存在哪里。<br>对于不了解的数据，你是无法进行保护的。</p><p><br><br><br></p><h2 id="数据的保护"><a href="#数据的保护" class="headerlink" title="数据的保护"></a>数据的保护</h2><p>数据保护对所有系统都是很重要的。<br>良好的数据保护实践有助于处理范围广泛的情形，从还原被用户偶然删除的文件，到从灾难事件中恢复。</p><p>为了对数据中心问题提供完全的防护，重要的是将关键数据复制到不同的地点。</p><p>如今大多数的存储系统都有某种类型的复制技术。复制通常有两种形式：同步和异步。</p><p><br><br><br></p><h2 id="容量规划"><a href="#容量规划" class="headerlink" title="容量规划"></a>容量规划</h2><p>在确保有效的的数据保护之后，作为一名存储专业人员，容量规划就是第二项最重要的职责。<br>规划在前，确保应用和服务有足够的资源来运行和成长，不至于碰到天花板，这是必须的。</p><p>总是确保有足够的空间以应对突然的爆炸性增长，以及软件开发方面出现的延迟。</p><p><br><br><br></p><h2 id="存储大小的变化"><a href="#存储大小的变化" class="headerlink" title="存储大小的变化"></a>存储大小的变化</h2><p>存储是很昂贵的，这是现代基础框架中成本最高的组件。正是由于这个原因，对于存储上的开支进行明智地规划是很重要的。</p><p>存储需求要点：</p><ul><li>应用是什么</li><li>应用位于哪里</li><li>存储的是什么类型的数据</li><li>需要共享存储吗</li><li>是否需要特殊的访问协议</li><li>典型的文件大小是多少</li><li>数据是压缩的吗</li><li>如果描述工作负载</li><li>需要批处理操作吗</li><li>工作负荷是大部分用于读、写、读写</li><li>工作负荷是大部分顺序、还是大部分随机、还是两者</li><li>快照是怎么安排的</li><li>快照的一致性问题</li><li>存储容量在6个月、12个月、18个月的计划是什么</li><li>工作负荷在6个月、12个月、18个月的计划是什么</li><li>复制策略是什么</li><li>业务连续性规划是什么</li><li>可用性需求是什么</li><li>备份的频度是什么</li><li>备份保持的计划是什么样的</li><li>归档策略是什么</li><li>综合性需求是什么</li><li>加密需求是什么</li><li>…</li></ul><p><br><br><br></p><h2 id="结语-6"><a href="#结语-6" class="headerlink" title="结语"></a>结语</h2><p>数据是最宝贵的业务资产，且是不可替换的。</p><p><br><br><br></p><hr><p><br></p><h1 id="非关系数据库"><a href="#非关系数据库" class="headerlink" title="非关系数据库"></a>非关系数据库</h1><p>应用的数据存储层的伸缩是很难的。不管用的是什么数据库技术，随着数据量和事务数量的增长，就需要做出改变以适应新的负荷。</p><p>SQL数据库的可伸缩性通常归结为四件事：<strong>缓存、查询优化、购买新硬件、数据库分片。</strong></p><p><br><br><br></p><h2 id="NoSQL数据库概览"><a href="#NoSQL数据库概览" class="headerlink" title="NoSQL数据库概览"></a>NoSQL数据库概览</h2><p>NoSQL共生系统，可将数据库划分为5大类：</p><ul><li>纯粹的键值</li><li>数据结构</li><li>图</li><li>面向文档</li><li>高度分布</li></ul><p>每种类别的数据库都面向不同的应用情况，每个类别也都做了不同的这种。</p><p><br><br><br></p><h3 id="纯粹的键值"><a href="#纯粹的键值" class="headerlink" title="纯粹的键值"></a>纯粹的键值</h3><p>如： Tokyo Cabinet、 Kyoto Cabinet、MemcacheDB</p><p>正是它们的简单性定义了这组数据库。向数据库存入一个键和一个值，然后用同一个键查询数据库，则会得到相同的值。没有结构或类型系统——通常所处理的只是字节或字符串。因为这种简单性，这些数据库的开销极小，所以非常块。事实上，这些数据库通常都是实现为磁盘上的B树或哈希表。</p><p><br><br><br></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构数据库对键值数据库做了些修改，数据结构数据库将其存储为特定的数据结构，如<strong>列表、集合、哈希表等。</strong>有了这些附加的结构，就可以对值执行一些原子操作。可以对数据库执行在应用程序中对数据结构进行的各种操作。</p><p>Redis默认是在内存中(in memory)存储其全部内容，只是周期性地将内容的快照存储到磁盘。这使得Redis出奇的快，但假如数据库奔溃了，就会对数据造成一些损失，同时也意味着必须有足够的RAM存储这个数据库。</p><p><br><br><br></p><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>图数据库几乎就是数据结构数据库的一个特定实现，因为图本就是一种数据库。区别是图数据库不再是基于键值，数据是作为图的节点和边存储的。图数据库不是用键来查询值，而是给出根节点的句柄，然后就可以遍历整个图以找到需要的节点或边。</p><p>图数据库的优势：存储图或树形的数据。如一个社交图(social graph)。</p><p>常见图数据库包含：<strong>Neo4j、HyperGraphDB、InfoGrid、VertexDB。</strong></p><p><br><br><br></p><h2 id="面向文档"><a href="#面向文档" class="headerlink" title="面向文档"></a>面向文档</h2><p>面向文档的数据库又类似于键值数据库，但值不再是字节、字符串、列表、集合，而是<strong>文档</strong>。<br>文档作为JSON(BSON)对象存储，本质上是一种哈希表或字典。这些值都想相同的结构，意味着可以用查询来探测这种结构，并只返回所需要的文档。这种查询能力是建立在通过键来查找文档的能力之上的。</p><p>常见面向文档数据库： <strong>MongoDB、CouchDB</strong>。</p><p><br><br><br></p><h3 id="高度分布"><a href="#高度分布" class="headerlink" title="高度分布"></a>高度分布</h3><p>高度分布的数据库多少有些不同——有些本质上更接近于键值存储，其它则像大型的多维哈希图。</p><p><strong>HBase、Cassandra</strong>是高度分布式数据库。</p><p><br><br><br></p><h2 id="某些细节"><a href="#某些细节" class="headerlink" title="某些细节"></a>某些细节</h2><p>注意这些数据库之间的一些相似性，以及所做决策是如何影响系统可操作性的。</p><p><br><br><br></p><h3 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a>Cassandra</h3><p>Cassandra是一个高度分布数据库。</p><p>它有一些关键概念：</p><ul><li>认为写比读更难于伸缩，所以它专门为写操作做了大量优化</li><li>认为不应该存在单一故障点<br>任何数据可以写入到集群内的任何一个节点，而且读也一样。任何接收到请求的节点都可以，并且将会吧请求转发到合适的节点。</li></ul><p><br><br><br></p><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><p>HBase选择一致性和可用性作为自己的核心价值。这样的结果，导致了在某些网段、集群无法实现优雅的恢复。作为这种牺牲的补偿，HBase有很强的一致性，保证写入一结束，写入的值就立即可以读取。</p><p><br><br><br></p><h3 id="Riak"><a href="#Riak" class="headerlink" title="Riak"></a>Riak</h3><p>Riak实现了向量时钟(vector clocks)，一些高度分布的数据库都没有实现——这些数据库选择了依赖于更为简单的基于时间戳的技术。</p><p>向量时钟是一种分布式系统中的机制，用于生成偏序事件。使用向量时钟，解决发生在两个独立的不同节点中的相同值的冲突就变得非常简单。从Riak客户端的角度来看，每个客户实例在Riak集群中执行一个动作时，都应该有一个唯一的标识(token)(连同其接收到的向量时钟一起)。然后，客户读取数据时，就可以看到向量时钟和数据值，使用包含的信息连接两个结果，从而将正确的版本写会数据库。</p><p>Riak也不存在单一故障点。</p><p><br><br><br></p><h3 id="CouchDB"><a href="#CouchDB" class="headerlink" title="CouchDB"></a>CouchDB</h3><p>CouchDB对世界的看法是一致的：所有东西都是文档，而且都通过RESTful HTTP来访问。<br>CouchDB可以在数据库中直接存储静态媒体，它实际上是允许将整个应用程序都存储在数据库中的。<br>CouchDB的数据模型很新颖，即数据以一种只附加的B树进行存储。</p><p><br><br><br></p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>MongoDB是一个面向文档的数据库，文档格式使用BSON——一种类似于JSON对象的二进制规范。MongoDB是用C++写的，因而有很高的性能。</p><p>所有能用SQL做的事情也能用MongoDB查询表达式来做。<br>MongoDB与以SQL数据库相同的方式支持索引，同时这些索引也强制了唯一性。</p><p>MongoDB有一个<code>mongostat</code>命令来查看数据库状态。</p><p>有好几种MongoDB备份方式：</p><ul><li>停掉数据库，复制数据文件</li><li>锁定数据库写入，复制数据文件，解除锁定</li><li>使用<code>mongodump</code>，将数据库转存到一个二进制文件中</li><li>可以设置一个从服务器，在从服务器上进行备份，而不是主服务器上</li></ul><p><br><br><br></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis(remote dictionary server)，远程字典服务器。通过<code>INFO</code>可查看相关信息。</p><p>不管你将Redis运行在快照模式(rdb)还是只附加模式(aof)上，都可以简单地调用<code>rsync</code>实现备份。</p><p><br><br><br></p><hr><p><br></p><h1 id="如何高枕无忧"><a href="#如何高枕无忧" class="headerlink" title="如何高枕无忧"></a>如何高枕无忧</h1><p>企业持续规划(Business Continuity Planning)BCP。<br>BCP简单最简单来说，就是<strong>什么都是两份</strong>。当然，两套设备间的失效转移必须完全自动化。</p><p><br><br><br></p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>集中于BCP计划的高可用部分：保证站点正常工作。即使在高可用性领域，也有各种各样的技术，从<strong>热/热(Hot/Hot)、热/暖(Hot/Warm)、热/冷(Hot/Cold)到灾难恢复</strong>。</p><ul><li>热/热是高可用性的最高级别。用户可以从任意的数据中心使用全部的应用程序。读和写可以发生在任何地方。折让自动的故障转移变得非常简单，但它不是万能的。你想必须思考如何处理数据一致性的问题。</li><li>热/暖是一种很好的方式，如果你不能容忍数据的不一致性的话。很多应用有大量的读操作，仅偶尔写一下(但很重要)。在这种情况下，区别处理这两种操作是有意义的。</li><li>热/冷让我害怕。这种架构将读写流量送到单一地点，而让另一个相同的部署在遥远的地平线上闲置。它容易建立，但价值很低。</li><li>灾难恢复是最差的技术，本质上是雾件(vaporware)。它的本意不是在平常的时候保护你，而是在大的灾难发生时给你提供重建的选项。</li></ul><p><br><br><br></p><h2 id="影响持续时间对事件持续时间"><a href="#影响持续时间对事件持续时间" class="headerlink" title="影响持续时间对事件持续时间"></a>影响持续时间对事件持续时间</h2><p>当灾难来袭时，所有你需要考虑的是将用户流量以最快速度转移，离开问题区域。你需要立即降低影响。不要过于担心根源问题的修复，一旦将影响制止住，会有很多时间来解决这次事故。</p><p>怎样才能将流量从问题站点转出呢？通常方案是使用<strong>全局负载均衡(Global Server Load Balancing)GSLB</strong>。这实际是一个动态的授权DNS服务器，他能够根据相关因素对同一域名给出不同的IP地址。</p><p><br><br><br></p><h2 id="数据中心数量"><a href="#数据中心数量" class="headerlink" title="数据中心数量"></a>数据中心数量</h2><p>我们知道数据中心会失效，所以你至少需要两个。这就够了吗？三个或更多是不是会好一些？这取决于三个因素，<strong>成本、复杂性和性能</strong>。</p><p><br><br><br></p><h2 id="逐渐失效"><a href="#逐渐失效" class="headerlink" title="逐渐失效"></a>逐渐失效</h2><p>当数据中心出现局部问题(partial problem)时，不要等它解决从而希望你不需要撤离，立即导出复制数据！</p><p><br><br><br></p><h2 id="不信赖任何人"><a href="#不信赖任何人" class="headerlink" title="不信赖任何人"></a>不信赖任何人</h2><p>正如最可靠的数据中心也会时不时宕机，你可以预期即使最好的第三方供应商，偶尔也会有问题。就是你不能完全信赖一个服务提供商。</p><p><br><br><br></p><h2 id="故障测试转移"><a href="#故障测试转移" class="headerlink" title="故障测试转移"></a>故障测试转移</h2><p>通过早期和经常的测试，获取经验，以便当灾难袭来时，不会手忙脚乱，而是立即做出正确的事情。</p><p><br><br><br></p><h2 id="监控和历史模式"><a href="#监控和历史模式" class="headerlink" title="监控和历史模式"></a>监控和历史模式</h2><p>你要知道日、周、月的流量模式。如果清楚正常流量中的不寻常处，你就不会在切换、迁移或升级时感到惊讶。确保监控包括周对周的图形和趋势。</p><p><br><br><br></p><h2 id="高枕无忧"><a href="#高枕无忧" class="headerlink" title="高枕无忧"></a>高枕无忧</h2><p>如果你能够事先有计划，能够解决大的问题，并且在日常工作中操练故障转移，则平台任何部分的失效将会变成容易处理的事件，而不是危机。</p><p><br><br><br></p><hr><p><br></p><p>March 25, 2018 11:32 AM</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《网站运维：保持数据实时的秘籍》(Web Operations: Keeping the Data on Time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="Database" scheme="https://zhang21.github.io/tags/Database/"/>
    
      <category term="Operations" scheme="https://zhang21.github.io/tags/Operations/"/>
    
  </entry>
  
  <entry>
    <title>《经济学原理》读书笔记</title>
    <link href="https://zhang21.github.io/2018/02/23/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhang21.github.io/2018/02/23/经济学原理读书笔记/</id>
    <published>2018-02-23T08:13:58.000Z</published>
    <updated>2018-11-08T09:37:49.506Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>《经济学原理-微观/宏观》 曼昆： <a href="https://book.douban.com/subject/26435630/" target="_blank" rel="noopener">https://book.douban.com/subject/26435630/</a></li></ul><p><br><br><br></p><a id="more"></a><hr><p><br></p><h1 id="学习指南图"><a href="#学习指南图" class="headerlink" title="学习指南图"></a>学习指南图</h1><p><strong>微观经济学:</strong><br>第1篇到第7篇，即第1章到第22章。</p><ul><li>第1篇： 导言<ul><li>第1章： 经济学十大原理</li><li>第2章： 像经济学家一样思考</li><li>第3章： 相互依存性和贸易的好处</li></ul></li><li>第2篇： 市场如何运行<ul><li>第4章： 供给与需求的市场力量</li><li>第5章： 弹性及其应用</li><li>第6章： 供给、需求和政府策略</li></ul></li><li>第3篇： 市场和福利<ul><li>第7章： 消费者、生产者与市场效率</li><li>第8章： 应用： 赋税的代价</li><li>第9章： 应用： 国际贸易</li></ul></li><li>第4篇： 公共部门经济学<ul><li>第10章： 外部性</li><li>第11章： 公共物品和公共资源</li><li>第12章： 税制的设计</li></ul></li><li>第5篇： 企业行为与产业组织<ul><li>第13章： 生产成本</li><li>第14章： 竞争市场上的企业</li><li>第15章： 垄断</li><li>第16章： 垄断竞争</li><li>第17章： 寡头</li></ul></li><li>第6篇： 劳动市场经济学<ul><li>第18章： 生产要素市场</li><li>第19章： 收入与歧视</li><li>第20章： 收入不平等与贫困</li></ul></li><li>第7篇： 深入研究的论题<ul><li>第21章： 消费者选择理论</li><li>第22章： 微观经济学前沿</li></ul></li></ul><p><br></p><p><strong>宏观经济学：</strong><br>从第8篇到第13篇，即第23章到第36章。</p><ul><li>第8篇： 宏观经济学的数据<ul><li>第23章： 一国收入的衡量</li><li>第24章： 生活费用的衡量</li></ul></li><li>第9篇： 长期中的真实经济<ul><li>第25章： 生产与增长</li><li>第26章： 储蓄、投资和金融体系</li><li>第27章： 金融学的基本工具</li><li>第28章： 失业</li></ul></li><li>第10篇： 长期中的货币与物价<ul><li>第29章： 货币制度</li><li>第30章： 货币增长与通货膨胀</li></ul></li><li>第11篇： 开放经济的宏观经济学<ul><li>第31章： 开放经济的宏观经济学基本概念</li><li>第32章：开放经济的宏观经济理论</li></ul></li><li>第12篇： 短期经济波动<ul><li>第33章： 总需求与总供给</li><li>第34章： 货币政策和财政政策对总需求的影响</li><li>第35章： 通货膨胀与失业之间的短期权衡和取舍</li></ul></li><li>第13篇： 最后的思考<ul><li>第36章： 宏观经济政策的六个争论问题</li></ul></li></ul><p><br><br><br></p><p>阿尔弗雷德·马歇尔在《经济学原理》中写道<strong>经济学是一门研究人类一般生活事务的学问</strong>。</p><p>应当学习经济学的原因如下：</p><ul><li>有助于你理解你所生活在其中的世界</li><li>使你更加精明的参与经济</li><li>使你更好地理解经济政策的潜力与局限性</li><li>经济学原理可以运用到生活中的方方面面</li></ul><p><br></p><p>经济学领域的伟大洞见，如亚当·斯密的<strong>看不见的手</strong>的概念、大卫·李嘉图的<strong>比较优势原理</strong>，以及约翰·梅纳德·凯恩斯的<strong>总需求理论</strong></p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><h2 id="经济学十大原理"><a href="#经济学十大原理" class="headerlink" title="经济学十大原理"></a>经济学十大原理</h2><p><strong>经济(economy)</strong>这个词来源于希腊语oikonomos，意思是“管理一个家庭的人”。</p><p>一个家庭面临着许多决策，同样，一个社会也面临着许多决策。</p><p><br></p><p>由于资源是稀缺的，社会资源的管理就尤为重要。</p><ul><li><p><strong>稀缺性(scarcity):</strong><br>社会资源的有限性</p></li><li><p><strong>经济学(economics):</strong><br>研究社会如何管理自己的稀缺资源</p></li></ul><p><br><br><br></p><h3 id="人们如何做出决策"><a href="#人们如何做出决策" class="headerlink" title="人们如何做出决策"></a>人们如何做出决策</h3><p>由于一个经济的行为反映了组成这个经济的个人的行为，所以个人就需要做出决策。</p><p><br></p><h4 id="人们面临权衡取舍"><a href="#人们面临权衡取舍" class="headerlink" title="人们面临权衡取舍"></a>人们面临权衡取舍</h4><ul><li><p><strong>效率(efficiency):</strong><br>社会能从其稀缺资源中得到最大利益的特性</p></li><li><p><strong>平等(equlity):</strong><br>经济成果在社会成员中平均分配的特性</p></li></ul><p><br></p><p>作出决策就是要求我们在一个目标与另一个目标之间进行权衡取舍。</p><p>当人们组成社会时，他们会面临不同的权衡取舍。经典的权衡取舍是在<strong>大炮与黄油</strong>之间。</p><p>社会面临的另一种权衡取舍是在效率与平等之间。</p><p>然而，认识到人们面临权衡取舍本身并没有告诉我们人们将会或应该做出什么决策。</p><p><br><br><br></p><h4 id="某种东西的成本是为了得到这种东西所放弃的东西"><a href="#某种东西的成本是为了得到这种东西所放弃的东西" class="headerlink" title="某种东西的成本是为了得到这种东西所放弃的东西"></a>某种东西的成本是为了得到这种东西所放弃的东西</h4><ul><li><strong>机会成本(opportunity cost):</strong><br>为了得到某种东西所必须放弃的东西</li></ul><p>由于人们面临着权衡取舍，所以做决策就需要比较可供选择的行动方案的成本与收益。</p><p><br><br><br></p><h4 id="理性人考虑边际量"><a href="#理性人考虑边际量" class="headerlink" title="理性人考虑边际量"></a>理性人考虑边际量</h4><ul><li><p><strong>理性人(rational people):</strong><br>系统而有目的地尽最大努力实现其目标的人</p></li><li><p><strong>边际变动(marginal change):</strong><br>对行动计划的微小增量调整</p></li><li><p><strong>边际成本(marginal cose):</strong><br>对行动计划调整所带来的成本</p></li><li><p><strong>边际收益(marginal benefit):</strong><br>对行动计划调整所带来的的收益</p></li><li><p><strong>边际决策(marginal decision):</strong><br>选择哪种决策</p></li></ul><p><br><br><br></p><h4 id="人们会对激励做出反应"><a href="#人们会对激励做出反应" class="headerlink" title="人们会对激励做出反应"></a>人们会对激励做出反应</h4><ul><li><strong>激励(incentive):</strong><br>引起一个人做出某种行为的某种东西</li></ul><p><br></p><p>在经济学研究中，激励起着中心作用。</p><p>市场上的高价格提供了买者少消费而卖者多生产的激励。<br>价格对消费者和生产者行为的影响对于市场经济如何配置稀缺资源是至关重要的。</p><p>政府决策者决不能忘记激励，因为许多政策改变了人们面临的成本或收益，从而也改变了人们的行为。</p><p>在分析任何一种政策时，我们不仅应该考虑它的直接影响，而且还应该考虑它通过激励产生的不太明显的间接影响。如果政策改变了激励，那就会使人们改变自己的行为。</p><p><br><br><br></p><h3 id="人们如何互相影响"><a href="#人们如何互相影响" class="headerlink" title="人们如何互相影响"></a>人们如何互相影响</h3><p>我们的许多决策不仅影响了我们自己，还会影响其他人。</p><p><br></p><h4 id="贸易可以使每个人的状况都变得更好"><a href="#贸易可以使每个人的状况都变得更好" class="headerlink" title="贸易可以使每个人的状况都变得更好"></a>贸易可以使每个人的状况都变得更好</h4><p>思考国家之间的竞争的想法很容易产生误导。美国与中国之间的贸易并不像体育比赛一样，一方赢而另一方输。实际上，事实正好相反：两国之间的贸易可以使两个国家的状况都变得更好。</p><p>贸易使每个人都可以专门从事自己最擅长的活动，无论它是耕种、做衣服还是盖房子。通过与其他人的贸易，人们可以以较低的成本获得各种各样的物品和服务。</p><p>国家和家庭一样，也能从相互贸易中获益。贸易可以使各国可以专门从事自己最擅长的活动，并享有种类更多的物品与服务。美国人和英国人、法国人一样，在世界经济中既是我们的竞争对手，又是我们的伙伴。</p><p><br><br><br></p><h4 id="市场通常是组织经济活动的一种好方法"><a href="#市场通常是组织经济活动的一种好方法" class="headerlink" title="市场通常是组织经济活动的一种好方法"></a>市场通常是组织经济活动的一种好方法</h4><ul><li><p><strong>市场经济(market economy):</strong><br>当许多企业和家庭在物品与服务市场上相互交易时，通过他们的分散决策配置资源的经济</p></li><li><p><strong>看不见的手(invisible hand):</strong></p></li><li><p><strong>利己心(self-interest):</strong></p></li></ul><p><br></p><p>中央计划经济国家运行的前提假设是，政府官员能够最佳地配置经济中稀缺资源。这些中央计划者决定，生产什么物品与服务、生产多少，以及谁生产和消费这些物品与服务。支撑中央计划经济的理论是，只有政府才能以促进整个社会经济福利的方式组织经济活动。</p><p>大部分曾经是中央计划经济的国家已经放弃了这个制度，代之以发展市场经济。在市场经济中，中央计划者的决策被数千百万企业和家庭的决策所取代。</p><p><br></p><p>在市场经济中，没有一个人追求整个社会的经济福利。自由市场包括大量物品与服务的许多买者与卖者，而所有的人都主要关心自己的福利。</p><p>经济学家亚当·斯密在《国富论》中提出了全部经济学中最著名的观察结果：“家庭和企业在市场上相互交易，他们仿佛被一只<strong>看不见的手</strong>所指引，并导致了合意的市场结果。”</p><p>价格就是看不见的手用来指引经济活动的工具。作为买者与卖者决策的结果，市场价格既反映了一种物品的社会价值，也反映了生产该物品的社会成本。斯密的重要洞察是，价格会自发调整，指引这些单个买者和卖者达到某种结果，该结果在大多数情况下会实现整个社会福利的最大化。</p><p>斯密的观点有一个重要的推论：当政府阻止价格根据供求状况自发调整时，它就限制了看不见的手对组成经济的千百万家庭和企业的决策进行协调的能力。这个推论解释了为什么税收对资源配置有不利的影响：由于税收扭曲了价格，从而也扭曲了家庭和企业的决策。这个推论还解释了像租金控制这类直接控制价格的政策所引起的巨大危害。而且，这个推论解释了中央计划经济的失败。在中央计划经济国家，价格并不是在市场上决定的，而是由中央计划者规定的。这些计划者缺乏关于消费者爱好和生产者成本的必要信息，而在市场经济中这些信息都反映在价格上。中央计划者之所以失败，是因为他们在管理经济时把市场这只看不见的手绑起来了。</p><p>亚当·斯密描述了市场经济中人们如何相互影响：</p><blockquote><p>人类几乎随时随地都需要同胞的协助，要想仅仅依赖他人的恩惠，那是绝对不行的。他如果能够刺激他人的利己心，使其有利于他，并告诉其他人，给他做事是对他们自己有利的，那么他要达到目的就容易得多了。··· ···请给我们我所要的东西吧，同时，你也可以获得你所要的东西：这句话是交易的通义。我们所需要的相互帮助，大部分是依照这个方法取得的。<br>我们每天所需的食物和饮料，不是出自屠户、酿酒师或面包师的恩惠，而是出自他们利己的打算。我们不说唤起他们利他心的话，而说唤起他们利己心得话。我们不说自己有需要，而说对他们有利。社会上，除乞丐外，没有一个人愿意全然靠别人的恩惠过活… …<br>每一个人··· ···既不打算促进公共的利益，也不知道自己是在何种程度上促进那种利益··· ···他所盘算的也只是他自己的利益。在这种场合下，像在其他许多场合一样，他受着一只看不见的手的引导，去尽力达到一个并非他本意想要达到的目的。也并不因为不是出于本意，就对社会有害。他追求自己的利益，往往使他能比在真正处于本意的情况下更有效地促进社会的利益。</p></blockquote><p>斯密是说，经济参与者受利己心所驱动，而市场上这只看不见的手指引这种利己心去促进总体的经济福利。</p><p><br><br><br></p><h4 id="政府有时可以改善市场结果"><a href="#政府有时可以改善市场结果" class="headerlink" title="政府有时可以改善市场结果"></a>政府有时可以改善市场结果</h4><ul><li><p><strong>产权(property rights):</strong><br>个人拥有并控制稀缺资源的能力</p></li><li><p><strong>市场失灵(market failure):</strong><br>市场本身不能有效的配置资源的情况</p></li><li><p><strong>外部性(externality):</strong><br>一个人的行为对旁观者福利的影响<br>外部性的经典例子是污染</p></li><li><p><strong>市场势力(market power):</strong><br>单个经济活动者(或某个经济活动小群体)对市场价格有显著影响的能力</p></li></ul><p><br></p><p>我们需要政府的原因之一是：只有在政府实施规则并维持对市场经济至关重要的制度时，看不见的手才能施展其魔力。最重要的是，市场经济需要实施产权制度，以便个人可以拥有和控制稀缺资源。<br>我们都依靠政府提供的警察和法律来实施我们对自己生产出来的东西的权利——而看不见的手依靠我们实施自己权利的能力。</p><p>然而，我们需要政府的另一个原因是：看不见的手是强有力的，但并不是无所不能的。政府干预经济并改变人们自己选择的资源配置的原因有两类：<strong>促进效率</strong>和<strong>促进公平</strong>。这就是说，大多数政策的目标要么是把经济蛋糕做大，要么是改变这个蛋糕的分割方式。</p><p>在存在外部性或市场势力的情况下，设计良好的公共政策可以提高经济效率。</p><p>即使看不见的手带来了有效率的产出，他也不能消除经济福利上巨大的不对称。根据某种政治哲学，这种不平等要求政府进行干预。实际上，许多公共政策，例如所得税和福利制度的目标就是要实现更平等的经济福利分配。</p><p>我们说政府有时可以改善市场结果并不意味着它总会这样。公共政策并不是天使制定的，而是由不完善的政治程序制定的。有时所设计的政策只是为了有利于政治上有权势的人；有时政策是由动机良好但信息不充分的领导人制定的。</p><p><br><br><br></p><h3 id="整体经济如何运行"><a href="#整体经济如何运行" class="headerlink" title="整体经济如何运行"></a>整体经济如何运行</h3><p>决策和相互影响共同组成了<strong>经济</strong>。</p><p><br></p><h4 id="一国的生活水平取决于它生产物品与服务的能力"><a href="#一国的生活水平取决于它生产物品与服务的能力" class="headerlink" title="一国的生活水平取决于它生产物品与服务的能力"></a>一国的生活水平取决于它生产物品与服务的能力</h4><ul><li><strong>生产率(productivity):</strong><br>每单位劳动投入所生产的物品与服务数量</li></ul><p><br></p><p>世界各国生活水平的差别是惊人的。<br>随着时间的推移，生活水平的变化也是巨大的。</p><p><strong>几乎所有的生活水平的差别都可以归因于各国生产率的差别。</strong></p><p>生产率和生活水平之间的基本关系是简单的，但它的意义却是深远的。如果生产率是生活水平的首要决定因素，那么，其他因素就应该是次要的。</p><p><br><br><br></p><h5 id="当政府发行了过多货币时，物价上升"><a href="#当政府发行了过多货币时，物价上升" class="headerlink" title="当政府发行了过多货币时，物价上升"></a>当政府发行了过多货币时，物价上升</h5><ul><li><strong>通货膨胀(inflation):</strong><br>经济中物价总水平的上升</li></ul><p><strong>在大多数严重或持续通货膨胀的情况下，罪魁祸首是货币量的增长。</strong></p><p>当一国政府发行了大量本国货币时，货币的价值就下降了。<br>由于高通货膨胀会让社会付出各种成本，所以世界各国的经济政策制定者都把保持低通货膨胀作为目标之一。</p><p><br><br><br></p><h4 id="社会面临通货膨胀与失业之间的短期权衡取舍"><a href="#社会面临通货膨胀与失业之间的短期权衡取舍" class="headerlink" title="社会面临通货膨胀与失业之间的短期权衡取舍"></a>社会面临通货膨胀与失业之间的短期权衡取舍</h4><ul><li><strong>经济周期(business cycle):</strong><br>就业和经济生产的波动</li></ul><p><br></p><p>虽然在长期中，物价水平上升主要是货币增加的结果，但短期中，问题就变得更为复杂更具争议性。</p><p>大多数经济学家这样描述货币注入的短期效应：</p><ul><li>经济中货币量增加刺激了社会的整体支出水平，从而增加了对物品与服务的需求</li><li>需求的增量随着时间的推移，会引起企业提高物价，但同时，它也鼓励企业雇佣更多的工人，并生产更多的产品与服务</li><li>服用更多的工人意味着更少的失业</li></ul><p>你知道，支出链将以乘数扩大，并带来更高的收入和就业。人们看到了发生了的活动，但他们没有看到本来会发生的活动。</p><p><br><br><br></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>经济学十大原理：</strong></p><ul><li>人们如何做出决策<ul><li>人们面临权衡取舍</li><li>某种东西的成本是为了得到它所放弃的东西</li><li>理性人考虑边际量</li><li>人们会对激励做出反应</li></ul></li><li>人们如何相互影响<ul><li>贸易可以使每个人的状况都变得更好</li><li>市场通常是组织经济活动的一种好方法</li><li>政府有时可以改善市场结果</li></ul></li><li>整体经济如何运行<ul><li>一国的生活水平取决于它生产物品与服务的能力</li><li>当政府发行了过多的货币时，物价上升</li><li>社会面临通货膨胀与失业之间的短期权衡取舍</li></ul></li></ul><p><br><br><br></p><hr><p><br></p><h2 id="像经济学家一样思考"><a href="#像经济学家一样思考" class="headerlink" title="像经济学家一样思考"></a>像经济学家一样思考</h2><p>每个研究领域都有自己的语言和思考方式。经济学家也一样。<br>供给、需求、弹性、比较优势、消费者剩余和无谓损失——这些术语也是经济学家语言的一部分。</p><p><br></p><h3 id="作为科学家的经济学家"><a href="#作为科学家的经济学家" class="headerlink" title="作为科学家的经济学家"></a>作为科学家的经济学家</h3><p>先提出理论，再收集数据，然后分析数据，以努力证明或否定他们的理论。</p><p><br></p><h4 id="科学方法：观察、理论和进一步观察"><a href="#科学方法：观察、理论和进一步观察" class="headerlink" title="科学方法：观察、理论和进一步观察"></a>科学方法：观察、理论和进一步观察</h4><p>在经济学研究中，进行实验往往是不可能的。通常不得不使用这个世界向他们提供的数据。<br>为了寻找实验室实验的替代品，经济学家十分关注历史所提供的自然实验。</p><p><br><br><br></p><h4 id="假设的作用"><a href="#假设的作用" class="headerlink" title="假设的作用"></a>假设的作用</h4><p>当我们在研究政策变动在长短不同时间中的影响时，就会做出不同的假设。</p><p><br><br><br></p><h4 id="经济模型"><a href="#经济模型" class="headerlink" title="经济模型"></a>经济模型</h4><p>经济学家也用模型来了解世界，但不是塑料模型，而通常是由图形和方程组成的模型。</p><p><br><br><br></p><h4 id="第一个模型：循环流量图"><a href="#第一个模型：循环流量图" class="headerlink" title="第一个模型：循环流量图"></a>第一个模型：循环流量图</h4><ul><li><p><strong>循环流量图(circular-flow diagram):</strong><br>一个说明货币如何通过市场在家庭与企业之间流动的直观经济模型</p></li><li><p><strong>生产要素(production factors):</strong><br>劳动、土地、资本等投入品被称为生产要素</p></li></ul><p><br></p><p>企业用生产要素来生产产品和服务，家庭则拥有生产要素并消费企业生产的物品与服务。家庭与企业之间相互交易。</p><p><br><br><br></p><h4 id="第二个模型：生产可能性边界"><a href="#第二个模型：生产可能性边界" class="headerlink" title="第二个模型：生产可能性边界"></a>第二个模型：生产可能性边界</h4><ul><li><strong>生产可能性边界(production possibilities frontier)：</strong><br>表示在可得到的生产要素与生产技术既定时，一个经济所能生产的产品数量的各种组合的图形。</li></ul><p><br></p><p>由于资源是稀缺的因此并不是每一种想象的结果都是可行的。<br>生产可能性边界表明了社会所面临的一种权衡取舍。</p><p>生产可能性边界表明在某一特定时期内生产不同物品之间的权衡取舍，但随着时间的推移，这种权衡取舍可以改变。<br>生产可能性边界简化了复杂的经济，以便强调一些基本但极为重要的思想： 稀缺性、效率、权衡取舍、机会成本和经济增长。</p><p><br><br><br></p><h4 id="微观经济学与宏观经济学"><a href="#微观经济学与宏观经济学" class="headerlink" title="微观经济学与宏观经济学"></a>微观经济学与宏观经济学</h4><p>尽管微观经济学和宏观经济学之间存在固有的联系，但这两个领域仍然是不同的。</p><ul><li><p><strong>微观经济学(micro economics)：</strong><br>研究家庭和企业如何做出决策，以及它们如何在市场上相互交易的学科。</p></li><li><p><strong>宏观经济学(macro economics)：</strong><br>研究整体经济现象，包括通货膨胀、失业和经济增长的学科。</p></li></ul><p><br><br><br></p><h3 id="作为政策顾问的经济学家"><a href="#作为政策顾问的经济学家" class="headerlink" title="作为政策顾问的经济学家"></a>作为政策顾问的经济学家</h3><p>当经济学家试图去解释世界时，他们是科学家；当经济学家试图去帮助改变世界时，他们是政策顾问。</p><p><br></p><h4 id="实证分析与规范分析"><a href="#实证分析与规范分析" class="headerlink" title="实证分析与规范分析"></a>实证分析与规范分析</h4><p>一般来说，关于世界的表述有两种类型：</p><ul><li><p><strong>实证表述(positive statements)：</strong><br>试图描述世界是什么样子的观点。</p></li><li><p><strong>规范表述(normative statements)：</strong><br>试图描述世界应该是什么样子的观点。</p></li></ul><p><br></p><p>确定什么是好策略或什么是坏策略不仅仅是一个科学问题，它还涉及我们对伦理、宗教和政治哲学的看法。</p><p><br><br><br></p><h3 id="经济学家意见分歧"><a href="#经济学家意见分歧" class="headerlink" title="经济学家意见分歧"></a>经济学家意见分歧</h3><p>有两个基本原因：</p><ul><li>经济学家可能对世界如何运行的不同实证理论的正确性看法不一致</li><li>经济学家可能有不同的价值观，因此对政策应该努力实现的目标有不同的规范观点</li></ul><p><br><br><br></p><hr><p><br></p><h2 id="相互依存性与贸易的好处"><a href="#相互依存性与贸易的好处" class="headerlink" title="相互依存性与贸易的好处"></a>相互依存性与贸易的好处</h2><p>人们向你和其他消费者提供他们生产的物品与服务，是因为他们也得到了某种回报。</p><p><br></p><h3 id="一个现代经济寓言"><a href="#一个现代经济寓言" class="headerlink" title="一个现代经济寓言"></a>一个现代经济寓言</h3><p>每个人都可以通过专门从事自己最擅长的活动并从相互叫中获益。<br>但是，当某个人在生产每一种物品上都较为擅长时，贸易的好处就不那么明显了。</p><p><br></p><h4 id="生产可能性"><a href="#生产可能性" class="headerlink" title="生产可能性"></a>生产可能性</h4><h4 id="专业化和贸易"><a href="#专业化和贸易" class="headerlink" title="专业化和贸易"></a>专业化和贸易</h4><p><br><br><br></p><h3 id="比较优势：-专业化的动力"><a href="#比较优势：-专业化的动力" class="headerlink" title="比较优势： 专业化的动力"></a>比较优势： 专业化的动力</h3><h4 id="绝对优势"><a href="#绝对优势" class="headerlink" title="绝对优势"></a>绝对优势</h4><ul><li><strong>绝对优势(absolute advantage)：</strong><br>一个生产者用比另一个生产者更少的投入生产某种物品的能力。</li></ul><p><br><br><br></p><h4 id="机会成本与比较优势"><a href="#机会成本与比较优势" class="headerlink" title="机会成本与比较优势"></a>机会成本与比较优势</h4><ul><li><p><strong>机会成本(opportunity cost)：</strong><br>为了得到某种东西所必须放弃的东西。</p></li><li><p><strong>比较优势(comparative advantage)：</strong><br>一个生产者以低于另一个生产者的机会成本生产某种物品的能力。</p></li></ul><p><br></p><p>尽管一个人有可能在两种物品的生产上都具有绝对优势，但一个人却不可能在两种物品的生产上都具有比较优势。</p><p><br><br><br></p><h4 id="比较优势与贸易"><a href="#比较优势与贸易" class="headerlink" title="比较优势与贸易"></a>比较优势与贸易</h4><p>专业化和贸易的好处不是基于绝对优势，而是基于比较优势。当每个人专门生产自己有比较优势的物品时，经济的总产量就增加了，经济蛋糕的变大可用于改善每个人的状况。</p><p><strong>贸易可以使社会上的每个人都获益，因为它使人们可以专门从事他们具有比较优势的活动。</strong></p><p><br><br><br></p><h4 id="贸易的价格"><a href="#贸易的价格" class="headerlink" title="贸易的价格"></a>贸易的价格</h4><p>对从贸易中获益的双方而言，他们进行贸易的价格在两种机会成本之间。</p><p><br><br><br></p><h3 id="比较优势的应用"><a href="#比较优势的应用" class="headerlink" title="比较优势的应用"></a>比较优势的应用</h3><h4 id="美国应该与其他国家进行贸易吗"><a href="#美国应该与其他国家进行贸易吗" class="headerlink" title="美国应该与其他国家进行贸易吗"></a>美国应该与其他国家进行贸易吗</h4><ul><li><p><strong>进口品(imports)：</strong><br>在国外生产而在国内销售的物品。</p></li><li><p><strong>出口品(exports)：</strong><br>在国内生产而在国外销售的物品。</p></li></ul><p><br></p><p>每个国家都有许多具有不同利益的居民。即使国际贸易可以使国家作为一个整体的状况变好，但也会使一些人的状况变坏。<br>但国际贸易并不像战争，在战争中有些国家是胜利者，而其他国家是失败者。贸易使所有国家都可以实现更大的繁荣。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="市场如何运行"><a href="#市场如何运行" class="headerlink" title="市场如何运行"></a>市场如何运行</h1><p><br></p><h2 id="供给与需求的市场力量"><a href="#供给与需求的市场力量" class="headerlink" title="供给与需求的市场力量"></a>供给与需求的市场力量</h2><p>供给与需求是经济学家最经常——而且有充分的理由使用的两个词。供给与需求是使市场经济运行的力量。它们决定了每种物品的产量及其出售的价格。</p><p><br></p><h3 id="市场与竞争"><a href="#市场与竞争" class="headerlink" title="市场与竞争"></a>市场与竞争</h3><ul><li><p><strong>市场(market)：</strong><br>由某种物品或服务的买者与卖者组成的一个群体。</p></li><li><p><strong>竞争市场(competitive market)：</strong><br>有许多买者与卖者，以至于每个人对市场价格的影响都微乎其微的市场。</p></li></ul><p><br></p><p>我们假设市场是<strong>完全竞争</strong>的。为了达到此竞争的最高形式，一个市场必须具备两个特征：</p><ul><li>可供销售的物品时完全相同的</li><li>买者与卖者人数众多，以至于没有任何一个买者或卖者可以影响市场价格</li></ul><p><br></p><p>但是，并不是所有物品与服务都在完全竞争市场上出售。一些市场可能只有一个买者，而且这个卖者决定价格。这样的卖者被称为<strong>垄断者</strong><br>还有一些市场介于完全竞争和垄断这两种极端形式之间。</p><p><br><br><br></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><br></p><h4 id="价格与需求量之间的关系"><a href="#价格与需求量之间的关系" class="headerlink" title="价格与需求量之间的关系"></a>价格与需求量之间的关系</h4><ul><li><p><strong>需求量(quantity demanded)：</strong><br>买者愿意斌企鹅能够购买的一种物品的数量。</p></li><li><p><strong>需求定理(law of demand)：</strong><br>认为在其他条件不变时，一种物品的价格上升，对该物品的需求量减少的观点。</p></li><li><p><strong>需求表(demand schedule)：</strong><br>表示一种物品的价格与需求之间的关系的表格。</p></li><li><p><strong>需求曲线(demand curve)：</strong><br>表示一种物品的价格与需求量之间关系的图形。</p></li></ul><p><br></p><ul><li><p><strong>正常物品(normal good)：</strong><br>在其他条件相同时，收入增加引起需求量增加的物品。</p></li><li><p><strong>低档物品(inferior good)：</strong><br>在其他条件相同时，收入增加引起需求量减少的物品。</p></li><li><p><strong>替代品(substitutes)：</strong><br>一种物品价格的上升引起另一种物品需求量的增加的两种物品。</p></li><li><p><strong>互补品(complements)：</strong><br>一种物品价格的上升引起另一种物品需求量的减少的两种物品。</p></li></ul><p><br></p><p>影响买者的变量：</p><ul><li>收入</li><li>价格</li><li>爱好</li><li>预期</li><li>其它</li></ul><p><br><br><br></p><h3 id="供给"><a href="#供给" class="headerlink" title="供给"></a>供给</h3><p><br></p><h4 id="价格与供给量之间的关系"><a href="#价格与供给量之间的关系" class="headerlink" title="价格与供给量之间的关系"></a>价格与供给量之间的关系</h4><ul><li><p><strong>供给量(quantity supplied)：</strong><br>卖者愿意并且能够出售的一种物品的数量。</p></li><li><p><strong>供给定理(law of supply)：</strong><br>认为在其他条件不变时，一种物品的价格上升，该物品的供给量增加的观点。</p></li><li><p><strong>供给表(supply schedule)：</strong><br>表示一种物品的价格与供给量之间的关系的表格。</p></li><li><p><strong>供给曲线(supply curve)：</strong><br>表示一种物品的价格与供给量之间关系的图形。</p></li></ul><p><br></p><p>使供给曲线移动的一些变量：</p><ul><li>价格</li><li>技术</li><li>预期</li><li>卖者的数量</li><li>其它</li></ul><p><br><br><br></p><h3 id="供给与需求的结合"><a href="#供给与需求的结合" class="headerlink" title="供给与需求的结合"></a>供给与需求的结合</h3><ul><li><p><strong>均衡(equilibrium)：</strong><br>市场价格达到使供给量与需求量相等的水平时的状态。</p></li><li><p><strong>均衡价格(equilibrium price)：</strong><br>使供给与需求平衡的价格。</p></li><li><p><strong>均衡数量(equilibrium quantity)：</strong><br>均衡价格下的供给量与需求量。</p></li><li><p><strong>过剩(surplus)：</strong><br>供给量大于需求量的状态。</p></li><li><p><strong>短缺(shortage)：</strong><br>需求量大于供给量的状态。</p></li><li><p><strong>供求定力(law of supply and demand)：</strong><br>认为任何一种物品的价格都会自发调整，使该物品的供给与需求达到平衡的观点。</p></li></ul><p><br><br><br></p><h3 id="价格如何配置资源"><a href="#价格如何配置资源" class="headerlink" title="价格如何配置资源"></a>价格如何配置资源</h3><p>在市场经济中，价格是配置稀缺资源的机制。</p><p><br><br><br></p><hr><p><br></p><h2 id="弹性"><a href="#弹性" class="headerlink" title="弹性"></a>弹性</h2><p>假设某件事情使得汽油价格上升，那么消费者将少买汽油。那么汽油的消费量会减少多少呢？——这个问题可以用<strong>弹性</strong>的概念来回答。</p><p><br></p><h3 id="需求弹性"><a href="#需求弹性" class="headerlink" title="需求弹性"></a>需求弹性</h3><ul><li><p><strong>弹性(elasticity)：</strong><br>衡量需求量或供给量对某种决定因素的变动的反应程度的指标。</p></li><li><p><strong>需求价格弹性(price elasticity of demand)：</strong><br>衡量一种物品需求量对其价格变动反应程度的指标，用需求量变动百分比除以价格变动百分比来计算。</p></li><li><p><strong>总收益(total revenue)：</strong><br>一种物品的买者支付而卖者得到的量，用该物品的价格乘以销售量来计算。</p></li><li><p><strong>需求收入弹性(income elasticity of demand)：</strong><br>衡量一种物品需求量对消费者收入变动反应程度的指标，用需求量变动百分比除以收入变动百分比来计算。</p></li><li><p><strong>需求交叉价格弹性(cross-price elasticity of demand)：</strong><br>衡量一种物品需求量对另一种物品价格变动的反应程度的指标，用第一种物品需求量变动百分比除以第二种物品价格变动百分比来计算。</p></li><li><p>富有弹性</p></li><li>缺乏弹性</li><li>单位弹性</li><li>完全无弹性</li><li>完全有弹性</li><li>替代品</li><li>必需品</li><li>奢侈品</li><li>市场的定义</li><li>时间范围</li></ul><p><br><br><br></p><h3 id="供给弹性"><a href="#供给弹性" class="headerlink" title="供给弹性"></a>供给弹性</h3><ul><li><strong>供给价格弹性(price elasticity of supply)：</strong><br>衡量一种物品供给量对其价格变动反应程度的指标，用供给量变动百分比除以价格变动百分比来计算。</li></ul><p><br><br><br></p><h3 id="供给、需求和弹性的应用"><a href="#供给、需求和弹性的应用" class="headerlink" title="供给、需求和弹性的应用"></a>供给、需求和弹性的应用</h3><ul><li>农业的好消息可能对农民来说是坏消息吗</li><li>为什么石油输出国组织不能保持石油的高价格</li><li>禁毒增加了还是减少了毒品相关的犯罪</li></ul><p><br><br><br></p><hr><p><br></p><h2 id="供给、需求与政府政策"><a href="#供给、需求与政府政策" class="headerlink" title="供给、需求与政府政策"></a>供给、需求与政府政策</h2><p>当决策者认为一种物品或服务的市场价格对买者或卖者不公平时，通常会实施价格控制。但这些控制政策本身也会引起不公平。<br>决策者用税收为公共目标筹集资金并影响市场结果。</p><p><br></p><h3 id="价格控制"><a href="#价格控制" class="headerlink" title="价格控制"></a>价格控制</h3><ul><li><p><strong>价格上限(price ceiling)：</strong><br>出售一种物品的法定最高价格</p></li><li><p><strong>价格下限(price floor)：</strong><br>出售一种物品的法定最低价格</p></li></ul><p><br></p><p>由于任何一种物品的买者总希望价格更低，而卖者总希望价格更高。所以，这两个群体的利益就会产生冲突</p><p>当政府对竞争市场实行限制性价格上限时，就产生了物品的短缺，而且，卖者必须在大量潜在买者中配给稀缺物品。<br>与此相比，一个自由竞争市场中的配给机制既有效率又是客观的。</p><p>价格有平衡供求从而协调经济活动的关键作用。当决策者通过法令确定价格时，他们就模糊了正常情况下指引社会资源配置的信号。</p><p>价格控制的目标往往是帮助穷人。但价格控制往往损害了那些它本想要帮助的人。可以用除了控制价格以外的其他方法来帮助那些需要帮助的人(如补贴或减税)。但是，税收也是有成本的。</p><p><br><br><br></p><h3 id="税收"><a href="#税收" class="headerlink" title="税收"></a>税收</h3><ul><li><strong>税收归附(塔下 incidence)：</strong><br>税收负担在市场参与者之间进行分配的方式。</li></ul><p><br></p><p>当政府对一种物品征税时，谁实际承担了税收负担？<br>无论税收是向买者征税还是想卖者征税，这一买者价格与卖者价格之间的楔子都是相同的。在这两种情况下，这个楔子都使供给曲线和需求曲线的相对位置移动。在新均衡时，都是买者与卖者分摊税收负担。<br>无论向谁征税，一旦市场达到新均衡，都是买者与卖者分摊税收负担。</p><p>经济受两种规则体系支配： 供求规律和政府制定的法规。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="市场和福利"><a href="#市场和福利" class="headerlink" title="市场和福利"></a>市场和福利</h1><h2 id="消费者、生产者与市场效率"><a href="#消费者、生产者与市场效率" class="headerlink" title="消费者、生产者与市场效率"></a>消费者、生产者与市场效率</h2><p>买者总想少付些钱，而卖者总想多买些钱。</p><ul><li><strong>福利经济学(welfare economics)</strong><br>研究资源配置如何影响经济福利的一门学问。</li></ul><p><br><br><br></p><h3 id="消费者剩余"><a href="#消费者剩余" class="headerlink" title="消费者剩余"></a>消费者剩余</h3><ul><li><p><strong>支付意愿(willingness to pay)</strong><br>买者愿意为某种物品支付的最高量。</p></li><li><p><strong>消费者剩余(consumer surplus)</strong><br>买者愿意为一种物品支付的量减去其为此实际支付的量。</p></li></ul><p><br><br><br></p><h3 id="生产者剩余"><a href="#生产者剩余" class="headerlink" title="生产者剩余"></a>生产者剩余</h3><ul><li><p><strong>成本(cost)</strong><br>卖者为了生产一种物品而必须放弃的所有东西的价值。</p></li><li><p><strong>生产者剩余(producer surplus)</strong><br>卖者出售一种物品得到的量减去其生产成本。</p></li></ul><p><br><br><br></p><h3 id="市场效率"><a href="#市场效率" class="headerlink" title="市场效率"></a>市场效率</h3><ul><li><p><strong>总剩余</strong><br>消费者剩余和生产者剩余的总和，称为总剩余。</p></li><li><p><strong>效率(efficiency)</strong><br>资源配置使社会所有成员得到的总剩余最大化的性质。</p></li><li><p><strong>平等(equality)</strong><br>在社会成员中平均地分配经济成果的性质。</p></li><li><p><strong>市场势力</strong><br>影响价格的能力，如市场上一小群能够控制市场价格的买卖者。</p></li><li><p><strong>外部性</strong><br>市场的副作用，如污染。</p></li></ul><p><br></p><p>在本质上，从市场贸易中获取的利益就像一块要在市场参与者间分配的蛋糕。效率问题涉及的是蛋糕是否尽可能地做大了。平等问题涉及的是如何把这块蛋糕切成小块，以及如何在社会成员中进行分配。</p><p>市场失灵是指一些不受管制的市场不能有效地配置资源。当出现市场失灵时，公共政策有可能纠正这些问题并提高经济效率。</p><p><br><br><br></p><hr><p><br></p><h2 id="赋税的代价"><a href="#赋税的代价" class="headerlink" title="赋税的代价"></a>赋税的代价</h2><p>买者和买者因税收遭受的损失大于政府筹集到的收入。</p><p><br></p><h3 id="赋税的无谓损失"><a href="#赋税的无谓损失" class="headerlink" title="赋税的无谓损失"></a>赋税的无谓损失</h3><ul><li><strong>无谓损失(deadweight loss)</strong><br>市场扭曲(如税收)引起的总剩余减少。</li></ul><p><br></p><p>税收引起的无谓损失是因为它使买者和卖者不能实现某些贸易的好处。</p><p><br><br><br></p><h3 id="决定无谓损失的因素"><a href="#决定无谓损失的因素" class="headerlink" title="决定无谓损失的因素"></a>决定无谓损失的因素</h3><p>供给和需求的价格弹性越大，税收的无谓损失也就越大。</p><p><br><br><br></p><h3 id="税收变动时无谓损失和税收收入"><a href="#税收变动时无谓损失和税收收入" class="headerlink" title="税收变动时无谓损失和税收收入"></a>税收变动时无谓损失和税收收入</h3><p>税收很少长期保持不变。</p><p>当政府对一种商品的买者或卖者征税时，社会就损失了某些市场效率的好处。税收给市场参与者带来了损失，不仅是因为税收将资源从市场参与者手中转到政府手中，还因为税收改变了激励，并扭曲了市场结果。</p><p><br><br><br></p><hr><p><br></p><h2 id="国际贸易"><a href="#国际贸易" class="headerlink" title="国际贸易"></a>国际贸易</h2><p>许多企业发现，由于面临可以以低成本生产高质量物品的外国竞争者，要通过生产某种产品获得利润已经越来越困难了。因此，他们迁移或关闭了工厂。</p><p><br></p><h3 id="决定贸易的因素"><a href="#决定贸易的因素" class="headerlink" title="决定贸易的因素"></a>决定贸易的因素</h3><ul><li><strong>世界价格(world price)</strong><br>一种物品在世界市场上通行的价格。</li></ul><p><br></p><p>如果某种物品的世界价格高于国内价格，那么，一旦允许贸易，此国就会变成此物品出口国；反之，则变为此物进口国。<br>各国之间的贸易最终要建立在比较优势的基础之上。</p><p><br><br><br></p><h3 id="贸易的赢家与输家"><a href="#贸易的赢家与输家" class="headerlink" title="贸易的赢家与输家"></a>贸易的赢家与输家</h3><ul><li><strong>关税(tariff)</strong><br>对在国外生产而在国内销售的物品征收的一种税。</li></ul><p><br></p><ul><li>当一国允许贸易并成为一种物品的出口国时，国内该物品的生产者的状况变好了，而国内该物品消费者的状况变坏了。</li><li><p>从赢家收益超过了输家损失的意义上说，贸易使一国的经济福利增加了。</p></li><li><p>当一国允许贸易并成为一种物品的进口国时，国内该物品消费者的状况变好了，而国内该物品生产者的状况变坏了。</p></li><li>从赢家收益超过了输家损失的意义上说，贸易使一国的经济福利增加了。</li></ul><p><br></p><p>国际贸易的其它好处：</p><ul><li>增加了物品的多样性</li><li>通过规模经济降低了成本</li><li>增加了竞争</li><li>加强了思想交流</li></ul><p><br></p><p>关税减少了进口量，并使国内市场向没有贸易时的均衡移动</p><p><br><br><br></p><h3 id="各种限制贸易的观点"><a href="#各种限制贸易的观点" class="headerlink" title="各种限制贸易的观点"></a>各种限制贸易的观点</h3><ul><li><p>工作岗位论<br>贸易反对者会说，与其他国家进行贸易消灭了国内的一些工作岗位。<br>但自由贸易在消灭了一些工作岗位的同时，也创造了一些工作岗位。</p></li><li><p>国家安全论<br>一些行业收到来自其他国家的竞争威胁时，贸易反对者会说，该行业对国家安全是至关重要的。<br>处于对国家安全的合理考虑，保护关键行业可能是合理的。但也应该由国家机构所提出。</p></li><li><p>幼稚产业论<br>会说，应实行暂时性贸易限制，以有助于该产业的成长。<br>这也难以实施。如何确定哪个产业是新兴的幼稚产业？</p></li><li><p>不公平竞争论<br>一种常见的观点是，如果不同国家的企业服从于不同的法律和管制，那么，让企业在国际市场上进行竞争就是不公平的。</p></li><li><p>作为讨价还价筹码的保护论<br>当与自己的贸易伙伴讨价还价时，贸易限制可能还是有用的。</p></li></ul><p><br></p><p>大多数经济学家支持自由的国际贸易，他们认为自由贸易是一种有效配置生产的方法，并提高了两国的生活水平。</p><p><br><br><br></p><hr><p><br><br><br></p><h1 id="公共部门经济学"><a href="#公共部门经济学" class="headerlink" title="公共部门经济学"></a>公共部门经济学</h1><p><br></p><h2 id="外部性"><a href="#外部性" class="headerlink" title="外部性"></a>外部性</h2><ul><li><p>外部性(externality)<br>一个人的行为对旁观者福利的无补偿的影响</p></li><li><p>正外部性<br>这种影响是有利的</p></li><li><p>负外部性<br>这种影响是不利的</p></li></ul><p><br></p><p>栗子：</p><ul><li>汽车尾气</li><li>修复历史建筑</li><li>狂吠的狗</li><li>新技术的研究</li></ul><p><br><br><br></p><h3 id="外部性和市场无效率"><a href="#外部性和市场无效率" class="headerlink" title="外部性和市场无效率"></a>外部性和市场无效率</h3><ul><li>外部性内在化(internalizing the externality)<br>改变激励，以使人们考虑到自己行为的外部效应</li></ul><p><br></p><p>政府可以通过对负外部性的物品征税和给予有正外部性的物品补贴来使外部性内在化</p><p><br><br><br></p><h3 id="针对外部性的公共政策"><a href="#针对外部性的公共政策" class="headerlink" title="针对外部性的公共政策"></a>针对外部性的公共政策</h3><ul><li><p>管制<br>政府可以通过规定或禁止某些行为来解决外部性。</p></li><li><p>矫正税<br>旨在引导私人决策者考虑负外部性引起的社会成本的税收</p></li><li><p>补贴</p></li><li><p>可交易的污染许可证</p></li></ul><p><br><br><br></p><h3 id="外部性的私人解决方法"><a href="#外部性的私人解决方法" class="headerlink" title="外部性的私人解决方法"></a>外部性的私人解决方法</h3><ul><li><p>科斯定理(Coase theorem)<br>认为如果私人各方面可以无成本地就资源配置进行协商，那么，他们就可以自己解决外部性问题的观点</p></li><li><p>交易成本(transaction cost)<br>各方在达成协议与遵守协议过程中所发生的成本</p></li></ul><p><br><br><br><br><br></p><h2 id="公共物品和公共资源"><a href="#公共物品和公共资源" class="headerlink" title="公共物品和公共资源"></a>公共物品和公共资源</h2><p><br></p><h3 id="不同类型的物品"><a href="#不同类型的物品" class="headerlink" title="不同类型的物品"></a>不同类型的物品</h3><ul><li><p>排他性(excludability)<br>一种物品具有的可以阻止一个人使用该物品的特性</p></li><li><p>消费品中的竞争性(rivalry in consumption)<br>一个人使用一种物品将减少其他人对该物品的使用的特性</p></li><li><p>私人物品(private goods)<br>既有排他性又有消费竞争性的物品</p></li><li><p>公共物品(public goods)<br>即无排他性又无消费竞争性的物品</p></li><li><p>公共资源(common resources)<br>有消费竞争性但无排他性的物品</p></li><li><p>俱乐部物品(club goods)<br>有排他性但无消费竞争性的物品</p></li></ul><p><br><br><br></p><h3 id="公共物品"><a href="#公共物品" class="headerlink" title="公共物品"></a>公共物品</h3><p>产权的重要性</p><ul><li><p>搭便车者(free rider)<br>得到一种物品的利益但避免为此付费的人</p></li><li><p>一些重要的公共物品</p><ul><li>国防</li><li>基础研究</li><li>反贫困</li></ul></li><li><p>成本收益分析(cost-benefit analysis)<br>比较提供一种公共物品的社会成本与社会收益的研究</p></li></ul><p><br><br><br></p><h3 id="公共资源"><a href="#公共资源" class="headerlink" title="公共资源"></a>公共资源</h3><ul><li><p>公共悲剧(Tragedy of the Commons)<br>一个说明从整个社会的角度看，为什么公共资源的使用大于合意的水平的寓言</p></li><li><p>一些重要的公共资源</p><ul><li>清洁的空气和水</li><li>拥堵的道路</li><li>野生动物</li></ul></li></ul><p><br><br><br><br><br></p><h2 id="税制的设计"><a href="#税制的设计" class="headerlink" title="税制的设计"></a>税制的设计</h2><p>在这个世界上除了死亡和税收以外，没有什么事情是确定无疑的。</p><p><br></p><h3 id="政府的财政状况"><a href="#政府的财政状况" class="headerlink" title="政府的财政状况"></a>政府的财政状况</h3><p>政府的税收占国民收入的多少？</p><ul><li><p>预算赤字(budget deficit)<br>政府支出大于政府收入</p></li><li><p>预算盈余(budget surplus)<br>政府收入大于政府支出</p></li></ul><p><br><br><br></p><h3 id="税收和效率"><a href="#税收和效率" class="headerlink" title="税收和效率"></a>税收和效率</h3><p>税收会引起两个成本，良好的税收政策正是要使其最小化：</p><ul><li>当税收扭曲了人们做出的决策时引起的无谓损失</li><li><p>纳税人在遵照税法纳税时承担的管理负担</p></li><li><p>收入税</p></li><li><p>消费税</p></li><li><p>平均税率(average tax rate)<br>支付的总税收除以总收入</p></li><li><p>边际税率(marginal tax rate)<br>增加1美元收入所支付的额外税收</p></li><li><p>定额税(lump-sum tax)<br>对每个人等量征收的税收</p></li></ul><p><br><br><br></p><h3 id="税收和平等"><a href="#税收和平等" class="headerlink" title="税收和平等"></a>税收和平等</h3><ul><li><p>受益原则(benefit principle)<br>认为人们应该根据他们从政府服务中得到的利益来纳税的思想</p></li><li><p>支付能力原则(ability-to-pay principle)<br>认为应该根据一个人可以承当的负担来对这个人征税的思想</p></li><li><p>纵向平等(vertical equity)<br>主张支付能力更强的纳税人应该缴纳更多税收的思想</p></li><li><p>横向平等(horizontal equity)<br>主张有相似支付能力的纳税人应该缴纳等量税收的思想</p></li><li><p>比例税(proportional tax)<br>高收入纳税人和低收入纳税人缴纳收入中相同比例的税收</p></li><li><p>累进税(progressive tax)<br>高收入纳税人缴纳的税收在收入中的比例高于低收入纳税人的这一比例</p></li><li><p>累退税(regressive tax)<br>高收入纳税人缴纳的税收在收入中的比例低于低收入纳税人的这一比例</p></li></ul><p><br><br><br></p><hr><p><br><br><br></p><h1 id="企业行为与产业组织"><a href="#企业行为与产业组织" class="headerlink" title="企业行为与产业组织"></a>企业行为与产业组织</h1><p><br></p><h2 id="生产成本"><a href="#生产成本" class="headerlink" title="生产成本"></a>生产成本</h2><p>经济是由成千上万个生产你每天享用的物品与服务的企业(大型或小型)组成的。</p><p>产业组织研究企业有关价格和数量的决策如何取决于它们所面临的市场条件。</p><p>企业成本是其生产和定价决策的一个关键决定因素。</p><p><br></p><h3 id="生么是成本"><a href="#生么是成本" class="headerlink" title="生么是成本"></a>生么是成本</h3><p><strong>总收益、总成本和利润</strong></p><ul><li><p>总收益(total revenue)<br>企业出售其产品所得到的货币量</p></li><li><p>总成本(total cost)<br>企业用于生产的投入品和市场价值</p></li><li><p>利润(profit)<br>总收益减去总成本</p></li></ul><p><br></p><p><strong>作为机会成本的成本</strong></p><ul><li><p>显性成本(explicit costs)<br>需要企业支出货币的投入成本</p></li><li><p>隐性成本(implicit costs)<br>不需要企业支出货币的投入成本</p></li></ul><p><br></p><p><strong>作为一种机会成本的资本成本</strong></p><p><br></p><p><strong>经济利润与会计利润</strong></p><ul><li><p>经济利润(economic profit)<br>总收益减去总成本，包括显性成本与隐性成本</p></li><li><p>会计利润(accounting profit)<br>总收益减总显性成本</p></li></ul><p><br><br><br></p><h3 id="生产与成本"><a href="#生产与成本" class="headerlink" title="生产与成本"></a>生产与成本</h3><p><br></p><p><strong>生产函数</strong></p><ul><li><p>生产函数(production function)<br>用于生产一种物品的投入量与该物品产量之间的关系</p></li><li><p>边际产量(marginal product)<br>增加一单位投入所引起的产量增加</p></li><li><p>边际产量递减(diminishing marginal product)<br>一种投入的边际产量随着投入量增加而减少的特征</p></li></ul><p><br></p><p><strong>从生产函数到总成本曲线</strong></p><p><br><br><br></p><h3 id="成本的各种衡量指标"><a href="#成本的各种衡量指标" class="headerlink" title="成本的各种衡量指标"></a>成本的各种衡量指标</h3><p><br></p><p><strong>固定成本与可变成本</strong></p><ul><li><p>固定成本(fixed costs)<br>不随着产量变动而变动的成本</p></li><li><p>可变成本(variable costs)<br>随着产量变动而变动的成本</p></li></ul><p><br></p><p><strong>平均成本与边际成本</strong></p><ul><li><p>平均总成本(average total cost)<br>总成本除以产量</p></li><li><p>平均固定成本(average fixed cost)<br>固定成本除以产量</p></li><li><p>平均可变成本(average variable cost)<br>可变成本除以产量</p></li><li><p>边际成本(marginal cost)<br>额外一单位产量所引起的总成本的增加</p></li></ul><p><br></p><p><strong>成本曲线及其形状</strong></p><ul><li>有效规模(efficient scale)<br>使平均总成本最小的产量</li></ul><p>只要边际成本小于平均总成本，平均总成本就下降；反之，则上升。<br>边际成本曲线与平均总成本曲线在平均总成本曲线的最低点处相交。</p><p><br></p><p><strong>典型的成本曲线</strong></p><p>三个特征：</p><ul><li>随着产量增加边际成本最终会上升</li><li>平均总成本曲线是U形的</li><li>边际成本曲线与平均总成本曲线在平均总成本曲线的最低点处相交</li></ul><p><br><br><br></p><h3 id="短期成本与长期成本"><a href="#短期成本与长期成本" class="headerlink" title="短期成本与长期成本"></a>短期成本与长期成本</h3><p><br></p><p><strong>短期与长期平均总成本之间的关系</strong></p><p><br></p><p><strong>规模经济与规模不经济</strong></p><ul><li><p>规模经济(economics of scale)<br>长期平均总成本随产量增加而减少的特性</p></li><li><p>规模不经济(diseconomics of scale)<br>长期平均总成本随产量增加而增加的特性</p></li><li><p>规模收益不变(constant returns to scale)<br>长期平均总成本在产量变动时保持不变的特性</p></li></ul><p><br></p><p>实际上，运用专业化实现规模经济是现代社会之所以这样繁荣的原因之一。</p><p><br><br><br><br><br></p><h2 id="竞争市场上的企业"><a href="#竞争市场上的企业" class="headerlink" title="竞争市场上的企业"></a>竞争市场上的企业</h2><p>如果每个买者和卖者与市场规模相比都微不足道，从而没有什么能力影响市场价格那么该市场就是竞争性的。于此相反，如果一个企业可以影响它出售的物品的市场价格，我们就说该企业有市场势力。</p><p><br></p><h3 id="什么是竞争市场"><a href="#什么是竞争市场" class="headerlink" title="什么是竞争市场"></a>什么是竞争市场</h3><p><br></p><p><strong>竞争市场的含义</strong></p><p>竞争市场(competitive market)有时又称为完全竞争市场。有几个特征：</p><ul><li>市场上有许多买者和许多卖者</li><li>各个卖者提供的物品大体上是相同的</li><li>企业可以自由地进入或退出市场</li></ul><p><br></p><p><strong>竞争企业的收益</strong></p><ul><li><p>平均收益(average revenue)<br>总收益除以销售量<br>对所有企业而言，平均收益等于物品的价格</p></li><li><p>边际收益(marginal revenue)<br>增加一单位销售量引起的总收益变动<br>对竞争企业而言，边际收益等于物品的价格</p></li></ul><p><br><br><br></p><h3 id="利润最大化与竞争企业的供给曲线"><a href="#利润最大化与竞争企业的供给曲线" class="headerlink" title="利润最大化与竞争企业的供给曲线"></a>利润最大化与竞争企业的供给曲线</h3><p><br></p><p><strong>利润最大化</strong></p><p><br></p><p><strong>边际成本曲线和企业的供给决策</strong></p><p>利润最大化的一般规律：</p><ul><li>如果边际收益大于边际成本，企业应该增加其产量</li><li>如果边际成本大于边际效益，企业应该减少其产量</li><li>在利润最大化的产量水平时，边际收益和边际成本正好相等</li></ul><p><br></p><p><strong>企业的短期停止营业决策</strong></p><p>如果生产能得到的收益小于生产的可变成本，企业就停止营业。</p><p><br></p><p><strong>覆水难收和其他沉没成本</strong></p><ul><li>沉没成本(sunk cost)<br>已经发生而且无法收回的成本</li></ul><p>在做个人决策时，沉没成本的无关性也是很重要的。</p><p><br></p><p><strong>企业退出或进入一个市场的长期决策</strong></p><p>如果从生产中得到的收益小于它的总成本，企业就应该退出市场。<br>竞争企业的长期供给曲线是边际成本曲线位于平均总成本曲线之上的那一部分。</p><p><br><br><br></p><h3 id="竞争市场的供给曲线"><a href="#竞争市场的供给曲线" class="headerlink" title="竞争市场的供给曲线"></a>竞争市场的供给曲线</h3><p>两种情况：</p><ul><li>考察有固定数量企业的市场；</li><li>考察企业数量会随着老企业退出和新企业进入而变动的市场</li></ul><p><br><br><br><br><br></p><h2 id="垄断"><a href="#垄断" class="headerlink" title="垄断"></a>垄断</h2><p>可以说微软在Windows软件市场上拥有垄断地位。<br>像微软这样的垄断者没有与之相近的竞争者，因此，它拥有影响其产品的市场价格的力量。竞争企业是价格接受者，而垄断企业是价格决定者。</p><p>竞争企业接受市场给定的其产品的价格，并选择供给量，以使价格等于边际成本。与此相比，垄断者收取高于其边际成本的价格。</p><p>垄断者对其产品收取高价格并不令人奇怪。垄断者的顾客似乎除了一个支付垄断者收取的价格之外别无选择。<br>一个垄断企业可以控制它出售的物品的价格，但由于高价格会减少其顾客的购买量，因此垄断利润并不是无限的。</p><p>由于垄断企业不受竞争限制，有垄断的市场结果往往不符合社会的最佳利益。<br>但政府有时可以改善市场结果。</p><p><br></p><h3 id="为什么会产生垄断"><a href="#为什么会产生垄断" class="headerlink" title="为什么会产生垄断"></a>为什么会产生垄断</h3><ul><li>垄断企业(monopoly)<br>作为一种没有相近替代品的产品的唯一卖者的企业。</li></ul><p>有三个主要形成原因：</p><ul><li>垄断资源： 生产所需要的关键资源由单个企业所拥有</li><li>政府管制： 政府给予单个企业排他性地生产某种物品或服务的权利</li><li>生产流程： 某个企业能以低于大量企业的成本生产产品</li></ul><p>专利法或版权法是两个重要的例子。</p><ul><li>自然垄断(natural monopoly)<br>由于一个企业能以低于两个或更多企业的成本向整个市场供给一种物品或服务而产生的垄断</li></ul><p><br><br><br></p><h3 id="垄断者如何做出生产与定价策略"><a href="#垄断者如何做出生产与定价策略" class="headerlink" title="垄断者如何做出生产与定价策略"></a>垄断者如何做出生产与定价策略</h3><p><br></p><p><strong>垄断与竞争</strong></p><p><br></p><p><strong>垄断者的收益</strong></p><p><br></p><p><strong>利润最大化</strong></p><p><br></p><p><strong>垄断者的利润</strong></p><p><br><br><br></p><h3 id="垄断的福利代价"><a href="#垄断的福利代价" class="headerlink" title="垄断的福利代价"></a>垄断的福利代价</h3><p><br></p><p><strong>无谓损失</strong></p><p>可以在需求曲线与边际成本曲线相交之处找出社会有效率的产量。<br>垄断者生产的产量小于社会有效率的产量。</p><p><br></p><p><strong>垄断利润：是一种社会代价吗</strong></p><p><br><br><br></p><h3 id="价格歧视"><a href="#价格歧视" class="headerlink" title="价格歧视"></a>价格歧视</h3><ul><li><p>价格歧视(price discrimination)<br>以不同的价格向不同顾客出售同一种物品的经营做法。</p></li><li><p>套利<br>在一个市场上以低价购买一种商品，而在另一个市场上以高价出售，以便从价格差中获利的过程。</p></li></ul><p><br></p><p><strong>价格歧视的例子</strong></p><ul><li>电影票</li><li>飞机票</li><li>折扣券</li><li>财务援助</li><li>数量折扣</li></ul><p><br><br><br></p><h3 id="针对垄断的公共政策"><a href="#针对垄断的公共政策" class="headerlink" title="针对垄断的公共政策"></a>针对垄断的公共政策</h3><p>政府决策者应对垄断：</p><ul><li><p>努力使垄断行业更有竞争性<br>用<strong>反托拉斯法</strong>增强竞争。反托拉斯法是一部全面的经济自由宪章，其目的在于维护作为贸易的自由和不受干预的竞争。</p></li><li><p>管制<br>管制垄断者的行为</p></li><li><p>公有制<br>政府自己经营自然垄断的企业</p></li><li><p>不作为<br>do nothing</p></li></ul><p><br><br><br><br><br></p><h2 id="垄断竞争"><a href="#垄断竞争" class="headerlink" title="垄断竞争"></a>垄断竞争</h2><p><br></p><h3 id="在垄断和完全竞争之间"><a href="#在垄断和完全竞争之间" class="headerlink" title="在垄断和完全竞争之间"></a>在垄断和完全竞争之间</h3><p>很多行业介于完全竞争和垄断的极端情况之间的某个位置，经济学家称这种情况为<strong>不完全竞争</strong>。</p><ul><li><p>寡头(oligopoly)<br>只有少数几个提供相似或者相同产品的卖者的市场结构。</p></li><li><p>垄断竞争(monopolistic competition)<br>存在许多出售相似但不相同的产品的企业的市场结构。</p></li></ul><p><br></p><p>垄断竞争和寡头一样，也是介于竞争和垄断这两种极端情况之间的一种市场结构。</p><p>垄断竞争具有以下特征的市场：</p><ul><li>许多卖者： 有许多企业争夺相同的顾客群体</li><li>产品存在差别： 每个企业生产的一种产品至少与其他企业生产的这种产品略有不同</li><li>自由进入和退出：企业可以无限制地进入或退出一个市场</li></ul><p><br></p><p><img src="/images/Economic/marketStructure.jpg" alt="市场结构类型"></p><p><br><br><br></p><h3 id="差别产品的竞争"><a href="#差别产品的竞争" class="headerlink" title="差别产品的竞争"></a>差别产品的竞争</h3><p><br></p><p><strong>短期中的垄断竞争企业</strong></p><p><strong>长期均衡</strong></p><p><strong>垄断竞争与完全竞争</strong></p><p><strong>垄断竞争与社会福利</strong></p><p><br><br><br></p><h3 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h3><p>在现代经济中，几乎每一天都伴随着铺天盖地的广告。<br>这种行为是垄断竞争(以及某些寡头企业)的一个自然特征。</p><p><br></p><p><strong>关于广告的争论</strong></p><p><strong>作为质量信号的广告</strong></p><p><strong>品牌</strong></p><p><br></p><p>垄断竞争，顾名思义，是垄断和竞争的混合。<br>由于垄断竞争企业生产有差别的产品，因此，每个企业都要靠做广告打出自己的品牌来吸引顾客。在某种程度上，广告操纵了消费者的偏好，促成了非理性的品牌忠诚，并抑制了竞争。在更大程度上，广告提供了信息，建立了具有可靠质量的品牌，并促进了竞争。</p><p><br><br><br><br><br></p><h2 id="寡头"><a href="#寡头" class="headerlink" title="寡头"></a>寡头</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《经济学原理-微观/宏观》 曼昆： &lt;a href=&quot;https://book.douban.com/subject/26435630/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://book.douban.com/subject/26435630/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Economics" scheme="https://zhang21.github.io/categories/Economics/"/>
    
    
      <category term="Zhang" scheme="https://zhang21.github.io/tags/Zhang/"/>
    
      <category term="Economics" scheme="https://zhang21.github.io/tags/Economics/"/>
    
      <category term="经济学" scheme="https://zhang21.github.io/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://zhang21.github.io/2018/02/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://zhang21.github.io/2018/02/08/正则表达式/</id>
    <published>2018-02-08T03:33:16.000Z</published>
    <updated>2018-02-24T10:43:37.352Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li>《鸟哥的Linux私房菜》</li><li><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">正则表达式维基百科</a></li></ul><p><br><br><br></p><a id="more"></a><p><br></p><h1 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h1><p>正则表达式，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法(Regular Expression, 在代码中常简写为regex、regexp或RE）。<br>是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p><p><br></p><p>正则表达式的POSIX规范，分为两大流派：</p><ul><li>基本型正则表达式（Basic Regular Expression，BRE）<ul><li><code>grep</code>、<code>vi</code>、<code>sed</code>都属于BRE，是历史最早的正则表达式，因此元字符必须转译之后才具有特殊含义</li></ul></li><li>扩展型正则表达式（Extended Regular Express，ERE）<ul><li><code>egrep</code>、<code>awk</code>则属于ERE，元字符不用转译</li></ul></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="正则表达式基本语法"><a href="#正则表达式基本语法" class="headerlink" title="正则表达式基本语法"></a>正则表达式基本语法</h1><p>一个正则表达式通常被称为一个模式（pattern），用来描述或者匹配一系列匹配某个句法规则的字符串。</p><p><br></p><p>大部分正则表达式有如下结构：</p><ul><li><strong>选择</strong><ul><li><code>|</code>竖线符代表选择(或)，具有最低优先级</li></ul></li><li><strong>数量限定</strong><ul><li>字符后的数量限定符用来限定前面这个字符允许出现的个数</li><li>不加数量限定则代表仅出现一次</li><li>常见的数量限定符包括 <strong>+</strong>、<strong>?</strong>、<strong>*</strong><ul><li><code>+</code>加号代表前面的字符必须至少出现一次 ( $$$&gt;=1$$$ )</li><li><code>?</code>问号代表前面的字符最多只可出现一次 ( $$$1&gt;=?&gt;=0$$$ )</li><li><code>*</code>星号代表前面的字符可不出现，也可出现一次或多次 ($$$&gt;=0$$$)</li></ul></li></ul></li><li><strong>匹配</strong><ul><li><code>()</code>圆括号可以定义操作符的范围和优先度</li></ul></li></ul><p><br><br><br></p><hr><p><br></p><h1 id="PCRE表达式全集"><a href="#PCRE表达式全集" class="headerlink" title="PCRE表达式全集"></a>PCRE表达式全集</h1><p>正则表达式有多种不同的风格。<br>PCRE（Perl兼容正则表达式，Perl Compatible Regular Expression）。适用于Perl或者Python编程语言（grep或者egrep的正则表达式文法是PCRE的子集）</p><p><br></p><p><strong>基础正则表达式</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>转义字符</td></tr><tr><td>zhang</td><td>匹配文本字符串值<code>zhang</code></td></tr><tr><td>.</td><td>匹配除<code>\r</code>,<code>\n</code>之外的任何单个字符</td></tr><tr><td>竖线l</td><td>匹配竖线两边某一个</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次</td></tr><tr><td>{n}</td><td>n是一个非负整数。匹配n次</td></tr><tr><td>{n,}</td><td>n是一个非负整数。至少匹配n次</td></tr><tr><td>{n,m}</td><td>m和n均为非负整数，匹配n-m次</td></tr><tr><td>[xyz]</td><td>字符集合（character class）。匹配所包含的任意一个字符</td></tr><tr><td>[^xyz]</td><td>排除型字符集合（negated character classes）。匹配未列出的任意字符</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符</td></tr><tr><td>[^a-z]</td><td>排除型的字符范围。匹配任何不在指定范围内的任意字符</td></tr><tr><td>[:name:]</td><td>增加命名字符类（named character class）</td></tr><tr><td>[=elt=]</td><td>增加当前locale下排序（collate）等价于字符“elt”的元素</td></tr><tr><td>[.elt.]</td><td>增加排序元素（collation element）elt到表达式中。这是因为某些排序元素由多个字符组成</td></tr></tbody></table><p><br></p><p><strong>元字符</strong><br>元字符(meta character)，是一种Perl风格的正则表达式，只有一部分文本处理工具支持它。</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置</td></tr><tr><td>\B</td><td>匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”</td></tr><tr><td>\cx</td><td>匹配由x指明的控制字符</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于[0-9]。注意Unicode正则表达式会匹配全角数字字符</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于[^0-9]</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于\x0c和\cL</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于\x0a和\cJ</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于\x0d和\cM</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于[^ \f\n\r\t\v]</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于\x09和\cI</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于\x0b和\cK</td></tr><tr><td>\w</td><td>匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。注意Unicode正则表达式会匹配中文字符</td></tr><tr><td>\W</td><td>匹配任何非单词字符。等价于“[^A-Za-z0-9_]”</td></tr><tr><td>\ck</td><td>匹配控制转义字符。k代表一个字符。等价于“Ctrl-k”。用于ECMA语法</td></tr><tr><td>\xnn</td><td>十六进制转义字符序列。匹配两个十六进制数字nn表示的字符</td></tr><tr><td>\num</td><td>向后引用（back-reference）一个子字符串（substring），该子字符串与正则表达式的第num个用括号围起来的捕捉群（capture group）子表达式（subexpression）匹配。其中num是从1开始的十进制正整数，其上限可能是9[注 2]、31、[注 3]99甚至无限。[注 4]例如：“(.)\1”匹配两个连续的相同字符</td></tr><tr><td>\n</td><td>标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值</td></tr><tr><td>\nm</td><td>3位八进制数字，标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm</td></tr><tr><td>\nml</td><td>如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml</td></tr><tr><td>\un</td><td>Unicode转义字符序列。其中n是一个用四个十六进制数字表示的Unicode字符</td></tr></tbody></table><p><br></p><p><strong>扩展正则表达式</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>?</td><td>非贪心量化（Non-greedy quantifiers）：当该字符紧跟在任何一个其他重复修饰符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串</td></tr><tr><td>(pattern)</td><td>匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“(”或“)”</td></tr><tr><td>(?:pattern)</td><td>匹配pattern但不获取匹配的子字符串（shy groups)，也就是说这是一个非获取匹配，不存储匹配的子字符串用于向后引用</td></tr><tr><td>(?=pattern)</td><td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用</td></tr><tr><td>(?!pattern)</td><td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用</td></tr><tr><td>(?&lt;=pattern)</td><td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类似，只是方向相反</td></tr></tbody></table><p><br><br><br></p><hr><p><br></p><h1 id="POSIX字符组"><a href="#POSIX字符组" class="headerlink" title="POSIX字符组"></a>POSIX字符组</h1><p>POSIX字符类(POSIX character class),是一个形如[:…:]的特殊元序列，它用于匹配特定的字符范围。</p><table><thead><tr><th>POSIX字符组</th><th>说明</th><th>ASCII环境</th><th>Unicode环境</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>字母字符和数字字符</td><td>[a-zA-Z0-9]</td><td>[\p{L&amp;}\p{Nd}]</td></tr><tr><td>[:alpha:]</td><td>字母</td><td>[a-zA-Z]</td><td>\p{L&amp;}</td></tr><tr><td>[:ascii:]</td><td>ASCII字符</td><td>[\x00-\x7F]</td><td>\p{InBasicLatin}</td></tr><tr><td>[:blank:]</td><td>空格字符和制表符</td><td>[ \t]</td><td>[\p{Zs}\t]</td></tr><tr><td>[:cntrl:]</td><td>控制字符</td><td>[\x00-\x1F\x7F]</td><td>\p{Cc}</td></tr><tr><td>[:digit:]</td><td>数字字符</td><td>[0-9]</td><td>\p{Nd}</td></tr><tr><td>[:graph:]</td><td>空白字符之外的字符</td><td>[\x21-\x7E]</td><td>[^\p{Z}\p{C}]</td></tr><tr><td>[:lower:]</td><td>小写字母字符</td><td>[a-z]</td><td>\p{Ll}</td></tr><tr><td>[:print:]</td><td>类似[:graph:]，但包括空白字符</td><td>[\x20-\x7E]</td><td>\P{C}</td></tr><tr><td>[:punct:]</td><td>标点符号</td><td>}~-]</td><td>[\p{P}\p{S}]</td></tr><tr><td>[:space:]</td><td>空白字符</td><td>[ \t\r\n\v\f]</td><td>[\p{Z}\t\r\n\v\f]</td></tr><tr><td>[:upper:]</td><td>大写字母字符</td><td>[A-Z]</td><td>\p{Lu}</td></tr><tr><td>[:word:]</td><td>字母字符</td><td>[A-Za-z0-9_]</td><td>[\p{L}\p{N}\p{Pc}]</td></tr><tr><td>[:xdigit:]</td><td>十六进制字符</td><td>[A-Fa-f0-9]</td><td>[A-Fa-f0-9]</td></tr></tbody></table><p><br><br><br></p><hr><p><br></p><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><table><thead><tr><th>优先权</th><th>符号</th></tr></thead><tbody><tr><td>最高</td><td>\</td></tr><tr><td>高</td><td>( )、(?: )、(?= )、[ ]</td></tr><tr><td>中</td><td>*、+、?、{n}、{n,}、{m,n}</td></tr><tr><td>低</td><td>^、$、中介字符</td></tr><tr><td>次最低</td><td>串接，即相邻字符连接在一起</td></tr><tr><td>最低</td><td>l</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《鸟哥的Linux私房菜》&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;正则表达式维基百科&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhang21.github.io/categories/Linux/"/>
    
    
      <category term="RegularExpression" scheme="https://zhang21.github.io/tags/RegularExpression/"/>
    
      <category term="正则表达式" scheme="https://zhang21.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
